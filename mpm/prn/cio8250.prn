 2030 =         vers equ '0 ' ; Nov 14, 2021  13:47  drm  "CIO8250.ASM"
                ;********************************************************
                ;   Character I/O module for MMS MP/M     		*
                ;   For INS8250 UARTS as in H89           		*
                ; Copyright (C) 1983 Magnolia Microsystems		*
                ;********************************************************
                	maclib	z80
                	maclib	cfgsys
                
 0000 =         false	equ	0
 FFFF =         true	equ	not false
                
 00E8 =         crt	equ	0e8h	;CONSOLE
 00E0 =         lp	equ	0e0h	;PRINTER
 00D8 =         dte	equ	0d8h	;MODEM
 00D0 =         dce	equ	0d0h	;AUX
                
 00C8 =         dev0	equ	200	;first device
 0004 #         ndev	set	4	;max number of devices
                 if numser LT ndev
 0002 #         ndev	set	numser
                 endif
                
                	dseg	;common memory, other parts in banked.
 0000 B800      	dw	thread
 0002 C802      	db	dev0,ndev
                
 0004 C30000    	jmp	init
 0007 C36E00    	jmp	inst
 000A C36000    	jmp	input
 000D C38800    	jmp	outst
 0010 C37900    	jmp	output
 0013 1900      	dw	string
 0015 4000      	dw	chrtbl
 0017 3000      	dw	xmodes
                
 0019 5A38392000string: db	'Z89 ',0,'Char I/O ',0,'v3.00'
 002D 3020      	dw	vers
 002F 24        	db	'$'
                
                ; INS8250:      xxxx      yyyy MCR  z    LCR
 0030 303F03E8  xmodes: db	00110000b,00111111b,00000011b,crt	; (already init)
 0034 303F83E0  	db	00110000b,00111111b,10000011b,lp
 0038 303F83D0  	db	00110000b,00111111b,10000011b,dce	; ("aux")
 003C 313F83D8  	db	00110001b,00111111b,10000011b,dte	; ("modem")
                ; if (((MSR ^ yyyy) & xxxx) == 0) then ready for output
                
                chrtbl: 	; CP/M 3 char I/O table
 0040 4352542020	db	'CRT   ',00000111b,14 ;I/O, soft-baud, no protocal, 9600
 0048 4C50542020	db	'LPT   ',00000111b,14 ;... 9600
 0050 4443452020	db	'DCE   ',00000111b,14 ;... 9600 ("aux")
 0058 4454452020	db	'DTE   ',00000111b,14 ;... 9600 baud ("modem")
                
                ; It appears MP/M requires all of this in common memory
                ; B=device number, relative to 200.
                input:
 0060 CD9F00    	call	getx
 0063 CD7100    inp0:	call	inst0
                	jrz	inp0			; wait for character ready
 0066+28FB      	DB	28H,INP0-$-1
 0068 4B        	mov	c,e			;get data register address
                	inp	a			; get data
 0069+ED78      	DB	0EDH,A*8+40H
 006B E67F      	ani	7Fh			; mask parity
 006D C9        	ret
                
                ; B=device number, relative to 200.
                inst:
 006E CD9F00    	call	getx			;
                inst0:	inp	a			; read from status port
 0071+ED78      	DB	0EDH,A*8+40H
 0073 E601      	ani	1			; isolate RxRdy
 0075 C8        	rz				; return with zero
 0076 F6FF      	ori	true
 0078 C9        	ret
                
                ; B=device number, relative to 200.
                ; C=char
 0079 79        output: mov	a,c
 007A F5        	push	psw			; save character from <C>
 007B CD9F00    	call	getx
 007E CD8B00    outp0:	call	outst0
                	jrz	outp0			; wait for TxEmpty, HL->port
 0081+28FB      	DB	28H,OUTP0-$-1
 0083 4B        	mov	c,e			; get THR port address
 0084 F1        	pop	psw
                	outp	a			; send data
 0085+ED79      	DB	0EDH,A*8+41H
 0087 C9        	ret
                
                ; On entry, B=device number, relative to 200.
 0088 CD9F00    outst:	call	getx	; character output status
                	; must preserve BC,DE (getx results) in all exit paths
 008B 0C        outst0:	inr	c		; get port+6
                	inp	a		; get handshake status
 008C+ED78      	DB	0EDH,A*8+40H
 008E 0D        	dcr	c		; line status register (+5)
 008F AA        	xra	d
 0090 A0        	ana	b		; [ZR] = ready
 0091 E6F0      	ani	11110000b
                	jrnz	nrdy
 0093+2008      	DB	20H,NRDY-$-1
                	inp	a
 0095+ED78      	DB	0EDH,A*8+40H
 0097 E620      	ani	20h		; test xmit holding register empty
 0099 C8        	rz			;
 009A F6FF      	ori	true
 009C C9        	ret			; return true if ready
                
 009D AF        nrdy:	xra	a
 009E C9        	ret
                
                ; B=device number, relative to 200.
                ; Returns: C=LSR, E=RBR/THR, D=XOR-mask, B=AND-mask (MSR)
 009F 78        getx:	mov	a,b	;B=device #, 0-15
 00A0 D600      	sui	dev0-200
 00A2 87        	add	a	;*2
 00A3 87        	add	a	;*4
 00A4 C603      	adi	3	;to point to port address
 00A6 5F        	mov	e,a
 00A7 1600      	mvi	d,0
 00A9 213000    	lxi	h,xmodes
 00AC 19        	dad	d
 00AD 7E        	mov	a,m	; port base
 00AE 5F        	mov	e,a
 00AF C605      	adi	5
 00B1 4F        	mov	c,a
 00B2 2B        	dcx	h	; LCR (only used for init)
 00B3 2B        	dcx	h	; MCR-XOR
 00B4 56        	mov	d,m	; XOR bits
 00B5 2B        	dcx	h	; MCR-AND
 00B6 46        	mov	b,m	; AND bits
 00B7 C9        	ret		;HL => xmode(dev)+0
                
 00B8 =         thread	equ	$
                
                	cseg	;banked memory.
                
                ; B=device number, relative to 200.
                init:
 0000 C5        	push	b
 0001 CD9F00    	call	getx
 0004 C1        	pop	b
 0005 4B        	mov	c,e	; port base
 0006 23        	inx	h
 0007 23        	inx	h	; back to LCR for init
                	bit	7,m	;is INIT allowed ??
 0008+CB7E      	DB	0CBH,7*8+M+40H
 000A C8        	rz
 000B E5        	push	h
 000C 78        	mov	a,b
 000D 87        	add	a
 000E 87        	add	a
 000F 87        	add	a	;*8
 0010 6F2600    	mov l,a ! mvi h,0
 0013 114700196E	lxi d,chrtbl+7 ! dad d ! mov l,m ; get baud rate
 0018 260029114E	mvi h,0 ! dad h ! lxi d,speed$table ! dad d  ; point to counter entry
 001F 5E2356    	mov e,m ! inx h ! mov d,m	; get and save count
 0022 79        	mov	a,c	;DE=baud rate divisor
 0023 47        	mov	b,a	;port base for INS8250 in question.
 0024 C603      	adi	3
 0026 4F        	mov	c,a	;+3 = access divisor latch bit
 0027 3E80      	mvi	a,10000000b
                	outp	a	;access divisor latch
 0029+ED79      	DB	0EDH,A*8+41H
 002B 61        	mov	h,c
 002C 48        	mov	c,b	;+0 = lo byte of baud rate divisor
                	outp	e
 002D+ED59      	DB	0EDH,E*8+41H
 002F 0C        	inr	c
                	outp	d	;send divisor to divisor latch
 0030+ED51      	DB	0EDH,D*8+41H
 0032 4C        	mov	c,h	;get port+3 back into (C)
 0033 E1        	pop	h	;point to BASE+3 initial value
 0034 7E        	mov	a,m	;disable divisor latch access.
 0035 E67F      	ani	01111111b
                	outp	a	;and setup # bits, parity, etc...
 0037+ED79      	DB	0EDH,A*8+41H
 0039 0C        	inr	c	;+4 = modem control
 003A 2B        	dcx	h	;next, handshake lines state
 003B 7E        	mov	a,m
 003C E60F      	ani	00001111b	;enable handshake lines
                	outp	a
 003E+ED79      	DB	0EDH,A*8+41H
 0040 0C        	inr	c	;+5 = line status
                	inp	a	;clear any pending activity
 0041+ED78      	DB	0EDH,A*8+40H
 0043 79        	mov	a,c
 0044 E6F8      	ani	11111000b	;reset port to base
 0046 4F        	mov	c,a
                	inp	a	;clear any input data
 0047+ED78      	DB	0EDH,A*8+40H
 0049 0C        	inr	c	;+1 = interupt control
 004A AF        	xra	a
                	outp	a	;disable chip interupts
 004B+ED79      	DB	0EDH,A*8+41H
 004D C9        	ret
                
                ; INS8250 BAUD based on 1.8432MHz crystal
                speed$table:
 004E 0000      	dw	0	;no baud rate
 0050 0009      	dw	2304	;50 baud
 0052 0006      	dw	1536	;75
 0054 1704      	dw	1047	;110
 0056 5803      	dw	856	;134.5
 0058 0003      	dw	768	;150
 005A 8001      	dw	384	;300
 005C C000      	dw	192	;600
 005E 6000      	dw	96	;1200
 0060 4000      	dw	64	;1800
 0062 3000      	dw	48	;2400
 0064 2000      	dw	32	;3600
 0066 1800      	dw	24	;4800
 0068 1000      	dw	16	;7200
 006A 0C00      	dw	12	;9600
 006C 0600      	dw	6	;19200
                
 006E           	end
