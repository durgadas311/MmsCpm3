 2034 =         VERS	EQU   '4 '  ; December 31, 2020 15:55 drm "ldr320.asm"
                ***************************************************
                ;	Loader disk I/O module for MMS CP/M 2.24
                ;	for the 77320 SASI bus interface 
                ;	Copyright (c) 1983 Magnolia Microsystems
                ***************************************************
                
                	MACLIB	Z80
                	$-MACRO
                
                	public	btend		;end of system (boot stops loading there)
                	extrn	BDOS,CBOOT,DSKSTA,TIMEOT,MIXER,DIRBUF,DLOG
                	extrn	NEWDSK,NEWTRK,NEWSEC,DMAA
                
                ***************************************************
                **  PORTS AND CONSTANTS
                ***************************************************
 00F2 =         GPIO	EQU	0F2H		; SWITCH 501
                
 0001 =         ACK	EQU	00000001B
 0002 =         INT	EQU	00000010B
 0004 =         PER	EQU	00000100B
 0008 =         BUSY	EQU	00001000B
 0010 =         CMND	EQU	00010000B
 0020 =         MSG	EQU	00100000B
 0040 =         POUT	EQU	01000000B
 0080 =         REQ	EQU	10000000B
                
 0000 =         RUN	EQU	00000000B
 0010 =         SWRS	EQU	00010000B
 0020 =         INTE	EQU	00100000B
 0040 =         SEL	EQU	01000000B
                
 0001 =         RECAL	EQU	1	; COMMAND OP CODES
 0008 =         RDBL	EQU	8
 000A =         WRBL	EQU	10
 000C =         INIT	EQU	12
                
 000A =         DPHDPB	EQU	10
 0010 =         DPHL	EQU	16
 0015 =         DPBL	EQU	21
 0004 =         DDEFL	EQU	4
 000D =         CSTRNG	EQU	13
 0013 =         NPART	EQU	19
 0004 =         CBYTE	EQU	4
 0005 =         DDATA	EQU	5
 0003 =         DCTYPE	EQU	3
 0014 =         SECTBL	EQU	20
 002F =         DDPB	EQU	47
                
 0000 =         WRALL	EQU	0	; WRITE TO ALLOCATED
 0001 =         WRDIR	EQU	1	; WRITE TO DIRECTORY
 0002 =         WRUNA	EQU	2	; WRITE TO UNALLOCATED
 0003 =         READOP	EQU	3	; READ OPERATION
                
 2034 =         BTDRV	EQU	2034H	; BOOT DRIVE SAVE BY PROM
 25F0 =         STRNG	EQU	25F0H	; ASCII PARTITION NUMBER SAVE BY BOOT LOADER
 2131 =         UNITNUM EQU	2131H	; LUN NUMBER SAVE BY EPROM
                
                ***************************************************
                ** START OF RELOCATABLE DISK I/O MODULE
                *************************************************** 
                
                	cseg   
                 
 0000 C31A02    	JMP	INIT$SASI
 0003 C3A001    	JMP	SEL$COMBO
 0006 C38103    	JMP	READ$COMBO
                
 0009 0000      	dw	0
 000B 0000      	dw	0     
                
                ;	TEXT
 000D 3737333230	DB	'77320',0,'SASI system loader',0,'v3.00'
 002B 34202400  	DW	VERS,'$'
                
                
 002F 0000000000DPH0:	DW	0,0,0,0,DIRBUF,DPB0,CSV0,ALV0
 003F 0000000000DPH1:	DW	0,0,0,0,DIRBUF,DPB1,CSV0,ALV0
 004F 0000000000DPH2:	DW	0,0,0,0,DIRBUF,DPB2,CSV0,ALV0
 005F 0000000000DPH3:	DW	0,0,0,0,DIRBUF,DPB3,CSV0,ALV0
 006F 0000000000DPH4:	DW	0,0,0,0,DIRBUF,DPB4,CSV0,ALV0
 007F 0000000000DPH5:	DW	0,0,0,0,DIRBUF,DPB5,CSV0,ALV0
 008F 0000000000DPH6:	DW	0,0,0,0,DIRBUF,DPB6,CSV0,ALV0
 009F 0000000000DPH7:	DW	0,0,0,0,DIRBUF,DPB7,CSV0,ALV0
 00AF 0000000000DPH8:	DW	0,0,0,0,DIRBUF,DPB8,CSV0,ALV0
                
                
                ;	SECTOR DEFINITION/TRANSLATION TABLE
                ;		--ADDRESS--,   FLAG BYTE
 00BF 00000000  DDEFTBL:DB	0,   0,   0,   0
 00C3 00000000  	DB	0,   0,   0,   0
 00C7 00000000  	DB	0,   0,   0,   0
 00CB 00000000  	DB	0,   0,   0,   0
 00CF 00000000  	DB	0,   0,   0,   0
 00D3 00000000  	DB	0,   0,   0,   0
 00D7 00000000  	DB	0,   0,   0,   0
 00DB 00000000  	DB	0,   0,   0,   0
 00DF 00000000  	DB	0,   0,   0,   0
                
                ;
                ;
                ; DISK PARAMETER BLOCKS -- CONTAIN DUMMY DATA. REAL DATA IS OBTAINED FROM 
                ;			   MAGIC SECTOR ON INITIALIZATION OF PARTITION
                ;
 00E3 4000      DPB0:	DW	64		; SPT
 00E5 051F01    	DB	5,31,1		; BSH,BLM,EXM
 00E8 0300FF01  	DW	4-1,512-1	; DSM,DRM
 00EC F000      	DB	0F0H,0		; AL0,AL1
 00EE 00000200  	DW	0,2		; CKS,OFF
 00F2 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 00F5 FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 00F8 4000      DPB1:	DW	64		; SPT
 00FA 051F01    	DB	5,31,1		; BSH,BLM,EXM
 00FD 0300FF01  	DW	4-1,512-1	; DSM,DRM
 0101 F000      	DB	0F0H,0		; AL0,AL1
 0103 00000200  	DW	0,2		; CKS,OFF
 0107 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 010A FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 010D 4000      DPB2:	DW	64		; SPT
 010F 051F01    	DB	5,31,1		; BSH,BLM,EXM
 0112 0300FF01  	DW	4-1,512-1	; DSM,DRM
 0116 F000      	DB	0F0H,0		; AL0,AL1
 0118 00000200  	DW	0,2		; CKS,OFF
 011C 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 011F FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 0122 4000      DPB3:	DW	64		; SPT
 0124 051F01    	DB	5,31,1		; BSH,BLM,EXM
 0127 0300FF01  	DW	4-1,512-1	; DSM,DRM
 012B F000      	DB	0F0H,0		; AL0,AL1
 012D 00000200  	DW	0,2		; CKS,OFF
 0131 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 0134 FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 0137 4000      DPB4:	DW	64		; SPT
 0139 051F01    	DB	5,31,1		; BSH,BLM,EXM
 013C 0300FF01  	DW	4-1,512-1	; DSM,DRM
 0140 F000      	DB	0F0H,0		; AL0,AL1
 0142 00000200  	DW	0,2		; CKS,OFF
 0146 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 0149 FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 014C 4000      DPB5:	DW	64		; SPT
 014E 051F01    	DB	5,31,1		; BSH,BLM,EXM
 0151 0300FF01  	DW	4-1,512-1	; DSM,DRM
 0155 F000      	DB	0F0H,0		; AL0,AL1
 0157 00000200  	DW	0,2		; CKS,OFF
 015B 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 015E FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 0161 4000      DPB6:	DW	64		; SPT
 0163 051F01    	DB	5,31,1		; BSH,BLM,EXM
 0166 0300FF01  	DW	4-1,512-1	; DSM,DRM
 016A F000      	DB	0F0H,0		; AL0,AL1
 016C 00000200  	DW	0,2		; CKS,OFF
 0170 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 0173 FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 0176 4000      DPB7:	DW	64		; SPT
 0178 051F01    	DB	5,31,1		; BSH,BLM,EXM
 017B 0300FF01  	DW	4-1,512-1	; DSM,DRM
 017F F000      	DB	0F0H,0		; AL0,AL1
 0181 00000200  	DW	0,2		; CKS,OFF
 0185 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 0188 FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 018B 4000      DPB8:	DW	64		; SPT
 018D 051F01    	DB	5,31,1		; BSH,BLM,EXM
 0190 0300FF01  	DW	4-1,512-1	; DSM,DRM
 0194 F000      	DB	0F0H,0		; AL0,AL1
 0196 00000200  	DW	0,2		; CKS,OFF
 019A 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 019D FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                PAGE
                
                
                
                
                ;	SELECT DISK CODE
                ;
                SEL$COMBO:
 01A0 AF        	XRA	A
 01A1 320E06    	STA	SELERR		; NO SELECT ERRORS (YET)
 01A4 3A1106    	LDA	DRIV0		; CALCULATE DRIVE NUMBER RELATIVE TO 0
 01A7 57        	MOV	D,A
 01A8 3A0000    	LDA	NEWDSK
 01AB 92        	SUB	D     
 01AC 322506    	STA	RELDSK
 01AF 21BF00    	LXI	H,DDEFTBL
 01B2 5F        	MOV	E,A		; NOW POINT TO THE CORRECT
 01B3 1600      	MVI	D,0		; ENTRY IN THE SECTOR
 01B5 19        	DAD	D		; OFFSET TABLE
 01B6 19        	DAD	D
 01B7 19        	DAD	D
 01B8 19        	DAD	D
 01B9 220A06    	SHLD	SECPTR
 01BC 7E        	MOV	A,M
 01BD E6E0      	ANI	11100000B
 01BF 32F505    	STA	LUN		; SAVE LOGICAL UNIT NUMBER BITS
 01C2 43        	MOV	B,E
 01C3 04        	INR	B
 01C4 211F00    	LXI	H,DPH0-DPHL	; POINT TO DPH TABLE
 01C7 111000    	LXI	D,DPHL		; LENGTH OF DPH's
 01CA 19        SEL1:	DAD	D
 01CB           	DJNZ	SEL1		; CALCULATE POINTER TO REQUESTED DPH
 01CD 220C06    	shld	curdph		
 01D0 110A00    	LXI	D,DPHDPB
 01D3 19        	DAD	D		; POINT TO ADDRESS OF DPB
 01D4 CD0205    	CALL	HLIHL		; DPB ADDRESS IN HL
 01D7 222606    	SHLD	CURDPB		; SAVE IT
                
 01DA 21A505    	LXI	H,LUNDATA-16	; CALCULATE POINTER TO
 01DD 111000    	LXI	D,16		;  DATA FOR THIS LOGICAL UNIT
 01E0 3AF505    	LDA	LUN
 01E3 07        	RLC
 01E4 07        	RLC
 01E5 07        	RLC
 01E6 19        NXTLUN: DAD	D
 01E7 3D        	DCR	A
 01E8 F2E601    	JP	NXTLUN
 01EB 220806    	SHLD	DATAPTR
                
 01EE CD6202    	CALL	CHK$INIT	; INITIALIZE DRIVE IF NECESSARY
 01F1 2A2606    	LHLD	CURDPB
 01F4 23        	INX	H
 01F5 23        	INX	H
 01F6 23        	INX	H
 01F7 7E        	MOV	A,M		; GET BLOCK MASK
 01F8 322806    	STA	BLKMSK		; USED FOR UNALLOCATED RECORD COUNT
 01FB 110A00    	LXI	D,10
 01FE 19        	DAD	D
 01FF 7E        	MOV	A,M		; GET TRACK OFFSET
 0200 322906    	STA	OFFSET
 0203 23        	INX	H
 0204 23        	INX	H		; POINT TO MODE BYTE 1
 0205 7E        	MOV	A,M
 0206 E603      	ANI	3		; ISOLATE SECTOR SIZE BITS
 0208 321F06    	STA	BLCODE		; SAVE AS DEBLOCKING CODE
 020B 3A2506    RETSEL: LDA	RELDSK
 020E 4F        	MOV	C,A
 020F 2A0C06    	lhld	curdph
 0212 C9        	RET
                
 0213 3E01      ERREXT: MVI	A,1
 0215 320E06    	STA	SELERR
 0218           	JR	RETSEL
                
                
                ;
                ;	DRIVER INITIALIZATION CODE
                ;
                INIT$SASI:
 021A 3A3121    	LDA	UNITNUM 	;FROM BOOT PROM
 021D E603      	ANI	00000011B
 021F 0F        	RRC
 0220 0F        	RRC
 0221 0F        	RRC
 0222 21BF00    	LXI	H,DDEFTBL
 0225 110400    	LXI	D,4
 0228 0609      	MVI	B,9
 022A 77        SETLUN	MOV	M,A		;SET ALL LUN BITS IN TBL
 022B 19        	DAD	D
 022C           	DJNZ	SETLUN
 022E 3E32      	MVI	A,50
 0230 321106    	STA	DRIV0
 0233 C609      	ADI	9
 0235 321206    	STA	DRIV$LAST
 0238 3AF025    	LDA	STRNG		;FROM BOOT LOADER
 023B B7        	ORA	A
 023C CA4102    	JZ	DEFDRV
 023F D630      	SUI	'0'
 0241 C632      DEFDRV	ADI	50
 0243 320000    	STA	MIXER
                
 0246 067C      	MVI	B,7CH 
 0248 DBF2      	IN	GPIO		; READ SWITCH 501
 024A E603      	ANI	00000011B	; WHAT'S PORT 7C SET FOR ?
 024C FE02      	CPI	00000010B	;  IF Z67, THEN THIS IS IT
 024E           	JRZ	GOTPRT
 0250 0678      	MVI	B,78H
 0252 DBF2      	IN	GPIO		; READ SWITCH 501
 0254 E60C      	ANI	00001100B	; WHAT'S PORT 78 SET FOR ?
 0256 FE08      	CPI	00001000B	;  IF Z67, THEN THIS IS IT
 0258           	JRZ	GOTPRT
 025A 06BC      	mvi	b,0bch	; assume 274Q if none other
 025C 78        GOTPRT: MOV	A,B
 025D 321006    	STA	BASE$PORT	; SAVE BASE PORT ADDRESS
 0260 AF        	XRA	A
 0261 C9        	RET
                
                CHK$INIT:
 0262 CD8002    	CALL	GETSTART
 0265 2A0A06    	LHLD	SECPTR
 0268 23        	INX	H
 0269 23        	INX	H
 026A 23        	INX	H		; POINT TO FLAG BYTE
 026B 7E        	MOV	A,M
 026C 320F06    	STA	FLAGS		; SAVE FOR USE BY INIT$DRIVE
 026F           	BIT	7,M		; CHECK INITIALIZATION BIT
 0271 CAC102    	JZ	INIT$HARD
 0274           	BIT	5,M		; IS IT REMOVABLE MEDIA ?
 0276 C2C102    	JNZ	INIT$HARD	;  MUST INITIALIZE
 0279 CD6704    	CALL	INIT$DRIVE	; SEND DATA TO CONTROLLER ON LOGIN OF A L.U.N.
 027C C27D03    	JNZ	INIT$ERR	
 027F C9        	RET
                
                GETSTART:
 0280           	LXIX	DDEFTBL
 0284 3A1106    	LDA	DRIV0		; GET PHYSICAL DRIVE NUMBER
 0287 47        	MOV	B,A
 0288 3A1206    	LDA	DRIV$LAST	; GET TOTAL NUMBER OF PARTITIONS
 028B 90        	SUB	B
 028C 67        	MOV	H,A
 028D 3AF505    	LDA	LUN		; PUT LUN IN L REG
 0290 6F        	MOV	L,A
 0291 110400    	LXI	D,4		; INCREMENT FOR DDEFTAB       
 0294           STLOOP	LDX	A,+0		; GET STARTING PHYSICAL DRIVE NUMBER
 0297 E6E0      	ANI	11100000B	; OF CURRENT LUN.
 0299 BD        	CMP	L
 029A           	JRZ	GOT$START
 029C           	DADX	D
 029E 04        	INR	B
 029F 25        	DCR	H
 02A0 C29402    	JNZ	STLOOP
 02A3 D1        	POP	D
 02A4 C37D03    	JMP	INIT$ERR
                GOT$START:
 02A7 78        	MOV	A,B
 02A8 321306    	STA	STRLUN
 02AB 0E00      	MVI	C,0		; GET NUMBER OF PARTITIONS IN LUN
                ENDLOOP:			
 02AD           	DADX	D
 02AF 0C        	INR	C
 02B0           	LDX	A,+0
 02B3 E6E0      	ANI	11100000B
 02B5 BD        	CMP	L
 02B6           	JRNZ	GOT$END 	; B = STARTING PHYSICAL DRIVE NUMBER OF LUN
 02B8 25        	DCR	H
 02B9 C2AD02    	JNZ	ENDLOOP 	; C = NUMBER OF PARTITION IN THE CURRENT LUN
                GOT$END:
 02BC 79        	MOV	A,C
 02BD 321406    	STA	PARTLUN 	; SAVE FOR INIT$HARD  AND LOGIN
 02C0 C9        	RET
                
                INIT$HARD:
 02C1 3EFF      	MVI	A,0FFH		
 02C3 321706    	STA	HSTDSK		
 02C6 CD1305    	CALL	GETCON		; RESTORE THE HEADS
 02C9 210206    	LXI	H,RCMND
 02CC AF        	XRA	A		; DEFAULT STEP RATE
 02CD 320706    	STA	RCMND+5
 02D0 CC4605    	CZ	OUTCM0
 02D3 CC9205    	CZ	CHK$STAT
 02D6 3E08      	MVI	A,RDBL		; OP CODE TO READ A SECTOR
 02D8 32F605    	STA	CMBFR
 02DB AF        	XRA	A		; SECTOR 0
 02DC 32F705    	STA	CMBFR+1
 02DF 32F805    	STA	CMBFR+2
 02E2 32F905    	STA	CMBFR+3
 02E5 3C        	INR	A
 02E6 32FA05    	STA	CMBFR+4 	; READ 1 SECTOR
 02E9 CD1305    	CALL	GETCON		; WAKE UP CONTROLLER
 02EC CC4305    	CZ	OUTCOM		; OUTPUT READ COMMAND
 02EF CC7305    	CZ	SASIRW		; READ IN SECTOR
 02F2 CC9205    	CZ	CHK$STAT	; CHECK STATUS OF READ
 02F5 C27D03    	JNZ	INIT$ERR
                
 02F8 3A3D06    	LDA	HSTBUF+NPART	; COMPARE # OF PART. DRIVER & MAGIC SECTOR
 02FB 211406    	LXI	H,PARTLUN
 02FE BE        	CMP	M
 02FF D20303    	JNC	KEEPPAR 	; USE THE SMALLEST ONE
 0302 77        	MOV	M,A
 0303 3A1106    KEEPPAR:LDA	DRIV0
 0306 57        	MOV	D,A
 0307 3A1306    	LDA	STRLUN
 030A 92        	SUB	D
 030B 321306    	STA	STRLUN		; SAVE RELATIVE START OF LUN	  
                
 030E 47        	MOV	B,A		; SEE IF INITIALIZING A PART. THAT DOES EXIST
 030F 3A2506    	LDA	RELDSK
 0312 90        	SUB	B
 0313 BE        	CMP	M				      
 0314 D27D03    	JNC	INIT$ERR		 
                
 0317 04        	INR	B
 0318 21CE00    	LXI	H,DPB0-DPBL	; CALCULATE START OF DPB IN DRIVER
 031B 111500    	LXI	D,DPBL
 031E 19        NXTDPB	DAD	D
 031F           	DJNZ	NXTDPB
 0321 E5        	PUSH	H
                
 0322 3A1406    	LDA	PARTLUN
 0325 47        	MOV	B,A
 0326 210000    	LXI	H,0		; CALCULATE TOTAL LENGTH OF DPB'S TO BE MOVED 
 0329 111500    	LXI	D,DPBL
 032C 19        NXTLEN	DAD	D
 032D           	DJNZ	NXTLEN
 032F 44        	MOV	B,H		; PUT LENGTH IN BC
 0330 4D        	MOV	C,L
 0331 D1        	POP	D		; PUT TO ADDRESS IN DE
 0332 215906    	LXI	H,HSTBUF+DDPB	; PUT FROM ADDRESS IN HL
 0335           	LDIR
                	
 0337 21BF00    	LXI	H,DDEFTBL	; CALCULATE START IN DDEFTBL
 033A 3A1306    	LDA	STRLUN
 033D           	SLAR	A		; MULT BY 2
 033F           	SLAR	A		; MULT BY 4
 0341 5F        	MOV	E,A
 0342 1600      	MVI	D,0
 0344 19        	DAD	D
 0345 E5        	PUSH	H		; SAVE FOR SET INIT. BITS
 0346 EB        	XCHG			; TO ADDRES IN DE
 0347 213E06    	LXI	H,HSTBUF+SECTBL ; FROM ADDRESS
 034A 3A1406    	LDA	PARTLUN
 034D 47        	MOV	B,A		
 034E C5        NXTDEF	PUSH	B		; MOVE PARTITION ADDRESS TABLE INTO DRIVER
 034F 1A        	LDAX	D		; DE = DDEFTBL
 0350 B6        	ORA	M		; HL = HSTBUF+SECTBL (MAGIC SECTOR)
 0351 77        	MOV	M,A
 0352 010300    	LXI	B,3
 0355           	LDIR
 0357 13        	INX	D		; DDEFTBL IS 4 BYTES WIDE
 0358 C1        	POP	B
 0359           	DJNZ	NXTDEF
                
 035B 212D06    	LXI	H,HSTBUF+DCTYPE ; GET L.U.N. SPECIFIC DATA FROM
 035E           	LDED	DATAPTR 	;  'MAGIC SECTOR'
 0362 011000    	LXI	B,16		;  PUT IT INTO SPACE RESERVED FOR THIS L.U.N.
 0365           	LDIR
                	
 0367 CD6704    	CALL	INIT$DRIVE
 036A           	JRNZ	INIT$ERR	; ERROR ON PHYSICAL INITIALIZATION
                
 036C E1        	POP	H		; SET INITIALIZATION BITS
 036D 23        	INX	H
 036E 23        	INX	H
 036F 23        	INX	H
 0370 110400    	LXI	D,DDEFL  
 0373 3A1406    	LDA	PARTLUN
 0376 47        	MOV	B,A
 0377           NXTFLG	SETB	7,M
 0379 19        	DAD	D
 037A           	DJNZ	NXTFLG
 037C C9        	RET
                
                INIT$ERR:
 037D D1        	POP	D		; CLEAR STACK
 037E C31302    	JMP	ERREXT
                
                PAGE
                
                
                READ$COMBO:
 0381 3E03      	MVI	A,READOP
 0383 322106    	STA	WRTYPE
 0386 3A0E06    	LDA	SELERR
 0389 B7        	ORA	A
 038A C0        	RNZ
 038B 3A0000    	LDA	NEWDSK
 038E 321B06    	STA	REQDSK
 0391 2A0100    	LHLD	NEWSEC+1	; (HRDTRK)
 0394 221C06    	SHLD	REQTRK
 0397 0E00      	MVI	C,0		; CALCULATE PHYSICAL SECTOR
 0399 3A1F06    	LDA	BLCODE		; PHYSICAL SECTOR SIZE CODE
 039C B7        	ORA	A		; TEST FOR ZERO
 039D 47        	MOV	B,A
 039E 3A0000    	LDA	NEWSEC
 03A1 321E06    	STA	REQSEC		; INITIAL GUESS IS 128 BYTE SECTORS
 03A4           	JRZ	DBLOK3		; 128 BYTE SECTORS ?
 03A6           DBLOK1: SRLR	A		; DIVIDE ACCUMULATOR BY 2
 03A8           	RARR	C		; SAVE OVERFLOW BITS
 03AA           	DJNZ	DBLOK1		; AND CONTINUE IF BLOCKING STILL <> 0
 03AC 321E06    	STA	REQSEC		; SAVE IT
 03AF 3A1F06    	LDA	BLCODE		; CALCULATE BLKSEC
 03B2 47        	MOV	B,A		; FOR LOOPING
 03B3           DBLOK2: RLCR	C		; NOE RESTORE THE OVERFLOW BY
 03B5           	DJNZ	DBLOK2		; ROTATING IT RIGHT
 03B7 79        DBLOK3: MOV	A,C
 03B8 322006    	STA	BLKSEC		; STORE IT
 03BB 3EFF      	MVI	A,0FFH
 03BD 321606    	STA	RD$FLAG 	; FLAG A PRE-READ
 03C0 3A2106    	LDA	WRTYPE
 03C3 1F        	RAR
 03C4           	JRC	ALLOC		; NO NEED TO CHECK FOR UNALLOCATED RECORDS
 03C6 1F        	RAR			; CARRY IS SET ON WRUNA
 03C7           	JRNC	CHKUNA
 03C9           	SDED	URECORD 	; SET UNALLOCATED RECORD #
 03CD 3D        	DCR	A
 03CE 322206    	STA	UNALLOC 	; FLAG WRITING OF AN UNALLOCATED BLOCK
 03D1 3A2206    CHKUNA: LDA	UNALLOC 	; ARE WE WRITING AN UNALLOCATED BLOCK ?
 03D4 B7        	ORA	A
 03D5           	JRZ	ALLOC
 03D7 2A2306    	LHLD	URECORD 	; IS REQUESTED RECORD SAME AS EXPECTED
 03DA           	DSBC	D		;  SAME AS EXPECTED UNALLOCATED RECORD ?
 03DC           	JRNZ	ALLOC		; IF NOT, THEN DONE WITH UNALLOCATED BLOCK
 03DE AF        	XRA	A		; CLEAR PRE-READ FLAG
 03DF 321606    	STA	RD$FLAG
 03E2 13        	INX	D		; INCREMENT TO NEXT EXPECTED UNALLOCATED RECORD
 03E3           	SDED	URECORD
 03E7 3A2806    	LDA	BLKMSK
 03EA A3        	ANA	E		; IS IT THE START OF A NEW BLOCK ?
 03EB           	JRNZ	CHKSEC
 03ED AF        ALLOC:	XRA	A		; NO LONGER WRITING AN UNALLOCATED BLOCK
 03EE 322206    	STA	UNALLOC
                
                ;*****************************************************************************
                ; CHKSEC: THIS SUBROUTINE COMPARES THE REQUESTED DISK TRACK AND SECTOR	     ;
                ;	  TO THE DISK,TRACK AND SECTOR CURRENTLY IN THE BUFFER. 	     ;
                ;	  OUTPUT: ZERO FLAG SET IF SAME, RESET IF DIFFERENT		     ;
                ;									     ;
 03F1 A7        CHKSEC: ANA	A		; CLEAR CARRY FOR DSBC			     ;
 03F2 2A1C06    	LHLD	REQTRK							     ;
 03F5           	LDED	OFFSET							     ;
 03F9           	DSBC	D							     ;
 03FB           	JRNZ	CHKBUF							     ;
 03FD 3A0000    	LDA	NEWSEC							     ;
 0400 B7        	ORA	A		; FIRST SECTOR OF DIRECTORY ?		     ;
 0401           	JRZ	SET$PRE$RD						     ;
 0403 211B06    CHKBUF: LXI	H,REQDSK						     ;
 0406 111706    	LXI	D,HSTDSK						     ;
 0409 0604      	MVI	B,4							     ;
 040B 1A        CHKBUF1:LDAX	D							     ;
 040C BE        	CMP	M							     ;
 040D           	JRNZ	READIT							     ;
 040F 23        	INX	H							     ;
 0410 13        	INX	D							     ;
 0411           	DJNZ	CHKBUF1 						     ;
 0413           	JR	NOREAD		;  THEN NO NEED TO PRE-READ		     ;
                ;*****************************************************************************
                
                SET$PRE$RD:			; SET PRE READ FLAG FOR READING 
 0415 3EFF      	MVI	A,0FFH		; DIRECTORY SO A PHY READ IS DONE
 0417 321606    	STA	RD$FLAG
                
 041A 111706    READIT: LXI	D,HSTDSK	; SET UP NEW BUFFER PARAMETERS
 041D 211B06    	LXI	H,REQDSK
 0420 010400    	LXI	B,4
 0423           	LDIR
 0425 3A1606    	LDA	RD$FLAG 	; DO WE NEED TO PRE-READ ?
 0428 B7        	ORA	A
 0429 C44404    	CNZ	RD$SEC		; READ THE SECTOR
 042C 212A06    NOREAD: LXI	H,HSTBUF	; POINT TO START OF SECTOR BUFFER
 042F 018000    	LXI	B,128
 0432 3A2006    	LDA	BLKSEC		; POINT TO LOCATION OF CORRECT LOGICAL SECTOR
 0435 3D        MOVIT1: DCR	A
 0436 FA3C04    	JM	MOVIT2
 0439 09        	DAD	B
 043A           	JR	MOVIT1
 043C           MOVIT2: LDED	DMAA		; POINT TO DMA
 0440           	LDIR			; MOVE IT
 0442 AF        	XRA	A		; FLAG NO ERROR
 0443 C9        	RET			; RETURN TO BDOS
                
 0444 CD5204    RD$SEC: CALL	READ		; READ A PHYSICAL SECTOR
 0447 C8        	RZ			; RETURN IF SUCCESSFUL
 0448 3EFF      	MVI	A,0FFH		; FLAG BUFFER AS UNKNOWN
 044A 321706    	STA	HSTDSK
 044D D1        RWERR:	POP	D		; THROW AWAY TOP OF STACK
 044E 3E01      	MVI	A,1		; SIGNAL ERROR TO BDOS
 0450 B7        	ORA	A
 0451 C9        	RET			; RETURN TO BDOS
                
                ;
                ;	READ A PHYSICAL SECTOR CODE
                ;
                READ:
 0452 3E08      	MVI	A,RDBL		; READ COMMAND CODE
 0454 32F605    	STA	CMBFR		; COMMAND BUFFER OP CODE
 0457 CDB404    	CALL	SET$SEC 	; CALCULATE AND INSTALL ACTUAL SECTOR
 045A CD0705    	CALL	WAKE$UP 	; SETUP CONTROLLER
 045D CC4305    	CZ	OUTCOM		; AND OUTPUT THE COMMAND
 0460 CC7305    	CZ	SASIRW		; DO READ OR WRITE
 0463 CC9205    	CZ	CHK$STAT	; CHECK THE BUS RESPONSE
 0466 C9        	RET
                
                INIT$DRIVE:
 0467 2A0806    	LHLD	DATAPTR 	; SEE IF IT'S XEBEC
 046A 7E        	MOV	A,M
 046B E6E0      	ANI	11100000B
 046D           	JRNZ	NOTXBC		; SKIP IF NOT
 046F CD1305    	CALL	GETCON		; GET CONTROLLER'S ATTENTION
 0472 21FC05    	LXI	H,ICMND 	; INITIALIZATION COMMAND STRING
 0475 CC4605    	CZ	OUTCM0		; OUTPUT COMMAND
 0478 C0        	RNZ
 0479 2A0806    	LHLD	DATAPTR 	; DRIVE CHARACTERISTIC DATA
 047C 23        	INX	H
 047D 23        	INX	H
 047E 0608      	MVI	B,8		; 8 BYTES LONG
 0480 1EC8      	MVI	E,(REQ OR POUT OR BUSY)
 0482 CD5B05    	CALL	OUTCM1		; OUTPUT THE DATA
 0485 CC9205    	CZ	CHK$STAT	;  AND CHECK STATUS
 0488 C39D04    	JMP	RESDR		; mjm LETS NOT SEND ZEROS IF XEBEC
 048B 2A0806    NOTXBC: LHLD	DATAPTR
 048E 110A00    	LXI	D,10		; NOW DO "ASSIGN DRIVE TYPE" COMMAND
 0491 19        	DAD	D		;  ( FOR DATA PERIPHERALS DONTROLLERS )
 0492 E5        	PUSH	H
 0493 CD1305    	CALL	GETCON		; GET CONTROLLER'S ATTENTION
 0496 E1        	POP	H
 0497 CC4605    	CZ	OUTCM0		; SEND THE COMMAND
 049A CC9205    	CZ	CHK$STAT
 049D CD1305    RESDR	CALL	GETCON		; RESTORE THE HEADS
 04A0 210206    	LXI	H,RCMND
 04A3           	LIXD	DATAPTR 	; PUT CONTROL BYTE IN BUFFER
 04A7           	LDX	A,+1
 04AA 320706    	STA	RCMND+5
 04AD CC4605    	CZ	OUTCM0
 04B0 CC9205    	CZ	CHK$STAT
 04B3 C9        	RET
                
                
                ;	CALCULATE THE REQUESTED SECTOR
                ;
                SET$SEC:
 04B4 2A1806    	LHLD	HSTTRK		; GET REQUESTED TRACK
 04B7 29        	DAD	H		; *2
 04B8 29        	DAD	H		; *4
 04B9 29        	DAD	H		; *8
 04BA 29        	DAD	H		; *16
 04BB 29        	DAD	H		; *32
 04BC 29        	DAD	H		; *64 (64 SECTORS/TRACK)
 04BD E5        	PUSH	H
 04BE 2A0A06    	LHLD	SECPTR
 04C1 4E        	MOV	C,M
 04C2 23        	INX	H
 04C3 56        	MOV	D,M
 04C4 23        	INX	H
 04C5 5E        	MOV	E,M
 04C6 E1        	POP	H
 04C7 19        	DAD	D		; ADD IN PARTITION OFFSET
 04C8           	JRNC	NOCAR0		; CARRY FROM DAD (IF ANY) GOES INTO
 04CA 0C        	INR	C		;  HIGH ORDER BYTE OF SECTOR NUMBER
 04CB 3A1F06    NOCAR0: LDA	BLCODE
 04CE 47        	MOV	B,A
 04CF B7        	ORA	A
 04D0 79        	MOV	A,C
 04D1           	JRZ	NODIV
 04D3 E61F      	ANI	00011111B	; ELIMINATE L.U.N. BITS FROM DIVISION
 04D5 4F        	MOV	C,A
 04D6           NXDIV:	SRAR	C
 04D8           	RARR	H
 04DA           	RARR	L
 04DC           	DJNZ	NXDIV
 04DE 3A1A06    NODIV:	LDA	HSTSEC		; GET REQUESTED SECTOR
 04E1 5F        	MOV	E,A
 04E2 1600      	MVI	D,0
 04E4 19        	DAD	D		; ADD IT IN
 04E5           	JRNC	NOCAR1
 04E7 0C        	INR	C
 04E8 79        NOCAR1: MOV	A,C
 04E9 32F705    	STA	CMBFR+1 	; MOVE TO COMMAND BUFFER
 04EC 7C        	MOV	A,H
 04ED 32F805    	STA	CMBFR+2 	; MOVE REST OF SECTOR NUMBER TO COMMAND BUFFER
 04F0 7D        	MOV	A,L
 04F1 32F905    	STA	CMBFR+3
 04F4 3E01      	MVI	A,1		; TRANSFER 1 SECTOR
 04F6 32FA05    	STA	CMBFR+4
 04F9 2A0806    	LHLD	DATAPTR 	; GET CONTROL BYTE
 04FC 23        	INX	H
 04FD 7E        	MOV	A,M
 04FE 32FB05    	STA	CMBFR+5 	; PUT INTO COMMAND BUFFER
 0501 C9        	RET
                
 0502 7E        HLIHL:	MOV	A,M
 0503 23        	INX	H
 0504 66        	MOV	H,M
 0505 6F        	MOV	L,A
 0506 C9        	RET
                
 0507 CD1305    WAKE$UP:CALL	GETCON
 050A C8        	RZ
 050B CD6704    	CALL	INIT$DRIVE
 050E C0        	RNZ
 050F CD1305    	CALL	GETCON
 0512 C9        	RET
                
                
                ;
                ;	GET THE BUS' ATTENTION
                ;
                GETCON:
 0513 3A1006    	LDA	BASE$PORT
 0516 4F        	MOV	C,A
 0517 0C        	INR	C		; CONTROL PORT ADDRESS TO REG. C
 0518 3E00      	MVI	A,RUN
 051A           	OUTP	A		; CLEAR SEL BIT
 051C 0600      	MVI	B,0		; TIMER COUNTER
 051E 0D        GETCN1: DCR	C
 051F AF        	XRA	A
 0520           	OUTP	A		; CLEAR DATA REGISTER
 0522 0C        	INR	C		; AND SEND IT TO THE CARD
 0523           	INP	A		; READ CONTROL PORT
 0525 E608      	ANI	BUSY
 0527           	JRZ	GETCN2
 0529           	DJNZ	GETCN1
 052B 05        	DCR	B		; RESET PSW/Z TO INDICATE ERROR
 052C C9        	RET
                GETCN2: 
 052D 3E40      	MVI	A,SEL
 052F           	OUTP	A		; WAKE UP CONTROLER
 0531 0600      	MVI	B,0
                GETCN3:
 0533           	INP	A
 0535 E608      	ANI	BUSY
 0537           	JRNZ	GETCN4
 0539           	DJNZ	GETCN3
 053B 05        	DCR	B		; RESET PSW/Z TO INDICATE ERROR
 053C C9        	RET
                GETCN4: 
 053D 3E00      	MVI	A,RUN
 053F           	OUTP	A
 0541 AF        	XRA	A		; NO ERROR
 0542 C9        	RET
                
                
                ;
                ; OUTCOM: OUTPUT A COMMAND TO THE DRIVE
                ;
 0543 21F605    OUTCOM: LXI	H,CMBFR
 0546 23        OUTCM0: INX	H
 0547 7E        	MOV	A,M		; CLEAR LUN BITS IN COMMAND BUFFER
 0548 E61F      	ANI	00011111B
 054A 77        	MOV	M,A
 054B 3AF505    	LDA	LUN		; OR L.U.N. BITS INTO COMMAND
 054E B6        	ORA	M
 054F 77        	MOV	M,A
 0550 2B        	DCX	H
 0551 0606      	MVI	B,6		; COMMAND IS 6 BYTES LONG
 0553 3A1006    	LDA	BASE$PORT
 0556 4F        	MOV	C,A		; DATA PORT TO REG. C
 0557 3C        	INR	A
 0558 57        	MOV	D,A		; CONTROL PORT TO REG. D
 0559 1ED8      	MVI	E,(REQ OR CMND OR POUT OR BUSY)
 055B C5        OUTCM1: PUSH	B
 055C 0600      	MVI	B,0		; SET LOOP COUNTER
 055E 4A        	MOV	C,D		; CONTROL PORT ADDRESS TO REG. C
 055F           OUTLOP: INP	A
 0561 E6D8      	ANI	(REQ OR CMND OR POUT OR BUSY)
 0563 BB        	CMP	E
 0564           	JRZ	OUTOK
 0566           	DJNZ	OUTLOP
 0568 05        	DCR	B		; SET ERROR (NZ)
 0569 C1        	POP	B
 056A C9        	RET
 056B C1        OUTOK:	POP	B		; RETURNS DATA PORT ADDRESS TO REG. C
 056C           	OUTI			; OUTPUT COMMAND BYTE
 056E C25B05    	JNZ	OUTCM1
 0571 AF        	XRA	A		; SET SUCCESS (Z)
 0572 C9        	RET
                ;
                ;	ACTUAL READ-WRITE OF DATA
                ;
                SASIRW: 			; THIS ROUTINE IS FOR READING AND WRITING
 0573 212A06    	LXI	H,HSTBUF	; AND WRITING DATA
 0576 3A1006    	LDA	BASE$PORT
 0579 4F        	MOV	C,A		; DATA PORT ADDRESS TO REG. C
 057A 0C        NXTSEC: INR	C		; INCREMENT TO CONTROL PORT
 057B           SASICK: INP	A		; FIRST CHECK FOR DRIVE READY
 057D 320000    	STA	DSKSTA	     ; STORE STATUS
 0580 E6D8      	ANI	(CMND OR BUSY OR REQ OR POUT)
 0582 FE98      	CPI	(CMND OR BUSY OR REQ)  ; IF POUT DROPS,
 0584 C8        	RZ			       ;  WE ARE INTO STATUS PHASE
 0585 E698      	ANI	(CMND OR BUSY OR REQ)
 0587 FE88      	CPI	(BUSY OR REQ)	; WHEN CMND DROPS, SEEK IS COMPLETE, AND WE ARE
 0589           	JRNZ	SASICK		;  READY FOR DATA TRANSFER
 058B 0D        	DCR	C		; DATA PORT ADDRESS TO REG. C
 058C 0680      	MVI	B,128
 058E           	INIR			; CHANGED TO OUTIR FOR WRITE
 0590           	JR	NXTSEC
                
                PAGE
                
                
                
                ;	CHECK STATUS OF READ OR WRITE
                ;
                CHK$STAT:			; THIS ROUTINE CHECKS WHAT'S UP
 0592 211506    	LXI	H,STAT		; STATUS BUFFER
 0595 3A1006    	LDA	BASE$PORT
 0598 57        	MOV	D,A		; DATA PORT ADDRESS STORED IN REG. D
 0599 3C        	INR	A
 059A 5F        	MOV	E,A		; CONTROL PORT ADDRESS STORED IN REG. E
 059B           	JR	CHK01
 059D 4A        CHKNXT: MOV	C,D		; INPUT FROM DATA PORT
 059E           	INP	A
 05A0 77        	MOV	M,A		; SAVE IN MEMORY
 05A1 4B        CHK01:	MOV	C,E		; INPUT FROM CONTROL PORT
 05A2           	INP	A
 05A4 E6F0      	ANI	(MSG OR REQ OR CMND OR POUT)
 05A6 FE90      	CPI	(REQ OR CMND)
 05A8           	JRZ	CHKNXT
 05AA FEB0      	CPI	(MSG OR REQ OR CMND)
 05AC           	JRNZ	CHK01
 05AE 4A        	MOV	C,D		; INPUT FROM DATA PORT
 05AF           	INP	A		; GET FINAL BYTE
 05B1 7E        	MOV	A,M		; AND THROW IT AWAY, GET STATUS
 05B2 E603      	ANI	03		; EITHER BIT SET IS AN ERROR
 05B4 C9        	RET
                
                ****************************************************************
                
                ;
                ;	DATA BUFFERS AND STORAGE
                ;
 05B5 0000000000LUNDATA:DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; 16 BYTES OF DATA FOR EACH
 05C5 0000000000	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; LOGICAL UNIT -- PULLED FROM
 05D5 0000000000	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; MAGIC SECTOR ON
 05E5 0000000000	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; INITIALIZATION
                				     ; BYTE 1 : DRIVE/CONTROLLER TYPE
                				     ; BYTE 2 : CONTROL BYTE
                				     ; BYTES 3 - 10 : DRIVE CHARACTERISTIC DATA
                				     ; BYTES 11 - 16 : ASSIGN DRIVE TYPE
                				     ;				     COMMAND
 05F5 00        LUN:	DB	0		; LOGICAL UNIT NUMBER
 05F6 0000000000CMBFR:	DB	0,0,0,0,0,0	; COMMAND BUFFER
 05FC 0C00000000ICMND:	DB	INIT,0,0,0,0,0	; INITIALIZE DRIVE CHARACTERISTICS COMMAND
                				;					 STRING
 0602 0100000000RCMND:	DB	RECAL,0,0,0,0,0 ; RESTORE COMMAND
 0608 0000      DATAPTR:DW	0		; POINTER TO LUNDATA FOR THIS L.U.N.
 060A 0000      SECPTR	DW	0		; POINTER TO CURRENT SECTOR TABLE ENTRY
 060C 0000      CURDPH	DW	0		; current disk parameter header
 060E 00        SELERR	DB	0		; SELECT ERROR FLAG
 060F 00        FLAGS:	DB	0		; BIT 7 = INITIALIZATION FLAG,
                				; BIT 6 = FLOPPY DISK FLAG
                				; BIT 5 = REMOVABLE MEDIA FLAG
                				; BIT 4 (SPARE)
                				; BITS 0-3 = PARTITION NUMBER,
                BASE$PORT:
 0610 00        	DB	0		; BASE PORT ADDRESS
 0611 00        DRIV0	DB	0		; FIRST PHYSICAL DRIVE NUMBER
                DRIV$LAST:			; LAST PHYSICAL DRIVE NUMBER
 0612 00        	DB	0
 0613 00        STRLUN	DB	0		; RELATIVE PARTITION NUMBER OF CURRENT LUN
 0614 00        PARTLUN DB	0		; NUMBER OF PARTITIONS IN CURRENT LUN
 0615 00        STAT:	DB	0
                ;
                ; DEBLOCKING VARIABLES
                ;
 0616 00        RD$FLAG:DB	0		; FLAG FOR PRE-READ
 0617 FF        HSTDSK	DB	0FFH
 0618 0000      HSTTRK	DW	0
 061A 00        HSTSEC	DB	0
 061B 00        REQDSK	DB	0
 061C 0000      REQTRK	DW	0
 061E 00        REQSEC	DB	0
 061F 00        BLCODE: DB	0		; SECTOR SIZE CODE (0=128,1=256,2=512,3=1024)
 0620 00        BLKSEC: DB	0		; LOCATION OF LOGICAL SECTOR WITHIN PHYSICAL
 0621 00        WRTYPE	DB	0
 0622 00        UNALLOC DB	0
 0623 0000      URECORD DW	0
 0625 00        RELDSK	DB	0		; DISK NUMBER RELATIVE TO 0
 0626 0000      CURDPB	DW	0		; ADDRESS OF CURRENT DISK PARAMETER BLOCK
 0628 00        BLKMSK	DB	0		; BLOCK MASK
 0629 00        OFFSET	DB	0
                
 062A =         btend	equ	$
                
                ********************************************************
                ** BUFFERS
                ********************************************************
                
 062A           HSTBUF: DS	512
 082A           CSV0:	DS	128
 08AA           ALV0:	DS	256
                
 09AA           	END
