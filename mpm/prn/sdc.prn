CP/M RMAC ASSEM 1.1	#001	SDC - DRIVER FOR MMS MP/M WITH SDCARD INTERFACE

 2031 =         VERS EQU '1 ' ; Dec 20, 2021 08:26 drm "SDC.ASM"
                *************************************************************************
                
                	TITLE	'SDC - DRIVER FOR MMS MP/M WITH SDCard INTERFACE'
                	maclib	z80
                	maclib	cfgsys
                	$*MACRO
                
                	extrn	@dph,@rdrv,@side,@trk,@sect,@dstat
                	extrn	@scrcb,@dirbf,@rcnfg,@cmode,@lptbl
                	extrn	?bnksl
                
 004E =         nsegmt	equ	004eh	; where to pass segment to CP/M 3, LUN is -1
                
                **************************************************************************
                ; Configure the number of partitions (numparX) on each LUN in your system
                ;  and if the LUN is removable (true) or not (false).
                **************************************************************************
                
 0000 =         false	equ	0
 FFFF =         true	equ	not false
                
                ; Logical Unit 0 characteristics
                
 0008 =         numpar0 equ	8		; number of partitions on LUN
                
 0008 =         ndev	equ	numpar0
 0050 =         dev0	equ	80
                
                *************************************************************************
                **  PORTS AND CONSTANTS
                *************************************************************************
                
 0040 =         CMDST	equ	01000000b	; command start bits
                
 0011 =         dpbl	equ	17	; length of CP/M 3.0 dpb
 0200 =         alvl	equ	512	; size of allocation vector - 4096 blocks
 0100 =         csvl	equ	256	; size of check sum vector
 0008 =         modlen	equ	8	; length of each mode byte table entry
 0013 =         datlen	equ	19	; length of each lun data entry
 0010 =         bcode	equ	16	; offset in lun data of the blk code
 0010 =         initflg equ	16	;    "   "   "   "   of lun initialization flag
 0011 =         parstr	equ	17	;    "   "   "   "   of partition start of lun
 0012 =         numpar	equ	18	;    "   "   "   "   of the number of partitions
                
 000D =         CSTRNG	EQU	13	; Offsets of data in magic sector
 0013 =         NPART	EQU	19
 0004 =         CBYTE	EQU	4
 0005 =         DDATA	EQU	5
 0003 =         DCTYPE	EQU	3
 0014 =         SECTBL	EQU	20
 002F =         DDPB	EQU	47
                
 0000 =         WRALL	EQU	0	; WRITE TO ALLOCATED
 0001 =         WRDIR	EQU	1	; WRITE TO DIRECTORY
 0002 =         WRUNA	EQU	2	; WRITE TO UNALLOCATED
CP/M RMAC ASSEM 1.1	#002	SDC - DRIVER FOR MMS MP/M WITH SDCARD INTERFACE

 0003 =         READOP	EQU	3	; READ OPERATION
                
                ***************************************************
                	dseg	; common memory
                
 0000 2E01      	dw	thread
 0002 5008      driv0	db	dev0,ndev
 0004 C38110    	jmp	init$sdc
 0007 C39910    	jmp	login
 000A C34211    	jmp	read$sdc
 000D C36F11    	jmp	write$sdc
 0010 1600      	dw	string
 0012 00004500  	dw	dphtbl,modtbl
                
 0016 5344432000string: db	'SDC ',0,'SDCard Interface ('
 002D 38        	db	ndev+'0'
 002E 2070617274	db	' partitions) ',0,'v3.00'
 0041 31202400  	dw	VERS,'$'
                
                ; Mode byte table for SDC driver
                
                modtbl:
 0000 #         drv	set	0
                	rept	numpar0
                	db	1000$0000b+drv,000$00000b,00000000b,00000000b
                	db	11111111b,11111111b,11111111b,11111111b
                drv	set	drv+1
                	endm
 0045+80000000
 0049+FFFFFFFF
 004D+81000000
 0051+FFFFFFFF
 0055+82000000
 0059+FFFFFFFF
 005D+83000000
 0061+FFFFFFFF
 0065+84000000
 0069+FFFFFFFF
 006D+85000000
 0071+FFFFFFFF
 0075+86000000
 0079+FFFFFFFF
 007D+87000000
 0081+FFFFFFFF
                
                ; Disk parameter tables
                
                dpb:
                	rept	ndev
                	ds	dpbl
                	endm
 0085+
 0096+
 00A7+
 00B8+
 00C9+
CP/M RMAC ASSEM 1.1	#003	SDC - DRIVER FOR MMS MP/M WITH SDCARD INTERFACE

 00DA+
 00EB+
 00FC+
                
                	$-MACRO
                ;
                ;	ACTUAL READ-WRITE OF DATA
                ;
                
 010D 00        bbnk:	db	0
 010E 0000      bdma:	dw	0
                
                sdcrd:
 0110 3A0D01    	lda	bbnk
 0113 CD0000    	call	?bnksl
 0116           	inir
 0118           	inir
 011A AF        	xra	a
 011B CD0000    	call	?bnksl		; re-select bank 0
 011E C9        	ret
                
                sdcwr:
 011F 3A0D01    	lda	bbnk
 0122 CD0000    	call	?bnksl
 0125           	outir
 0127           	outir
 0129 AF        	xra	a
 012A CD0000    	call	?bnksl		; re-select bank 0
 012D C9        	ret
                
 012E =         thread	equ	$
                
                	cseg	; banked memory
                	$*MACRO
                
                
                ; Disk parameter headers for the SDC driver
                
 0000 #         ncsv	set	0
 0000 #         drv	set	0
                
                dphtbl:
                	rept	numpar0
                	dw	0,0,0,0,@dirbf,dpb+(drv*dpbl)
                	dw	0	; no CSV - DPB.CKS must be 8000h
                	dw	alv+(drv*alvl)
                drv	set	drv+1
                	endm
 0000+0000000000
 000C+0000
 000E+8000
 0010+0000000000
 001C+0000
 001E+8002
 0020+0000000000
 002C+0000
CP/M RMAC ASSEM 1.1	#004	SDC - DRIVER FOR MMS MP/M WITH SDCARD INTERFACE

 002E+8004
 0030+0000000000
 003C+0000
 003E+8006
 0040+0000000000
 004C+0000
 004E+8008
 0050+0000000000
 005C+0000
 005E+800A
 0060+0000000000
 006C+0000
 006E+800C
 0070+0000000000
 007C+0000
 007E+800E
                
                ; Allocation vectors
                
                alv:
                	rept	ndev
                	ds	alvl
                	endm
 0080+
 0280+
 0480+
 0680+
 0880+
 0A80+
 0C80+
 0E80+
                
                ; Check sum vectors for removable media (none)
                
                csv:
                	rept	ncsv
                	ds	csvl
                	endm
                
                	$-MACRO
                
 1080 00        nparts:	db	0
                
                ;
                ;	DRIVER INITIALIZATION CODE
                ;
                
                init$sdc:
                	; anything to do? Leave reading of magic sector until
                	; first drive access?
                if 1
                	; This only works if SDC was boot device
 1081 3A4D00    	lda	nsegmt-1	; LUN, 0 or 1
 1084 B7        	ora	a
 1085 3E10      	mvi	a,SD0SCS
 1087           	jrz	is0
CP/M RMAC ASSEM 1.1	#005	SDC - DRIVER FOR MMS MP/M WITH SDCARD INTERFACE

 1089 3E00      	mvi	a,SD1SCS	; might be non-functional
 108B 328312    is0:	sta	scs	; SD0SCS, SD1SCS
 108E CD7B12    	call	sdcini
 1091 2A4E00    	lhld	nsegmt		;grab this before it's gone...
 1094 228412    	shld	segoff
                endif
 1097 AF        	xra	a
 1098 C9        	ret
                
 1099 3AAE12    login:	lda	init
 109C 3C        	inr	a
 109D           	jrnz	login0
 109F 32AE12    	sta	init
 10A2 CDBC10    	call	init$hard
                login0:
 10A5 3A8010    	lda	nparts
 10A8 5F        	mov	e,a
 10A9 3A0000    	lda	@rdrv
 10AC BB        	cmp	e	; See if loging in a drive that doesn't exist
 10AD D26C11    	jnc	rwerr
 10B0 AF        	xra	a
 10B1 C9        	ret
                
                ; A=offset into bdma (@scrcb+12)
                ; Returns HL=bdma+A
                bufoff:
 10B2 2A0E01    	lhld	bdma
 10B5 85        	add	l
 10B6 6F        	mov	l,a
 10B7 3E00      	mvi	a,0
 10B9 8C        	adc	h
 10BA 67        	mov	h,a
 10BB C9        	ret
                
                init$hard:
                	; since we only have one disk, init partn table now.
                	; read "magic sector" - LBA 0 of chosen disk segment.
 10BC 2A0C00    	lhld	@scrcb+12	; hstbuf - use bios scratch buffer for magic sector
 10BF 220E01    	shld	bdma
 10C2 3A0E00    	lda	@scrcb+14	; hstbnk
 10C5 320D01    	sta	bbnk
 10C8 2A8412    	lhld	segoff
 10CB 228612    	shld	curlba+0
 10CE 210000    	lxi	h,0
 10D1 228812    	shld	curlba+2		; phy sec 0 = partition table
 10D4 CDC511    	call	stlba2
 10D7 CD5411    	call	read$raw
 10DA C0        	rnz	; error
 10DB 3E13      	mvi	a,NPART
 10DD CDB210    	call	bufoff
 10E0 7E        	mov	a,m
 10E1 FE08      	cpi	numpar0
 10E3           	jrc	ih3
 10E5 3E08      	mvi	a,numpar0
 10E7 328010    ih3:	sta	nparts		; use all partitions (and no more)
                	; copy over all DPBs, add PSH,PSK
CP/M RMAC ASSEM 1.1	#006	SDC - DRIVER FOR MMS MP/M WITH SDCARD INTERFACE

 10EA 3E2F      	mvi	a,DDPB		; CP/M 2.2 DPBs in magic sector
 10EC CDB210    	call	bufoff
 10EF 118500    	lxi	d,dpb		; Our CP/M 3 DPBs
 10F2 3A8010    	lda	nparts
                ih0:
 10F5 F5        	push	psw		; num partitions
 10F6 010F00    	lxi	b,15	; CP/M 2.2 DPB length
 10F9           	ldir
 10FB 3E02      	mvi	a,2	; 512 byte shift, from 128 byte
 10FD 12        	stax	d
 10FE 13        	inx	d
 10FF 3E03      	mvi	a,3	; 512 byte mask, from 128 byte
 1101 12        	stax	d
 1102 13        	inx	d
 1103 010600    	lxi	b,6	; skip mode bytes
 1106 09        	dad	b
 1107 F1        	pop	psw
 1108 3D        	dcr	a
 1109           	jrnz	ih0
                	; copy over sector (partition) offsets,
                	; converting from LBA and 4-byte entries.
 110B 3E14      	mvi	a,SECTBL
 110D CDB210    	call	bufoff
 1110           	lxix	partbl
 1114 3A8010    	lda	nparts		; num entries
 1117 47        	mov	b,a
 1118 C5        ih1:	push	b
 1119           	lded	segoff+0; E = LBA31:24
                	;		; D = LBA23:19 is segment offset, carry-in
 111D           	stx	e,+0	; LBA31:24 is fixed
 1120           	inxix
 1122 0603      	mvi	b,3
 1124 7E        	mov	a,m
 1125 E61F      	ani	00011111b	; must clear LUN bits
 1127 77        	mov	m,a
                ih2:
 1128 1E00      	mvi	e,0
 112A 7E        	mov	a,m
 112B 23        	inx	h
 112C           	srlr	a	; convert 128B-secnum to 512B-secnum
 112E           	rarr	e	;
 1130           	srlr	a	;
 1132           	rarr	e	; E=carry-out
 1134 B2        	ora	d	; carry-in from previous
 1135           	stx	a,+0
 1138           	inxix
 113A 53        	mov	d,e	; carry-out becomes next carry-in
 113B           	djnz	ih2
 113D C1        	pop	b
 113E           	djnz	ih1
                	; anything else to do?
 1140 AF        	xra	a
 1141 C9        	ret
                
                ;	READ - WRITE ROUTINES
                ;
CP/M RMAC ASSEM 1.1	#007	SDC - DRIVER FOR MMS MP/M WITH SDCARD INTERFACE

                ;	READ A PHYSICAL SECTOR CODE
                ; IY=buffer header
                read$sdc:
 1142           	ldy	a,+14	; buffer bank
 1145 320D01    	sta	bbnk
 1148           	ldy	l,+12	; buffer address
 114B           	ldy	h,+13
 114E 220E01    	shld	bdma
 1151 CD8A11    	call	set$lba
                read$raw:
 1154 3E51      	mvi	a,CMDST+17
 1156 327C12    	sta	cmd
 1159 217C12    	lxi	h,cmd
 115C 1601      	mvi	d,1
 115E 1E00      	mvi	e,0	; leave SCS on (unless error)
 1160 CDD211    	call	sdcmd
 1163           	jrc	rwerr
 1165 CD1D12    	call	sdrblk	; turns off SCS
 1168           	jrc	rwerr
 116A AF        	xra	a
 116B C9        	ret
                
                rwerr:
 116C AF        	xra	a
 116D 3C        	inr	a
 116E C9        	ret
                
                ;
                ;	WRITE A PHYSICAL SECTOR CODE
                ;
                write$sdc:
 116F CD8A11    	call	set$lba
 1172 3E58      	mvi	a,CMDST+24
 1174 327C12    	sta	cmd
 1177 217C12    	lxi	h,cmd
 117A 1601      	mvi	d,1
 117C 1E00      	mvi	e,0	; leave SCS on (unless error)
 117E CDD211    	call	sdcmd
 1181           	jrc	rwerr
 1183 CD4712    	call	sdwblk	; turns off SCS
 1186           	jrc	rwerr
 1188 AF        	xra	a
 1189 C9        	ret
                
                ;	CALCULATE THE REQUESTED SECTOR
                ; IY=buffer cb
                set$lba:
                	; note: LBA is stored big-endian, LHLD/SHLD are little-endian
                	; so H,D are LSB and L,E are MSB.
 118A           	ldy	h,+8		; get requested track, byte-swapped
 118D           	ldy	l,+9		;
 1190 110000    	lxi	d,0
 1193 0604      	mvi	b,4		; shift 4 bits left (16 psec/trk)
                stlba0:
 1195           	slar	h
 1197           	ralr	l
CP/M RMAC ASSEM 1.1	#008	SDC - DRIVER FOR MMS MP/M WITH SDCARD INTERFACE

 1199           	ralr	d	; can't carry out
 119B           	djnz	stlba0
                	; sector can't carry - 0-15 into vacated bits
 119D           	ldy	a,+10		; get requested sector (phy)
 11A0 B4        	ora	h
 11A1 67        	mov	h,a
 11A2 228812    	shld	curlba+2
 11A5 EB        	xchg
 11A6 228612    	shld	curlba+0	; CURLBA = (@trk << 4) | @sec
                	; compute &partbl[@rdrv]+3.
                	; We'd like to only do this only if seldsk changes,
                	; but we have no callback for that.
 11A9 3A0000    	lda	@rdrv
 11AC 87        	add	a
 11AD 87        	add	a	; *4
 11AE C603      	adi	3	; can't carry
 11B0 5F        	mov	e,a
 11B1 1600      	mvi	d,0
 11B3 218A12    	lxi	h,partbl
 11B6 19        	dad	d
 11B7 EB        	xchg		; DE = &partbl[@rdrv]+3
                	; add 32-bit values CURLBA += PARTBL[@rdrv]
 11B8 218912    	lxi	h,curlba+3
 11BB AF        	xra	a	; clear CY
 11BC 0604      	mvi	b,4
                stlba1:
 11BE 1A        	ldax	d
 11BF 8E        	adc	m
 11C0 77        	mov	m,a
 11C1 2B        	dcx	h
 11C2 1B        	dcx	d
 11C3           	djnz	stlba1
                stlba2:	; setup controller regs from CURLBA
 11C5 2A8612    	lhld	curlba+0
 11C8 227D12    	shld	cmd+1
 11CB 2A8812    	lhld	curlba+2
 11CE 227F12    	shld	cmd+3
 11D1 C9        	ret
                
                ; send (6 byte) command to SDCard, get response.
                ; HL=command+response buffer, D=response length
                ; return A=response code (00=success), HL=idle length, DE=gap length
                sdcmd:
 11D2 3A8312    	lda	scs
                	; drop out here if no device...
 11D5 B7        	ora	a
 11D6 37        	stc
 11D7 C8        	rz
 11D8 D35E      	out	spi?ctl	; SCS on
 11DA 0E5D      	mvi	c,spi?rd
                	; wait for idle
                	; TODO: timeout this loop
 11DC E5        	push	h	; save command+response buffer
 11DD 210000    	lxi	h,0	; idle timeout
 11E0           sdcmd0:	inp	a
 11E2 FEFF      	cpi	0ffh
CP/M RMAC ASSEM 1.1	#009	SDC - DRIVER FOR MMS MP/M WITH SDCARD INTERFACE

 11E4           	jrz	sdcmd1
 11E6 2B        	dcx	h
 11E7 7C        	mov	a,h
 11E8 B5        	ora	l
 11E9           	jrnz	sdcmd0
                	; timeout - error
                sdcmd5:
 11EB E1        	pop	h
 11EC AF        	xra	a
 11ED D35E      	out	spi?ctl	; SCS off
 11EF 37        	stc
 11F0 C9        	ret
 11F1 E1        sdcmd1:	pop	h	; command buffer back
                 if spi?rd <> spi?wr
 11F2 0E5C      	mvi	c,spi?wr
                 endif
 11F4 0606      	mvi	b,6
 11F6           	outir
                 if spi?rd <> spi?wr
 11F8 0E5D      	mvi	c,spi?rd
                 endif
 11FA           	inp	a	; prime the pump
 11FC E5        	push	h	; points to response area...
 11FD 210000    	lxi	h,0	; gap timeout
 1200           sdcmd2:	inp	a
 1202 FEFF      	cpi	0ffh
 1204           	jrnz	sdcmd3
 1206 2B        	dcx	h
 1207 7C        	mov	a,h
 1208 B5        	ora	l
 1209           	jrnz	sdcmd2
 120B           	jr	sdcmd5
 120D E1        sdcmd3:	pop	h	; response buffer back
 120E 42        	mov	b,d
 120F 77        	mov	m,a
 1210 23        	inx	h
 1211 05        	dcr	b
 1212           	jrz	sdcmd4
 1214           	inir	; rest of response
 1216 7B        sdcmd4:	mov	a,e	; SCS flag
 1217 B7        	ora	a
 1218 C8        	rz	; NC
 1219 AF        	xra	a
 121A D35E      	out	spi?ctl	; SCS off
 121C C9        	ret	; NC
                
                ; read a 512-byte data block, with packet header and CRC (ignored).
                ; READ command was already sent and responded to.
                ; SCS must already be ON.
                ; return CY on error (A=error), SCS always off
                sdrblk:
 121D 0E5D      	mvi	c,spi?rd
                	; wait for packet header (or error)
 121F 110000    	lxi	d,0	; gap timeout
 1222           sdrbk0:	inp	a
 1224 FEFF      	cpi	0ffh
CP/M RMAC ASSEM 1.1	#010	SDC - DRIVER FOR MMS MP/M WITH SDCARD INTERFACE

 1226           	jrnz	sdrbk1
 1228 1B        	dcx	d
 1229 7A        	mov	a,d
 122A B3        	ora	e
 122B           	jrnz	sdrbk0
 122D 37        	stc
 122E           	jr	sdrbk2
                sdrbk1:	
 1230 FEFE      	cpi	11111110b	; data start
 1232 37        	stc	; else must be error
 1233           	jrnz	sdrbk2
 1235 0600      	mvi	b,0	; 256 bytes at a time
 1237 2A0E01    	lhld	bdma
 123A CD1001    	call	sdcrd
 123D           	inp	a	; CRC 1
 123F           	inp	a	; CRC 2
 1241 AF        	xra	a	; NC
 1242 3E00      sdrbk2:	mvi	a,0	; don't disturb CY
 1244 D35E      	out	spi?ctl	; SCS off
 1246 C9        	ret
                
                ; write a 512-byte data block, with packet header and CRC (ignored).
                ; WRITE command was already sent and responded to.
                ; SCS must already be ON.
                ; return CY on error (A=error), SCS always off
                sdwblk:
 1247 0E5C      	mvi	c,spi?wr
                	; TODO: wait for idle?
 1249 3EFE      	mvi	a,11111110b	; data start token
 124B           	outp	a
 124D 0600      	mvi	b,0	; 256 bytes at a time
 124F 2A0E01    	lhld	bdma
 1252 CD1F01    	call	sdcwr	; send 512B block
 1255           	outp	a	; CRC-1
 1257           	outp	a	; CRC-2
                 if spi?rd <> spi?wr
 1259 0E5D      	mvi	c,spi?rd
                 endif
 125B           	inp	a	; prime the pump
                	; wait for response...
 125D 110000    	lxi	d,0	; gap timeout
 1260           sdwbk0:	inp	a
 1262 FEFF      	cpi	0ffh
 1264           	jrnz	sdwbk1
 1266 1B        	dcx	d
 1267 7A        	mov	a,d
 1268 B3        	ora	e
 1269           	jrnz	sdwbk0
 126B 37        	stc
 126C           	jr	sdwbk2
                sdwbk1:	
 126E E61F      	ani	00011111b	; mask off unknown bits
 1270 FE05      	cpi	00000101b	; data accepted
 1272 37        	stc	; else must be error
 1273           	jrnz	sdwbk2
 1275 AF        	xra	a	; NC
CP/M RMAC ASSEM 1.1	#011	SDC - DRIVER FOR MMS MP/M WITH SDCARD INTERFACE

 1276 3E00      sdwbk2:	mvi	a,0	; don't disturb CY
 1278 D35E      	out	spi?ctl	; SCS off
 127A C9        	ret
                
                sdcini:
                	; TODO: initialize card
 127B C9        	ret
                
                ;
                ;	DATA BUFFERS AND STORAGE
                ;
                
 127C 0000000000cmd:	db	0,0,0,0,0,1 ; command buffer w/end bit
 1282 00        	db	0	; response
 1283 00        scs:	db	0
 1284 0000      segoff:	dw	0	; orig from ROM, passed in nsegmt by CPM3LDR
 1286 00000000  curlba:	db	0,0,0,0
                
                ; Partition start LBAs for each partition.
                ; Loaded from the magic sector, converted to LBA.
                
                partbl:
 128A 00000000  	db	0,0,0,0
 128E 00000000  	db	0,0,0,0
 1292 00000000  	db	0,0,0,0
 1296 00000000  	db	0,0,0,0
 129A 00000000  	db	0,0,0,0
 129E 00000000  	db	0,0,0,0
 12A2 00000000  	db	0,0,0,0
 12A6 00000000  	db	0,0,0,0
 12AA 00000000  	db	0,0,0,0
                
 12AE FF        init:	db	0ffh	; one-time initialization
 12AF 00        dskerr:	db	0
                
 12B0           	END
