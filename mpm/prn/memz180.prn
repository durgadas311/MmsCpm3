 2030 =         vers equ '0 ' ; Nov 14, 2021  08:06   drm "MEMZ180.ASM"
                ;****************************************************************
                ; Banked Memory BIOS module for MP/M              		*
                ; Copyright (c) 1983 Magnolia Microsystems			*
                ;****************************************************************
                ; For Z180 MMU and at least 512K RAM at 00000
                
                	maclib z180
                
 FFFF =         true	equ -1
 0000 =         false	equ not true
                
 000D =         cr	equ 13
 000A =         lf	equ 10
 0007 =         bell	equ 7
                
 0038 =         mmu$cbr	equ	38h
 0039 =         mmu$bbr	equ	39h
 003A =         mmu$cbar equ	3ah
 0020 =         sar0l	equ	20h
 0021 =         sar0h	equ	21h
 0022 =         sar0b	equ	22h
 0023 =         dar0l	equ	23h
 0024 =         dar0h	equ	24h
 0025 =         dar0b	equ	25h
 0026 =         bcr0l	equ	26h
 0027 =         bcr0h	equ	27h
 0030 =         dstat	equ	30h
 0031 =         dmode	equ	31h
 0032 =         dcntl	equ	32h
                
                	extrn	@cbnk
                
                ;  Variables for use by other modules
                	public	@nbnk,@compg,@mmerr,@memstr
                
                ;  Routines for use by other modules
                	public ?memsl,?bnksl,?bnkck,?xmove,?move
                
                	dseg		; GENSYS results in DSEG in common memory
                
 0000 04        @nbnk:	db	4	; not total, just for MP/M
 0001 C0        @compg:	db	0c0h	; must match GENSYS value?
 0002 0D0A074E6F@mmerr: db	cr,lf,bell,'No Z180$'
 000D 4D4D555A31@memstr: db	'MMUZ180 ',0,'Z180 Native MMU ',0,'v3.10'
 002C 3020      	dw	vers
 002E 24        	db	'$'
                
                ; Translate bank # into Z180 MMU values
                ; BC = MP/M memory descriptor:
                ;	{ base, size, attr, num }
                ; TODO: how much detail to use...
                ?memsl:	; MP/M entry - BC=memsegtbl[x]
 002F 03        	inx	b
 0030 03        	inx	b
 0031 03        	inx	b
 0032 0A        	ldax	b
                ?bnksl:	; BIOS/XIOS entry - A=bank#
 0033 320000    	sta	@cbnk	; remember current bank
                	; assume banks 0..n are 64K regions, excluding common.
                	; convert to 4k-page number, 00000-7ffff = RAM
 0036 87        	add	a
 0037 87        	add	a
 0038 87        	add	a
 0039 87        	add	a	; 4K-page number, 00,10,20,...70
                	out0	a,mmu$bbr
 003A+ED3939    	DB	0EDH, A*8+01H, MMU$BBR
 003D C9        	ret
                
                ; B=dest bank, C=source bank
                ; DE=source address, HL=dest address
                ; Bank # directly translates to A16-A19
                ; TODO: do interrupts need to be disabled?
                ?xmove:
 003E 3A0100    	lda	@compg
 0041 BC        	cmp	h
                	jrz	xm0
 0042+2802      	DB	28H,XM0-$-1
                	jrnc	xm1
 0044+3002      	DB	30H,XM1-$-1
 0046 0600      xm0:	mvi	b,0
                xm1:	out0	b,dar0b
 0048+ED0125    	DB	0EDH, B*8+01H, DAR0B
 004B BA        	cmp	d
                	jrz	xm2
 004C+2802      	DB	28H,XM2-$-1
                	jrnc	xm3
 004E+3002      	DB	30H,XM3-$-1
 0050 0E00      xm2:	mvi	c,0
                xm3:	out0	c,sar0b
 0052+ED0922    	DB	0EDH, C*8+01H, SAR0B
 0055 C9        	ret
                
                ; DE=source address, HL=dest address, BC=length
                ; TODO: do interrupts need to be disabled?
                ; Not efficient for small moves.
                ?move:
                xxmove:
                	out0	e,sar0l
 0056+ED1920    	DB	0EDH, E*8+01H, SAR0L
                	out0	d,sar0h
 0059+ED1121    	DB	0EDH, D*8+01H, SAR0H
                	out0	l,dar0l
 005C+ED2923    	DB	0EDH, L*8+01H, DAR0L
                	out0	h,dar0h
 005F+ED2124    	DB	0EDH, H*8+01H, DAR0H
                	out0	c,bcr0l
 0062+ED0926    	DB	0EDH, C*8+01H, BCR0L
                	out0	b,bcr0h
 0065+ED0127    	DB	0EDH, B*8+01H, BCR0H
 0068 3E02      	mvi	a,00000010b	; mem2mem, burst mode
                	out0	a,dmode
 006A+ED3931    	DB	0EDH, A*8+01H, DMODE
 006D 3E60      	mvi	a,01100000b	; DE0,/DWE0 - start ch 0
                	out0	a,dstat		; DMA runs now...
 006F+ED3930    	DB	0EDH, A*8+01H, DSTAT
                xxmv0:	in0	a,dstat		; should be done before we get here...
 0072+ED3830    	DB	0EDH, A*8+00H, DSTAT
 0075 E640      	ani	01000000b
                	jrnz	xxmv0
 0077+20F9      	DB	20H,XXMV0-$-1
                	; Must return registers as if moved by CPU...?
 0079 09        	dad	b
 007A EB        	xchg
 007B 09        	dad	b
 007C EB        	xchg
 007D 010000    	lxi	b,0
 0080 C9        	ret
                
                	cseg	; this part can be banked
                
 0000 AF        noram:	xra	a	; disable banked memory
                	out0	a,mmu$bbr
 0001+ED3939    	DB	0EDH, A*8+01H, MMU$BBR
 0004 C9        	ret		; A=0 no banked memory
                
                ; Verify MMU, and initialize it.
                ; A=compag from MP/M GENSYS
                ?bnkck:
 0005 320100    	sta	@compg		; must be XXXX0000b
 0008 E60F      	ani	00001111b
                	jrnz	noram
 000A+20F4      	DB	20H,NORAM-$-1
                	; init MMU - this must not disturb current memory
 000C AF        	xra	a		;
                	out0	a,mmu$cbr	; just to be sure...
 000D+ED3938    	DB	0EDH, A*8+01H, MMU$CBR
                	out0	a,mmu$bbr	; ...
 0010+ED3939    	DB	0EDH, A*8+01H, MMU$BBR
                	; special com/bnk for test...
 0013 3E20      	mvi	a,0010$0000b	; compag 2000, bnk base 0000
                	out0	a,mmu$cbar
 0015+ED393A    	DB	0EDH, A*8+01H, MMU$CBAR
                	;
 0018 114000    	lxi	d,0040h	; a likely addr in low 16K
 001B 3E10      	mvi	a,10h	; bank 1 map code
                	out0	a,mmu$bbr
 001D+ED3939    	DB	0EDH, A*8+01H, MMU$BBR
 0020 3E01      	mvi	a,1
 0022 12        	stax	d	;put bank number in 40h of respective bank
 0023 3E20      	mvi	a,20h	; bank 2 map code
                	out0	a,mmu$bbr
 0025+ED3939    	DB	0EDH, A*8+01H, MMU$BBR
 0028 3E02      	mvi	a,2
 002A 12        	stax	d	;put bank number in 40h of respective bank
 002B 3E30      	mvi	a,30h	; bank 3 map code
                	out0	a,mmu$bbr
 002D+ED3939    	DB	0EDH, A*8+01H, MMU$BBR
 0030 3E03      	mvi	a,3
 0032 12        	stax	d	;put bank number in 40h of respective bank
 0033 3E10      	mvi	a,10h	; bank 1 map code
                	out0	a,mmu$bbr
 0035+ED3939    	DB	0EDH, A*8+01H, MMU$BBR
 0038 1A        	ldax	d
 0039 FE01      	cpi	1
 003B C20000    	jnz	noram
 003E 3E20      	mvi	a,20h	; bank 2 map code
                	out0	a,mmu$bbr
 0040+ED3939    	DB	0EDH, A*8+01H, MMU$BBR
 0043 1A        	ldax	d
 0044 FE02      	cpi	2
 0046 C20000    	jnz	noram
 0049 3E30      	mvi	a,30h	; bank 3 map code
                	out0	a,mmu$bbr
 004B+ED3939    	DB	0EDH, A*8+01H, MMU$BBR
 004E 1A        	ldax	d
 004F FE03      	cpi	3
 0051 C20000    	jnz	noram
 0054 AF        	xra	a		; restore "bank 0"
                	out0	a,mmu$bbr	; ...
 0055+ED3939    	DB	0EDH, A*8+01H, MMU$BBR
                	; the real com/bnk setup
 0058 3A0100    	lda	@compg	; must be XXXX0000b
 005B E6F0      	ani	11110000b	;must already be on 4K boundary to work!
                	out0	a,mmu$cbar	;should be bank base 0000, combas X000
 005D+ED393A    	DB	0EDH, A*8+01H, MMU$CBAR
 0060 AF        	xra	a	; redundant?
 0061 CD3300    	call	?bnksl	;
 0064 3EFF      	mvi	a,true
 0066 C9        	ret		; A<>0 banked memory available
                
 0067           	end
