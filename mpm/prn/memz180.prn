 2031 =         vers equ '1 ' ; Nov 14, 2021  08:06   drm "MEMZ180.ASM"
                ;****************************************************************
                ; Banked Memory BIOS module for MP/M              		*
                ; Copyright (c) 1983 Magnolia Microsystems			*
                ;****************************************************************
                ; For Z180 MMU and at least 512K RAM at 00000
                
                	maclib z180
                	maclib cfgsys
                
 FFFF =         true	equ -1
 0000 =         false	equ not true
                
                 if rc2014	; a.k.a. RomWBW
 00F0 =         test$bnk$0	equ	0f0h	; should be BBR on entry...
 00E0 =         test$bnk$1	equ	0e0h
 00D0 =         test$bnk$2	equ	0d0h
 00C0 =         test$bnk$3	equ	0c0h
                 else
                test$bnk$0	equ	00h
                test$bnk$1	equ	10h
                test$bnk$2	equ	20h
                test$bnk$3	equ	30h
                 endif
                
 000D =         cr	equ 13
 000A =         lf	equ 10
 0007 =         bell	equ 7
                
 00F8 =         mmu$cbr	equ	iobase+38h
 00F9 =         mmu$bbr	equ	iobase+39h
 00FA =         mmu$cbar equ	iobase+3ah
 00E0 =         sar0l	equ	iobase+20h
 00E1 =         sar0h	equ	iobase+21h
 00E2 =         sar0b	equ	iobase+22h
 00E3 =         dar0l	equ	iobase+23h
 00E4 =         dar0h	equ	iobase+24h
 00E5 =         dar0b	equ	iobase+25h
 00E6 =         bcr0l	equ	iobase+26h
 00E7 =         bcr0h	equ	iobase+27h
 00F0 =         dstat	equ	iobase+30h
 00F1 =         dmode	equ	iobase+31h
 00F2 =         dcntl	equ	iobase+32h
                
                	extrn	@cbnk
                
                ;  Variables for use by other modules
                	public	@nbnk,@compg,@mmerr,@memstr
                
                ;  Routines for use by other modules
                	public ?memsl,?bnksl,?bnkck,?xmove,?move
                
                	dseg		; GENSYS results in DSEG in common memory
                
 0000 08        @nbnk:	db	8	; lazy use of all 512K
 0001 C0        @compg:	db	0c0h	; must match GENSYS value?
 0002 0D0A074E6F@mmerr: db	cr,lf,bell,'No Z180$'
 000D 4D4D555A31@memstr: db	'MMUZ180 ',0,'Z180 Native MMU ',0,'v3.00'
 002C 3120      	dw	vers
 002E 24        	db	'$'
                
                ; Translate bank # into Z180 MMU values
                ; BC = MP/M memory descriptor:
                ;	{ base, size, attr, num }
                ; TODO: how much detail to use...
                ?memsl:	; MP/M entry - BC=memsegtbl[x]
 002F 03        	inx	b
 0030 03        	inx	b
 0031 03        	inx	b
 0032 0A        	ldax	b
                ?bnksl:	; BIOS/XIOS entry - A=bank#
 0033 320000    	sta	@cbnk	; remember current bank
                	; assume banks 0..n are 64K regions, excluding common.
                 if rc2014	; a.k.a. RomWBW
                	; convert to 4k-page number, 80000-fffff = RAM
                	neg
 0036+ED44      	DB	0EDH,44H
 0038 C60F      	adi	15	; 0,1,2,3,... => 15,14,13,...
                 else
                	; convert to 4k-page number, 00000-7ffff = RAM
                 endif
 003A 87        	add	a
 003B 87        	add	a
 003C 87        	add	a
 003D 87        	add	a	; 4K-page number, e.g. 00,10,20,...70
                	out0	a,mmu$bbr
 003E+ED39F9    	DB	0EDH, A*8+01H, MMU$BBR
 0041 C9        	ret
                
                ; B=dest bank, C=source bank
                ; DE=source address, HL=dest address
                ; Bank # directly translates to A16-A19
                ; TODO: do interrupts need to be disabled?
                ?xmove:
 0042 3A0100    	lda	@compg
 0045 BC        	cmp	h
                	jrz	xm0
 0046+2802      	DB	28H,XM0-$-1
                	jrnc	xm1
 0048+3002      	DB	30H,XM1-$-1
 004A 0600      xm0:	mvi	b,0
 004C BA        xm1:	cmp	d
                	jrz	xm2
 004D+2802      	DB	28H,XM2-$-1
                	jrnc	xm3
 004F+3002      	DB	30H,XM3-$-1
 0051 0E00      xm2:	mvi	c,0
                xm3:
                 if rc2014	; a.k.a. RomWBW
                	; convert 0,1,2,... to 15,14,13,... for both B, C
 0053 3E0F      	mvi	a,15
 0055 90        	sub	b
 0056 47        	mov	b,a
 0057 3E0F      	mvi	a,15
 0059 91        	sub	c
 005A 4F        	mov	c,a
                 endif
                	out0	b,dar0b
 005B+ED01E5    	DB	0EDH, B*8+01H, DAR0B
                	out0	c,sar0b
 005E+ED09E2    	DB	0EDH, C*8+01H, SAR0B
 0061 C9        	ret
                
                ; DE=source address, HL=dest address, BC=length
                ; TODO: do interrupts need to be disabled?
                ; Not efficient for small moves.
                ?move:
                xxmove:
                	out0	e,sar0l
 0062+ED19E0    	DB	0EDH, E*8+01H, SAR0L
                	out0	d,sar0h
 0065+ED11E1    	DB	0EDH, D*8+01H, SAR0H
                	out0	l,dar0l
 0068+ED29E3    	DB	0EDH, L*8+01H, DAR0L
                	out0	h,dar0h
 006B+ED21E4    	DB	0EDH, H*8+01H, DAR0H
                	out0	c,bcr0l
 006E+ED09E6    	DB	0EDH, C*8+01H, BCR0L
                	out0	b,bcr0h
 0071+ED01E7    	DB	0EDH, B*8+01H, BCR0H
 0074 3E02      	mvi	a,00000010b	; mem2mem, burst mode
                	out0	a,dmode
 0076+ED39F1    	DB	0EDH, A*8+01H, DMODE
 0079 3E60      	mvi	a,01100000b	; DE0,/DWE0 - start ch 0
                	out0	a,dstat		; DMA runs now...
 007B+ED39F0    	DB	0EDH, A*8+01H, DSTAT
                xxmv0:	in0	a,dstat		; should be done before we get here...
 007E+ED38F0    	DB	0EDH, A*8+00H, DSTAT
 0081 E640      	ani	01000000b
                	jrnz	xxmv0
 0083+20F9      	DB	20H,XXMV0-$-1
                	; Must return registers as if moved by CPU...?
 0085 09        	dad	b
 0086 EB        	xchg
 0087 09        	dad	b
 0088 EB        	xchg
 0089 010000    	lxi	b,0
 008C C9        	ret
                
                	cseg	; this part can be banked
                
                noram:	out0	c,mmu$bbr	; restore orig banking
 0000+ED09F9    	DB	0EDH, C*8+01H, MMU$BBR
 0003 AF        noram0:	xra	a
 0004 C9        	ret		; A=0 no banked memory
                
                ; Verify MMU, and initialize it.
                ; A=compag from MP/M GENSYS
                ?bnkck:
 0005 320100    	sta	@compg		; must be XXXX0000b
 0008 E60F      	ani	00001111b
                	jrnz	noram0
 000A+20F7      	DB	20H,NORAM0-$-1
                 if rc2014	; a.k.a. RomWBW
                	; ROM is 00000-7ffff, RAM is 80000-fffff
                	; we have f0000-fffff banked @ 8000
                	in0	c,mmu$bbr	; snapshot what RomWBW gave us.
 000C+ED08F9    	DB	0EDH, C*8+00H, MMU$BBR
                 else
                	; init MMU - this must not disturb current memory
                	xra	a		;
                	out0	a,mmu$cbr	; just to be sure...
                	out0	a,mmu$bbr	; ...
                	mov	c,a
                	; special com/bnk for test...
                	mvi	a,0010$0000b	; compag 2000, bnk base 0000
                	out0	a,mmu$cbar
                 endif
                	;
 000F 114000    	lxi	d,0040h	; a likely addr in low 16K
 0012 3EE0      	mvi	a,test$bnk$1
                	out0	a,mmu$bbr
 0014+ED39F9    	DB	0EDH, A*8+01H, MMU$BBR
 0017 3E01      	mvi	a,1
 0019 12        	stax	d	;put bank number in 40h of respective bank
 001A 3ED0      	mvi	a,test$bnk$2
                	out0	a,mmu$bbr
 001C+ED39F9    	DB	0EDH, A*8+01H, MMU$BBR
 001F 3E02      	mvi	a,2
 0021 12        	stax	d	;put bank number in 40h of respective bank
 0022 3EC0      	mvi	a,test$bnk$3
                	out0	a,mmu$bbr
 0024+ED39F9    	DB	0EDH, A*8+01H, MMU$BBR
 0027 3E03      	mvi	a,3
 0029 12        	stax	d	;put bank number in 40h of respective bank
 002A 3EE0      	mvi	a,test$bnk$1
                	out0	a,mmu$bbr
 002C+ED39F9    	DB	0EDH, A*8+01H, MMU$BBR
 002F 1A        	ldax	d
 0030 FE01      	cpi	1
 0032 C20000    	jnz	noram
 0035 3ED0      	mvi	a,test$bnk$2
                	out0	a,mmu$bbr
 0037+ED39F9    	DB	0EDH, A*8+01H, MMU$BBR
 003A 1A        	ldax	d
 003B FE02      	cpi	2
 003D C20000    	jnz	noram
 0040 3EC0      	mvi	a,test$bnk$3
                	out0	a,mmu$bbr
 0042+ED39F9    	DB	0EDH, A*8+01H, MMU$BBR
 0045 1A        	ldax	d
 0046 FE03      	cpi	3
 0048 C20000    	jnz	noram
                	out0	c,mmu$bbr	; restore "bank 0"
 004B+ED09F9    	DB	0EDH, C*8+01H, MMU$BBR
                	; the real com/bnk setup
 004E 3A0100    	lda	@compg	; must be XXXX0000b
 0051 E6F0      	ani	11110000b	;must already be on 4K boundary to work!
                	out0	a,mmu$cbar	;should be bank base 0000, combas X000
 0053+ED39FA    	DB	0EDH, A*8+01H, MMU$CBAR
 0056 AF        	xra	a	; redundant?
 0057 CD3300    	call	?bnksl	;
 005A 3EFF      	mvi	a,true
 005C C9        	ret		; A<>0 banked memory available
                
 005D           	end
