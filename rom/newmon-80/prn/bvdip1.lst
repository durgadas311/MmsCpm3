		; Boot Module for VDIP1 (USB thumb drive)
		; TODO: make port variable?
		
00D8          	vdip1	equ	0d8h	; assume part of Z80-DUART
		
			maclib	ram
**** ram.lib ****
**** bvdip1.asm ****
			maclib	core
**** core.lib ****
**** bvdip1.asm ****
		
000D          	CR	equ	13
2280          	bbuf:	equ	2280h
2300          	vdbuf	equ	2300h
2380          	vdscr	equ	2380h
		
1000          		org	1000h
1000  03      	first:	db	HIGH (last-first)	; +0: num pages
1001  10      		db	HIGH first		; +1: ORG page
1002  2901    		db	41,1	; +2,+3: phy drv base, num
		
1004  C31A10  		jmp	init	; +4: init entry
1007  C32110  		jmp	boot	; +7: boot entry
		
100A  56      		db	'V'	; +10: Boot command letter
100B  06      		db	6	; +11: front panel key
100C  D8      		db	vdip1	; +12: port, 0 if variable
100D  83A486  		db	10000011b,10100100b,10000110b	; +13: FP display ("USb")
1010  56444950		db	'VDIP1',0	; +16: mnemonic string
      3100
		
1016  2E737973	sfx:	db	'.sys'
0004          	sfxlen	equ	$-sfx
		
101A          	init:
101A  CD9811  		call	runout
101D  CD7311  		call	sync
1020  C9      		ret	; pass/fail based on CY
		
1021          	boot:
1021  210611  		lxi	h,opr
1024  110023  		lxi	d,vdbuf
1027  CD2F11  		call	strcpy
102A  218022  		lxi	h,bbuf	; possible string here
102D  7E      		mov	a,m
102E  FEC3    		cpi	0c3h	; JMP means no string
1030  CA6A10  		jz	boot5
1033  B7      		ora	a	; check for "", too
1034  CA6A10  		jz	boot5
			; else, A=str len
1037  4F      		mov	c,a
1038  0600    		mvi	b,0
103A  23      		inx	h
103B  7E      	xx0:	mov	a,m
103C  12      		stax	d
103D  B7      		ora	a
103E  CA5310  		jz	xx1
1041  FE20    		cpi	' '	; possible command options follow
1043  CA5310  		jz	xx1
1046  D62E    		sui	'.'	; 00:(A=='.')
1048  D601    		sui	1	; CY:==, NC:<>
104A  9F      		sbb	a	; FF:=='.', 00:<>'.'
104B  B0      		ora	b	; B=true if any '.' seen
104C  47      		mov	b,a
104D  23      		inx	h
104E  13      		inx	d
104F  0D      		dcr	c
1050  C23B10  		jnz	xx0
1053  04      	xx1:	inr	b
1054  CA7010  		jz	boot6	; saw a '.', don't append '.sys'
1057  211610  		lxi	h,sfx
105A  010400  		lxi	b,sfxlen
105D  7E      	ldir:	mov	a,m
105E  12      		stax	d
105F  23      		inx	h
1060  13      		inx	d
1061  0B      		dcx	b
1062  78      		mov	a,b
1063  B1      		ora	c
1064  C25D10  		jnz	ldir
1067  C37010  		jmp	boot6
106A  21FA10  	boot5:	lxi	h,defbt
106D  CD2F11  		call	strcpy
1070  3E0D    	boot6:	mvi	a,CR
1072  12      		stax	d
1073  210023  		lxi	h,vdbuf
1076  CD4511  		call	vdcmd	; open file
1079  D8      		rc	; no cleanup at this point
107A  218023  		lxi	h,vdscr
107D  CD5711  		call	vdrd
1080  DAD710  		jc	bootx
			; TODO: get load parameters..
1083  2A8023  		lhld	vdscr
1086  220B11  		shld	memtop
1089  2A8223  		lhld	vdscr+2
108C  220D11  		shld	bnktop
108F  2A8423  		lhld	vdscr+4
1092  220F11  		shld	entry
1095  3A9023  		lda	vdscr+16	; ORG0 flag - don't care?
1098  321111  		sta	copy
109B  218023  		lxi	h,vdscr
109E  CD5711  		call	vdrd
10A1  DAD710  		jc	bootx
10A4  118023  		lxi	d,vdscr	; load message
10A7  CD1211  		call	print
10AA  3A0C11  		lda	comlen
10AD  B7      		ora	a
10AE  CAB910  		jz	boot1
10B1  57      		mov	d,a
10B2  3A0B11  		lda	memtop
10B5  CDDE10  		call	loadit
10B8  D8      		rc
10B9  3A0E11  	boot1:	lda	bnklen
10BC  B7      		ora	a
10BD  CAC810  		jz	boot2
10C0  57      		mov	d,a
10C1  3A0D11  		lda	bnktop
10C4  CDDE10  		call	loadit
10C7  D8      		rc
10C8          	boot2:	; ready to go?
10C8  CDD710  		call	bootx	; close file
			; cleanup clocks...
10CB  F3      		di
10CC  3E9F    		mvi	a,10011111b	; H8 2mS off, display blank
10CE  320920  		sta	ctl$F0
10D1  D3F0    		out	0f0h
			; already at ORG0... H89 2mS already off?
10D3  2A0F11  		lhld	entry
10D6  E9      		pchl
		
10D7          	bootx:	; exit boot on error, must close file
10D7  21F610  		lxi	h,clf
10DA  CD4511  		call	vdcmd
10DD  C9      		ret
		
		; A=top page (might be 0 for 64K)
		; D=num pages
10DE  67      	loadit:	mov	h,a
10DF  2E00    		mvi	l,0	; HL=top address
10E1  7A      		mov	a,d
10E2  87      		add	a	; num records
10E3  57      		mov	d,a
10E4          	load0:
10E4  0180FF  		lxi	b,-128
10E7  09      		dad	b
10E8  E5      		push	h
10E9  D5      		push	d
10EA  CD5711  		call	vdrd
10ED  D1      		pop	d
10EE  E1      		pop	h
10EF  D8      		rc		; error
10F0  15      		dcr	d
10F1  C2E410  		jnz	load0
10F4  B7      		ora	a	; NC
10F5  C9      		ret
		
10F6  636C660D	clf:	db	'clf',CR
10FA  64656662	defbt:	db	'defboot.sys',0	; default boot file
      6F6F742E
      73797300
1106  6F707220	opr:	db	'opr ',0	; command segment
      00
		
110B  00      	memtop:	db	0
110C  00      	comlen:	db	0
110D  00      	bnktop:	db	0
110E  00      	bnklen:	db	0
110F  0000    	entry:	dw	0
		; don't care about cfgtbl?
1111  00      	copy:	db	0	; 'C' if ORG0 required
		
		; BDOS-style print function
		; DE=message, '$' terminated
1112  1A      	print:	ldax	d
1113  FE24    		cpi	'$'
1115  C8      		rz
1116  CD1D11  		call	outcon
1119  13      		inx	d
111A  C31211  		jmp	print
		
111D  2A2600  	outcon:	lhld	conout
1120  E9      		pchl
		
			maclib	vdip1
**** vdip1.lib ****
**** bvdip1.asm ****
		
1210  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
0000          	if ($ > 1800h)
		endif
		
1300          	last:	end



Statistics:

     4	passes
     0	jr promotions
   133	symbols
   768	bytes

   240	macro calls
    16	macro bytes
     0	invented symbols
