                ; program to initialize and identify an SDCard attached to an H8xSPI
                	maclib core
                
 0040 =         spi	equ	40h
                
 0040 =         spi?wr	equ	spi+0
 0040 =         spi?rd	equ	spi+0
 0041 =         spi?ctl	equ	spi+1
                
 0001 =         CS0	equ	00000001b
 0002 =         CS1	equ	00000010b
 0004 =         CS2	equ	00000100b
 0008 =         CS3	equ	00001000b
 0004 =         NUMCS	equ	4
 0004 =         SDSCS0	equ	CS2	; SCS for SDCard 0
 0008 =         SDSCS1	equ	CS3	; SCS for SDCard 1
 0002 =         NUMSD	equ	2
                
 0040 =         CMDST	equ	01000000b	; command start bits
                
 000D =         CR	equ	13
 000A =         LF	equ	10
                
                ; locations inside CID
 0000 =         CIDMFG	equ	0	; for 1
 0001 =         CIDOEM	equ	1	; for 2
 0003 =         CIDPRD	equ	3	; for 5
 0008 =         CIDREV	equ	8	; for 1
 0009 =         CIDSN	equ	9	; for 4
 000D =         CIDMDT	equ	13	; for 2 (xY YM)
                ; locations inside CSD
 0000 =         CSDVER	equ	0	; various, v2 indicator
 0007 =         CSDSIZ	equ	7	; for 3 (v2 only)
                
                	cseg
 0000 C30600    	jmp	start
                
 0003 0408      cstab:	db	SDSCS0,SDSCS1
 0005 05        retry:	db	5
                
 0006 319105    start:	lxi	sp,stack
 0009 3E04      	mvi	a,SDSCS0	; default
 000B 326F01    	sta	curcs
 000E 218022    	lxi	h,2280h	; NUL terminated
 0011 23        	inx	h	; skip length
                	; skip program name
 0012 7E        skp0:	mov	a,m
 0013 23        	inx	h
 0014 B7        	ora	a
 0015 CA2300    	jz	skp1
 0018 FE20      	cpi	' '
 001A C21200    	jnz	skp0
 001D CDE601    	call	parcs	; curcs revised if needed
 0020 DA6901    	jc	error
                skp1:
 0023 F3        	di	; don't need/want interrupts
                	; waive 1mS delay... we are well past that...
 0024 CD3802    	call	run74	; must cycle >= 74 clocks
                
                	; CMD0 - enter SPI mode
 0027 217101    	lxi	h,cmd0
 002A 1601      	mvi	d,1
 002C 1E01      	mvi	e,1	; turn off SCS
 002E CD5B02    	call	sdcmd
 0031 DA6001    	jc	fail
 0034 3A7701    	lda	cmd0+6	; R1
 0037 FE01      	cpi	00000001b	; IDLE bit set?
 0039 C26001    	jnz	fail
 003C 217801    	lxi	h,cmd8
 003F 1605      	mvi	d,5
 0041 1E01      	mvi	e,1	; turn off SCS
 0043 CD5B02    	call	sdcmd
 0046 DA6001    	jc	fail
 0049 3A7E01    	lda	cmd8+6
 004C FE01      	cpi	00000001b	; no error, IDLE bit still set
 004E CA5B00    	jz	ok8
 0051 E604      	ani	0100b	; Illegal Command
 0053 CA6001    	jz	fail	; must be some other error - fatal
                	; CMD8 not recognized, SD1 card... (not supported?)
 0056 3E00      	mvi	a,0
 0058 328B01    	sta	acmd41+1
                ok8:
 005B 3E05      	mvi	a,5
 005D 320500    	sta	retry
                init:	; this could take a long time... don't flood console
 0060 218A01    	lxi	h,acmd41
 0063 1601      	mvi	d,1
 0065 CD4102    	call	doacmd
 0068 DA6001    	jc	fail
 006B 3A9001    	lda	acmd41+6
 006E FE00      	cpi	00000000b	; READY?
 0070 CA8500    	jz	init0
 0073 E67E      	ani	01111110b	; any errors?
 0075 CA6000    	jz	init
 0078 3A0500    	lda	retry
 007B 3D        	dcr	a
 007C 320500    	sta	retry
 007F C26000    	jnz	init
 0082 C36001    	jmp	fail
                init0:	; done with init
                	; now try CMD58 if applicable
 0085 3A8B01    	lda	acmd41+1
 0088 B7        	ora	a
 0089 CA9600    	jz	next
                	; SD2... get CMD58
 008C 219101    	lxi	h,cmd58
 008F 1605      	mvi	d,5
 0091 1E01      	mvi	e,1	; turn off SCS
 0093 CD5B02    	call	sdcmd
                next:
                	; read CID...
 0096 21AA01    	lxi	h,cmd10
 0099 1601      	mvi	d,1
 009B 1E00      	mvi	e,0	; leave SCS on
 009D CD5B02    	call	sdcmd
 00A0 DA6001    	jc	fail
 00A3 3AB001    	lda	cmd10+6
 00A6 B7        	ora	a
 00A7 C2D900    	jnz	bad
 00AA 21F104    	lxi	h,cid
 00AD 011001    	lxi	b,0110h	; 16 bytes, 1 loop
 00B0 CD8A02    	call	sdblk	; turns off SCS
 00B3 DAD600    	jc	badblk
                	; read CSD...
 00B6 21A301    	lxi	h,cmd9
 00B9 1601      	mvi	d,1
 00BB 1E00      	mvi	e,0	; leave SCS on
 00BD CD5B02    	call	sdcmd
 00C0 DA6001    	jc	fail
 00C3 3AA901    	lda	cmd9+6
 00C6 B7        	ora	a
 00C7 C2D900    	jnz	bad
 00CA 210105    	lxi	h,csd
 00CD 011001    	lxi	b,0110h	; 16 bytes, 1 loop
 00D0 CD8A02    	call	sdblk	; turns off SCS
 00D3 D2DF00    	jnc	done
 00D6 CDB101    badblk:	call	hexout
 00D9 AF        bad:	xra	a
 00DA D341      	out	spi?ctl	; SCS off
 00DC C36001    	jmp	fail
                done:
 00DF FB        	ei
 00E0 3A7001    	lda	dmp
 00E3 B7        	ora	a
 00E4 CA0B01    	jz	nodmp
 00E7 CD1B00    	call	crlf
 00EA 218B03    	lxi	h,cidmsg
 00ED CD4400    	call	msgout
 00F0 21F104    	lxi	h,cid
 00F3 CD9D04    	call	dmpline
 00F6 CD1B00    	call	crlf
 00F9 219103    	lxi	h,csdmsg
 00FC CD4400    	call	msgout
 00FF 210105    	lxi	h,csd
 0102 CD9D04    	call	dmpline
 0105 CD1B00    	call	crlf
 0108 C35B01    	jmp	exit
                
                nodmp:
 010B CD1B00    	call	crlf
 010E 215903    	lxi	h,model
 0111 CD4400    	call	msgout
 0114 CDD402    	call	prver	; "SDv2.0"
 0117 F5        	push	psw
 0118 CDC501    	call	space
 011B 3E28      	mvi	a,'('
 011D CDD601    	call	chrout
 0120 3AF104    	lda	cid+CIDMFG	; manufacturer ID
 0123 CD6104    	call	decout		; TODO: "(%d)"?
 0126 3E29      	mvi	a,')'
 0128 CDD601    	call	chrout
 012B CDC501    	call	space
 012E 21F204    	lxi	h,cid+CIDOEM
 0131 0602      	mvi	b,2
 0133 CDDC01    	call	numout
 0136 CDC501    	call	space
 0139 21F404    	lxi	h,cid+CIDPRD
 013C 0605      	mvi	b,5
 013E CDDC01    	call	numout
 0141 CDC501    	call	space
 0144 CDB402    	call	prmdt
 0147 CD1B00    	call	crlf
 014A CD1803    	call	prsn
 014D CD1B00    	call	crlf
 0150 CDFD02    	call	prrev
 0153 CD1B00    	call	crlf
 0156 F1        	pop	psw
 0157 B7        	ora	a
 0158 C42D03    	cnz	prcap	; incl CR/LF
                exit:
 015B FB        	ei
 015C 2A1E00    	lhld	retmon
 015F E9        	pchl
                
 0160 212702    fail:	lxi	h,failms
 0163 CD4400    exit0:	call	msgout
 0166 C35B01    	jmp	exit
                
 0169 211602    error:	lxi	h,synerr
 016C C36301    	jmp	exit0
                
 016F 04        curcs:	db	SDSCS0
 0170 00        dmp:	db	0
                
                ; command is always 6 bytes (?)
                ; From RomWBW:
                ;    AT LEAST ONE SD CARD IS KNOWN TO FAIL ANY COMMAND
                ;    WHERE THE CRC POSITION IS NOT $FF
                ; This explains the problems with "Samsung 32Pro",
                ; although that card only requires the end-command bit.
 0171 4000000000cmd0:	db	CMDST+0,0,0,0,0,95h
 0177 00        	db	0
 0178 48000001AAcmd8:	db	CMDST+8,0,0,01h,0aah,87h
 017E 0000000000	db	0,0,0,0,0
 0183 7700000000cmd55:	db	CMDST+55,0,0,0,0,1
 0189 00        	db	0
 018A 6940000000acmd41:	db	CMDST+41,40h,0,0,0,1
 0190 00        	db	0
 0191 7A00000000cmd58:	db	CMDST+58,0,0,0,0,1
 0197 0000000000ocr:	db	0,0,0,0,0
 019C 5100000000cmd17:	db	CMDST+17,0,0,0,0,1
 01A2 00        	db	0
 01A3 4900000000cmd9:	db	CMDST+9,0,0,0,0,1	; SEND_CSD
 01A9 00        	db	0
 01AA 4A00000000cmd10:	db	CMDST+10,0,0,0,0,1	; SEND_CID
 01B0 00        	db	0
                
                hexout:
 01B1 F5        	push	psw
 01B2 0F        	rrc
 01B3 0F        	rrc
 01B4 0F        	rrc
 01B5 0F        	rrc
 01B6 CDBA01    	call	hexdig
 01B9 F1        	pop	psw
                hexdig:
 01BA E60F      	ani	0fh
 01BC C690      	adi	90h
 01BE 27        	daa
 01BF CE40      	aci	40h
 01C1 27        	daa
 01C2 C3D601    	jmp	chrout
                
 01C5 3E20      space:	mvi	a,' '
 01C7 C3D601    	jmp	chrout
                
 01CA 3E2F      slash:	mvi	a,'/'
 01CC C3D601    	jmp	chrout
                
 01CF 3E2E      point:	mvi	a,'.'
 01D1 C3D601    	jmp	chrout
                
 01D4 3E22      quote:	mvi	a,'"'
                	;jmp	chrout
                
 01D6 E5        chrout:	push	h
 01D7 2A2600    	lhld	conout
 01DA E3        	xthl
 01DB C9        	ret
                
                ; like message out, but num chrs in B (> 0)
 01DC 7E        numout:	mov	a,m
 01DD 23        	inx	h
 01DE CDD601    	call	chrout
 01E1 05        	dcr	b
 01E2 C2DC01    	jnz	numout
 01E5 C9        	ret
                
                ; parse for "CS#" and update 'curcs'
                parcs:
 01E6 7E        par9:	mov	a,m
 01E7 B7        	ora	a
 01E8 C8        	rz
 01E9 23        	inx	h
 01EA FE20      	cpi	' '
 01EC CAE601    	jz	par9
 01EF FE30      	cpi	'0'
 01F1 D8        	rc
 01F2 FE32      	cpi	'0'+NUMSD
 01F4 D20902    	jnc	par0
                	; check for NUL?
 01F7 D630      	sui	'0'
 01F9 4F        	mov	c,a
 01FA 0600      	mvi	b,0
 01FC EB        	xchg
 01FD 210300    	lxi	h,cstab
 0200 09        	dad	b
 0201 7E        	mov	a,m
 0202 326F01    	sta	curcs
 0205 EB        	xchg
 0206 C3E601    	jmp	par9
 0209 E65F      par0:	ani	01011111b
 020B FE44      	cpi	'D'
 020D C2E601    	jnz	par9	; error?
 0210 327001    	sta	dmp
 0213 C3E601    	jmp	par9
                
 0216 0D0A2A2A2Asynerr:	db	CR,LF,'*** syntax ***',0
 0227 0D0A2A2A2Afailms:	db	CR,LF,'*** failed ***',0
                
                ; run-out at least 74 clock cycles... with SCS off...
 0238 060A      run74:	mvi	b,10	; 80 cycles
 023A DB40      run740:	in	spi?rd
 023C 05C23A02  	dcr b ! jnz	run740
 0240 C9        	ret
                
                ; always turns off SCS
                doacmd:
 0241 E5        	push	h
 0242 D5        	push	d
 0243 218301    	lxi	h,cmd55
 0246 1601      	mvi	d,1
 0248 1E00      	mvi	e,0	; do not turn off SCS
 024A CD5B02    	call	sdcmd
                	; ignore results? CMD55 never gives error?
 024D D1        	pop	d
 024E E1        	pop	h
 024F 1E01      	mvi	e,1	; do turn off SCS
 0251 CD5B02    	call	sdcmd
 0254 F5        	push	psw
                	; for some reason, this is required (at least for ACMD41)
                	; when certain cards (Flexon) are in-socket during power up.
                	; If the card is re-seated after power up, this is not needed.
                	; Unclear if this is a MT011 anomaly or universal.
 0255 DB40      	in	spi?rd
 0257 DB40      	in	spi?rd
 0259 F1        	pop	psw
 025A C9        	ret
                
                ; send (6 byte) command to SDCard, get response.
                ; HL=command+response buffer, D=response length
                ; return A=response code (00=success), HL=idle length, DE=gap length
                sdcmd:
 025B 3A6F01    	lda	curcs
 025E D341      	out	spi?ctl	; SCS on
 0260 0E40      	mvi	c,spi?rd
                	; wait for idle
                	; TODO: timeout this loop
 0262 E5        	push	h	; save command+response buffer
 0263 DB40      sdcmd0:	in	spi?rd
 0265 FEFF      	cpi	0ffh
 0267 C26302    	jnz	sdcmd0
 026A E1        	pop	h	; command buffer back
 026B 0606      	mvi	b,6
 026D CDE604    	call	outir
 0270 DB40      	in	spi?rd	; prime the pump
                	; TODO: timeout this loop
 0272 DB40      sdcmd2:	in	spi?rd
 0274 FEFF      	cpi	0ffh
 0276 CA7202    	jz	sdcmd2
 0279 42        	mov	b,d
 027A 77        	mov	m,a
 027B 23        	inx	h
 027C 05        	dcr	b
 027D CA8302    	jz	sdcmd4
 0280 CDDB04    	call	inir	; rest of response
 0283 7B        sdcmd4:	mov	a,e	; SCS flag
 0284 B7        	ora	a
 0285 C8        	rz
 0286 AF        	xra	a
 0287 D341      	out	spi?ctl	; SCS off
 0289 C9        	ret
                
                ; read a 512-byte data block, with packet header and CRC (ignored).
                ; READ command was already sent and responded to.
                ; HL=buffer, BC=length* (multiple of 256)
                ; return CY on error (A=error), DE=gap length
                sdblk:
 028A C5        	push	b
 028B 3A6F01    	lda	curcs
 028E D341      	out	spi?ctl	; SCS on
 0290 0E40      	mvi	c,spi?rd
                	; wait for packet header (or error)
                	; TODO: timeout this loop
 0292 DB40      sdblk0:	in	spi?rd
 0294 FEFF      	cpi	0ffh
 0296 CA9202    	jz	sdblk0
 0299 D1        	pop	d		; length to DE
 029A FEFE      	cpi	11111110b	; data start
 029C 37        	stc	; else must be error
 029D C2AD02    	jnz	sdblk2
 02A0 43        	mov	b,e
 02A1 CDDB04    sdblk3:	call	inir
 02A4 15        	dcr	d
 02A5 C2A102    	jnz	sdblk3
 02A8 DB40      	in	spi?rd	; CRC 1
 02AA DB40      	in	spi?rd	; CRC 2
 02AC AF        	xra	a	; NC
 02AD F5        sdblk2:	push	psw
 02AE AF        	xra	a
 02AF D341      	out	spi?ctl	; SCS off
 02B1 F1        	pop	psw
 02B2 C9        	ret
                
                procr:	; ocr: 00 C0 FF 80 =? 80FFC000 = pwrup, 2.7-3.6V
 02B3 C9        	ret
                
                prmdt:
 02B4 21FE04    	lxi	h,cid+CIDMDT
 02B7 56        	mov	d,m	; +13	; MDT hi
 02B8 23        	inx	h
 02B9 5E        	mov	e,m	; +14	; MDT lo
 02BA D5        	push	d
 02BB 7B        	mov	a,e
 02BC E60F      	ani	0fh
 02BE CD5C04    	call	dec02
 02C1 CDCA01    	call	slash
 02C4 E1        	pop	h
 02C5 29        	dad	h
 02C6 29        	dad	h
 02C7 29        	dad	h
 02C8 29        	dad	h	; shift year into H
 02C9 5C        	mov	e,h
 02CA 1600      	mvi	d,0
 02CC 21D007    	lxi	h,2000
 02CF 19        	dad	d
 02D0 CD3004    	call	dec16
 02D3 C9        	ret
                
                ; Print SD version from CSD
                ; return A=version bits (11000000b)
                prver:
 02D4 3E53      	mvi	a,'S'
 02D6 CDD601    	call	chrout
 02D9 3E44      	mvi	a,'D'
 02DB CDD601    	call	chrout
 02DE 3E76      	mvi	a,'v'
 02E0 CDD601    	call	chrout
 02E3 3A0105    	lda	csd+CSDVER
 02E6 E6C0      	ani	11000000b	; CSD_STRUCTURE
 02E8 F5        	push	psw
 02E9 3E31      	mvi	a,'1'
 02EB CAF002    	jz	v10
 02EE 3E32      	mvi	a,'2'
 02F0 CDD601    v10:	call	chrout
 02F3 CDCF01    	call	point
 02F6 3E30      	mvi	a,'0'
 02F8 CDD601    	call	chrout
 02FB F1        	pop	psw
 02FC C9        	ret
                
                prrev:
 02FD 216703    	lxi	h,rev
 0300 CD4400    	call	msgout
 0303 3AF904    	lda	cid+CIDREV ; BCD "n.m"
 0306 F5        	push	psw
 0307 07        	rlc
 0308 07        	rlc
 0309 07        	rlc
 030A 07        	rlc
 030B CDBA01    	call	hexdig
 030E 3E2E      	mvi	a,'.'
 0310 CDD601    	call	chrout
 0313 F1        	pop	psw
 0314 CDBA01    	call	hexdig
 0317 C9        	ret
                
                ; print s/n from CID
                prsn:
 0318 216103    	lxi	h,serial
 031B CD4400    	call	msgout
 031E 21FA04    	lxi	h,cid+CIDSN
 0321 0604      	mvi	b,4
 0323 7E        sn0:	mov	a,m
 0324 23        	inx	h
 0325 CDB101    	call	hexout
 0328 05        	dcr	b
 0329 C22303    	jnz	sn0
 032C C9        	ret
                
                ; print capacity from CSD
                prcap:
 032D 216D03    	lxi	h,cap
 0330 CD4400    	call	msgout
 0333 210805    	lxi	h,csd+CSDSIZ
 0336 46        	mov	b,m	; +7	; C_SIZE << 10
 0337 23        	inx	h
 0338 4E        	mov	c,m	; +8
 0339 23        	inx	h
 033A 56        	mov	d,m	; +9
 033B 1E00      	mvi	e,0	;	BC:DE is << 8, need two more
 033D 3E01      	mvi	a,1	; C_SIZE+1
 033F 82        	add	d
 0340 57        	mov	d,a
 0341 3E00      	mvi	a,0
 0343 89        	adc	c
 0344 4F        	mov	c,a
 0345 3E00      	mvi	a,0
 0347 88        	adc	b
 0348 47        	mov	b,a
 0349 CD9A03    	call	shl32
 034C CD9A03    	call	shl32
 034F CDA703    	call	dec32
 0352 217803    	lxi	h,blks	; incl. CR/LF
 0355 CD4400    	call	msgout
 0358 C9        	ret
                
 0359 4D6F64656Cmodel:	db	'Model: ',0
 0361 532F4E3A20serial:	db	'S/N: ',0
 0367 5265763A20rev:	db	'Rev: ',0
 036D 4361706163cap:	db	'Capacity: ',0
 0378 20626C6F63blks:	db	' blocks(sectors)',CR,LF,0
 038B 4349443A20cidmsg:	db	'CID: ',0
 0391 4353443A20csdmsg:	db	'CSD: ',0
 0397 202000    spcs:	db	'  ',0
                
                ; BC:DE <<= 1
                shl32:
 039A 7B        	mov	a,e
 039B 87        	add	a
 039C 5F        	mov	e,a
 039D 7A        	mov	a,d
 039E 17        	ral
 039F 57        	mov	d,a
 03A0 79        	mov	a,c
 03A1 17        	ral
 03A2 4F        	mov	c,a
 03A3 78        	mov	a,b
 03A4 17        	ral
 03A5 47        	mov	b,a
 03A6 C9        	ret
                
                ; print number in BC:DE, leading zero suppr
                dec32:
 03A7 2E00      	mvi	l,0
 03A9 2609      	mvi	h,9
 03AB E5        	push	h	; control vars on stack
 03AC 21DB03    	lxi	h,mlt10
 03AF AF        dd1:	xra	a
 03B0 CD1404    dd0:	call	sub32
 03B3 3C        	inr	a
 03B4 D2B003    	jnc	dd0
 03B7 CDFF03    	call	add32
 03BA E3        	xthl	; control vars in HL
 03BB 3D        	dcr	a
 03BC C2C403    	jnz	dd2
 03BF 2D        	dcr	l
 03C0 2C        	inr	l
 03C1 CACB03    	jz	dd3
 03C4 2E01      dd2:	mvi	l,1
 03C6 C630      	adi	'0'
 03C8 CDD601    	call	chrout
                dd3:
 03CB 25        	dcr	h
 03CC E3        	xthl	; control vars back on stack
 03CD 23        	inx	h
 03CE 23        	inx	h
 03CF 23        	inx	h
 03D0 23        	inx	h
 03D1 C2AF03    	jnz	dd1
 03D4 E1        	pop	h
 03D5 3E30      	mvi	a,'0'
 03D7 83        	add	e
 03D8 C3D601    	jmp	chrout
                
                mlt10:
 03DB 3B9ACA00  	db	3Bh,9Ah,0CAh,00h	;  1,000,000,000
 03DF 05F5E100  	db	05h,0F5h,0E1h,00h	;    100,000,000
 03E3 00989680  	db	00h,98h,96h,80h		;     10,000,000
 03E7 000F4240  	db	00h,0Fh,42h,40h		;      1,000,000
 03EB 000186A0  	db	00h,01h,86h,0A0h	;        100,000
 03EF 00002710  	db	00h,00h,27h,10h		;         10,000
 03F3 000003E8  	db	00h,00h,03h,0E8h	;          1,000
 03F7 00000064  	db	00h,00h,00h,64h		;            100
 03FB 0000000A  	db	00h,00h,00h,0ah		;             10
                
                ; BC:DE += (mlt10[HL])
 03FF F5        add32:	push	psw
 0400 23        	inx	h
 0401 23        	inx	h
 0402 23        	inx	h
 0403 7B        	mov	a,e
 0404 86        	add	m
 0405 5F        	mov	e,a
 0406 2B        	dcx	h
 0407 7A        	mov	a,d
 0408 8E        	adc	m
 0409 57        	mov	d,a
 040A 2B        	dcx	h
 040B 79        	mov	a,c
 040C 8E        	adc	m
 040D 4F        	mov	c,a
 040E 2B        	dcx	h
 040F 78        	mov	a,b
 0410 8E        	adc	m
 0411 47        	mov	b,a
 0412 F1        	pop	psw
 0413 C9        	ret	; CY ignored
                
                ; BC:DE += (mlt10[HL])
 0414 F5        sub32:	push	psw
 0415 23        	inx	h
 0416 23        	inx	h
 0417 23        	inx	h
 0418 7B        	mov	a,e
 0419 96        	sub	m
 041A 5F        	mov	e,a
 041B 2B        	dcx	h
 041C 7A        	mov	a,d
 041D 9E        	sbb	m
 041E 57        	mov	d,a
 041F 2B        	dcx	h
 0420 79        	mov	a,c
 0421 9E        	sbb	m
 0422 4F        	mov	c,a
 0423 2B        	dcx	h
 0424 78        	mov	a,b
 0425 9E        	sbb	m
 0426 47        	mov	b,a
                	; CY = borrow... must preserve
 0427 DA2D04    	jc	sb0
 042A F1        	pop	psw
 042B B7        	ora	a	; NC
 042C C9        	ret
 042D F1        sb0:	pop	psw
 042E 37        	stc
 042F C9        	ret
                
                ; print number in HL, 0-9999
                dec16:
 0430 11E803    	lxi	d,1000
 0433 CD4904    	call	div16
 0436 116400    	lxi	d,100
 0439 CD4904    	call	div16
 043C 110A00    	lxi	d,10
 043F CD4904    	call	div16
 0442 7D        	mov	a,l
 0443 C630      	adi	'0'
 0445 CDD601    	call	chrout
 0448 C9        	ret
                
 0449 0600      div16:	mvi	b,0
 044B B7        dv0:	ora	a
 044C CD8D04    	call	dsbc
 044F 04        	inr	b
 0450 D24B04    	jnc	dv0
 0453 19        	dad	d
 0454 05        	dcr	b
 0455 3E30      	mvi	a,'0'
 0457 80        	add	b
 0458 CDD601    	call	chrout
 045B C9        	ret
                
                ; print decimal 00-99
                dec02:
 045C 0E01      	mvi	c,1
 045E C36804    	jmp	dec00
                ; A=number to print, 0-255 (leading zero suppr)
                ; destroys B, C, D, E (and A)
                decout:
 0461 0E00      	mvi	c,0
 0463 1664      	mvi	d,100
 0465 CD7304    	call	divide
 0468 160A      dec00:	mvi	d,10
 046A CD7304    	call	divide
 046D C630      	adi	'0'
 046F CDD601    	call	chrout
 0472 C9        	ret
                
 0473 1E00      divide:	mvi	e,0
 0475 92        div0:	sub	d
 0476 1C        	inr	e
 0477 D27504    	jnc	div0
 047A 82        	add	d
 047B 1D        	dcr	e
 047C C28204    	jnz	div1
 047F 0D        	dcr	c
 0480 0C        	inr	c
 0481 C8        	rz
 0482 0E01      div1:	mvi	c,1
 0484 F5        	push	psw	; remainder
 0485 3E30      	mvi	a,'0'
 0487 83        	add	e
 0488 CDD601    	call	chrout
 048B F1        	pop	psw	; remainder
 048C C9        	ret
                
 048D F5        dsbc:	push	psw
 048E 7D        	mov	a,l
 048F 9B        	sbb	e
 0490 6F        	mov	l,a
 0491 7C        	mov	a,h
 0492 9A        	sbb	d
 0493 67        	mov	h,a
 0494 DA9A04    	jc	dsbc0
 0497 F1        	pop	psw
 0498 B7        	ora	a
 0499 C9        	ret
 049A F1        dsbc0:	pop	psw
 049B 37        	stc
 049C C9        	ret
                
                ; Dump 16 bytes at HL
                dmpline:
 049D D5        	push	d
 049E E5        	push	h
                	; blank space provided by dmphex
 049F E1        	pop	h
 04A0 E5        	push	h
 04A1 CDB204    	call	dmphex
 04A4 219703    	lxi	h,spcs
 04A7 CD4400    	call	msgout
 04AA E1        	pop	h
 04AB E5        	push	h
 04AC CDC304    	call	dmpchr
 04AF E1        	pop	h
 04B0 D1        	pop	d
 04B1 C9        	ret
                
                dmphex:
 04B2 0610      	mvi	b,16
 04B4 3E20      dh0:	mvi	a,' '
 04B6 CDD601    	call	chrout
 04B9 7E        	mov	a,m
 04BA CDB101    	call	hexout
 04BD 23        	inx	h
 04BE 05C2B404  	dcr b ! jnz	dh0
 04C2 C9        	ret
                
                dmpchr:
 04C3 0610      	mvi	b,16
 04C5 7E        dc0:	mov	a,m
 04C6 FE20      	cpi	' '
 04C8 DAD004    	jc	dc1
 04CB FE7F      	cpi	'~'+1
 04CD DAD204    	jc	dc2
 04D0 3E2E      dc1:	mvi	a,'.'
 04D2 CDD601    dc2:	call	chrout
 04D5 23        	inx	h
 04D6 05C2C504  	dcr b ! jnz	dc0
 04DA C9        	ret
                
 04DB F5        inir:	push	psw
 04DC DB40      inir0:	in	spi?rd
 04DE 77        	mov	m,a
 04DF 23        	inx	h
 04E0 05        	dcr	b
 04E1 C2DC04    	jnz	inir0
 04E4 F1        	pop	psw
 04E5 C9        	ret
                
 04E6 F5        outir:	push	psw
 04E7 7E        outir1:	mov	a,m
 04E8 D340      	out	spi?wr
 04EA 23        	inx	h
 04EB 05        	dcr	b
 04EC C2E704    	jnz	outir1
 04EF F1        	pop	psw
 04F0 C9        	ret
                
 04F1           cid:	ds	16
 0501           csd:	ds	16
                
 0511           	ds	128
 0591           stack:	ds	0
                
 0591           	end
