                ; program to initialize and identify an SDCard attached to an H8xSPI
                	maclib core
                
 0040 =         spi	equ	40h
                
 0040 =         spi?wr	equ	spi+0
 0040 =         spi?rd	equ	spi+0
 0041 =         spi?ctl	equ	spi+1
                
 0001 =         CS0	equ	00000001b
 0002 =         CS1	equ	00000010b
 0004 =         CS2	equ	00000100b
 0008 =         CS3	equ	00001000b
 0004 =         NUMCS	equ	4
 0004 =         SDSCS0	equ	CS2	; SCS for SDCard 0
 0008 =         SDSCS1	equ	CS3	; SCS for SDCard 1
 0002 =         NUMSD	equ	2
                
 0040 =         CMDST	equ	01000000b	; command start bits
                
 000D =         CR	equ	13
 000A =         LF	equ	10
                
                ; locations inside CID
 0000 =         CIDMFG	equ	0	; for 1
 0001 =         CIDOEM	equ	1	; for 2
 0003 =         CIDPRD	equ	3	; for 5
 0008 =         CIDREV	equ	8	; for 1
 0009 =         CIDSN	equ	9	; for 4
 000D =         CIDMDT	equ	13	; for 2 (xY YM)
                ; locations inside CSD
 0000 =         CSDVER	equ	0	; various, v2 indicator
 0007 =         CSDSIZ	equ	7	; for 3 (v2 only)
                
                	cseg
 0000 C30600    	jmp	start
                
 0003 0408      cstab:	db	SDSCS0,SDSCS1
 0005 05        retry:	db	5
                
 0006 312906    start:	lxi	sp,stack
 0009 3E04      	mvi	a,SDSCS0	; default
 000B 327C01    	sta	curcs
 000E 218022    	lxi	h,2280h	; NUL terminated
 0011 23        	inx	h	; skip length
                	; skip program name
 0012 7E        skp0:	mov	a,m
 0013 23        	inx	h
 0014 B7        	ora	a
 0015 CA2300    	jz	skp1
 0018 FE20      	cpi	' '
 001A C21200    	jnz	skp0
 001D CDFF01    	call	parcs	; curcs revised if needed
 0020 DA7601    	jc	error
                skp1:
 0023 F3        	di	; don't need/want interrupts
                	; waive 1mS delay... we are well past that...
 0024 CD5102    	call	run74	; must cycle >= 74 clocks
                
                	; CMD0 - enter SPI mode
 0027 217E01    	lxi	h,cmd0
 002A 1601      	mvi	d,1
 002C 1E01      	mvi	e,1	; turn off SCS
 002E CD7402    	call	sdcmd
 0031 DA6D01    	jc	fail
 0034 3A8401    	lda	cmd0+6	; R1
 0037 FE01      	cpi	00000001b	; IDLE bit set?
 0039 C26D01    	jnz	fail
 003C 218501    	lxi	h,cmd8
 003F 1605      	mvi	d,5
 0041 1E01      	mvi	e,1	; turn off SCS
 0043 CD7402    	call	sdcmd
 0046 DA6D01    	jc	fail
 0049 3A8B01    	lda	cmd8+6
 004C FE01      	cpi	00000001b	; no error, IDLE bit still set
 004E CA5B00    	jz	ok8
 0051 E604      	ani	0100b	; Illegal Command
 0053 CA6D01    	jz	fail	; must be some other error - fatal
                	; CMD8 not recognized, SD1 card...
 0056 3E00      	mvi	a,0
 0058 329801    	sta	acmd41+1
                ok8:
 005B 3E05      	mvi	a,5
 005D 320500    	sta	retry
                init:	; this could take a long time... don't flood console
 0060 219701    	lxi	h,acmd41
 0063 1601      	mvi	d,1
 0065 CD5A02    	call	doacmd
 0068 DA6D01    	jc	fail
 006B 3A9D01    	lda	acmd41+6
 006E FE00      	cpi	00000000b	; READY?
 0070 CA8500    	jz	init0
 0073 E67E      	ani	01111110b	; any errors?
 0075 CA6000    	jz	init
 0078 3A0500    	lda	retry
 007B 3D        	dcr	a
 007C 320500    	sta	retry
 007F C26000    	jnz	init
 0082 C36D01    	jmp	fail
                init0:	; done with init
                	; now try CMD58 if applicable
                	; CMD58 is listed "optional"...
 0085 219E01    	lxi	h,cmd58
 0088 1605      	mvi	d,5
 008A 1E01      	mvi	e,1	; turn off SCS
 008C CD7402    	call	sdcmd
                	; read CID...
 008F 21C301    	lxi	h,cmd10
 0092 1601      	mvi	d,1
 0094 1E00      	mvi	e,0	; leave SCS on
 0096 CD7402    	call	sdcmd
 0099 DA6D01    	jc	fail
 009C 3AC901    	lda	cmd10+6
 009F B7        	ora	a
 00A0 C2D200    	jnz	bad
 00A3 218905    	lxi	h,cid
 00A6 011001    	lxi	b,0110h	; 16 bytes, 1 loop
 00A9 CDA302    	call	sdblk	; turns off SCS
 00AC DACF00    	jc	badblk
                	; read CSD...
 00AF 21BC01    	lxi	h,cmd9
 00B2 1601      	mvi	d,1
 00B4 1E00      	mvi	e,0	; leave SCS on
 00B6 CD7402    	call	sdcmd
 00B9 DA6D01    	jc	fail
 00BC 3AC201    	lda	cmd9+6
 00BF B7        	ora	a
 00C0 C2D200    	jnz	bad
 00C3 219905    	lxi	h,csd
 00C6 011001    	lxi	b,0110h	; 16 bytes, 1 loop
 00C9 CDA302    	call	sdblk	; turns off SCS
 00CC D2D800    	jnc	done
 00CF CDCA01    badblk:	call	hexout
 00D2 AF        bad:	xra	a
 00D3 D341      	out	spi?ctl	; SCS off
 00D5 C36D01    	jmp	fail
                done:
 00D8 FB        	ei
 00D9 3A7D01    	lda	dmp
 00DC B7        	ora	a
 00DD CA1B01    	jz	nodmp
 00E0 3AA401    	lda	ocr	; actually, the response
 00E3 E604      	ani	0100b	; Illegal Command
 00E5 C2F700    	jnz	dmp0	; No OCR returned
 00E8 CD1B00    	call	crlf
 00EB 211104    	lxi	h,ocrmsg
 00EE CD4400    	call	msgout
 00F1 21A501    	lxi	h,ocr+1
 00F4 CD3505    	call	dmpline
                dmp0:
 00F7 CD1B00    	call	crlf
 00FA 211704    	lxi	h,cidmsg
 00FD CD4400    	call	msgout
 0100 218905    	lxi	h,cid
 0103 CD3505    	call	dmpline
 0106 CD1B00    	call	crlf
 0109 211D04    	lxi	h,csdmsg
 010C CD4400    	call	msgout
 010F 219905    	lxi	h,csd
 0112 CD3505    	call	dmpline
 0115 CD1B00    	call	crlf
 0118 C36801    	jmp	exit
                
                nodmp:
 011B CD1B00    	call	crlf
 011E 21DF03    	lxi	h,model
 0121 CD4400    	call	msgout
 0124 CDF202    	call	prver	; "SDv2.0"
 0127 CDDE01    	call	space
 012A 3E28      	mvi	a,'('
 012C CDEF01    	call	chrout
 012F 3A8905    	lda	cid+CIDMFG	; manufacturer ID
 0132 CDF904    	call	decout		; TODO: "(%d)"?
 0135 3E29      	mvi	a,')'
 0137 CDEF01    	call	chrout
 013A CDDE01    	call	space
 013D 218A05    	lxi	h,cid+CIDOEM
 0140 0602      	mvi	b,2
 0142 CDF501    	call	numout
 0145 CDDE01    	call	space
 0148 218C05    	lxi	h,cid+CIDPRD
 014B 0605      	mvi	b,5
 014D CDF501    	call	numout
 0150 CDDE01    	call	space
 0153 CDCD02    	call	prmdt
 0156 CD1B00    	call	crlf
 0159 CD5E03    	call	prsn
 015C CD1B00    	call	crlf
 015F CD4303    	call	prrev
 0162 CD1B00    	call	crlf
 0165 CD7303    	call	prcap	; incl CR/LF
                exit:
 0168 FB        	ei
 0169 2A1E00    	lhld	retmon
 016C E9        	pchl
                
 016D 214002    fail:	lxi	h,failms
 0170 CD4400    exit0:	call	msgout
 0173 C36801    	jmp	exit
                
 0176 212F02    error:	lxi	h,synerr
 0179 C37001    	jmp	exit0
                
 017C 04        curcs:	db	SDSCS0
 017D 00        dmp:	db	0
                
                ; command is always 6 bytes (?)
                ; From RomWBW:
                ;    AT LEAST ONE SD CARD IS KNOWN TO FAIL ANY COMMAND
                ;    WHERE THE CRC POSITION IS NOT $FF
                ; This explains the problems with "Samsung 32Pro",
                ; although that card only requires the end-command bit.
 017E 4000000000cmd0:	db	CMDST+0,0,0,0,0,95h
 0184 00        	db	0
 0185 48000001AAcmd8:	db	CMDST+8,0,0,01h,0aah,87h
 018B 0000000000	db	0,0,0,0,0
 0190 7700000000cmd55:	db	CMDST+55,0,0,0,0,1
 0196 00        	db	0
 0197 6940000000acmd41:	db	CMDST+41,40h,0,0,0,1
 019D 00        	db	0
 019E 7A00000000cmd58:	db	CMDST+58,0,0,0,0,1
 01A4 0000000000ocr:	db	0,0,0,0,0
 01A9 0000000000	db	0,0,0,0,0,0,0,0,0,0,0,0	; for dmpline
 01B5 5100000000cmd17:	db	CMDST+17,0,0,0,0,1
 01BB 00        	db	0
 01BC 4900000000cmd9:	db	CMDST+9,0,0,0,0,1	; SEND_CSD
 01C2 00        	db	0
 01C3 4A00000000cmd10:	db	CMDST+10,0,0,0,0,1	; SEND_CID
 01C9 00        	db	0
                
                hexout:
 01CA F5        	push	psw
 01CB 0F        	rrc
 01CC 0F        	rrc
 01CD 0F        	rrc
 01CE 0F        	rrc
 01CF CDD301    	call	hexdig
 01D2 F1        	pop	psw
                hexdig:
 01D3 E60F      	ani	0fh
 01D5 C690      	adi	90h
 01D7 27        	daa
 01D8 CE40      	aci	40h
 01DA 27        	daa
 01DB C3EF01    	jmp	chrout
                
 01DE 3E20      space:	mvi	a,' '
 01E0 C3EF01    	jmp	chrout
                
 01E3 3E2F      slash:	mvi	a,'/'
 01E5 C3EF01    	jmp	chrout
                
 01E8 3E2E      point:	mvi	a,'.'
 01EA C3EF01    	jmp	chrout
                
 01ED 3E22      quote:	mvi	a,'"'
                	;jmp	chrout
                
 01EF E5        chrout:	push	h
 01F0 2A2600    	lhld	conout
 01F3 E3        	xthl
 01F4 C9        	ret
                
                ; like message out, but num chrs in B (> 0)
 01F5 7E        numout:	mov	a,m
 01F6 23        	inx	h
 01F7 CDEF01    	call	chrout
 01FA 05        	dcr	b
 01FB C2F501    	jnz	numout
 01FE C9        	ret
                
                ; parse for "CS#" and update 'curcs'
                parcs:
 01FF 7E        par9:	mov	a,m
 0200 B7        	ora	a
 0201 C8        	rz
 0202 23        	inx	h
 0203 FE20      	cpi	' '
 0205 CAFF01    	jz	par9
 0208 FE30      	cpi	'0'
 020A D8        	rc
 020B FE32      	cpi	'0'+NUMSD
 020D D22202    	jnc	par0
                	; check for NUL?
 0210 D630      	sui	'0'
 0212 4F        	mov	c,a
 0213 0600      	mvi	b,0
 0215 EB        	xchg
 0216 210300    	lxi	h,cstab
 0219 09        	dad	b
 021A 7E        	mov	a,m
 021B 327C01    	sta	curcs
 021E EB        	xchg
 021F C3FF01    	jmp	par9
 0222 E65F      par0:	ani	01011111b
 0224 FE44      	cpi	'D'
 0226 C2FF01    	jnz	par9	; error?
 0229 327D01    	sta	dmp
 022C C3FF01    	jmp	par9
                
 022F 0D0A2A2A2Asynerr:	db	CR,LF,'*** syntax ***',0
 0240 0D0A2A2A2Afailms:	db	CR,LF,'*** failed ***',0
                
                ; run-out at least 74 clock cycles... with SCS off...
 0251 060A      run74:	mvi	b,10	; 80 cycles
 0253 DB40      run740:	in	spi?rd
 0255 05C25302  	dcr b ! jnz	run740
 0259 C9        	ret
                
                ; always turns off SCS
                doacmd:
 025A E5        	push	h
 025B D5        	push	d
 025C 219001    	lxi	h,cmd55
 025F 1601      	mvi	d,1
 0261 1E00      	mvi	e,0	; do not turn off SCS
 0263 CD7402    	call	sdcmd
                	; ignore results? CMD55 never gives error?
 0266 D1        	pop	d
 0267 E1        	pop	h
 0268 1E01      	mvi	e,1	; do turn off SCS
 026A CD7402    	call	sdcmd
 026D F5        	push	psw
                	; for some reason, this is required (at least for ACMD41)
                	; when certain cards (Flexon) are in-socket during power up.
                	; If the card is re-seated after power up, this is not needed.
                	; Unclear if this is a MT011 anomaly or universal.
 026E DB40      	in	spi?rd
 0270 DB40      	in	spi?rd
 0272 F1        	pop	psw
 0273 C9        	ret
                
                ; send (6 byte) command to SDCard, get response.
                ; HL=command+response buffer, D=response length
                ; return A=response code (00=success), HL=idle length, DE=gap length
                sdcmd:
 0274 3A7C01    	lda	curcs
 0277 D341      	out	spi?ctl	; SCS on
 0279 0E40      	mvi	c,spi?rd
                	; wait for idle
                	; TODO: timeout this loop
 027B E5        	push	h	; save command+response buffer
 027C DB40      sdcmd0:	in	spi?rd
 027E FEFF      	cpi	0ffh
 0280 C27C02    	jnz	sdcmd0
 0283 E1        	pop	h	; command buffer back
 0284 0606      	mvi	b,6
 0286 CD7E05    	call	outir
 0289 DB40      	in	spi?rd	; prime the pump
                	; TODO: timeout this loop
 028B DB40      sdcmd2:	in	spi?rd
 028D FEFF      	cpi	0ffh
 028F CA8B02    	jz	sdcmd2
 0292 42        	mov	b,d
 0293 77        	mov	m,a
 0294 23        	inx	h
 0295 05        	dcr	b
 0296 CA9C02    	jz	sdcmd4
 0299 CD7305    	call	inir	; rest of response
 029C 7B        sdcmd4:	mov	a,e	; SCS flag
 029D B7        	ora	a
 029E C8        	rz
 029F AF        	xra	a
 02A0 D341      	out	spi?ctl	; SCS off
 02A2 C9        	ret
                
                ; read a 512-byte data block, with packet header and CRC (ignored).
                ; READ command was already sent and responded to.
                ; HL=buffer, BC=length* (multiple of 256)
                ; return CY on error (A=error), DE=gap length
                sdblk:
 02A3 C5        	push	b
 02A4 3A7C01    	lda	curcs
 02A7 D341      	out	spi?ctl	; SCS on
 02A9 0E40      	mvi	c,spi?rd
                	; wait for packet header (or error)
                	; TODO: timeout this loop
 02AB DB40      sdblk0:	in	spi?rd
 02AD FEFF      	cpi	0ffh
 02AF CAAB02    	jz	sdblk0
 02B2 D1        	pop	d		; length to DE
 02B3 FEFE      	cpi	11111110b	; data start
 02B5 37        	stc	; else must be error
 02B6 C2C602    	jnz	sdblk2
 02B9 43        	mov	b,e
 02BA CD7305    sdblk3:	call	inir
 02BD 15        	dcr	d
 02BE C2BA02    	jnz	sdblk3
 02C1 DB40      	in	spi?rd	; CRC 1
 02C3 DB40      	in	spi?rd	; CRC 2
 02C5 AF        	xra	a	; NC
 02C6 F5        sdblk2:	push	psw
 02C7 AF        	xra	a
 02C8 D341      	out	spi?ctl	; SCS off
 02CA F1        	pop	psw
 02CB C9        	ret
                
                procr:	; ocr: 00 C0 FF 80 =? 80FFC000 = pwrup, 2.7-3.6V
 02CC C9        	ret
                
                prmdt:
 02CD 219605    	lxi	h,cid+CIDMDT
 02D0 56        	mov	d,m	; +13	; MDT hi
 02D1 23        	inx	h
 02D2 5E        	mov	e,m	; +14	; MDT lo
 02D3 D5        	push	d
 02D4 7B        	mov	a,e
 02D5 E60F      	ani	0fh
 02D7 CDF404    	call	dec02
 02DA CDE301    	call	slash
 02DD E1        	pop	h
 02DE 29        	dad	h
 02DF 29        	dad	h
 02E0 29        	dad	h
 02E1 29        	dad	h	; shift year into H
 02E2 5C        	mov	e,h
 02E3 1600      	mvi	d,0
 02E5 21D007    	lxi	h,2000
 02E8 19        	dad	d
 02E9 CDC804    	call	dec16
 02EC C9        	ret
                
                prsdx:
 02ED 3E53      	mvi	a,'S'
 02EF CDEF01    	call	chrout
                
                ; Print SD version from CSD, preceded by SDSC/SDHC/SDXC
                ; return A=version bits (11000000b)
                prver:
 02F2 3E53      	mvi	a,'S'
 02F4 CDEF01    	call	chrout
 02F7 3E44      	mvi	a,'D'
 02F9 CDEF01    	call	chrout
 02FC 3AA501    	lda	cmd58+7
 02FF E640      	ani	40h
 0301 3E53      	mvi	a,'S'
 0303 CA1903    	jz	v00
                	; test for SDHC or SDXC (C_SIZE > xxx)
 0306 2AA105    	lhld	csd+CSDSIZ+1
 0309 110100    	lxi	d,1
 030C 19        	dad	d
 030D 3AA005    	lda	csd+CSDSIZ
 0310 CE00      	aci	0
 0312 3E48      	mvi	a,'H'
 0314 CA1903    	jz	v00
 0317 3E58      	mvi	a,'X'
 0319 CDEF01    v00:	call	chrout
 031C 3E43      	mvi	a,'C'
 031E CDEF01    	call	chrout
 0321 CDDE01    	call	space
 0324 3E76      	mvi	a,'v'
 0326 CDEF01    	call	chrout
 0329 3A9905    	lda	csd+CSDVER
 032C E6C0      	ani	11000000b	; CSD_STRUCTURE
 032E F5        	push	psw
 032F 3E31      	mvi	a,'1'
 0331 CA3603    	jz	v10
 0334 3E32      	mvi	a,'2'
 0336 CDEF01    v10:	call	chrout
 0339 CDE801    	call	point
 033C 3E30      	mvi	a,'0'
 033E CDEF01    	call	chrout
 0341 F1        	pop	psw
 0342 C9        	ret
                
                prrev:
 0343 21ED03    	lxi	h,rev
 0346 CD4400    	call	msgout
 0349 3A9105    	lda	cid+CIDREV ; BCD "n.m"
 034C F5        	push	psw
 034D 07        	rlc
 034E 07        	rlc
 034F 07        	rlc
 0350 07        	rlc
 0351 CDD301    	call	hexdig
 0354 3E2E      	mvi	a,'.'
 0356 CDEF01    	call	chrout
 0359 F1        	pop	psw
 035A CDD301    	call	hexdig
 035D C9        	ret
                
                ; print s/n from CID
                prsn:
 035E 21E703    	lxi	h,serial
 0361 CD4400    	call	msgout
 0364 219205    	lxi	h,cid+CIDSN
 0367 0604      	mvi	b,4
 0369 7E        sn0:	mov	a,m
 036A 23        	inx	h
 036B CDCA01    	call	hexout
 036E 05        	dcr	b
 036F C26903    	jnz	sn0
 0372 C9        	ret
                
                ; print capacity from CSD
                prcap:
 0373 21F303    	lxi	h,cap
 0376 CD4400    	call	msgout
 0379 3A9905    	lda	csd+CSDVER
 037C E6C0      	ani	11000000b	; CSD_STRUCTURE
 037E CAA703    	jz	prcap1		; use v1 CSD structure
 0381 21A005    	lxi	h,csd+CSDSIZ
 0384 46        	mov	b,m	; +7	; C_SIZE << 10
 0385 23        	inx	h
 0386 4E        	mov	c,m	; +8
 0387 23        	inx	h
 0388 56        	mov	d,m	; +9
 0389 1E00      	mvi	e,0	;	BC:DE is << 8, need two more
 038B 3E01      	mvi	a,1	; C_SIZE+1
 038D 82        	add	d
 038E 57        	mov	d,a
 038F 3E00      	mvi	a,0
 0391 89        	adc	c
 0392 4F        	mov	c,a
 0393 3E00      	mvi	a,0
 0395 88        	adc	b
 0396 47        	mov	b,a
 0397 CD3204    	call	shl32
 039A CD3204    	call	shl32
 039D CD3F04    prc0:	call	dec32
 03A0 21FE03    	lxi	h,blks	; incl. CR/LF
 03A3 CD4400    	call	msgout
 03A6 C9        	ret
                
                prcap1:
                	; TODO: compute CSD v1 capacity - yuk.
                	; MULT = CSD[49:47] ((csd[10] & 0x80) >> 7) | ((csd[9] & 0x03) << 1)
                	; C_SIZE = CSD[76:62] (csd[6] & 0x03) << 10) | (csd[7] << 2) | ((csd[8] & 0xc0) >> 6)
                	; CAP = (C_SIZE + 1) * MULT
 03A7 3A9F05    	lda	csd+6
 03AA E603      	ani	3
 03AC 67        	mov	h,a	; << 8
 03AD 3AA005    	lda	csd+7
 03B0 B7        	ora	a
 03B1 17        	ral
 03B2 6F        	mov	l,a
 03B3 7C        	mov	a,h
 03B4 17        	ral
 03B5 67        	mov	h,a
 03B6 7D        	mov	a,l
 03B7 B7        	ora	a
 03B8 17        	ral
 03B9 6F        	mov	l,a
 03BA 7C        	mov	a,h
 03BB 17        	ral
 03BC 67        	mov	h,a
 03BD 3AA105    	lda	csd+8
 03C0 07        	rlc
 03C1 07        	rlc
 03C2 E603      	ani	3
 03C4 B5        	ora	l
 03C5 6F        	mov	l,a	; HL = CSD[73:62]
 03C6 23        	inx	h	; HL = C_SIZE+1
 03C7 3AA205    	lda	csd+9
 03CA E603      	ani	3
 03CC 5F        	mov	e,a
 03CD 3AA305    	lda	csd+10
 03D0 17        	ral
 03D1 7B        	mov	a,e
 03D2 17        	ral		; A = CSD[49:47] = C_SIZE_MULT
 03D3 C602      	adi	2	; C_SIZE_MULT+2
 03D5 EB        	xchg		;
 03D6 010000    	lxi	b,0	; BC:DE = C_SIZE+1, A = C_SIZE_MULT+2
 03D9 CD2604    	call	shl32n	; BC:DE <<= A
 03DC C39D03    	jmp	prc0
                
 03DF 4D6F64656Cmodel:	db	'Model: ',0
 03E7 532F4E3A20serial:	db	'S/N: ',0
 03ED 5265763A20rev:	db	'Rev: ',0
 03F3 4361706163cap:	db	'Capacity: ',0
 03FE 20626C6F63blks:	db	' blocks(sectors)',CR,LF,0
 0411 4F43523A20ocrmsg:	db	'OCR: ',0
 0417 4349443A20cidmsg:	db	'CID: ',0
 041D 4353443A20csdmsg:	db	'CSD: ',0
 0423 202000    spcs:	db	'  ',0
                
                ; BC:DE <<= A
 0426 B7        shl32n:	ora	a	; just in case it's zero
 0427 C8        	rz
                shl32x:
 0428 F5        	push	psw
 0429 CD3204    	call	shl32
 042C F1        	pop	psw
 042D 3D        	dcr	a
 042E C22804    	jnz	shl32x
 0431 C9        	ret
                
                ; BC:DE <<= 1
                shl32:
 0432 7B        	mov	a,e
 0433 87        	add	a
 0434 5F        	mov	e,a
 0435 7A        	mov	a,d
 0436 17        	ral
 0437 57        	mov	d,a
 0438 79        	mov	a,c
 0439 17        	ral
 043A 4F        	mov	c,a
 043B 78        	mov	a,b
 043C 17        	ral
 043D 47        	mov	b,a
 043E C9        	ret
                
                ; print number in BC:DE, leading zero suppr
                dec32:
 043F 2E00      	mvi	l,0
 0441 2609      	mvi	h,9
 0443 E5        	push	h	; control vars on stack
 0444 217304    	lxi	h,mlt10
 0447 AF        dd1:	xra	a
 0448 CDAC04    dd0:	call	sub32
 044B 3C        	inr	a
 044C D24804    	jnc	dd0
 044F CD9704    	call	add32
 0452 E3        	xthl	; control vars in HL
 0453 3D        	dcr	a
 0454 C25C04    	jnz	dd2
 0457 2D        	dcr	l
 0458 2C        	inr	l
 0459 CA6304    	jz	dd3
 045C 2E01      dd2:	mvi	l,1
 045E C630      	adi	'0'
 0460 CDEF01    	call	chrout
                dd3:
 0463 25        	dcr	h
 0464 E3        	xthl	; control vars back on stack
 0465 23        	inx	h
 0466 23        	inx	h
 0467 23        	inx	h
 0468 23        	inx	h
 0469 C24704    	jnz	dd1
 046C E1        	pop	h
 046D 3E30      	mvi	a,'0'
 046F 83        	add	e
 0470 C3EF01    	jmp	chrout
                
                mlt10:
 0473 3B9ACA00  	db	3Bh,9Ah,0CAh,00h	;  1,000,000,000
 0477 05F5E100  	db	05h,0F5h,0E1h,00h	;    100,000,000
 047B 00989680  	db	00h,98h,96h,80h		;     10,000,000
 047F 000F4240  	db	00h,0Fh,42h,40h		;      1,000,000
 0483 000186A0  	db	00h,01h,86h,0A0h	;        100,000
 0487 00002710  	db	00h,00h,27h,10h		;         10,000
 048B 000003E8  	db	00h,00h,03h,0E8h	;          1,000
 048F 00000064  	db	00h,00h,00h,64h		;            100
 0493 0000000A  	db	00h,00h,00h,0ah		;             10
                
                ; BC:DE += (mlt10[HL])
 0497 F5        add32:	push	psw
 0498 23        	inx	h
 0499 23        	inx	h
 049A 23        	inx	h
 049B 7B        	mov	a,e
 049C 86        	add	m
 049D 5F        	mov	e,a
 049E 2B        	dcx	h
 049F 7A        	mov	a,d
 04A0 8E        	adc	m
 04A1 57        	mov	d,a
 04A2 2B        	dcx	h
 04A3 79        	mov	a,c
 04A4 8E        	adc	m
 04A5 4F        	mov	c,a
 04A6 2B        	dcx	h
 04A7 78        	mov	a,b
 04A8 8E        	adc	m
 04A9 47        	mov	b,a
 04AA F1        	pop	psw
 04AB C9        	ret	; CY ignored
                
                ; BC:DE += (mlt10[HL])
 04AC F5        sub32:	push	psw
 04AD 23        	inx	h
 04AE 23        	inx	h
 04AF 23        	inx	h
 04B0 7B        	mov	a,e
 04B1 96        	sub	m
 04B2 5F        	mov	e,a
 04B3 2B        	dcx	h
 04B4 7A        	mov	a,d
 04B5 9E        	sbb	m
 04B6 57        	mov	d,a
 04B7 2B        	dcx	h
 04B8 79        	mov	a,c
 04B9 9E        	sbb	m
 04BA 4F        	mov	c,a
 04BB 2B        	dcx	h
 04BC 78        	mov	a,b
 04BD 9E        	sbb	m
 04BE 47        	mov	b,a
                	; CY = borrow... must preserve
 04BF DAC504    	jc	sb0
 04C2 F1        	pop	psw
 04C3 B7        	ora	a	; NC
 04C4 C9        	ret
 04C5 F1        sb0:	pop	psw
 04C6 37        	stc
 04C7 C9        	ret
                
                ; print number in HL, 0-9999
                dec16:
 04C8 11E803    	lxi	d,1000
 04CB CDE104    	call	div16
 04CE 116400    	lxi	d,100
 04D1 CDE104    	call	div16
 04D4 110A00    	lxi	d,10
 04D7 CDE104    	call	div16
 04DA 7D        	mov	a,l
 04DB C630      	adi	'0'
 04DD CDEF01    	call	chrout
 04E0 C9        	ret
                
 04E1 0600      div16:	mvi	b,0
 04E3 B7        dv0:	ora	a
 04E4 CD2505    	call	dsbc
 04E7 04        	inr	b
 04E8 D2E304    	jnc	dv0
 04EB 19        	dad	d
 04EC 05        	dcr	b
 04ED 3E30      	mvi	a,'0'
 04EF 80        	add	b
 04F0 CDEF01    	call	chrout
 04F3 C9        	ret
                
                ; print decimal 00-99
                dec02:
 04F4 0E01      	mvi	c,1
 04F6 C30005    	jmp	dec00
                ; A=number to print, 0-255 (leading zero suppr)
                ; destroys B, C, D, E (and A)
                decout:
 04F9 0E00      	mvi	c,0
 04FB 1664      	mvi	d,100
 04FD CD0B05    	call	divide
 0500 160A      dec00:	mvi	d,10
 0502 CD0B05    	call	divide
 0505 C630      	adi	'0'
 0507 CDEF01    	call	chrout
 050A C9        	ret
                
 050B 1E00      divide:	mvi	e,0
 050D 92        div0:	sub	d
 050E 1C        	inr	e
 050F D20D05    	jnc	div0
 0512 82        	add	d
 0513 1D        	dcr	e
 0514 C21A05    	jnz	div1
 0517 0D        	dcr	c
 0518 0C        	inr	c
 0519 C8        	rz
 051A 0E01      div1:	mvi	c,1
 051C F5        	push	psw	; remainder
 051D 3E30      	mvi	a,'0'
 051F 83        	add	e
 0520 CDEF01    	call	chrout
 0523 F1        	pop	psw	; remainder
 0524 C9        	ret
                
 0525 F5        dsbc:	push	psw
 0526 7D        	mov	a,l
 0527 9B        	sbb	e
 0528 6F        	mov	l,a
 0529 7C        	mov	a,h
 052A 9A        	sbb	d
 052B 67        	mov	h,a
 052C DA3205    	jc	dsbc0
 052F F1        	pop	psw
 0530 B7        	ora	a
 0531 C9        	ret
 0532 F1        dsbc0:	pop	psw
 0533 37        	stc
 0534 C9        	ret
                
                ; Dump 16 bytes at HL
                dmpline:
 0535 D5        	push	d
 0536 E5        	push	h
                	; blank space provided by dmphex
 0537 E1        	pop	h
 0538 E5        	push	h
 0539 CD4A05    	call	dmphex
 053C 212304    	lxi	h,spcs
 053F CD4400    	call	msgout
 0542 E1        	pop	h
 0543 E5        	push	h
 0544 CD5B05    	call	dmpchr
 0547 E1        	pop	h
 0548 D1        	pop	d
 0549 C9        	ret
                
                dmphex:
 054A 0610      	mvi	b,16
 054C 3E20      dh0:	mvi	a,' '
 054E CDEF01    	call	chrout
 0551 7E        	mov	a,m
 0552 CDCA01    	call	hexout
 0555 23        	inx	h
 0556 05C24C05  	dcr b ! jnz	dh0
 055A C9        	ret
                
                dmpchr:
 055B 0610      	mvi	b,16
 055D 7E        dc0:	mov	a,m
 055E FE20      	cpi	' '
 0560 DA6805    	jc	dc1
 0563 FE7F      	cpi	'~'+1
 0565 DA6A05    	jc	dc2
 0568 3E2E      dc1:	mvi	a,'.'
 056A CDEF01    dc2:	call	chrout
 056D 23        	inx	h
 056E 05C25D05  	dcr b ! jnz	dc0
 0572 C9        	ret
                
 0573 F5        inir:	push	psw
 0574 DB40      inir0:	in	spi?rd
 0576 77        	mov	m,a
 0577 23        	inx	h
 0578 05        	dcr	b
 0579 C27405    	jnz	inir0
 057C F1        	pop	psw
 057D C9        	ret
                
 057E F5        outir:	push	psw
 057F 7E        outir1:	mov	a,m
 0580 D340      	out	spi?wr
 0582 23        	inx	h
 0583 05        	dcr	b
 0584 C27F05    	jnz	outir1
 0587 F1        	pop	psw
 0588 C9        	ret
                
 0589           cid:	ds	16
 0599           csd:	ds	16
                
 05A9           	ds	128
 0629           stack:	ds	0
                
 0629           	end
