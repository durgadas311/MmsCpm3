                ; Stand-alone program to read two sectors from Z67 and dump in hex/ascii
                
 0100 =         DUMPZ	equ	256	; 128, 256, 512
 0000 =         TEST	equ	0	; use test data, don't read CF
                
                	maclib	core
                
 0080 =         CF$BA	equ	80h		; CF base port
 0088 =         CF$DA	equ	CF$BA+8	; CF data port
 0089 =         CF$ER	equ	CF$BA+9	; CF error register (read)
 0089 =         CF$FR	equ	CF$BA+9	; CF feature register (write)
 008A =         CF$SC	equ	CF$BA+10	; CF sector count
 008B =         CF$SE	equ	CF$BA+11	; CF sector number
 008C =         CF$CL	equ	CF$BA+12	; CF cylinder low
 008D =         CF$CH	equ	CF$BA+13	; CF cylinder high
 008E =         CF$DH	equ	CF$BA+14	; CF drive/head
 008F =         CF$CS	equ	CF$BA+15	; CF command/status
                
 00EF =         CMD$FEA	equ	0efh	; Set Features command
 00EC =         CMD$IDD	equ	0ech	; Identify Device
                
 0001 =         F$8BIT	equ	001h	; enable 8-bit transfer
 0082 =         F$NOWC	equ	082h	; disable write-cache
                
 000D =         CR	equ	13
 000A =         LF	equ	10
                
                ; locations in CF ID buffer
 0002 =         DEFCYL	equ	1 shl 1
 0006 =         DEFHDS	equ	3 shl 1
 000C =         DEFSPT	equ	6 shl 1
 000E =         DEFCAP	equ	7 shl 1	; double-word
 0036 =         MODEL	equ	27 shl 1
 0014 =         MODELZ	equ	40 shr 1
 0014 =         SN	equ	10 shl 1
 000A =         SNZ	equ	20 shr 1
 002E =         FWREV	equ	23 shl 1
 0004 =         FWREVZ	equ	8 shr 1
                
                	cseg
                start:
 0000 319103    	lxi	sp,stack
                	; must scan past command name...
 0003 218022    	lxi	h,2280h
 0006 46        	mov	b,m	; len
 0007 23        	inx	h
 0008 7E        skipb:	mov	a,m
 0009 23        	inx	h
 000A B7        	ora	a
 000B CA3300    	jz	skp1
 000E FE20      	cpi	' '
 0010 C20800    	jnz	skipb
                
 0013 7E        skp0:	mov	a,m
 0014 23        	inx	h
 0015 B7        	ora	a
 0016 CA3300    	jz	skp1
 0019 FE31      	cpi	'1'
 001B CA2B00    	jz	skp2
 001E E65F      	ani	01011111b
 0020 FE44      	cpi	'D'
 0022 C21300    	jnz	skp0
 0025 32A902    	sta	dmp
 0028 C31300    	jmp	skp0
 002B D630      skp2:	sui	'0'
 002D 32AA02    	sta	lun
 0030 C31300    	jmp	skp0
                skp1:
                if not TEST
                	; TODO: get LUN from command buffer...
 0033 3AAA02    	lda	lun
 0036 C601      	adi	1	; 01b/10b
 0038 D380      	out	CF$BA	; select CF card
 003A AF        	xra	a
 003B D389      	out	CF$FR	; needed after power-on?
                	; select 8-bit mode
 003D 3E01      	mvi	a,F$8BIT
 003F D389      	out	CF$FR
 0041 3EEF      	mvi	a,CMD$FEA
 0043 D38F      	out	CF$CS
 0045 CD6F02    	call	waitcf
 0048 DA0401    	jc	fail
                	; disable write-cache
 004B 3E82      	mvi	a,F$NOWC
 004D D389      	out	CF$FR
 004F 3EEF      	mvi	a,CMD$FEA
 0051 D38F      	out	CF$CS
 0053 CD6F02    	call	waitcf
 0056 DA0401    	jc	fail
 0059 AF        	xra	a
 005A D38E      	out	CF$DH	; LBA 27:4, drive 0, LBA mode
 005C 3EEC      	mvi	a,CMD$IDD
 005E D38F      	out	CF$CS
 0060 219103    	lxi	h,buffer
 0063 0E88      	mvi	c,CF$DA
 0065 0600      	mvi	b,0	; should always be 0 after inir
                bcf0:
 0067 CD6F02    	call	waitcf
 006A DA0401    	jc	fail
 006D E608      	ani	1000b	; DRQ
 006F CA6700    	jz	bcf0
 0072 CD9C02    	call	inir	; 256 bytes
 0075 CD9C02    	call	inir	; 512 bytes
 0078 AF        	xra	a
 0079 D380      	out	CF$BA	; deselect drive
                endif
 007B CD1B00    	call	crlf
                ; Now dump data...
                	; in all cases, dump 512 bytes.
 007E 3AA902    	lda	dmp
 0081 B7        	ora	a
 0082 CA9100    	jz	nodump
 0085 219103    	lxi	h,buffer
 0088 110001    	lxi	d,DUMPZ
 008B CD1D01    	call	dump
 008E C30001    	jmp	exit
                nodump:
 0091 21AB02    	lxi	h,modmsg
 0094 CD4400    	call	msgout
 0097 21C703    	lxi	h,buffer+MODEL
 009A 0614      	mvi	b,MODELZ
 009C CD0D01    	call	string
 009F CD1B00    	call	crlf
 00A2 21B302    	lxi	h,snmsg
 00A5 CD4400    	call	msgout
 00A8 21A503    	lxi	h,buffer+SN
 00AB 060A      	mvi	b,SNZ
 00AD CD0D01    	call	string
 00B0 CD1B00    	call	crlf
 00B3 21B902    	lxi	h,fwrmsg
 00B6 CD4400    	call	msgout
 00B9 21BF03    	lxi	h,buffer+FWREV
 00BC 0604      	mvi	b,FWREVZ
 00BE CD0D01    	call	string
 00C1 CD1B00    	call	crlf
 00C4 21BF02    	lxi	h,cylmsg
 00C7 CD4400    	call	msgout
 00CA 219303    	lxi	h,buffer+DEFCYL
 00CD CD9C01    	call	decihl
 00D0 21CB02    	lxi	h,hdsmsg
 00D3 CD4400    	call	msgout
 00D6 219703    	lxi	h,buffer+DEFHDS
 00D9 CD9C01    	call	decihl
 00DC 21D502    	lxi	h,sptmsg
 00DF CD4400    	call	msgout
 00E2 219D03    	lxi	h,buffer+DEFSPT
 00E5 CD9C01    	call	decihl
 00E8 CD1B00    	call	crlf
 00EB 21E102    	lxi	h,capmsg
 00EE CD4400    	call	msgout
 00F1 219F03    	lxi	h,buffer+DEFCAP
 00F4 CDDF01    	call	d32ihl
 00F7 21EC02    	lxi	h,blkmsg
 00FA CD4400    	call	msgout
 00FD CD1B00    	call	crlf
                exit:
 0100 2A1E00    	lhld	retmon
 0103 E9        	pchl
                
                fail:
 0104 21FD02    	lxi	h,errmsg
 0107 CD4400    	call	msgout
 010A C30001    	jmp	exit
                
                ; HL=buf, B=len in words
                string:
 010D 4E        	mov	c,m
 010E 23        	inx	h
 010F 7E        	mov	a,m
 0110 23        	inx	h
 0111 CD9601    	call	chrout
 0114 79        	mov	a,c
 0115 CD9601    	call	chrout
 0118 05        	dcr	b
 0119 C20D01    	jnz	string
 011C C9        	ret
                
                ; HL=buffer, DE=length (multiple of 16)
                dump:
 011D CD3301    	call	dmpline
 0120 CD1B00    	call	crlf
 0123 011000    	lxi	b,16
 0126 09        	dad	b
 0127 EB        	xchg
 0128 B7        	ora	a
 0129 CD9502    	call	dsbcb
 012C EB        	xchg
 012D 7A        	mov	a,d
 012E B3        	ora	e
 012F C21D01    	jnz	dump
 0132 C9        	ret
                
                ; Dump 16 bytes at HL
                dmpline:
 0133 D5        	push	d
 0134 E5        	push	h
                	; yuk... need offset, not address...
 0135 119103    	lxi	d,buffer
 0138 B7        	ora	a
 0139 CD8E02    	call	dsbcd
 013C CD8001    	call	hexwrd
 013F 3E3A      	mvi	a,':'
 0141 CD9601    	call	chrout
                	; blank space provided by dmphex
 0144 E1        	pop	h
 0145 E5        	push	h
 0146 CD5701    	call	dmphex
 0149 218902    	lxi	h,spcs
 014C CD4400    	call	msgout
 014F E1        	pop	h
 0150 E5        	push	h
 0151 CD6801    	call	dmpchr
 0154 E1        	pop	h
 0155 D1        	pop	d
 0156 C9        	ret
                
                dmphex:
 0157 0610      	mvi	b,16
 0159 3E20      dh0:	mvi	a,' '
 015B CD9601    	call	chrout
 015E 7E        	mov	a,m
 015F CD8501    	call	hexout
 0162 23        	inx	h
 0163 05C25901  	dcr b ! jnz	dh0
 0167 C9        	ret
                
                dmpchr:
 0168 0610      	mvi	b,16
 016A 7E        dc0:	mov	a,m
 016B FE20      	cpi	' '
 016D DA7501    	jc	dc1
 0170 FE7F      	cpi	'~'+1
 0172 DA7701    	jc	dc2
 0175 3E2E      dc1:	mvi	a,'.'
 0177 CD9601    dc2:	call	chrout
 017A 23        	inx	h
 017B 05C26A01  	dcr b ! jnz	dc0
 017F C9        	ret
                
                ; HL=word
 0180 7C        hexwrd:	mov	a,h
 0181 CD8501    	call	hexout
 0184 7D        	mov	a,l
 0185 F5        hexout:	push	psw
 0186 07        	rlc
 0187 07        	rlc
 0188 07        	rlc
 0189 07        	rlc
 018A CD8E01    	call	hexdig
 018D F1        	pop	psw
 018E E60F      hexdig:	ani	0fh
 0190 C690      	adi	90h
 0192 27        	daa
 0193 CE40      	aci	40h
 0195 27        	daa
 0196 E5        chrout:	push	h
 0197 2A2600    	lhld	conout
 019A E3        	xthl
 019B C9        	ret
                
                
                ; load (HL) into HL and print
                decihl:
 019C 7E        	mov	a,m
 019D 23        	inx	h
 019E 66        	mov	h,m
 019F 6F        	mov	l,a
                ; Print out HL in decimal
                decwrd:
 01A0 0E00      	mvi	c,0	; leading zero suppression
                dec16:
 01A2 111027    	lxi	d,10000
 01A5 CDC101    	call	div16
 01A8 11E803    	lxi	d,1000
 01AB CDC101    	call	div16
 01AE 116400    	lxi	d,100
 01B1 CDC101    	call	div16
 01B4 110A00    	lxi	d,10
 01B7 CDC101    	call	div16
 01BA 7D        	mov	a,l
 01BB C630      	adi	'0'
 01BD CD9601    	call	chrout
 01C0 C9        	ret
                
 01C1 0600      div16:	mvi	b,0
 01C3 B7        dv0:	ora	a
 01C4 CD8E02    	call	dsbcd
 01C7 04        	inr	b
 01C8 D2C301    	jnc	dv0
 01CB 19        	dad	d
 01CC 05        	dcr	b
 01CD C2D601    	jnz	dv1
 01D0 79        	mov	a,c
 01D1 B7        	ora	a
 01D2 C2D601    	jnz	dv1
 01D5 C9        	ret
 01D6 0E01      dv1:	mvi	c,1
 01D8 3E30      	mvi	a,'0'
 01DA 80        	add	b
 01DB CD9601    	call	chrout
 01DE C9        	ret
                
                ; HL = (int32) - MSW, LSW, little-endian words
                d32ihl:
 01DF 4E        	mov	c,m
 01E0 23        	inx	h
 01E1 46        	mov	b,m
 01E2 23        	inx	h
 01E3 5E        	mov	e,m
 01E4 23        	inx	h
 01E5 56        	mov	d,m
                ; print number in BC:DE
                dec32:
 01E6 2E00      	mvi	l,0
 01E8 2609      	mvi	h,9
 01EA E5        	push	h	; control vars on stack
 01EB 211A02    	lxi	h,mlt10
 01EE AF        dd1:	xra	a
 01EF CD5302    dd0:	call	sub32
 01F2 3C        	inr	a
 01F3 D2EF01    	jnc	dd0
 01F6 CD3E02    	call	add32
 01F9 E3        	xthl	; control vars in HL
 01FA 3D        	dcr	a
 01FB C20302    	jnz	dd2
 01FE 2D        	dcr	l
 01FF 2C        	inr	l
 0200 CA0A02    	jz	dd3
 0203 2E01      dd2:	mvi	l,1
 0205 C630      	adi	'0'
 0207 CD9601    	call	chrout
                dd3:
 020A 25        	dcr	h
 020B E3        	xthl	; control vars back on stack
 020C 23        	inx	h
 020D 23        	inx	h
 020E 23        	inx	h
 020F 23        	inx	h
 0210 C2EE01    	jnz	dd1
 0213 E1        	pop	h
 0214 3E30      	mvi	a,'0'
 0216 83        	add	e
 0217 C39601    	jmp	chrout
                
                mlt10:
 021A 3B9ACA00  	db	3Bh,9Ah,0CAh,00h	;  1,000,000,000
 021E 05F5E100  	db	05h,0F5h,0E1h,00h	;    100,000,000
 0222 00989680  	db	00h,98h,96h,80h		;     10,000,000
 0226 000F4240  	db	00h,0Fh,42h,40h		;      1,000,000
 022A 000186A0  	db	00h,01h,86h,0A0h	;        100,000
 022E 00002710  	db	00h,00h,27h,10h		;         10,000
 0232 000003E8  	db	00h,00h,03h,0E8h	;          1,000
 0236 00000064  	db	00h,00h,00h,64h		;            100
 023A 0000000A  	db	00h,00h,00h,0ah		;             10
                
                ; BC:DE += (mlt10[HL])
 023E F5        add32:	push	psw
 023F 23        	inx	h
 0240 23        	inx	h
 0241 23        	inx	h
 0242 7B        	mov	a,e
 0243 86        	add	m
 0244 5F        	mov	e,a
 0245 2B        	dcx	h
 0246 7A        	mov	a,d
 0247 8E        	adc	m
 0248 57        	mov	d,a
 0249 2B        	dcx	h
 024A 79        	mov	a,c
 024B 8E        	adc	m
 024C 4F        	mov	c,a
 024D 2B        	dcx	h
 024E 78        	mov	a,b
 024F 8E        	adc	m
 0250 47        	mov	b,a
 0251 F1        	pop	psw
 0252 C9        	ret	; CY ignored
                
                ; BC:DE += (mlt10[HL])
 0253 F5        sub32:	push	psw
 0254 23        	inx	h
 0255 23        	inx	h
 0256 23        	inx	h
 0257 7B        	mov	a,e
 0258 96        	sub	m
 0259 5F        	mov	e,a
 025A 2B        	dcx	h
 025B 7A        	mov	a,d
 025C 9E        	sbb	m
 025D 57        	mov	d,a
 025E 2B        	dcx	h
 025F 79        	mov	a,c
 0260 9E        	sbb	m
 0261 4F        	mov	c,a
 0262 2B        	dcx	h
 0263 78        	mov	a,b
 0264 9E        	sbb	m
 0265 47        	mov	b,a
                	; CY = borrow... must preserve
 0266 DA6C02    	jc	sb0
 0269 F1        	pop	psw
 026A B7        	ora	a	; NC
 026B C9        	ret
 026C F1        sb0:	pop	psw
 026D 37        	stc
 026E C9        	ret
                
                ; Returns A=CF status register byte, or CY for error
                ; trashes D, must preserve HL, BC, E
                waitcf:
 026F DB8F      	in	CF$CS
 0271 57        	mov	d,a
 0272 B7        	ora	a
 0273 FA6F02    	jm	waitcf	; busy
 0276 3E01      	mvi	a,1	; error
 0278 A2        	ana	d
 0279 C28402    	jnz	cferr
 027C 3E40      	mvi	a,01000000b	; ready
 027E A2        	ana	d	; NC
 027F CA8402    	jz	cferr
 0282 7A        	mov	a,d
 0283 C9        	ret
                
                cferr:
 0284 AF        	xra	a
 0285 D380      	out	CF$BA	; deselect drive
 0287 37        	stc
 0288 C9        	ret
                
 0289 2020202000spcs:	db	'    ',0
                
                ; HL = HL - DE - CY
 028E 7D        dsbcd:	mov	a,l
 028F 9B        	sbb	e
 0290 6F        	mov	l,a
 0291 7C        	mov	a,h
 0292 9A        	sbb	d
 0293 67        	mov	h,a
 0294 C9        	ret
 0295 7D        dsbcb:	mov	a,l
 0296 99        	sbb	c
 0297 6F        	mov	l,a
 0298 7C        	mov	a,h
 0299 98        	sbb	b
 029A 67        	mov	h,a
 029B C9        	ret
                
 029C 79        inir:	mov	a,c
 029D 32A102    	sta	inir0+1
 02A0 DB00      inir0:	in	0
 02A2 77        	mov	m,a
 02A3 23        	inx	h
 02A4 05        	dcr	b
 02A5 C2A002    	jnz	inir0
 02A8 C9        	ret
                
 02A9 00        dmp:	db	0	; 'D' if dump hex vs. print info
 02AA 00        lun:	db	0
 02AB 4D6F64656Cmodmsg:	db	'Model: ',0
 02B3 532F4E3A20snmsg:	db	'S/N: ',0
 02B9 5265763A20fwrmsg:	db	'Rev: ',0
 02BF 43796C696Ecylmsg:	db	'Cylinders: ',0
 02CB 2C20486561hdsmsg:	db	', Heads: ',0
 02D5 2C20536563sptmsg:	db	', Sectors: ',0
 02E1 4361706163capmsg:	db	'Capacity: ',0
 02EC 20626C6F63blkmsg:	db	' blocks(sectors)',0
 02FD 434620636Ferrmsg:	db	'CF command failed',CR,LF,0
                
 0311           	ds	128
 0391           stack:	ds	0
                
 0391           buffer:	ds	0	; 512
                if TEST
                ; Data from Norberto's 4G SanDisk:
                	db	8Ah,84h,1Ch,1Fh,00h,00h,10h,00h,00h,00h,40h,02h,3Fh,00h,7Ah,00h
                	db	40h,7Eh,00h,00h,20h,20h,20h,20h,31h,30h,36h,32h,30h,31h,31h,49h
                	db	30h,39h,4Ah,38h,39h,31h,35h,32h,02h,00h,02h,00h,04h,00h,44h,48h
                	db	20h,58h,2Eh,34h,32h,33h,61h,53h,44h,6Eh,73h,69h,20h,6Bh,44h,53h
                	db	46h,43h,32h,48h,30h,2Dh,34h,30h,20h,47h,20h,20h,20h,20h,20h,20h
                	db	20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,20h,04h,00h
                	db	00h,00h,00h,03h,00h,00h,00h,02h,00h,00h,03h,00h,1Ch,1Fh,10h,00h
                	db	3Fh,00h,40h,7Eh,7Ah,00h,00h,01h,40h,7Eh,7Ah,00h,00h,00h,07h,00h
                ; 0080:
                	db	03h,00h,78h,00h,78h,00h,78h,00h,78h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	10h,00h,00h,00h,20h,00h,04h,40h,00h,40h,00h,00h,04h,00h,00h,40h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                ; 0100: data not gathered
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                ; 0180: data not gathered
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                	db	00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h,00h
                endif
                
 0391           	end
