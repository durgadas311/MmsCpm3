                ; Stand-Alone Program to flash the ROM from an image on VDIP1 USB stick
                ; 8080 version
 0009 =         VERN	equ	09h
                
 000D =         CR	equ	13
 000A =         LF	equ	10
 0008 =         BS	equ	8
 0007 =         BEL	equ	7
 0003 =         CTLC	equ	3
                
 1000 =         monrom	equ	4096	; length of first contig block in ROM (monitor)
 8000 =         romlen	equ	8000h	; full ROM is 32K
 0000 =         rombeg	equ	0000h	; start of ROM runtime image (in-place)
 8000 =         romend	equ	rombeg+romlen	; end of in-place ROM
 4000 =         K16	equ	16384	; constant: 16K
                
                ; buffer used to hold ROM image for flashing.
                ; NOTE: the first monrom bytes will be destroyed during flash.
 7000 =         imgbuf	equ	romend-monrom	; 4K below end of full ROM
 F000 =         imgtop	equ	imgbuf+romlen	; end of imgbuf
                ; The overlap is OK because the first 4K is flashed using
                ; the not ORG0,not MEM1 "legacy" map, and the memory (image buf)
                ; at imgbuf is still accessible. Once that 4K is flash, we
                ; switch to not ORG0,MEM1 "extended" map, and continue flashing.
                
 2009 =         ctl$F0	equ	2009h
 2036 =         ctl$F2	equ	2036h
                
                	extrn	strcpy,strcmp
                	extrn	vdcmd,vdrd,sync,runout
                	public	vdbuf
                
                	cseg
                begin:
 0000 31D404    	lxi	sp,stack
 0003 114601    	lxi	d,signon
 0006 CD7003    	call	msgout
 0009 CDC103    	call	crlf
                	; 2mS clock is needed for accessing VDIP1 (timeouts)
 000C 210920    	lxi	h,ctl$F0
 000F 7E        	mov	a,m
 0010 F640      	ori	01000000b	; 2mS back on
 0012 77        	mov	m,a
 0013 D3F0      	out	0f0h
 0015 FB        	ei
 0016 CD0000    	call	runout
 0019 CD0000    	call	sync
 001C DAEE00    	jc	error
 001F 115D02    over:	lxi	d,quest
 0022 CD7003    	call	msgout
 0025 CDF802    	call	linin
 0028 DA2E01    	jc	cancel
 002B 79        	mov	a,c
 002C B7        	ora	a
 002D C23C00    	jnz	go1	; already CR terminated...
 0030 219802    	lxi	h,defrom
 0033 11D403    	lxi	d,inbuf
 0036 CD0000    	call	strcpy
 0039 3E0D      	mvi	a,CR
 003B 12        	stax	d
 003C 21D003    go1:	lxi	h,opr
 003F CD0000    	call	vdcmd
 0042 DA2101    	jc	nofile
 0045 210070    	lxi	h,imgbuf	; 4k below end of ROM
 0048 CD0000    loop0:	call	vdrd
 004B DA1801    	jc	rderr
 004E CDA503    	call	progress
 0051 7C        	mov	a,h
 0052 FEF0      	cpi	HIGH imgtop
 0054 C24800    	jnz	loop0
                	; one more read, should be error (EOF)
 0057 210040    	lxi	h,4000h	; a safe place to destroy...
 005A CD0000    	call	vdrd
 005D D21801    	jnc	rderr
 0060 CD2701    	call	close
 0063 110070    	lxi	d,imgbuf
 0066 CDA302    	call	vchksm	; verify checksum
 0069 DA0901    	jc	ckerr
                	; now validate product codes..
 006C 2AFE7F    	lhld	imgbuf+0ffeh
 006F EB        	xchg
 0070 2AFE0F    	lhld	0ffeh
 0073 EB        	xchg
 0074 CDF900    	call	dsbc
 0077 7C        	mov	a,h
 0078 B5        	ora	l
 0079 C21201    	jnz	pcerr
                	; see if we should clear setup area
 007C 111002    	lxi	d,clear
 007F CD7003    	call	msgout
 0082 CDF802    	call	linin
 0085 3AD403    	lda	inbuf
 0088 FE59      	cpi	'Y'
 008A C29600    	jnz	noera
 008D 324501    	sta	era
 0090 112902    	lxi	d,clring
 0093 CD7003    	call	msgout
                noera:
                	; now, ready to start flash...
 0096 113F02    	lxi	d,ready
 0099 CD7003    	call	msgout
 009C CDF802    	call	linin
 009F DA2E01    	jc	cancel
                	; after started, there's no going back...
                	; disable any interruptions, as each page must be
                	; entirely written with strict time constraints
                	; (<<150uS between each byte).
 00A2 F3        	di
 00A3 3E80      	mvi	a,10000000b	; WE, partial ROM
 00A5 D3F2      	out	0f2h
 00A7 210070    	lxi	h,imgbuf
 00AA 110000    	lxi	d,0	; ROM
 00AD 014000    	lxi	b,4096/64	; first 4K
 00B0 CD7A03    	call	flash
 00B3 DAEE00    	jc	error
 00B6 3E88      	mvi	a,10001000b	; WE, enable full ROM
 00B8 D3F2      	out	0f2h
 00BA 01C001    	lxi	b,(8000h-4096)/64	; rest of ROM
 00BD 3A4501    	lda	era
 00C0 B7        	ora	a
 00C1 C2CE00    	jnz	flsal1
 00C4 010008    	lxi	b,0800h
 00C7 09        	dad	b
 00C8 EB        	xchg
 00C9 09        	dad	b
 00CA EB        	xchg
 00CB 01A001    	lxi	b,(8000h-1800h)/64	; rest of ROM
 00CE CD7A03    flsal1:	call	flash
 00D1 DAEE00    	jc	error
 00D4 3E08      	mvi	a,00001000b	; WE off, enable full ROM
 00D6 D3F2      	out	0f2h
                comm$flash:	; full ROM still mapped at 0000...
                	; NOTE: first 32K RAM has been trashed...
                	; no point to restoring it in any way.
                	; if we decide to try and return to monitor,
                	; need to go back to legacy mode and jump 0000.
 00D8 110000    	lxi	d,0	; ROM
 00DB CDA302    	call	vchksm
 00DE DA0001    	jc	ckerr2
                	; even though RAM is trashed, allow Z180 to
                	; restore ROM even if we don't jump to it.
 00E1 117402    	lxi	d,done
 00E4 CD7003    	call	msgout
                	; successful flash, try auto-RESET
 00E7 D336      	out	36h
                	; delay a little,
                	; if RESET doesn't happend then print message.
 00E9 AF        	xra	a
 00EA 3D        dly:	dcr	a
 00EB C2EA00    	jnz	dly
                error:
 00EE AF        	xra	a	; back to RESET state (WE off)
 00EF D3F2      	out	0f2h
                	; do something smarter...?
 00F1 118A02    	lxi	d,die
 00F4 CD7003    	call	msgout
 00F7 F3        	di
 00F8 76        	hlt
                
                dsbc:	; HL -= DE
 00F9 7D        	mov	a,l
 00FA 93        	sub	e
 00FB 6F        	mov	l,a
 00FC 7C        	mov	a,h
 00FD 9A        	sbb	d
 00FE 67        	mov	h,a
 00FF C9        	ret
                
 0100 119B01    ckerr2:	lxi	d,cserr
 0103 CD7003    	call	msgout
 0106 C3EE00    	jmp	error
                
 0109 119B01    ckerr:	lxi	d,cserr
 010C CD7003    eloop:	call	msgout
 010F C31F00    	jmp	over
                
 0112 117801    pcerr:	lxi	d,perr
 0115 C30C01    	jmp	eloop
                
                ; file is still open...
 0118 CD2701    rderr:	call	close
 011B 11B701    	lxi	d,fierr
 011E C30C01    	jmp	eloop
                
 0121 11DE01    nofile:	lxi	d,nferr
 0124 C30C01    	jmp	eloop
                
 0127 217401    close:	lxi	h,clf
 012A CD0000    	call	vdcmd
 012D C9        	ret
                
                ; cancel, before any flash took place...
                ; safe return to ROM possible?
 012E 11FA01    cancel:	lxi	d,canc
 0131 CD7003    	call	msgout
 0134 CDC103    	call	crlf
 0137 CD5803    	call	conout	; another LF
 013A F3        	di
 013B AF        	xra	a
 013C D3F2      	out	0f2h
 013E 3EDF      	mvi	a,0dfh	; reset state of FP
 0140 D3F0      	out	0f0h
 0142 C30000    	jmp	0
                
 0145 00        era:	db	0	; erase setup?
 0146 0D0A56464Csignon:	db	CR,LF,'VFLASH 8080A v'
 0156 302E39    	db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
 0159 202D205570	db	' - Update ROM from VDIP1',CR,LF,0
 0174 636C660D  clf:	db	'clf',CR
 0178 07524F4D20perr:	db	BEL,'ROM image does not match system',CR,LF,0
 019B 07524F4D20cserr:	db	BEL,'ROM image checksum error',CR,LF,0
 01B7 07524F4D20fierr:	db	BEL,'ROM image read error, or size wrong',CR,LF,0
 01DE 07524F4D20nferr:	db	BEL,'ROM image file not found',CR,LF,0
 01FA 524F4D2066canc:	db	'ROM flash cancelled',CR,LF,0
 0210 436C656172clear:	db	'Clear setup data (Y/N)? ',0
 0229 4572617369clring:	db	'Erasing setup data!',CR,LF,0
 023F 5072657373ready:	db	'Press RETURN to start flash: ',0
                
 025D 456E746572quest:	db	'Enter ROM image file: ',0
 0274 524F4D2075done:	db	'ROM update complete',CR,LF,0
 028A 5072657373die:	db	'Press RESET',CR,LF,0
                
 0298 68386D6F6Edefrom:	db	'h8mon2.rom',0	; default rom image file
                
                ; DE=start of ROM image
                ; must skip block 0x1000-0x17ff (relative)
 02A3 210000    vchksm:	lxi	h,0
 02A6 22E902    	shld	sum
 02A9 22EB02    	shld	sum+2
 02AC 010010    	lxi	b,1000h
 02AF CDCE02    	call	sum$bc
 02B2 210008    	lxi	h,0800h	; skip block
 02B5 19        	dad	d
 02B6 EB        	xchg
 02B7 01FC67    	lxi	b,8000h-1800h-4
 02BA CDCE02    	call	sum$bc
 02BD 21E902    	lxi	h,sum
 02C0 0604      	mvi	b,4
 02C2 1A        vchk1:	ldax	d
 02C3 BE        	cmp	m
 02C4 37        	stc
 02C5 C0        	rnz
 02C6 13        	inx	d
 02C7 23        	inx	h
 02C8 05C2C202  	dcr b ! jnz vchk1
 02CC AF        	xra	a	; NC
 02CD C9        	ret
                
 02CE 1A        sum$bc:	ldax	d
 02CF CDDA02    	call	sum1
 02D2 13        	inx	d
 02D3 0B        	dcx	b
 02D4 78        	mov	a,b
 02D5 B1        	ora	c
 02D6 C2CE02    	jnz	sum$bc
 02D9 C9        	ret
                
 02DA 21E902    sum1:	lxi	h,sum
 02DD 86        	add	m
 02DE 77        	mov	m,a
 02DF D0        	rnc
 02E0 23        	inx	h
 02E1 34        	inr	m
 02E2 C0        	rnz
 02E3 23        	inx	h
 02E4 34        	inr	m
 02E5 C0        	rnz
 02E6 23        	inx	h
 02E7 34        	inr	m
 02E8 C9        	ret
                
 02E9 00000000  sum:	db	0,0,0,0
                
 02ED 3E0D      linix:	mvi	a,CR
 02EF 77        	mov	m,a	; terminate buffer
 02F0 CD5803    	call	conout
 02F3 3E0A      	mvi	a,LF
 02F5 C35803    	jmp	conout
                
                ; input a filename from console, allow backspace
                ; returns C=num chars
                linin:
 02F8 21D403    	lxi	h,inbuf
 02FB 0E00      	mvi	c,0	; count chars
 02FD CD6403    lini0	call	conin
 0300 FE0D      	cpi	CR
 0302 CAED02    	jz	linix
 0305 FE03      	cpi	CTLC	; cancel
 0307 37        	stc
 0308 C8        	rz
 0309 FE08      	cpi	BS
 030B CA3F03    	jz	backup
 030E FE2E      	cpi	'.'
 0310 CA2E03    	jz	chrok
 0313 FE2D      	cpi	'-'
 0315 CA2E03    	jz	chrok
 0318 FE30      	cpi	'0'
 031A DA3703    	jc	chrnak
 031D FE3A      	cpi	'9'+1
 031F DA2E03    	jc	chrok
 0322 E65F      	ani	01011111b	; toupper
 0324 FE41      	cpi	'A'
 0326 DA3703    	jc	chrnak
 0329 FE5B      	cpi	'Z'+1
 032B D23703    	jnc	chrnak
 032E 77        chrok:	mov	m,a
 032F 23        	inx	h
 0330 0C        	inr	c
 0331 CD5803    	call	conout
                	; TODO: detect overflow...
 0334 C3FD02    	jmp	lini0
 0337 3E07      chrnak:	mvi	a,BEL
 0339 CD5803    	call	conout
 033C C3FD02    	jmp	lini0
                backup:
 033F 79        	mov	a,c
 0340 B7        	ora	a
 0341 CAFD02    	jz	lini0
 0344 0D        	dcr	c
 0345 2B        	dcx	h
 0346 3E08      	mvi	a,BS
 0348 CD5803    	call	conout
 034B 3E20      	mvi	a,' '
 034D CD5803    	call	conout
 0350 3E08      	mvi	a,BS
 0352 CD5803    	call	conout
 0355 C3FD02    	jmp	lini0
                
 0358 F5        conout:	push	psw
 0359 DBED      cono0:	in	0edh
 035B E620      	ani	00100000b
 035D CA5903    	jz	cono0
 0360 F1        	pop	psw
 0361 D3E8      	out	0e8h
 0363 C9        	ret
                
 0364 DBED      conin:	in	0edh
 0366 E601      	ani	00000001b
 0368 CA6403    	jz	conin
 036B DBE8      	in	0e8h
 036D E67F      	ani	01111111b
 036F C9        	ret
                
 0370 1A        msgout:	ldax	d
 0371 B7        	ora	a
 0372 C8        	rz
 0373 CD5803    	call	conout
 0376 13        	inx	d
 0377 C37003    	jmp	msgout
                
                ; flash ROM from HL to DE, 64 bytes at a time.
                ; DE must be on a 64-byte boundary.
                ; BC=num pages to flash
                ; returns CY on error, else HL,DE at next 64 bytes
                ; caller must set WE... and MEM1 as needed.
                flash:
 037A C5        	push	b
 037B 014000    	lxi	b,64
                ldir:
 037E 7E        	mov	a,m
 037F 12        	stax	d
 0380 23        	inx	h
 0381 13        	inx	d
 0382 0B        	dcx	b
 0383 78        	mov	a,b
 0384 B1        	ora	c
 0385 C27E03    	jnz	ldir
                	; -----
 0388 2B        	dcx	h
 0389 1B        	dcx	d	; last addr written...
                	; wait for write cycle to begin...
                	; TODO: timeout this loop?
 038A 1A        flash2:	ldax	d
 038B AE        	xra	m
 038C E680      	ani	10000000b	; bit7 is inverted when busy...
 038E CA8A03    	jz	flash2
                	; wait for write cycle to end...
                	; TODO: timeout this loop?
 0391 1A        flash0:	ldax	d
 0392 AE        	xra	m
 0393 E680      	ani	10000000b	; bit7 is inverted when busy...
 0395 C29103    	jnz	flash0
 0398 23        	inx	h
 0399 13        	inx	d
                	; done with page...
 039A CDA503    	call	progress
 039D C1        	pop	b
 039E 0B        	dcx	b
 039F 78        	mov	a,b
 03A0 B1        	ora	c
 03A1 C27A03    	jnz	flash
                	;xra	a	; NC already
 03A4 C9        	ret
                
                progress:
 03A5 E5        	push	h
 03A6 C5        	push	b
 03A7 21CB03    	lxi	h,spinx
 03AA 34        	inr	m
 03AB 7E        	mov	a,m
 03AC E603      	ani	00000011b
 03AE 4F        	mov	c,a
 03AF 0600      	mvi	b,0
 03B1 21CC03    	lxi	h,spin
 03B4 09        	dad	b
 03B5 7E        	mov	a,m
 03B6 CD5803    	call	conout
 03B9 3E08      	mvi	a,BS
 03BB CD5803    	call	conout
 03BE C1        	pop	b
 03BF E1        	pop	h
 03C0 C9        	ret
                
 03C1 3E0D      crlf:	mvi	a,CR
 03C3 CD5803    	call	conout
 03C6 3E0A      	mvi	a,LF
 03C8 C35803    	jmp	conout
                
 03CB 00        spinx:	db	0
 03CC 2D5C7C2F  spin:	db	'-','\','|','/'
                
 03D0 6F707220  opr:	db	'opr '	; in position for filename...
 03D4           inbuf:	ds	128	; file name entry buffer
                
 0454           	ds	128
 04D4           stack:	ds	0
                
 04D4           vdbuf:	ds	128	; for vdip1.lib
 0554           	end
