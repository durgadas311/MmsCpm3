                ; Stand-Alone Program to flash the ROM from an image on VDIP1 USB stick
                ; 8080 version
 0009 =         VERN	equ	09h
                
 000D =         CR	equ	13
 000A =         LF	equ	10
 0008 =         BS	equ	8
 0007 =         BEL	equ	7
 0003 =         CTLC	equ	3
                
 1000 =         monrom	equ	4096	; length of first contig block in ROM (monitor)
 8000 =         romlen	equ	8000h	; full ROM is 32K
 0000 =         rombeg	equ	0000h	; start of ROM runtime image (in-place)
 8000 =         romend	equ	rombeg+romlen	; end of in-place ROM
 4000 =         K16	equ	16384	; constant: 16K
                
                ; buffer used to hold ROM image for flashing.
                ; NOTE: the first monrom bytes will be destroyed during flash.
 7000 =         imgbuf	equ	romend-monrom	; 4K below end of full ROM
 F000 =         imgtop	equ	imgbuf+romlen	; end of imgbuf
                ; The overlap is OK because the first 4K is flashed using
                ; the not ORG0,not MEM1 "legacy" map, and the memory (image buf)
                ; at imgbuf is still accessible. Once that 4K is flash, we
                ; switch to not ORG0,MEM1 "extended" map, and continue flashing.
                
 2009 =         ctl$F0	equ	2009h
 2036 =         ctl$F2	equ	2036h
                
                	extrn	strcpy,strcmp
                	extrn	vdcmd,vdrd,sync,runout
                	public	vdbuf
                
                	cseg
                begin:
 0000 31EB04    	lxi	sp,stack
 0003 114901    	lxi	d,signon
 0006 CD8703    	call	msgout
 0009 CDD803    	call	crlf
                	; 2mS clock is needed for accessing VDIP1 (timeouts)
 000C 210920    	lxi	h,ctl$F0
 000F 7E        	mov	a,m
 0010 F640      	ori	01000000b	; 2mS back on
 0012 77        	mov	m,a
 0013 D3F0      	out	0f0h
 0015 FB        	ei
 0016 CD0000    	call	runout
 0019 CD0000    	call	sync
 001C DAF100    	jc	error
 001F 116002    over:	lxi	d,quest
 0022 CD8703    	call	msgout
 0025 CD0503    	call	linin
 0028 DA3101    	jc	cancel
 002B 79        	mov	a,c
 002C B7        	ora	a
 002D C23C00    	jnz	go1	; already CR terminated...
 0030 219B02    	lxi	h,defrom
 0033 11EB03    	lxi	d,inbuf
 0036 CD0000    	call	strcpy
 0039 3E0D      	mvi	a,CR
 003B 12        	stax	d
 003C 21E703    go1:	lxi	h,opr
 003F CD0000    	call	vdcmd
 0042 DA2401    	jc	nofile
 0045 210070    	lxi	h,imgbuf	; 4k below end of ROM
 0048 CD0000    loop0:	call	vdrd
 004B DA1B01    	jc	rderr
 004E CDBC03    	call	progress
 0051 7C        	mov	a,h
 0052 FEF0      	cpi	HIGH imgtop
 0054 C24800    	jnz	loop0
                	; one more read, should be error (EOF)
 0057 210040    	lxi	h,4000h	; a safe place to destroy...
 005A CD0000    	call	vdrd
 005D D21B01    	jnc	rderr
 0060 CD2A01    	call	close
 0063 110070    	lxi	d,imgbuf
 0066 CDA602    	call	vchksm	; verify checksum
 0069 DA0C01    	jc	ckerr
                	; now validate product codes..
 006C 2AFE7F    	lhld	imgbuf+0ffeh
 006F EB        	xchg
 0070 2AFE0F    	lhld	0ffeh
 0073 EB        	xchg
 0074 CDFC00    	call	dsbc
 0077 7C        	mov	a,h
 0078 B5        	ora	l
 0079 C21501    	jnz	pcerr
                	; see if we should clear setup area
 007C 111302    	lxi	d,clear
 007F CD8703    	call	msgout
 0082 CD0503    	call	linin
 0085 3AEB03    	lda	inbuf
 0088 FE59      	cpi	'Y'
 008A C29600    	jnz	noera
 008D 324801    	sta	era
 0090 112C02    	lxi	d,clring
 0093 CD8703    	call	msgout
                noera:
                	; now, ready to start flash...
 0096 114202    	lxi	d,ready
 0099 CD8703    	call	msgout
 009C CD0503    	call	linin
 009F DA3101    	jc	cancel
                	; after started, there's no going back...
                	; disable any interruptions, as each page must be
                	; entirely written with strict time constraints
                	; (<<150uS between each byte).
 00A2 F3        	di
 00A3 3E80      	mvi	a,10000000b	; WE, partial ROM
 00A5 D3F2      	out	0f2h
 00A7 210070    	lxi	h,imgbuf
 00AA 110000    	lxi	d,0	; ROM
 00AD 014000    	lxi	b,4096/64	; first 4K
 00B0 CD9103    	call	flash
 00B3 DAF100    	jc	error
 00B6 3E88      	mvi	a,10001000b	; WE, enable full ROM
 00B8 D3F2      	out	0f2h
 00BA 01C001    	lxi	b,(8000h-4096)/64	; rest of ROM
 00BD 3A4801    	lda	era
 00C0 B7        	ora	a
 00C1 C2CE00    	jnz	flsal1
 00C4 010008    	lxi	b,0800h
 00C7 09        	dad	b
 00C8 EB        	xchg
 00C9 09        	dad	b
 00CA EB        	xchg
 00CB 01A001    	lxi	b,(8000h-1800h)/64	; rest of ROM
 00CE CD9103    flsal1:	call	flash
 00D1 DAF100    	jc	error
 00D4 3E08      	mvi	a,00001000b	; WE off, enable full ROM
 00D6 D3F2      	out	0f2h
                comm$flash:	; full ROM still mapped at 0000...
                	; NOTE: first 32K RAM has been trashed...
                	; no point to restoring it in any way.
                	; if we decide to try and return to monitor,
                	; need to go back to legacy mode and jump 0000.
 00D8 110000    	lxi	d,0	; ROM
 00DB CDA602    	call	vchksm
 00DE DA0301    	jc	ckerr2
                	; even though RAM is trashed, allow Z180 to
                	; restore ROM even if we don't jump to it.
 00E1 117702    	lxi	d,done
 00E4 CD8703    	call	msgout
                	; successful flash, try auto-RESET
 00E7 CD7103    	call	condrain ; ensure all conout drained
 00EA D336      	out	36h
                	; delay a little (probably only for simulator),
                	; if RESET doesn't happen then print message.
 00EC AF        	xra	a
 00ED 3D        dly:	dcr	a
 00EE C2ED00    	jnz	dly
                error:
 00F1 AF        	xra	a	; back to RESET state (WE off)
 00F2 D3F2      	out	0f2h
                	; do something smarter...?
 00F4 118D02    	lxi	d,die
 00F7 CD8703    	call	msgout
 00FA F3        	di
 00FB 76        	hlt
                
                dsbc:	; HL -= DE
 00FC 7D        	mov	a,l
 00FD 93        	sub	e
 00FE 6F        	mov	l,a
 00FF 7C        	mov	a,h
 0100 9A        	sbb	d
 0101 67        	mov	h,a
 0102 C9        	ret
                
 0103 119E01    ckerr2:	lxi	d,cserr
 0106 CD8703    	call	msgout
 0109 C3F100    	jmp	error
                
 010C 119E01    ckerr:	lxi	d,cserr
 010F CD8703    eloop:	call	msgout
 0112 C31F00    	jmp	over
                
 0115 117B01    pcerr:	lxi	d,perr
 0118 C30F01    	jmp	eloop
                
                ; file is still open...
 011B CD2A01    rderr:	call	close
 011E 11BA01    	lxi	d,fierr
 0121 C30F01    	jmp	eloop
                
 0124 11E101    nofile:	lxi	d,nferr
 0127 C30F01    	jmp	eloop
                
 012A 217701    close:	lxi	h,clf
 012D CD0000    	call	vdcmd
 0130 C9        	ret
                
                ; cancel, before any flash took place...
                ; safe return to ROM possible?
 0131 11FD01    cancel:	lxi	d,canc
 0134 CD8703    	call	msgout
 0137 CDD803    	call	crlf
 013A CD6503    	call	conout	; another LF
 013D F3        	di
 013E AF        	xra	a
 013F D3F2      	out	0f2h
 0141 3EDF      	mvi	a,0dfh	; reset state of FP
 0143 D3F0      	out	0f0h
 0145 C30000    	jmp	0
                
 0148 00        era:	db	0	; erase setup?
 0149 0D0A56464Csignon:	db	CR,LF,'VFLASH 8080A v'
 0159 302E39    	db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
 015C 202D205570	db	' - Update ROM from VDIP1',CR,LF,0
 0177 636C660D  clf:	db	'clf',CR
 017B 07524F4D20perr:	db	BEL,'ROM image does not match system',CR,LF,0
 019E 07524F4D20cserr:	db	BEL,'ROM image checksum error',CR,LF,0
 01BA 07524F4D20fierr:	db	BEL,'ROM image read error, or size wrong',CR,LF,0
 01E1 07524F4D20nferr:	db	BEL,'ROM image file not found',CR,LF,0
 01FD 524F4D2066canc:	db	'ROM flash cancelled',CR,LF,0
 0213 436C656172clear:	db	'Clear setup data (Y/N)? ',0
 022C 4572617369clring:	db	'Erasing setup data!',CR,LF,0
 0242 5072657373ready:	db	'Press RETURN to start flash: ',0
                
 0260 456E746572quest:	db	'Enter ROM image file: ',0
 0277 524F4D2075done:	db	'ROM update complete',CR,LF,0
 028D 5072657373die:	db	'Press RESET',CR,LF,0
                
 029B 68386D6F6Edefrom:	db	'h8mon2.rom',0	; default rom image file
                
                ; DE=start of ROM image
                ; must skip block 0x1000-0x17ff (relative)
 02A6 210000    vchksm:	lxi	h,0
 02A9 22F602    	shld	sum
 02AC 22F802    	shld	sum+2
 02AF 010010    	lxi	b,1000h
 02B2 CDD102    	call	sum$bc
 02B5 210008    	lxi	h,0800h	; skip block
 02B8 19        	dad	d
 02B9 EB        	xchg
 02BA 01FC67    	lxi	b,8000h-1800h-4
 02BD CDD102    	call	sum$bc
 02C0 21F602    	lxi	h,sum
 02C3 0604      	mvi	b,4
 02C5 1A        vchk1:	ldax	d
 02C6 BE        	cmp	m
 02C7 37        	stc
 02C8 C0        	rnz
 02C9 13        	inx	d
 02CA 23        	inx	h
 02CB 05C2C502  	dcr b ! jnz vchk1
 02CF AF        	xra	a	; NC
 02D0 C9        	ret
                
 02D1 1A        sum$bc:	ldax	d
 02D2 CDE702    	call	sum1
 02D5 13        	inx	d
 02D6 0B        	dcx	b
 02D7 79        	mov	a,c
 02D8 B7        	ora	a
 02D9 C2D102    	jnz	sum$bc
 02DC 78        	mov	a,b
 02DD B7        	ora	a
 02DE C8        	rz
 02DF E603      	ani	00000011b
 02E1 CCBC03    	cz	progress
 02E4 C3D102    	jmp	sum$bc
                
 02E7 21F602    sum1:	lxi	h,sum
 02EA 86        	add	m
 02EB 77        	mov	m,a
 02EC D0        	rnc
 02ED 23        	inx	h
 02EE 34        	inr	m
 02EF C0        	rnz
 02F0 23        	inx	h
 02F1 34        	inr	m
 02F2 C0        	rnz
 02F3 23        	inx	h
 02F4 34        	inr	m
 02F5 C9        	ret
                
 02F6 00000000  sum:	db	0,0,0,0
                
 02FA 3E0D      linix:	mvi	a,CR
 02FC 77        	mov	m,a	; terminate buffer
 02FD CD6503    	call	conout
 0300 3E0A      	mvi	a,LF
 0302 C36503    	jmp	conout
                
                ; input a filename from console, allow backspace
                ; returns C=num chars
                linin:
 0305 21EB03    	lxi	h,inbuf
 0308 0E00      	mvi	c,0	; count chars
 030A CD7B03    lini0	call	conin
 030D FE0D      	cpi	CR
 030F CAFA02    	jz	linix
 0312 FE03      	cpi	CTLC	; cancel
 0314 37        	stc
 0315 C8        	rz
 0316 FE08      	cpi	BS
 0318 CA4C03    	jz	backup
 031B FE2E      	cpi	'.'
 031D CA3B03    	jz	chrok
 0320 FE2D      	cpi	'-'
 0322 CA3B03    	jz	chrok
 0325 FE30      	cpi	'0'
 0327 DA4403    	jc	chrnak
 032A FE3A      	cpi	'9'+1
 032C DA3B03    	jc	chrok
 032F E65F      	ani	01011111b	; toupper
 0331 FE41      	cpi	'A'
 0333 DA4403    	jc	chrnak
 0336 FE5B      	cpi	'Z'+1
 0338 D24403    	jnc	chrnak
 033B 77        chrok:	mov	m,a
 033C 23        	inx	h
 033D 0C        	inr	c
 033E CD6503    	call	conout
                	; TODO: detect overflow...
 0341 C30A03    	jmp	lini0
 0344 3E07      chrnak:	mvi	a,BEL
 0346 CD6503    	call	conout
 0349 C30A03    	jmp	lini0
                backup:
 034C 79        	mov	a,c
 034D B7        	ora	a
 034E CA0A03    	jz	lini0
 0351 0D        	dcr	c
 0352 2B        	dcx	h
 0353 3E08      	mvi	a,BS
 0355 CD6503    	call	conout
 0358 3E20      	mvi	a,' '
 035A CD6503    	call	conout
 035D 3E08      	mvi	a,BS
 035F CD6503    	call	conout
 0362 C30A03    	jmp	lini0
                
 0365 F5        conout:	push	psw
 0366 DBED      cono0:	in	0edh
 0368 E620      	ani	00100000b
 036A CA6603    	jz	cono0
 036D F1        	pop	psw
 036E D3E8      	out	0e8h
 0370 C9        	ret
                
                condrain:
 0371 DBED      	in	0edh
 0373 E660      	ani	01100000b
 0375 FE60      	cpi	01100000b
 0377 C27103    	jnz	condrain
 037A C9        	ret
                
 037B DBED      conin:	in	0edh
 037D E601      	ani	00000001b
 037F CA7B03    	jz	conin
 0382 DBE8      	in	0e8h
 0384 E67F      	ani	01111111b
 0386 C9        	ret
                
 0387 1A        msgout:	ldax	d
 0388 B7        	ora	a
 0389 C8        	rz
 038A CD6503    	call	conout
 038D 13        	inx	d
 038E C38703    	jmp	msgout
                
                ; flash ROM from HL to DE, 64 bytes at a time.
                ; DE must be on a 64-byte boundary.
                ; BC=num pages to flash
                ; returns CY on error, else HL,DE at next 64 bytes
                ; caller must set WE... and MEM1 as needed.
                flash:
 0391 C5        	push	b
 0392 014000    	lxi	b,64
                ldir:
 0395 7E        	mov	a,m
 0396 12        	stax	d
 0397 23        	inx	h
 0398 13        	inx	d
 0399 0B        	dcx	b
 039A 78        	mov	a,b
 039B B1        	ora	c
 039C C29503    	jnz	ldir
                	; -----
 039F 2B        	dcx	h
 03A0 1B        	dcx	d	; last addr written...
                	; wait for write cycle to begin...
                	; TODO: timeout this loop?
 03A1 1A        flash2:	ldax	d
 03A2 AE        	xra	m
 03A3 E680      	ani	10000000b	; bit7 is inverted when busy...
 03A5 CAA103    	jz	flash2
                	; wait for write cycle to end...
                	; TODO: timeout this loop?
 03A8 1A        flash0:	ldax	d
 03A9 AE        	xra	m
 03AA E680      	ani	10000000b	; bit7 is inverted when busy...
 03AC C2A803    	jnz	flash0
 03AF 23        	inx	h
 03B0 13        	inx	d
                	; done with page...
 03B1 CDBC03    	call	progress
 03B4 C1        	pop	b
 03B5 0B        	dcx	b
 03B6 78        	mov	a,b
 03B7 B1        	ora	c
 03B8 C29103    	jnz	flash
                	;xra	a	; NC already
 03BB C9        	ret
                
                progress:
 03BC E5        	push	h
 03BD C5        	push	b
 03BE 21E203    	lxi	h,spinx
 03C1 34        	inr	m
 03C2 7E        	mov	a,m
 03C3 E603      	ani	00000011b
 03C5 4F        	mov	c,a
 03C6 0600      	mvi	b,0
 03C8 21E303    	lxi	h,spin
 03CB 09        	dad	b
 03CC 7E        	mov	a,m
 03CD CD6503    	call	conout
 03D0 3E08      	mvi	a,BS
 03D2 CD6503    	call	conout
 03D5 C1        	pop	b
 03D6 E1        	pop	h
 03D7 C9        	ret
                
 03D8 3E0D      crlf:	mvi	a,CR
 03DA CD6503    	call	conout
 03DD 3E0A      	mvi	a,LF
 03DF C36503    	jmp	conout
                
 03E2 00        spinx:	db	0
 03E3 2D5C7C2F  spin:	db	'-','\','|','/'
                
 03E7 6F707220  opr:	db	'opr '	; in position for filename...
 03EB           inbuf:	ds	128	; file name entry buffer
                
 046B           	ds	128
 04EB           stack:	ds	0
                
 04EB           vdbuf:	ds	128	; for vdip1.lib
 056B           	end
