		; Command module for SETUP
0002          	VERN	equ	02h
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
0000          	z180	equ	false
0000          	nofp	equ	false
		
			maclib	ram
**** ram.lib ****
**** csetup.asm ****
			maclib	setup
**** setup.lib ****
**** csetup.asm ****
0000          	if z180
		else
			maclib	z80
**** z80.lib ****
**** csetup.asm ****
		endif
		
000D          	CR	equ	13
000A          	LF	equ	10
0008          	BS	equ	8
0003          	CTLC	equ	3
0007          	BEL	equ	7
001B          	ESC	equ	27
		
0000          	if z180
		endif
		
8000          		org	8000h	; out of reach of ROM overlay...
8000  07      	first:	db	HIGH (last-first)	; +0: num pages
8001  80      		db	HIGH first		; +1: ORG page
8002  FF00    		db	255,0	; +2,+3: phy drv base, num
		
8004  C31D80  		jmp	init	; +4: init entry
8007  C31F80  		jmp	exec	; +7: action entry
		
800A  43      		db	'C'	; +10: Command letter
800B  FF      		db	-1	; +11: front panel key
800C  00      		db	0	; +12: port, 0 if variable
800D  FFFFFF  		db	11111111b,11111111b,11111111b	; +13: FP display
8010  436F6E66		db	'Config Setup',0	; +16: mnemonic string
      69672053
      65747570
      00
		
801D          	init:
801D  AF      		xra	a	; NC
801E  C9      		ret
		
801F          	exec:
801F  116E84  		lxi	d,signon
8022  CDEC81  		call	msgout
8025  CD1281  		call	get$su	; get a copy of setup data
8028  DCA682  		cc	cserr	; offer to clear if checksum error
			; Primary/Default boot options
802B  110E85  		lxi	d,gpdev
802E  210487  		lxi	h,last+dpdev
8031  CD3883  		call	getlet
8034  112C85  		lxi	d,gpuni
8037  210587  		lxi	h,last+dpuni
803A  CDEC83  		call	getnum
803D  114885  		lxi	d,gpstr
8040  210687  		lxi	h,last+dpstr
8043  CD3184  		call	getstr
FFFF          	if not nofp
			; Secondary boot options
8046  116685  		lxi	d,gsdev
8049  218687  		lxi	h,last+dsdev
804C  CD3883  		call	getlet
804F  117E85  		lxi	d,gsuni
8052  218787  		lxi	h,last+dsuni
8055  CDEC83  		call	getnum
8058  119485  		lxi	d,gsstr
805B  218887  		lxi	h,last+dsstr
805E  CD3184  		call	getstr
		endif
			; Add-ons Installed
FFFF          	if not z180
8061  11AC85  		lxi	d,g512k
8064  210888  		lxi	h,last+m512k
8067  CDD982  		call	getyn
		endif
		
806A  3E36    		mvi	a,'6'
806C  32C585  		sta	dport+1
806F  11C485  		lxi	d,dport
8072  210B88  		lxi	h,last+h67pt
8075  CDAE83  		call	gethex
		
8078  3E34    		mvi	a,'4'
807A  32C585  		sta	dport+1
807D  11C485  		lxi	d,dport
8080  210C88  		lxi	h,last+h47pt
8083  CDAE83  		call	gethex
		
8086  3E33    		mvi	a,'3'
8088  32C585  		sta	dport+1
808B  11C485  		lxi	d,dport
808E  210D88  		lxi	h,last+h37pt
8091  CDAE83  		call	gethex
		
0000          	if 0	; H17 is not configurable?
		endif
		
			; TODO: more setup?
8094  3ADC85  		lda	dirty
8097  B7      		ora	a
8098  C2A280  		jnz	mkchg
809B  11AF84  	xxchg:	lxi	d,nochg
809E  CDEC81  		call	msgout
80A1  C9      		ret
		
80A2  11C384  	mkchg:	lxi	d,dochg
80A5  21DF85  		lxi	h,inbuf
80A8  36FF    		mvi	m,0ffh
80AA  CDD982  		call	getyn
80AD  3ADF85  		lda	inbuf
80B0  B7      		ora	a
80B1  20E8    		jrnz	xxchg
80B3  110087  		lxi	d,last
80B6  01FE07  		lxi	b,sulen
80B9  CD5581  		call	schksm
80BC  2A7881  		lhld	sum
80BF  227A81  		shld	ssum
80C2  F3      		di
0000          	if z180
		else
80C3  3A3620  		lda	ctl$F2
80C6  F5      		push	psw
80C7  E6DF    		ani	11011111b	; ORG0 off
80C9  F688    		ori	10001000b	; WE, MEM1
80CB  D3F2    		out	0f2h
		endif
80CD  210087  		lxi	h,last
80D0  110010  		lxi	d,suadr
80D3  012000  		lxi	b,susize/64
80D6  CD7F82  		call	flash
			;jrc	error	; never returned, actually
80D9  F1      		pop	psw
80DA  F5      		push	psw
80DB  E67F    		ani	01111111b	; WE off
80DD  D3F2    		out	0f2h
80DF  110010  		lxi	d,suadr
80E2  01FE07  		lxi	b,sulen
80E5  CD3681  		call	vchksm
80E8  2A7881  		lhld	sum
80EB  EB      		xchg
80EC  2A7A81  		lhld	ssum
80EF  B7      		ora	a
80F0  ED52    		dsbc	d
80F2  2016    		jrnz	error
80F4  F1      		pop	psw
80F5  D3F2    		out	0f2h
0000          	if z180
		endif
80F7  FB      		ei
80F8  11D284  		lxi	d,saved
80FB  CDEC81  		call	msgout
			; Update monitor copy
80FE  210087  		lxi	h,last
8101  1100F8  		lxi	d,susave
8104  010F01  		lxi	b,sumax
8107  EDB0    		ldir
8109  C9      		ret
		
		; PSW is on stack...
810A  F1      	error:	pop	psw
810B  11E584  		lxi	d,failed
810E  CDEC81  		call	msgout
8111  C9      		ret	; what else can we do?
		
8112  F3      	get$su:	di
0000          	if z180
		else
8113  3A3620  		lda	ctl$F2
8116  F5      		push	psw
8117  E6DF    		ani	11011111b	; ORG0 off
8119  F608    		ori	00001000b	; MEM1
811B  D3F2    		out	0f2h
811D  210010  		lxi	h,suadr
8120  110087  		lxi	d,last
8123  010008  		lxi	b,susize
8126  EDB0    		ldir
8128  F1      		pop	psw
8129  D3F2    		out	0f2h
		endif
812B  FB      		ei
812C  110087  		lxi	d,last
812F  01FE07  		lxi	b,sulen
8132  CD3681  		call	vchksm
8135  C9      		ret	; CY=checksum error
		
		; DE=code start, BC=length
		; Returns CY on error
8136  210000  	vchksm:	lxi	h,0
8139  227881  		shld	sum
813C  1A      	vchk0:	ldax	d
813D  CD6F81  		call	sum1
8140  13      		inx	d
8141  0B      		dcx	b
8142  78      		mov	a,b
8143  B1      		ora	c
8144  20F6    		jrnz	vchk0
8146  217881  		lxi	h,sum
8149  0602    		mvi	b,2
814B  1A      	vchk2:	ldax	d
814C  BE      		cmp	m
814D  37      		stc
814E  C0      		rnz
814F  13      		inx	d
8150  23      		inx	h
8151  10F8    		djnz	vchk2
8153  AF      		xra	a	; NC
8154  C9      		ret
		
		; DE=code start, BC=length
		; Sets checksum after code
8155  210000  	schksm:	lxi	h,0
8158  227881  		shld	sum
815B  1A      	schk0:	ldax	d
815C  CD6F81  		call	sum1
815F  13      		inx	d
8160  0B      		dcx	b
8161  78      		mov	a,b
8162  B1      		ora	c
8163  20F6    		jrnz	schk0
8165  217881  		lxi	h,sum
8168  7E      		mov	a,m
8169  12      		stax	d
816A  23      		inx	h
816B  13      		inx	d
816C  7E      		mov	a,m
816D  12      		stax	d
816E  C9      		ret
		
816F  217881  	sum1:	lxi	h,sum
8172  86      		add	m
8173  77      		mov	m,a
8174  D0      		rnc
8175  23      		inx	h
8176  34      		inr	m
8177  C9      		ret
		
8178  0000    	sum:	dw	0
817A  0000    	ssum:	dw	0
		
817C  3E1B    	liniz:	mvi	a,ESC
817E  32DF85  		sta	inbuf
8181  0E01    		mvi	c,1
8183  C39C82  		jmp	crlf
8186  3600    	linix:	mvi	m,0	; terminate buffer
8188  C39C82  		jmp	crlf
		
		; input a filename from console, allow backspace
		; returns C=num chars
818B          	linin:
818B  21DF85  		lxi	h,inbuf
818E  0E00    		mvi	c,0	; count chars
8190  CDE181  	lini0	call	conin
8193  FE0D    		cpi	CR
8195  28EF    		jrz	linix
8197  FE1B    		cpi	ESC
8199  28E1    		jrz	liniz
819B  FE03    		cpi	CTLC	; cancel
819D  37      		stc
819E  C8      		rz
819F  FE08    		cpi	BS
81A1  281C    		jrz	backup
81A3  FE20    		cpi	' '
81A5  3811    		jrc	chrnak
81A7  FE7F    		cpi	'~'+1
81A9  300D    		jrnc	chrnak
81AB  77      	chrok:	mov	m,a
81AC  23      		inx	h
81AD  0C      		inr	c
81AE  FAB681  		jm	chrovf	; 128 chars max
81B1  CDD681  		call	conout
			; TODO: detect overflow...
81B4  18DA    		jr	lini0
81B6  2B      	chrovf:	dcx	h
81B7  0D      		dcr	c
81B8  3E07    	chrnak:	mvi	a,BEL
81BA  CDD681  		call	conout
81BD  18D1    		jr	lini0
81BF          	backup:
81BF  79      		mov	a,c
81C0  B7      		ora	a
81C1  28CD    		jrz	lini0
81C3  0D      		dcr	c
81C4  2B      		dcx	h
81C5  3E08    		mvi	a,BS
81C7  CDD681  		call	conout
81CA  3E20    		mvi	a,' '
81CC  CDD681  		call	conout
81CF  3E08    		mvi	a,BS
81D1  CDD681  		call	conout
81D4  18BA    		jr	lini0
		
81D6          	chrout:
81D6  F5      	conout:	push	psw
81D7  DBED    	cono0:	in	0edh
81D9  E620    		ani	00100000b
81DB  28FA    		jrz	cono0
81DD  F1      		pop	psw
81DE  D3E8    		out	0e8h
81E0  C9      		ret
		
81E1  DBED    	conin:	in	0edh
81E3  E601    		ani	00000001b
81E5  28FA    		jrz	conin
81E7  DBE8    		in	0e8h
81E9  E67F    		ani	01111111b
81EB  C9      		ret
		
81EC  1A      	msgout:	ldax	d
81ED  B7      		ora	a
81EE  C8      		rz
81EF  CDD681  		call	conout
81F2  13      		inx	d
81F3  18F7    		jr	msgout
		
		; A=number to print
		; leading zeroes blanked - must preserve B
81F5          	decout:
81F5  C5      		push	b
81F6  0E00    		mvi	c,0
81F8  1664    		mvi	d,100
81FA  CD1D82  		call	divide
81FD  160A    		mvi	d,10
81FF  CD1D82  		call	divide
8202  C630    		adi	'0'
8204  CDD681  		call	chrout
8207  C1      		pop	b
8208  C9      		ret
		
8209          	hexout:
8209  F5      		push	psw
820A  07      		rlc
820B  07      		rlc
820C  07      		rlc
820D  07      		rlc
820E  CD1282  		call	hexdig
8211  F1      		pop	psw
8212  E60F    	hexdig:	ani	0fh
8214  C690    		adi	90h
8216  27      		daa
8217  CE40    		aci	40h
8219  27      		daa
821A  C3D681  		jmp	chrout
		
821D  1E00    	divide:	mvi	e,0
821F  92      	div0:	sub	d
8220  1C      		inr	e
8221  30FC    		jrnc	div0
8223  82      		add	d
8224  1D      		dcr	e
8225  2005    		jrnz	div1
8227  CB41    		bit	0,c
8229  2001    		jrnz	div1
822B  C9      		ret
822C  CBC1    	div1:	setb	0,c
822E  F5      		push	psw	; remainder
822F  3E30    		mvi	a,'0'
8231  83      		add	e
8232  CDD681  		call	chrout
8235  F1      		pop	psw	; remainder
8236  C9      		ret
		
8237          	parshx:
8237  1600    		mvi	d,0
8239  7E      	px0:	mov	a,m
823A  B7      		ora	a
823B  C8      		rz
823C  D630    		sui	'0'
823E  D8      		rc
823F  FE0A    		cpi	'9'-'0'+1
8241  380A    		jrc	px3
8243  D611    		sui	'A'-'0'
8245  E6DF    		ani	11011111b	; toupper
8247  FE06    		cpi	'F'-'A'+1
8249  3F      		cmc
824A  D8      		rc
824B  C60A    		adi	10
824D  5F      	px3:	mov	e,a
824E  7A      		mov	a,d
824F  87      		add	a
8250  D8      		rc
8251  87      		add	a
8252  D8      		rc
8253  87      		add	a
8254  D8      		rc
8255  87      		add	a
8256  D8      		rc
8257  83      		add	e	; no CY possible
8258  57      		mov	d,a
8259  23      		inx	h
825A  10DD    		djnz	px0
825C  B7      		ora	a
825D  C9      		ret
		
		; Parse a 8-bit (max) decimal number
		; HL=string, B=count
		; Returns D=number, CY=error
825E          	parsnm:
825E  110000  		lxi	d,0
8261  7E      	pd0:	mov	a,m
8262  B7      		ora	a
8263  C8      		rz
8264  FE30    		cpi	'0'
8266  D8      		rc
8267  FE3A    		cpi	'9'+1
8269  3F      		cmc
826A  D8      		rc
826B  E60F    		ani	0fh
826D  5F      		mov	e,a
826E  7A      		mov	a,d
826F  87      		add	a	; *2
8270  D8      		rc	
8271  87      		add	a	; *4
8272  D8      		rc	
8273  82      		add	d	; *5
8274  D8      		rc	
8275  87      		add	a	; *10
8276  D8      		rc	
8277  83      		add	e	;
8278  D8      		rc
8279  57      		mov	d,a
827A  23      		inx	h
827B  10E4    		djnz	pd0
827D  B7      		ora	a	; NC
827E  C9      		ret
		
		; flash ROM from HL to DE, 64 bytes at a time.
		; DE must be on a 64-byte boundary.
		; BC=num pages to flash
		; returns CY on error, else HL,DE at next 64 bytes
		; caller must set WE... and MEM1 as needed.
827F          	flash:
827F  C5      		push	b
8280  014000  		lxi	b,64
8283  EDB0    		ldir
			; -----
8285  2B      		dcx	h
8286  1B      		dcx	d	; last addr written...
			; wait for write cycle to begin...
			; TODO: timeout this loop?
8287  1A      	flash2:	ldax	d
8288  AE      		xra	m
8289  E680    		ani	10000000b	; bit7 is inverted when busy...
828B  28FA    		jrz	flash2
			; wait for write cycle to end...
			; TODO: timeout this loop?
828D  1A      	flash0:	ldax	d
828E  AE      		xra	m
828F  E680    		ani	10000000b	; bit7 is inverted when busy...
8291  20FA    		jrnz	flash0
8293  23      		inx	h
8294  13      		inx	d
			; done with page...
			;call	progress	; TODO: progress needed?
8295  C1      		pop	b
8296  0B      		dcx	b
8297  78      		mov	a,b
8298  B1      		ora	c
8299  20E4    		jrnz	flash
			;xra	a	; NC already
829B  C9      		ret
		
829C  3E0D    	crlf:	mvi	a,CR
829E  CDD681  		call	conout
82A1  3E0A    		mvi	a,LF
82A3  C3D681  		jmp	conout
		
82A6  118184  	cserr:	lxi	d,csbad
82A9  CDEC81  		call	msgout
82AC  21DF85  		lxi	h,inbuf
82AF  36FF    		mvi	m,0ffh
82B1  CDD982  		call	getyn
82B4  3ADF85  		lda	inbuf
82B7  B7      		ora	a	; NZ=no
82B8  201B    		jrnz	cserr9
82BA  210087  		lxi	h,last
82BD  54      		mov	d,h
82BE  5D      		mov	e,l
82BF  36FF    		mvi	m,0ffh
82C1  13      		inx	d
82C2  01FF07  		lxi	b,susize-1
82C5  EDB0    		ldir
82C7  210000  		lxi	h,0
82CA  220287  		shld	last+subase
82CD  3E01    		mvi	a,1
82CF  32DC85  		sta	dirty
82D2  C9      		ret
		
		; CY preserved if set...
82D3  E1      	nmerr9:	pop	h	; discard saved HL
82D4  D1      		pop	d	; discard saved DE
82D5  E1      	cserr9:	pop	h	; discard our ret adr
82D6  C39B80  		jmp	xxchg	; return to monitor
		
		; DE=prompt prefix, HL=value location
		; get a Y/N, Wait for CR, allow BS.
		; Stores 0ffh for "no", 000h for "yes"
82D9          	getyn:
82D9  CDEC81  		call	msgout
82DC  7E      		mov	a,m
82DD  B7      		ora	a
82DE  3E4E    		mvi	a,'N'
82E0  2002    		jrnz	getyn1
82E2  3E59    		mvi	a,'Y'
82E4  CDD681  	getyn1:	call	conout
82E7  110A85  		lxi	d,gpunn
82EA  CDEC81  		call	msgout
82ED  CDE181  	getyn2:	call	conin
82F0  FE0D    		cpi	CR
82F2  CA9183  		jz	getlt1	; same processing
82F5  E65F    		ani	01011111b	; toupper
82F7  FE59    		cpi	'Y'
82F9  280B    		jrz	getyn0
82FB  FE4E    		cpi	'N'
82FD  2807    		jrz	getyn0
82FF  3E07    		mvi	a,BEL
8301  CDD681  		call	conout
8304  18E7    		jr	getyn2
8306  CDD681  	getyn0:	call	conout
8309  D64E    		sui	'N'	;  0='N',  X='Y'
830B  D601    		sui	1	; CY='N', NC='Y'
830D  9F      		sbb	a	; FF='N', 00='Y'
830E  4F      		mov	c,a
830F  CDE181  	getyn5:	call	conin
8312  FE0D    		cpi	CR
8314  2875    		jrz	getlt3	; same processing
8316  FE08    		cpi	BS
8318  2807    		jrz	getyn4
831A  3E07    		mvi	a,BEL
831C  CDD681  		call	conout
831F  18EE    		jr	getyn5
8321  CDD681  	getyn4:	call	conout
8324  3E20    		mvi	a,' '
8326  CDD681  		call	conout
8329  3E08    		mvi	a,BS
832B  CDD681  		call	conout
832E  18BD    		jr	getyn2
		
		; DE=prompt prefix, HL=value location
		; get a single letter, toupper. Wait for CR, allow BS
		; TODO: allow value meaning "not defined"?
8330          	getlete:
8330  3E07    		mvi	a,BEL
8332  CDD681  		call	conout
8335  CD9C82  		call	crlf
8338          	getlet:
8338  ED53DD85		sded	curmsg
833C  CDEC81  		call	msgout
833F  7E      		mov	a,m
8340  FEFF    		cpi	0ffh
8342  2803    		jrz	getlt6
8344  CDD681  		call	conout
8347  110A85  	getlt6:	lxi	d,gpunn
834A  CDEC81  		call	msgout
834D  CDE181  	getlt2:	call	conin
8350  FE0D    		cpi	CR
8352  283D    		jrz	getlt1
8354  FE1B    		cpi	ESC
8356  2844    		jrz	getltx
8358  E65F    		ani	01011111b	; toupper
835A  FE42    		cpi	'B'	; 'A' means default, makes no sense here
835C  3837    		jrc	getlt0
835E  FE5B    		cpi	'Z'+1
8360  3033    		jrnc	getlt0
			; wait for CR, honor BS
8362  4F      		mov	c,a
8363  CDD681  		call	conout
8366  CDE181  	getlt5:	call	conin
8369  FE0D    		cpi	CR
836B  281E    		jrz	getlt3
836D  FE08    		cpi	BS
836F  280B    		jrz	getlt4
8371  FE1B    		cpi	ESC
8373  2827    		jrz	getltx
8375  3E07    		mvi	a,BEL
8377  CDD681  		call	conout
837A  18EA    		jr	getlt5
837C  CDD681  	getlt4:	call	conout
837F  3E20    		mvi	a,' '
8381  CDD681  		call	conout
8384  3E08    		mvi	a,BS
8386  CDD681  		call	conout
8389  18C2    		jr	getlt2
838B  71      	getlt3:	mov	m,c
838C  3E01    		mvi	a,1
838E  32DC85  		sta	dirty
8391  CD9C82  	getlt1:	call	crlf
8394  C9      		ret
8395  3E07    	getlt0:	mvi	a,BEL
8397  CDD681  		call	conout
839A  18B1    		jr	getlt2
		
		; delete setting, re-prompt
839C  36FF    	getltx:	mvi	m,0ffh
839E  3E01    		mvi	a,1
83A0  32DC85  		sta	dirty
83A3  ED5BDD85		lded	curmsg
83A7  1887    		jr	getlete
		
		; DE=prompt prefix, HL=value location
83A9          	gethexe:
83A9  3E07    		mvi	a,BEL
83AB  CDD681  		call	conout
83AE          	gethex:
83AE  D5      		push	d
83AF  E5      		push	h
83B0  CDEC81  		call	msgout
83B3  7E      		mov	a,m
83B4  CD0982  		call	hexout
83B7  110A85  		lxi	d,gpunn
83BA  CDEC81  		call	msgout
83BD  CD8B81  		call	linin
83C0  DAD382  		jc	nmerr9
83C3  79      		mov	a,c
83C4  B7      		ora	a
83C5  2862    		jrz	getxit
83C7  3ADF85  		lda	inbuf
83CA  FE1B    		cpi	ESC	; delete setting
83CC  2813    		jrz	gethxx
83CE  41      		mov	b,c
83CF  21DF85  		lxi	h,inbuf
83D2  CD3782  		call	parshx
83D5  7A      		mov	a,d
83D6  E1      		pop	h
83D7  D1      		pop	d
83D8  38CF    		jrc	gethexe
83DA  77      		mov	m,a
83DB  3E01    		mvi	a,1
83DD  32DC85  		sta	dirty
83E0  C9      		ret
		
		; delete setting, re-prompt
83E1  E1      	gethxx:	pop	h
83E2  36FF    		mvi	m,0ffh
83E4  D1      		pop	d
83E5  18C2    		jr	gethexe
		
		; DE=prompt prefix, HL=value location
83E7          	getnume:
83E7  3E07    		mvi	a,BEL
83E9  CDD681  		call	conout
83EC          	getnum:
83EC  D5      		push	d
83ED  E5      		push	h
83EE  CDEC81  		call	msgout
83F1  7E      		mov	a,m
83F2  FEFF    		cpi	0ffh
83F4  2803    		jrz	getnm0
83F6  CDF581  		call	decout
83F9  110A85  	getnm0:	lxi	d,gpunn
83FC  CDEC81  		call	msgout
83FF  CD8B81  		call	linin
8402  DAD382  		jc	nmerr9
8405  79      		mov	a,c
8406  B7      		ora	a
8407  2820    		jrz	getxit
8409  3ADF85  		lda	inbuf
840C  FE1B    		cpi	ESC	; delete setting
840E  2813    		jrz	getnmx
8410  41      		mov	b,c
8411  21DF85  		lxi	h,inbuf
8414  CD5E82  		call	parsnm
8417  7A      		mov	a,d
8418  E1      		pop	h
8419  D1      		pop	d
841A  38CB    		jrc	getnume
841C  77      		mov	m,a
841D  3E01    		mvi	a,1
841F  32DC85  		sta	dirty
8422  C9      		ret
		
		; delete setting, re-prompt
8423  E1      	getnmx:	pop	h
8424  36FF    		mvi	m,0ffh
8426  D1      		pop	d
8427  18BE    		jr	getnume
		
8429  E1      	getxit:	pop	h
842A  D1      		pop	d
842B  C9      		ret
		
		; DE=prompt prefix, HL=value location
842C          	getstre:
842C  3E07    		mvi	a,BEL
842E  CDD681  		call	conout
8431          	getstr:
8431  D5      		push	d
8432  E5      		push	h
8433  CDEC81  		call	msgout
8436  7E      		mov	a,m
8437  FEFF    		cpi	0ffh
8439  2804    		jrz	getst0
843B  EB      		xchg
843C  CDEC81  		call	msgout
843F  110A85  	getst0:	lxi	d,gpunn
8442  CDEC81  		call	msgout
8445  CD8B81  		call	linin
8448  DAD382  		jc	nmerr9
844B  79      		mov	a,c
844C  B7      		ora	a
844D  28DA    		jrz	getxit
			; no error checking left?
844F  E1      		pop	h
8450  D1      		pop	d
			; TODO: are we guaranteed 'inbuf' is terminated?
8451  11DF85  		lxi	d,inbuf
8454  1A      		ldax	d
8455  FE1B    		cpi	ESC	; delete setting
8457  2809    		jrz	getstx
8459  1A      	getst2:	ldax	d
845A  B7      		ora	a
845B  2809    		jrz	getst1
845D  77      		mov	m,a
845E  23      		inx	h
845F  13      		inx	d
8460  18F7    		jr	getst2
8462  36FF    	getstx:	mvi	m,0ffh
8464  18C6    		jr	getstre
8466  3600    	getst1:	mvi	m,0
8468  3E01    		mvi	a,1
846A  32DC85  		sta	dirty
846D  C9      		ret
		
846E  6F6E6669	signon:	db	'onfig setup v'
      67207365
      74757020
      76
847B  302E32  		db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
847E  0D0A00  		db	CR,LF,0
		
8481  53657475	csbad:	db	'Setup bank checksum error. Clear setup data (',0
      70206261
      6E6B2063
      6865636B
      73756D20
      6572726F
      722E2043
      6C656172
      20736574
      75702064
      61746120
      2800
84AF  53657475	nochg:	db	'Setup not changed',CR,LF,0
      70206E6F
      74206368
      616E6765
      640D0A00
84C3  53617665	dochg:	db	'Save changes (',0
      20636861
      6E676573
      202800
84D2  53657475	saved:	db	'Setup data saved',CR,LF,0
      70206461
      74612073
      61766564
      0D0A00
84E5  53657475	failed:	db	'Setup flash failed, checksum error',CR,LF,0
      7020666C
      61736820
      6661696C
      65642C20
      63686563
      6B73756D
      20657272
      6F720D0A
      00
		
850A  293A2000	gpunn:	db	'): ',0
850E  5072696D	gpdev:	db	'Primary/Default boot device (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20646576
      69636520
      2800
852C  5072696D	gpuni:	db	'Primary/Default boot unit (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20756E69
      74202800
8548  5072696D	gpstr:	db	'Primary/Default boot string (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20737472
      696E6720
      2800
FFFF          	if not nofp
8566  5365636F	gsdev:	db	'Secondary boot device (',0
      6E646172
      7920626F
      6F742064
      65766963
      65202800
857E  5365636F	gsuni:	db	'Secondary boot unit (',0
      6E646172
      7920626F
      6F742075
      6E697420
      2800
8594  5365636F	gsstr:	db	'Secondary boot string (',0
      6E646172
      7920626F
      6F742073
      7472696E
      67202800
		endif
FFFF          	if not z180
85AC  48382D35	g512k:	db	'H8-512K RAM installed (',0
      31324B20
      52414D20
      696E7374
      616C6C65
      64202800
		endif
85C4  485F3720	dport:	db	'H_7 Port (FF=use SW1) (',0
      506F7274
      20284646
      3D757365
      20535731
      29202800
		
85DC  00      	dirty:	db	0
85DD  0000    	curmsg:	dw	0
		
85DF          	inbuf:	ds	128	; input entry buffer
		
865F          		ds	128
		stack:	ds	0
		
86DF  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FF
		
8700          	last:	end



Statistics:

     4	passes
     0	jr promotions
   180	symbols
  1536	bytes

   228	macro calls
  3759	macro bytes
     0	invented symbols
