		; Command module for SETUP
0002          	VERN	equ	02h
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
0000          	z180	equ	false
0000          	nofp	equ	false
		
			maclib	ram
**** ram.lib ****
**** csetup.asm ****
			maclib	setup
**** setup.lib ****
**** csetup.asm ****
0000          	if z180
		else
			maclib	z80
**** z80.lib ****
**** csetup.asm ****
		endif
		
000D          	CR	equ	13
000A          	LF	equ	10
0008          	BS	equ	8
0003          	CTLC	equ	3
0007          	BEL	equ	7
001B          	ESC	equ	27
		
0000          	if z180
		endif
		
8000          		org	8000h	; out of reach of ROM overlay...
8000  07      	first:	db	HIGH (last-first)	; +0: num pages
8001  80      		db	HIGH first		; +1: ORG page
8002  FF00    		db	255,0	; +2,+3: phy drv base, num
		
8004  C31680  		jmp	init	; +4: init entry
8007  C31880  		jmp	exec	; +7: action entry
		
800A  43      		db	'C'	; +10: Command letter
800B  FF      		db	-1	; +11: front panel key
800C  00      		db	0	; +12: port, 0 if variable
800D  FFFFFF  		db	11111111b,11111111b,11111111b	; +13: FP display
8010  53657475		db	'Setup',0	; +16: mnemonic string
      7000
		
8016          	init:
8016  AF      		xra	a	; NC
8017  C9      		ret
		
8018          	exec:
8018  116784  		lxi	d,signon
801B  CDE581  		call	msgout
801E  CD0B81  		call	get$su	; get a copy of setup data
8021  DC9F82  		cc	cserr	; offer to clear if checksum error
			; Primary/Default boot options
8024  110785  		lxi	d,gpdev
8027  210487  		lxi	h,last+dpdev
802A  CD3183  		call	getlet
802D  112585  		lxi	d,gpuni
8030  210587  		lxi	h,last+dpuni
8033  CDE583  		call	getnum
8036  114185  		lxi	d,gpstr
8039  210687  		lxi	h,last+dpstr
803C  CD2A84  		call	getstr
FFFF          	if not nofp
			; Secondary boot options
803F  115F85  		lxi	d,gsdev
8042  218687  		lxi	h,last+dsdev
8045  CD3183  		call	getlet
8048  117785  		lxi	d,gsuni
804B  218787  		lxi	h,last+dsuni
804E  CDE583  		call	getnum
8051  118D85  		lxi	d,gsstr
8054  218887  		lxi	h,last+dsstr
8057  CD2A84  		call	getstr
		endif
			; Add-ons Installed
FFFF          	if not z180
805A  11A585  		lxi	d,g512k
805D  210888  		lxi	h,last+m512k
8060  CDD282  		call	getyn
		endif
		
8063  3E36    		mvi	a,'6'
8065  32BE85  		sta	dport+1
8068  11BD85  		lxi	d,dport
806B  210B88  		lxi	h,last+h67pt
806E  CDA783  		call	gethex
		
8071  3E34    		mvi	a,'4'
8073  32BE85  		sta	dport+1
8076  11BD85  		lxi	d,dport
8079  210C88  		lxi	h,last+h47pt
807C  CDA783  		call	gethex
		
807F  3E33    		mvi	a,'3'
8081  32BE85  		sta	dport+1
8084  11BD85  		lxi	d,dport
8087  210D88  		lxi	h,last+h37pt
808A  CDA783  		call	gethex
		
0000          	if 0	; H17 is not configurable?
		endif
		
			; TODO: more setup?
808D  3AD585  		lda	dirty
8090  B7      		ora	a
8091  C29B80  		jnz	mkchg
8094  11A884  	xxchg:	lxi	d,nochg
8097  CDE581  		call	msgout
809A  C9      		ret
		
809B  11BC84  	mkchg:	lxi	d,dochg
809E  21D885  		lxi	h,inbuf
80A1  36FF    		mvi	m,0ffh
80A3  CDD282  		call	getyn
80A6  3AD885  		lda	inbuf
80A9  B7      		ora	a
80AA  20E8    		jrnz	xxchg
80AC  110087  		lxi	d,last
80AF  01FE07  		lxi	b,sulen
80B2  CD4E81  		call	schksm
80B5  2A7181  		lhld	sum
80B8  227381  		shld	ssum
80BB  F3      		di
0000          	if z180
		else
80BC  3A3620  		lda	ctl$F2
80BF  F5      		push	psw
80C0  E6DF    		ani	11011111b	; ORG0 off
80C2  F688    		ori	10001000b	; WE, MEM1
80C4  D3F2    		out	0f2h
		endif
80C6  210087  		lxi	h,last
80C9  110010  		lxi	d,suadr
80CC  012000  		lxi	b,susize/64
80CF  CD7882  		call	flash
			;jrc	error	; never returned, actually
80D2  F1      		pop	psw
80D3  F5      		push	psw
80D4  E67F    		ani	01111111b	; WE off
80D6  D3F2    		out	0f2h
80D8  110010  		lxi	d,suadr
80DB  01FE07  		lxi	b,sulen
80DE  CD2F81  		call	vchksm
80E1  2A7181  		lhld	sum
80E4  EB      		xchg
80E5  2A7381  		lhld	ssum
80E8  B7      		ora	a
80E9  ED52    		dsbc	d
80EB  2016    		jrnz	error
80ED  F1      		pop	psw
80EE  D3F2    		out	0f2h
0000          	if z180
		endif
80F0  FB      		ei
80F1  11CB84  		lxi	d,saved
80F4  CDE581  		call	msgout
			; Update monitor copy
80F7  210087  		lxi	h,last
80FA  1100F8  		lxi	d,susave
80FD  010F01  		lxi	b,sumax
8100  EDB0    		ldir
8102  C9      		ret
		
		; PSW is on stack...
8103  F1      	error:	pop	psw
8104  11DE84  		lxi	d,failed
8107  CDE581  		call	msgout
810A  C9      		ret	; what else can we do?
		
810B  F3      	get$su:	di
0000          	if z180
		else
810C  3A3620  		lda	ctl$F2
810F  F5      		push	psw
8110  E6DF    		ani	11011111b	; ORG0 off
8112  F608    		ori	00001000b	; MEM1
8114  D3F2    		out	0f2h
8116  210010  		lxi	h,suadr
8119  110087  		lxi	d,last
811C  010008  		lxi	b,susize
811F  EDB0    		ldir
8121  F1      		pop	psw
8122  D3F2    		out	0f2h
		endif
8124  FB      		ei
8125  110087  		lxi	d,last
8128  01FE07  		lxi	b,sulen
812B  CD2F81  		call	vchksm
812E  C9      		ret	; CY=checksum error
		
		; DE=code start, BC=length
		; Returns CY on error
812F  210000  	vchksm:	lxi	h,0
8132  227181  		shld	sum
8135  1A      	vchk0:	ldax	d
8136  CD6881  		call	sum1
8139  13      		inx	d
813A  0B      		dcx	b
813B  78      		mov	a,b
813C  B1      		ora	c
813D  20F6    		jrnz	vchk0
813F  217181  		lxi	h,sum
8142  0602    		mvi	b,2
8144  1A      	vchk2:	ldax	d
8145  BE      		cmp	m
8146  37      		stc
8147  C0      		rnz
8148  13      		inx	d
8149  23      		inx	h
814A  10F8    		djnz	vchk2
814C  AF      		xra	a	; NC
814D  C9      		ret
		
		; DE=code start, BC=length
		; Sets checksum after code
814E  210000  	schksm:	lxi	h,0
8151  227181  		shld	sum
8154  1A      	schk0:	ldax	d
8155  CD6881  		call	sum1
8158  13      		inx	d
8159  0B      		dcx	b
815A  78      		mov	a,b
815B  B1      		ora	c
815C  20F6    		jrnz	schk0
815E  217181  		lxi	h,sum
8161  7E      		mov	a,m
8162  12      		stax	d
8163  23      		inx	h
8164  13      		inx	d
8165  7E      		mov	a,m
8166  12      		stax	d
8167  C9      		ret
		
8168  217181  	sum1:	lxi	h,sum
816B  86      		add	m
816C  77      		mov	m,a
816D  D0      		rnc
816E  23      		inx	h
816F  34      		inr	m
8170  C9      		ret
		
8171  0000    	sum:	dw	0
8173  0000    	ssum:	dw	0
		
8175  3E1B    	liniz:	mvi	a,ESC
8177  32D885  		sta	inbuf
817A  0E01    		mvi	c,1
817C  C39582  		jmp	crlf
817F  3600    	linix:	mvi	m,0	; terminate buffer
8181  C39582  		jmp	crlf
		
		; input a filename from console, allow backspace
		; returns C=num chars
8184          	linin:
8184  21D885  		lxi	h,inbuf
8187  0E00    		mvi	c,0	; count chars
8189  CDDA81  	lini0	call	conin
818C  FE0D    		cpi	CR
818E  28EF    		jrz	linix
8190  FE1B    		cpi	ESC
8192  28E1    		jrz	liniz
8194  FE03    		cpi	CTLC	; cancel
8196  37      		stc
8197  C8      		rz
8198  FE08    		cpi	BS
819A  281C    		jrz	backup
819C  FE20    		cpi	' '
819E  3811    		jrc	chrnak
81A0  FE7F    		cpi	'~'+1
81A2  300D    		jrnc	chrnak
81A4  77      	chrok:	mov	m,a
81A5  23      		inx	h
81A6  0C      		inr	c
81A7  FAAF81  		jm	chrovf	; 128 chars max
81AA  CDCF81  		call	conout
			; TODO: detect overflow...
81AD  18DA    		jr	lini0
81AF  2B      	chrovf:	dcx	h
81B0  0D      		dcr	c
81B1  3E07    	chrnak:	mvi	a,BEL
81B3  CDCF81  		call	conout
81B6  18D1    		jr	lini0
81B8          	backup:
81B8  79      		mov	a,c
81B9  B7      		ora	a
81BA  28CD    		jrz	lini0
81BC  0D      		dcr	c
81BD  2B      		dcx	h
81BE  3E08    		mvi	a,BS
81C0  CDCF81  		call	conout
81C3  3E20    		mvi	a,' '
81C5  CDCF81  		call	conout
81C8  3E08    		mvi	a,BS
81CA  CDCF81  		call	conout
81CD  18BA    		jr	lini0
		
81CF          	chrout:
81CF  F5      	conout:	push	psw
81D0  DBED    	cono0:	in	0edh
81D2  E620    		ani	00100000b
81D4  28FA    		jrz	cono0
81D6  F1      		pop	psw
81D7  D3E8    		out	0e8h
81D9  C9      		ret
		
81DA  DBED    	conin:	in	0edh
81DC  E601    		ani	00000001b
81DE  28FA    		jrz	conin
81E0  DBE8    		in	0e8h
81E2  E67F    		ani	01111111b
81E4  C9      		ret
		
81E5  1A      	msgout:	ldax	d
81E6  B7      		ora	a
81E7  C8      		rz
81E8  CDCF81  		call	conout
81EB  13      		inx	d
81EC  18F7    		jr	msgout
		
		; A=number to print
		; leading zeroes blanked - must preserve B
81EE          	decout:
81EE  C5      		push	b
81EF  0E00    		mvi	c,0
81F1  1664    		mvi	d,100
81F3  CD1682  		call	divide
81F6  160A    		mvi	d,10
81F8  CD1682  		call	divide
81FB  C630    		adi	'0'
81FD  CDCF81  		call	chrout
8200  C1      		pop	b
8201  C9      		ret
		
8202          	hexout:
8202  F5      		push	psw
8203  07      		rlc
8204  07      		rlc
8205  07      		rlc
8206  07      		rlc
8207  CD0B82  		call	hexdig
820A  F1      		pop	psw
820B  E60F    	hexdig:	ani	0fh
820D  C690    		adi	90h
820F  27      		daa
8210  CE40    		aci	40h
8212  27      		daa
8213  C3CF81  		jmp	chrout
		
8216  1E00    	divide:	mvi	e,0
8218  92      	div0:	sub	d
8219  1C      		inr	e
821A  30FC    		jrnc	div0
821C  82      		add	d
821D  1D      		dcr	e
821E  2005    		jrnz	div1
8220  CB41    		bit	0,c
8222  2001    		jrnz	div1
8224  C9      		ret
8225  CBC1    	div1:	setb	0,c
8227  F5      		push	psw	; remainder
8228  3E30    		mvi	a,'0'
822A  83      		add	e
822B  CDCF81  		call	chrout
822E  F1      		pop	psw	; remainder
822F  C9      		ret
		
8230          	parshx:
8230  1600    		mvi	d,0
8232  7E      	px0:	mov	a,m
8233  B7      		ora	a
8234  C8      		rz
8235  D630    		sui	'0'
8237  D8      		rc
8238  FE0A    		cpi	'9'-'0'+1
823A  380A    		jrc	px3
823C  D611    		sui	'A'-'0'
823E  E6DF    		ani	11011111b	; toupper
8240  FE06    		cpi	'F'-'A'+1
8242  3F      		cmc
8243  D8      		rc
8244  C60A    		adi	10
8246  5F      	px3:	mov	e,a
8247  7A      		mov	a,d
8248  87      		add	a
8249  D8      		rc
824A  87      		add	a
824B  D8      		rc
824C  87      		add	a
824D  D8      		rc
824E  87      		add	a
824F  D8      		rc
8250  83      		add	e	; no CY possible
8251  57      		mov	d,a
8252  23      		inx	h
8253  10DD    		djnz	px0
8255  B7      		ora	a
8256  C9      		ret
		
		; Parse a 8-bit (max) decimal number
		; HL=string, B=count
		; Returns D=number, CY=error
8257          	parsnm:
8257  110000  		lxi	d,0
825A  7E      	pd0:	mov	a,m
825B  B7      		ora	a
825C  C8      		rz
825D  FE30    		cpi	'0'
825F  D8      		rc
8260  FE3A    		cpi	'9'+1
8262  3F      		cmc
8263  D8      		rc
8264  E60F    		ani	0fh
8266  5F      		mov	e,a
8267  7A      		mov	a,d
8268  87      		add	a	; *2
8269  D8      		rc	
826A  87      		add	a	; *4
826B  D8      		rc	
826C  82      		add	d	; *5
826D  D8      		rc	
826E  87      		add	a	; *10
826F  D8      		rc	
8270  83      		add	e	;
8271  D8      		rc
8272  57      		mov	d,a
8273  23      		inx	h
8274  10E4    		djnz	pd0
8276  B7      		ora	a	; NC
8277  C9      		ret
		
		; flash ROM from HL to DE, 64 bytes at a time.
		; DE must be on a 64-byte boundary.
		; BC=num pages to flash
		; returns CY on error, else HL,DE at next 64 bytes
		; caller must set WE... and MEM1 as needed.
8278          	flash:
8278  C5      		push	b
8279  014000  		lxi	b,64
827C  EDB0    		ldir
			; -----
827E  2B      		dcx	h
827F  1B      		dcx	d	; last addr written...
			; wait for write cycle to begin...
			; TODO: timeout this loop?
8280  1A      	flash2:	ldax	d
8281  AE      		xra	m
8282  E680    		ani	10000000b	; bit7 is inverted when busy...
8284  28FA    		jrz	flash2
			; wait for write cycle to end...
			; TODO: timeout this loop?
8286  1A      	flash0:	ldax	d
8287  AE      		xra	m
8288  E680    		ani	10000000b	; bit7 is inverted when busy...
828A  20FA    		jrnz	flash0
828C  23      		inx	h
828D  13      		inx	d
			; done with page...
			;call	progress	; TODO: progress needed?
828E  C1      		pop	b
828F  0B      		dcx	b
8290  78      		mov	a,b
8291  B1      		ora	c
8292  20E4    		jrnz	flash
			;xra	a	; NC already
8294  C9      		ret
		
8295  3E0D    	crlf:	mvi	a,CR
8297  CDCF81  		call	conout
829A  3E0A    		mvi	a,LF
829C  C3CF81  		jmp	conout
		
829F  117A84  	cserr:	lxi	d,csbad
82A2  CDE581  		call	msgout
82A5  21D885  		lxi	h,inbuf
82A8  36FF    		mvi	m,0ffh
82AA  CDD282  		call	getyn
82AD  3AD885  		lda	inbuf
82B0  B7      		ora	a	; NZ=no
82B1  201B    		jrnz	cserr9
82B3  210087  		lxi	h,last
82B6  54      		mov	d,h
82B7  5D      		mov	e,l
82B8  36FF    		mvi	m,0ffh
82BA  13      		inx	d
82BB  01FF07  		lxi	b,susize-1
82BE  EDB0    		ldir
82C0  210000  		lxi	h,0
82C3  220287  		shld	last+subase
82C6  3E01    		mvi	a,1
82C8  32D585  		sta	dirty
82CB  C9      		ret
		
		; CY preserved if set...
82CC  E1      	nmerr9:	pop	h	; discard saved HL
82CD  D1      		pop	d	; discard saved DE
82CE  E1      	cserr9:	pop	h	; discard our ret adr
82CF  C39480  		jmp	xxchg	; return to monitor
		
		; DE=prompt prefix, HL=value location
		; get a Y/N, Wait for CR, allow BS.
		; Stores 0ffh for "no", 000h for "yes"
82D2          	getyn:
82D2  CDE581  		call	msgout
82D5  7E      		mov	a,m
82D6  B7      		ora	a
82D7  3E4E    		mvi	a,'N'
82D9  2002    		jrnz	getyn1
82DB  3E59    		mvi	a,'Y'
82DD  CDCF81  	getyn1:	call	conout
82E0  110385  		lxi	d,gpunn
82E3  CDE581  		call	msgout
82E6  CDDA81  	getyn2:	call	conin
82E9  FE0D    		cpi	CR
82EB  CA8A83  		jz	getlt1	; same processing
82EE  E65F    		ani	01011111b	; toupper
82F0  FE59    		cpi	'Y'
82F2  280B    		jrz	getyn0
82F4  FE4E    		cpi	'N'
82F6  2807    		jrz	getyn0
82F8  3E07    		mvi	a,BEL
82FA  CDCF81  		call	conout
82FD  18E7    		jr	getyn2
82FF  CDCF81  	getyn0:	call	conout
8302  D64E    		sui	'N'	;  0='N',  X='Y'
8304  D601    		sui	1	; CY='N', NC='Y'
8306  9F      		sbb	a	; FF='N', 00='Y'
8307  4F      		mov	c,a
8308  CDDA81  	getyn5:	call	conin
830B  FE0D    		cpi	CR
830D  2875    		jrz	getlt3	; same processing
830F  FE08    		cpi	BS
8311  2807    		jrz	getyn4
8313  3E07    		mvi	a,BEL
8315  CDCF81  		call	conout
8318  18EE    		jr	getyn5
831A  CDCF81  	getyn4:	call	conout
831D  3E20    		mvi	a,' '
831F  CDCF81  		call	conout
8322  3E08    		mvi	a,BS
8324  CDCF81  		call	conout
8327  18BD    		jr	getyn2
		
		; DE=prompt prefix, HL=value location
		; get a single letter, toupper. Wait for CR, allow BS
		; TODO: allow value meaning "not defined"?
8329          	getlete:
8329  3E07    		mvi	a,BEL
832B  CDCF81  		call	conout
832E  CD9582  		call	crlf
8331          	getlet:
8331  ED53D685		sded	curmsg
8335  CDE581  		call	msgout
8338  7E      		mov	a,m
8339  FEFF    		cpi	0ffh
833B  2803    		jrz	getlt6
833D  CDCF81  		call	conout
8340  110385  	getlt6:	lxi	d,gpunn
8343  CDE581  		call	msgout
8346  CDDA81  	getlt2:	call	conin
8349  FE0D    		cpi	CR
834B  283D    		jrz	getlt1
834D  FE1B    		cpi	ESC
834F  2844    		jrz	getltx
8351  E65F    		ani	01011111b	; toupper
8353  FE42    		cpi	'B'	; 'A' means default, makes no sense here
8355  3837    		jrc	getlt0
8357  FE5B    		cpi	'Z'+1
8359  3033    		jrnc	getlt0
			; wait for CR, honor BS
835B  4F      		mov	c,a
835C  CDCF81  		call	conout
835F  CDDA81  	getlt5:	call	conin
8362  FE0D    		cpi	CR
8364  281E    		jrz	getlt3
8366  FE08    		cpi	BS
8368  280B    		jrz	getlt4
836A  FE1B    		cpi	ESC
836C  2827    		jrz	getltx
836E  3E07    		mvi	a,BEL
8370  CDCF81  		call	conout
8373  18EA    		jr	getlt5
8375  CDCF81  	getlt4:	call	conout
8378  3E20    		mvi	a,' '
837A  CDCF81  		call	conout
837D  3E08    		mvi	a,BS
837F  CDCF81  		call	conout
8382  18C2    		jr	getlt2
8384  71      	getlt3:	mov	m,c
8385  3E01    		mvi	a,1
8387  32D585  		sta	dirty
838A  CD9582  	getlt1:	call	crlf
838D  C9      		ret
838E  3E07    	getlt0:	mvi	a,BEL
8390  CDCF81  		call	conout
8393  18B1    		jr	getlt2
		
		; delete setting, re-prompt
8395  36FF    	getltx:	mvi	m,0ffh
8397  3E01    		mvi	a,1
8399  32D585  		sta	dirty
839C  ED5BD685		lded	curmsg
83A0  1887    		jr	getlete
		
		; DE=prompt prefix, HL=value location
83A2          	gethexe:
83A2  3E07    		mvi	a,BEL
83A4  CDCF81  		call	conout
83A7          	gethex:
83A7  D5      		push	d
83A8  E5      		push	h
83A9  CDE581  		call	msgout
83AC  7E      		mov	a,m
83AD  CD0282  		call	hexout
83B0  110385  		lxi	d,gpunn
83B3  CDE581  		call	msgout
83B6  CD8481  		call	linin
83B9  DACC82  		jc	nmerr9
83BC  79      		mov	a,c
83BD  B7      		ora	a
83BE  2862    		jrz	getxit
83C0  3AD885  		lda	inbuf
83C3  FE1B    		cpi	ESC	; delete setting
83C5  2813    		jrz	gethxx
83C7  41      		mov	b,c
83C8  21D885  		lxi	h,inbuf
83CB  CD3082  		call	parshx
83CE  7A      		mov	a,d
83CF  E1      		pop	h
83D0  D1      		pop	d
83D1  38CF    		jrc	gethexe
83D3  77      		mov	m,a
83D4  3E01    		mvi	a,1
83D6  32D585  		sta	dirty
83D9  C9      		ret
		
		; delete setting, re-prompt
83DA  E1      	gethxx:	pop	h
83DB  36FF    		mvi	m,0ffh
83DD  D1      		pop	d
83DE  18C2    		jr	gethexe
		
		; DE=prompt prefix, HL=value location
83E0          	getnume:
83E0  3E07    		mvi	a,BEL
83E2  CDCF81  		call	conout
83E5          	getnum:
83E5  D5      		push	d
83E6  E5      		push	h
83E7  CDE581  		call	msgout
83EA  7E      		mov	a,m
83EB  FEFF    		cpi	0ffh
83ED  2803    		jrz	getnm0
83EF  CDEE81  		call	decout
83F2  110385  	getnm0:	lxi	d,gpunn
83F5  CDE581  		call	msgout
83F8  CD8481  		call	linin
83FB  DACC82  		jc	nmerr9
83FE  79      		mov	a,c
83FF  B7      		ora	a
8400  2820    		jrz	getxit
8402  3AD885  		lda	inbuf
8405  FE1B    		cpi	ESC	; delete setting
8407  2813    		jrz	getnmx
8409  41      		mov	b,c
840A  21D885  		lxi	h,inbuf
840D  CD5782  		call	parsnm
8410  7A      		mov	a,d
8411  E1      		pop	h
8412  D1      		pop	d
8413  38CB    		jrc	getnume
8415  77      		mov	m,a
8416  3E01    		mvi	a,1
8418  32D585  		sta	dirty
841B  C9      		ret
		
		; delete setting, re-prompt
841C  E1      	getnmx:	pop	h
841D  36FF    		mvi	m,0ffh
841F  D1      		pop	d
8420  18BE    		jr	getnume
		
8422  E1      	getxit:	pop	h
8423  D1      		pop	d
8424  C9      		ret
		
		; DE=prompt prefix, HL=value location
8425          	getstre:
8425  3E07    		mvi	a,BEL
8427  CDCF81  		call	conout
842A          	getstr:
842A  D5      		push	d
842B  E5      		push	h
842C  CDE581  		call	msgout
842F  7E      		mov	a,m
8430  FEFF    		cpi	0ffh
8432  2804    		jrz	getst0
8434  EB      		xchg
8435  CDE581  		call	msgout
8438  110385  	getst0:	lxi	d,gpunn
843B  CDE581  		call	msgout
843E  CD8481  		call	linin
8441  DACC82  		jc	nmerr9
8444  79      		mov	a,c
8445  B7      		ora	a
8446  28DA    		jrz	getxit
			; no error checking left?
8448  E1      		pop	h
8449  D1      		pop	d
			; TODO: are we guaranteed 'inbuf' is terminated?
844A  11D885  		lxi	d,inbuf
844D  1A      		ldax	d
844E  FE1B    		cpi	ESC	; delete setting
8450  2809    		jrz	getstx
8452  1A      	getst2:	ldax	d
8453  B7      		ora	a
8454  2809    		jrz	getst1
8456  77      		mov	m,a
8457  23      		inx	h
8458  13      		inx	d
8459  18F7    		jr	getst2
845B  36FF    	getstx:	mvi	m,0ffh
845D  18C6    		jr	getstre
845F  3600    	getst1:	mvi	m,0
8461  3E01    		mvi	a,1
8463  32D585  		sta	dirty
8466  C9      		ret
		
8467  6F6E6669	signon:	db	'onfig setup v'
      67207365
      74757020
      76
8474  302E32  		db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
8477  0D0A00  		db	CR,LF,0
		
847A  53657475	csbad:	db	'Setup bank checksum error. Clear setup data (',0
      70206261
      6E6B2063
      6865636B
      73756D20
      6572726F
      722E2043
      6C656172
      20736574
      75702064
      61746120
      2800
84A8  53657475	nochg:	db	'Setup not changed',CR,LF,0
      70206E6F
      74206368
      616E6765
      640D0A00
84BC  53617665	dochg:	db	'Save changes (',0
      20636861
      6E676573
      202800
84CB  53657475	saved:	db	'Setup data saved',CR,LF,0
      70206461
      74612073
      61766564
      0D0A00
84DE  53657475	failed:	db	'Setup flash failed, checksum error',CR,LF,0
      7020666C
      61736820
      6661696C
      65642C20
      63686563
      6B73756D
      20657272
      6F720D0A
      00
		
8503  293A2000	gpunn:	db	'): ',0
8507  5072696D	gpdev:	db	'Primary/Default boot device (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20646576
      69636520
      2800
8525  5072696D	gpuni:	db	'Primary/Default boot unit (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20756E69
      74202800
8541  5072696D	gpstr:	db	'Primary/Default boot string (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20737472
      696E6720
      2800
FFFF          	if not nofp
855F  5365636F	gsdev:	db	'Secondary boot device (',0
      6E646172
      7920626F
      6F742064
      65766963
      65202800
8577  5365636F	gsuni:	db	'Secondary boot unit (',0
      6E646172
      7920626F
      6F742075
      6E697420
      2800
858D  5365636F	gsstr:	db	'Secondary boot string (',0
      6E646172
      7920626F
      6F742073
      7472696E
      67202800
		endif
FFFF          	if not z180
85A5  48382D35	g512k:	db	'H8-512K RAM installed (',0
      31324B20
      52414D20
      696E7374
      616C6C65
      64202800
		endif
85BD  485F3720	dport:	db	'H_7 Port (FF=use SW1) (',0
      506F7274
      20284646
      3D757365
      20535731
      29202800
		
85D5  00      	dirty:	db	0
85D6  0000    	curmsg:	dw	0
		
85D8          	inbuf:	ds	128	; input entry buffer
		
8658          		ds	128
		stack:	ds	0
		
86D8  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
		
8700          	last:	end



Statistics:

     4	passes
     0	jr promotions
   179	symbols
  1536	bytes

   235	macro calls
  3759	macro bytes
     0	invented symbols
