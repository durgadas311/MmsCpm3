		; Command module for SETUP
0002          	VERN	equ	02h
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
0000          	z180	equ	false
0000          	nofp	equ	false
		
			maclib	ram
**** ram.lib ****
**** csetup.asm ****
			maclib	setup
**** setup.lib ****
**** csetup.asm ****
0000          	 if z180
		 else
			maclib	z80
**** z80.lib ****
**** csetup.asm ****
		 endif
		
000D          	CR	equ	13
000A          	LF	equ	10
0008          	BS	equ	8
0003          	CTLC	equ	3
0007          	BEL	equ	7
001B          	ESC	equ	27
		
0000          	 if z180
		 endif
		
8000          		org	8000h	; out of reach of ROM overlay...
8000  08      	first:	db	HIGH (last-first)	; +0: num pages
8001  80      		db	HIGH first		; +1: ORG page
8002  FF00    		db	255,0	; +2,+3: phy drv base, num
		
8004  C31D80  		jmp	init	; +4: init entry
8007  C31F80  		jmp	exec	; +7: action entry
		
800A  43      		db	'C'	; +10: Command letter
800B  FF      		db	-1	; +11: front panel key
800C  00      		db	0	; +12: port, 0 if variable
800D  FFFFFF  		db	11111111b,11111111b,11111111b	; +13: FP display
8010  436F6E66		db	'Config Setup',0	; +16: mnemonic string
      69672053
      65747570
      00
		
801D          	init:
801D  AF      		xra	a	; NC
801E  C9      		ret
		
801F          	exec:
801F  118684  		lxi	d,signon
8022  CDF581  		call	msgout
8025  CD1B81  		call	get$su	; get a copy of setup data
8028  DCAF82  		cc	cserr	; offer to clear if checksum error
			; Primary/Default boot options
802B  112685  		lxi	d,gpdev
802E  210488  		lxi	h,last+dpdev
8031  CD4183  		call	getlet
8034  114485  		lxi	d,gpuni
8037  210588  		lxi	h,last+dpuni
803A  CDFA83  		call	getnum
803D  116085  		lxi	d,gpstr
8040  210688  		lxi	h,last+dpstr
8043  CD4484  		call	getstr
FFFF          	 if not nofp
			; Secondary boot options
8046  117E85  		lxi	d,gsdev
8049  218688  		lxi	h,last+dsdev
804C  CD4183  		call	getlet
804F  119685  		lxi	d,gsuni
8052  218788  		lxi	h,last+dsuni
8055  CDFA83  		call	getnum
8058  11AC85  		lxi	d,gsstr
805B  218888  		lxi	h,last+dsstr
805E  CD4484  		call	getstr
		 endif
			; Add-ons Installed
FFFF          	 if not z180
8061  11C485  		lxi	d,g512k
8064  210889  		lxi	h,last+m512k
8067  CDE282  		call	getyn
		 endif
		
806A  3E36    		mvi	a,'6'
806C  32DD85  		sta	dport+1
806F  11DC85  		lxi	d,dport
8072  210B89  		lxi	h,last+h67pt
8075  CDB783  		call	gethex
		
8078  3E34    		mvi	a,'4'
807A  32DD85  		sta	dport+1
807D  11DC85  		lxi	d,dport
8080  210C89  		lxi	h,last+h47pt
8083  CDB783  		call	gethex
		
8086  3E33    		mvi	a,'3'
8088  32DD85  		sta	dport+1
808B  11DC85  		lxi	d,dport
808E  210D89  		lxi	h,last+h37pt
8091  CDB783  		call	gethex
		
0000          	 if 0	; H17 is not configurable?
		 endif
8094  11F485  		lxi	d,vport
8097  211089  		lxi	h,last+vdipt
809A  CDB783  		call	gethex
0000          	 if z180
		 endif
		
			; TODO: more setup?
809D  3A0B86  		lda	dirty
80A0  B7      		ora	a
80A1  C2AB80  		jnz	mkchg
80A4  11C784  	xxchg:	lxi	d,nochg
80A7  CDF581  		call	msgout
80AA  C9      		ret
		
80AB  11DB84  	mkchg:	lxi	d,dochg
80AE  210E86  		lxi	h,inbuf
80B1  36FF    		mvi	m,0ffh
80B3  CDE282  		call	getyn
80B6  3A0E86  		lda	inbuf
80B9  B7      		ora	a
80BA  20E8    		jrnz	xxchg
80BC  110088  		lxi	d,last
80BF  01FE07  		lxi	b,sulen
80C2  CD5E81  		call	schksm
80C5  2A8181  		lhld	sum
80C8  228381  		shld	ssum
80CB  F3      		di
0000          	 if z180
		 else
80CC  3A3620  		lda	ctl$F2
80CF  F5      		push	psw
80D0  E6DF    		ani	11011111b	; ORG0 off
80D2  F688    		ori	10001000b	; WE, MEM1
80D4  D3F2    		out	0f2h
		 endif
80D6  210088  		lxi	h,last
80D9  110010  		lxi	d,suadr
80DC  012000  		lxi	b,susize/64
80DF  CD8882  		call	flash
			;jrc	error	; never returned, actually
80E2  F1      		pop	psw
80E3  F5      		push	psw
80E4  E67F    		ani	01111111b	; WE off
80E6  D3F2    		out	0f2h
80E8  110010  		lxi	d,suadr
80EB  01FE07  		lxi	b,sulen
80EE  CD3F81  		call	vchksm
80F1  2A8181  		lhld	sum
80F4  EB      		xchg
80F5  2A8381  		lhld	ssum
80F8  B7      		ora	a
80F9  ED52    		dsbc	d
80FB  2016    		jrnz	error
80FD  F1      		pop	psw
80FE  D3F2    		out	0f2h
0000          	 if z180
		 endif
8100  FB      		ei
8101  11EA84  		lxi	d,saved
8104  CDF581  		call	msgout
			; Update monitor copy
8107  210088  		lxi	h,last
810A  1100F8  		lxi	d,susave
810D  011101  		lxi	b,sumax
8110  EDB0    		ldir
8112  C9      		ret
		
		; PSW is on stack...
8113  F1      	error:	pop	psw
8114  11FD84  		lxi	d,failed
8117  CDF581  		call	msgout
811A  C9      		ret	; what else can we do?
		
811B  F3      	get$su:	di
0000          	 if z180
		 else
811C  3A3620  		lda	ctl$F2
811F  F5      		push	psw
8120  E6DF    		ani	11011111b	; ORG0 off
8122  F608    		ori	00001000b	; MEM1
8124  D3F2    		out	0f2h
8126  210010  		lxi	h,suadr
8129  110088  		lxi	d,last
812C  010008  		lxi	b,susize
812F  EDB0    		ldir
8131  F1      		pop	psw
8132  D3F2    		out	0f2h
		 endif
8134  FB      		ei
8135  110088  		lxi	d,last
8138  01FE07  		lxi	b,sulen
813B  CD3F81  		call	vchksm
813E  C9      		ret	; CY=checksum error
		
		; DE=code start, BC=length
		; Returns CY on error
813F  210000  	vchksm:	lxi	h,0
8142  228181  		shld	sum
8145  1A      	vchk0:	ldax	d
8146  CD7881  		call	sum1
8149  13      		inx	d
814A  0B      		dcx	b
814B  78      		mov	a,b
814C  B1      		ora	c
814D  20F6    		jrnz	vchk0
814F  218181  		lxi	h,sum
8152  0602    		mvi	b,2
8154  1A      	vchk2:	ldax	d
8155  BE      		cmp	m
8156  37      		stc
8157  C0      		rnz
8158  13      		inx	d
8159  23      		inx	h
815A  10F8    		djnz	vchk2
815C  AF      		xra	a	; NC
815D  C9      		ret
		
		; DE=code start, BC=length
		; Sets checksum after code
815E  210000  	schksm:	lxi	h,0
8161  228181  		shld	sum
8164  1A      	schk0:	ldax	d
8165  CD7881  		call	sum1
8168  13      		inx	d
8169  0B      		dcx	b
816A  78      		mov	a,b
816B  B1      		ora	c
816C  20F6    		jrnz	schk0
816E  218181  		lxi	h,sum
8171  7E      		mov	a,m
8172  12      		stax	d
8173  23      		inx	h
8174  13      		inx	d
8175  7E      		mov	a,m
8176  12      		stax	d
8177  C9      		ret
		
8178  218181  	sum1:	lxi	h,sum
817B  86      		add	m
817C  77      		mov	m,a
817D  D0      		rnc
817E  23      		inx	h
817F  34      		inr	m
8180  C9      		ret
		
8181  0000    	sum:	dw	0
8183  0000    	ssum:	dw	0
		
8185  3E1B    	liniz:	mvi	a,ESC
8187  320E86  		sta	inbuf
818A  0E01    		mvi	c,1
818C  C3A582  		jmp	crlf
818F  3600    	linix:	mvi	m,0	; terminate buffer
8191  C3A582  		jmp	crlf
		
		; input a filename from console, allow backspace
		; returns C=num chars
8194          	linin:
8194  210E86  		lxi	h,inbuf
8197  0E00    		mvi	c,0	; count chars
8199  CDEA81  	lini0	call	conin
819C  FE0D    		cpi	CR
819E  28EF    		jrz	linix
81A0  FE1B    		cpi	ESC
81A2  28E1    		jrz	liniz
81A4  FE03    		cpi	CTLC	; cancel
81A6  37      		stc
81A7  C8      		rz
81A8  FE08    		cpi	BS
81AA  281C    		jrz	backup
81AC  FE20    		cpi	' '
81AE  3811    		jrc	chrnak
81B0  FE7F    		cpi	'~'+1
81B2  300D    		jrnc	chrnak
81B4  77      	chrok:	mov	m,a
81B5  23      		inx	h
81B6  0C      		inr	c
81B7  FABF81  		jm	chrovf	; 128 chars max
81BA  CDDF81  		call	conout
			; TODO: detect overflow...
81BD  18DA    		jr	lini0
81BF  2B      	chrovf:	dcx	h
81C0  0D      		dcr	c
81C1  3E07    	chrnak:	mvi	a,BEL
81C3  CDDF81  		call	conout
81C6  18D1    		jr	lini0
81C8          	backup:
81C8  79      		mov	a,c
81C9  B7      		ora	a
81CA  28CD    		jrz	lini0
81CC  0D      		dcr	c
81CD  2B      		dcx	h
81CE  3E08    		mvi	a,BS
81D0  CDDF81  		call	conout
81D3  3E20    		mvi	a,' '
81D5  CDDF81  		call	conout
81D8  3E08    		mvi	a,BS
81DA  CDDF81  		call	conout
81DD  18BA    		jr	lini0
		
81DF          	chrout:
81DF  F5      	conout:	push	psw
81E0  DBED    	cono0:	in	0edh
81E2  E620    		ani	00100000b
81E4  28FA    		jrz	cono0
81E6  F1      		pop	psw
81E7  D3E8    		out	0e8h
81E9  C9      		ret
		
81EA  DBED    	conin:	in	0edh
81EC  E601    		ani	00000001b
81EE  28FA    		jrz	conin
81F0  DBE8    		in	0e8h
81F2  E67F    		ani	01111111b
81F4  C9      		ret
		
81F5  1A      	msgout:	ldax	d
81F6  B7      		ora	a
81F7  C8      		rz
81F8  CDDF81  		call	conout
81FB  13      		inx	d
81FC  18F7    		jr	msgout
		
		; A=number to print
		; leading zeroes blanked - must preserve B
81FE          	decout:
81FE  C5      		push	b
81FF  0E00    		mvi	c,0
8201  1664    		mvi	d,100
8203  CD2682  		call	divide
8206  160A    		mvi	d,10
8208  CD2682  		call	divide
820B  C630    		adi	'0'
820D  CDDF81  		call	chrout
8210  C1      		pop	b
8211  C9      		ret
		
8212          	hexout:
8212  F5      		push	psw
8213  07      		rlc
8214  07      		rlc
8215  07      		rlc
8216  07      		rlc
8217  CD1B82  		call	hexdig
821A  F1      		pop	psw
821B  E60F    	hexdig:	ani	0fh
821D  C690    		adi	90h
821F  27      		daa
8220  CE40    		aci	40h
8222  27      		daa
8223  C3DF81  		jmp	chrout
		
8226  1E00    	divide:	mvi	e,0
8228  92      	div0:	sub	d
8229  1C      		inr	e
822A  30FC    		jrnc	div0
822C  82      		add	d
822D  1D      		dcr	e
822E  2005    		jrnz	div1
8230  CB41    		bit	0,c
8232  2001    		jrnz	div1
8234  C9      		ret
8235  CBC1    	div1:	setb	0,c
8237  F5      		push	psw	; remainder
8238  3E30    		mvi	a,'0'
823A  83      		add	e
823B  CDDF81  		call	chrout
823E  F1      		pop	psw	; remainder
823F  C9      		ret
		
8240          	parshx:
8240  1600    		mvi	d,0
8242  7E      	px0:	mov	a,m
8243  B7      		ora	a
8244  C8      		rz
8245  D630    		sui	'0'
8247  D8      		rc
8248  FE0A    		cpi	'9'-'0'+1
824A  380A    		jrc	px3
824C  D611    		sui	'A'-'0'
824E  E6DF    		ani	11011111b	; toupper
8250  FE06    		cpi	'F'-'A'+1
8252  3F      		cmc
8253  D8      		rc
8254  C60A    		adi	10
8256  5F      	px3:	mov	e,a
8257  7A      		mov	a,d
8258  87      		add	a
8259  D8      		rc
825A  87      		add	a
825B  D8      		rc
825C  87      		add	a
825D  D8      		rc
825E  87      		add	a
825F  D8      		rc
8260  83      		add	e	; no CY possible
8261  57      		mov	d,a
8262  23      		inx	h
8263  10DD    		djnz	px0
8265  B7      		ora	a
8266  C9      		ret
		
		; Parse a 8-bit (max) decimal number
		; HL=string, B=count
		; Returns D=number, CY=error
8267          	parsnm:
8267  110000  		lxi	d,0
826A  7E      	pd0:	mov	a,m
826B  B7      		ora	a
826C  C8      		rz
826D  FE30    		cpi	'0'
826F  D8      		rc
8270  FE3A    		cpi	'9'+1
8272  3F      		cmc
8273  D8      		rc
8274  E60F    		ani	0fh
8276  5F      		mov	e,a
8277  7A      		mov	a,d
8278  87      		add	a	; *2
8279  D8      		rc
827A  87      		add	a	; *4
827B  D8      		rc
827C  82      		add	d	; *5
827D  D8      		rc
827E  87      		add	a	; *10
827F  D8      		rc
8280  83      		add	e	;
8281  D8      		rc
8282  57      		mov	d,a
8283  23      		inx	h
8284  10E4    		djnz	pd0
8286  B7      		ora	a	; NC
8287  C9      		ret
		
		; flash ROM from HL to DE, 64 bytes at a time.
		; DE must be on a 64-byte boundary.
		; BC=num pages to flash
		; returns CY on error, else HL,DE at next 64 bytes
		; caller must set WE... and MEM1 as needed.
8288          	flash:
8288  C5      		push	b
8289  014000  		lxi	b,64
828C  EDB0    		ldir
			; -----
828E  2B      		dcx	h
828F  1B      		dcx	d	; last addr written...
			; wait for write cycle to begin...
			; TODO: timeout this loop?
8290  1A      	flash2:	ldax	d
8291  AE      		xra	m
8292  E680    		ani	10000000b	; bit7 is inverted when busy...
8294  28FA    		jrz	flash2
			; wait for write cycle to end...
			; TODO: timeout this loop?
8296  1A      	flash0:	ldax	d
8297  AE      		xra	m
8298  E680    		ani	10000000b	; bit7 is inverted when busy...
829A  20FA    		jrnz	flash0
829C  23      		inx	h
829D  13      		inx	d
			; done with page...
			;call	progress	; TODO: progress needed?
829E  C1      		pop	b
829F  0B      		dcx	b
82A0  78      		mov	a,b
82A1  B1      		ora	c
82A2  20E4    		jrnz	flash
			;xra	a	; NC already
82A4  C9      		ret
		
82A5  3E0D    	crlf:	mvi	a,CR
82A7  CDDF81  		call	conout
82AA  3E0A    		mvi	a,LF
82AC  C3DF81  		jmp	conout
		
82AF  119984  	cserr:	lxi	d,csbad
82B2  CDF581  		call	msgout
82B5  210E86  		lxi	h,inbuf
82B8  36FF    		mvi	m,0ffh
82BA  CDE282  		call	getyn
82BD  3A0E86  		lda	inbuf
82C0  B7      		ora	a	; NZ=no
82C1  201B    		jrnz	cserr9
82C3  210088  		lxi	h,last
82C6  54      		mov	d,h
82C7  5D      		mov	e,l
82C8  36FF    		mvi	m,0ffh
82CA  13      		inx	d
82CB  01FF07  		lxi	b,susize-1
82CE  EDB0    		ldir
82D0  210000  		lxi	h,0
82D3  220288  		shld	last+subase
82D6  3E01    		mvi	a,1
82D8  320B86  		sta	dirty
82DB  C9      		ret
		
		; CY preserved if set...
82DC  E1      	nmerr9:	pop	h	; discard saved HL
82DD  D1      		pop	d	; discard saved DE
82DE  E1      	cserr9:	pop	h	; discard our ret adr
82DF  C3A480  		jmp	xxchg	; return to monitor
		
		; DE=prompt prefix, HL=value location
		; get a Y/N, Wait for CR, allow BS.
		; Stores 0ffh for "no", 000h for "yes"
82E2          	getyn:
82E2  CDF581  		call	msgout
82E5  7E      		mov	a,m
82E6  B7      		ora	a
82E7  3E4E    		mvi	a,'N'
82E9  2002    		jrnz	getyn1
82EB  3E59    		mvi	a,'Y'
82ED  CDDF81  	getyn1:	call	conout
82F0  112285  		lxi	d,gpunn
82F3  CDF581  		call	msgout
82F6  CDEA81  	getyn2:	call	conin
82F9  FE0D    		cpi	CR
82FB  CA9A83  		jz	getlt1	; same processing
82FE  E65F    		ani	01011111b	; toupper
8300  FE59    		cpi	'Y'
8302  280B    		jrz	getyn0
8304  FE4E    		cpi	'N'
8306  2807    		jrz	getyn0
8308  3E07    		mvi	a,BEL
830A  CDDF81  		call	conout
830D  18E7    		jr	getyn2
830F  CDDF81  	getyn0:	call	conout
8312  D64E    		sui	'N'	;  0='N',  X='Y'
8314  D601    		sui	1	; CY='N', NC='Y'
8316  9F      		sbb	a	; FF='N', 00='Y'
8317  4F      		mov	c,a
8318  CDEA81  	getyn5:	call	conin
831B  FE0D    		cpi	CR
831D  2875    		jrz	getlt3	; same processing
831F  FE08    		cpi	BS
8321  2807    		jrz	getyn4
8323  3E07    		mvi	a,BEL
8325  CDDF81  		call	conout
8328  18EE    		jr	getyn5
832A  CDDF81  	getyn4:	call	conout
832D  3E20    		mvi	a,' '
832F  CDDF81  		call	conout
8332  3E08    		mvi	a,BS
8334  CDDF81  		call	conout
8337  18BD    		jr	getyn2
		
		; DE=prompt prefix, HL=value location
		; get a single letter, toupper. Wait for CR, allow BS
		; TODO: allow value meaning "not defined"?
8339          	getlete:
8339  3E07    		mvi	a,BEL
833B  CDDF81  		call	conout
833E  CDA582  		call	crlf
8341          	getlet:
8341  ED530C86		sded	curmsg
8345  CDF581  		call	msgout
8348  7E      		mov	a,m
8349  FEFF    		cpi	0ffh
834B  2803    		jrz	getlt6
834D  CDDF81  		call	conout
8350  112285  	getlt6:	lxi	d,gpunn
8353  CDF581  		call	msgout
8356  CDEA81  	getlt2:	call	conin
8359  FE0D    		cpi	CR
835B  283D    		jrz	getlt1
835D  FE1B    		cpi	ESC
835F  2844    		jrz	getltx
8361  E65F    		ani	01011111b	; toupper
8363  FE42    		cpi	'B'	; 'A' means default, makes no sense here
8365  3837    		jrc	getlt0
8367  FE5B    		cpi	'Z'+1
8369  3033    		jrnc	getlt0
			; wait for CR, honor BS
836B  4F      		mov	c,a
836C  CDDF81  		call	conout
836F  CDEA81  	getlt5:	call	conin
8372  FE0D    		cpi	CR
8374  281E    		jrz	getlt3
8376  FE08    		cpi	BS
8378  280B    		jrz	getlt4
837A  FE1B    		cpi	ESC
837C  2827    		jrz	getltx
837E  3E07    		mvi	a,BEL
8380  CDDF81  		call	conout
8383  18EA    		jr	getlt5
8385  CDDF81  	getlt4:	call	conout
8388  3E20    		mvi	a,' '
838A  CDDF81  		call	conout
838D  3E08    		mvi	a,BS
838F  CDDF81  		call	conout
8392  18C2    		jr	getlt2
8394  71      	getlt3:	mov	m,c
8395  3E01    		mvi	a,1
8397  320B86  		sta	dirty
839A  CDA582  	getlt1:	call	crlf
839D  C9      		ret
839E  3E07    	getlt0:	mvi	a,BEL
83A0  CDDF81  		call	conout
83A3  18B1    		jr	getlt2
		
		; delete setting, re-prompt
83A5  36FF    	getltx:	mvi	m,0ffh
83A7  3E01    		mvi	a,1
83A9  320B86  		sta	dirty
83AC  ED5B0C86		lded	curmsg
83B0  1887    		jr	getlete
		
		; DE=prompt prefix, HL=value location
83B2          	gethexe:
83B2  3E07    		mvi	a,BEL
83B4  CDDF81  		call	conout
83B7          	gethex:
83B7  D5      		push	d
83B8  E5      		push	h
83B9  CDF581  		call	msgout
83BC  7E      		mov	a,m
83BD  CD1282  		call	hexout
83C0  112285  		lxi	d,gpunn
83C3  CDF581  		call	msgout
83C6  CD9481  		call	linin
83C9  DADC82  		jc	nmerr9
83CC  79      		mov	a,c
83CD  B7      		ora	a
83CE  286C    		jrz	getxit
83D0  3A0E86  		lda	inbuf
83D3  FE1B    		cpi	ESC	; delete setting
83D5  2813    		jrz	gethxx
83D7  41      		mov	b,c
83D8  210E86  		lxi	h,inbuf
83DB  CD4082  		call	parshx
83DE  7A      		mov	a,d
83DF  E1      		pop	h
83E0  D1      		pop	d
83E1  38CF    		jrc	gethexe
83E3  77      		mov	m,a
83E4  3E01    		mvi	a,1
83E6  320B86  		sta	dirty
83E9  C9      		ret
		
		; delete setting, re-prompt
83EA  E1      	gethxx:	pop	h
83EB  36FF    		mvi	m,0ffh
83ED  3E01    		mvi	a,1
83EF  320B86  		sta	dirty
83F2  D1      		pop	d
83F3  18BD    		jr	gethexe
		
		; DE=prompt prefix, HL=value location
83F5          	getnume:
83F5  3E07    		mvi	a,BEL
83F7  CDDF81  		call	conout
83FA          	getnum:
83FA  D5      		push	d
83FB  E5      		push	h
83FC  CDF581  		call	msgout
83FF  7E      		mov	a,m
8400  FEFF    		cpi	0ffh
8402  2803    		jrz	getnm0
8404  CDFE81  		call	decout
8407  112285  	getnm0:	lxi	d,gpunn
840A  CDF581  		call	msgout
840D  CD9481  		call	linin
8410  DADC82  		jc	nmerr9
8413  79      		mov	a,c
8414  B7      		ora	a
8415  2825    		jrz	getxit
8417  3A0E86  		lda	inbuf
841A  FE1B    		cpi	ESC	; delete setting
841C  2813    		jrz	getnmx
841E  41      		mov	b,c
841F  210E86  		lxi	h,inbuf
8422  CD6782  		call	parsnm
8425  7A      		mov	a,d
8426  E1      		pop	h
8427  D1      		pop	d
8428  38CB    		jrc	getnume
842A  77      		mov	m,a
842B  3E01    		mvi	a,1
842D  320B86  		sta	dirty
8430  C9      		ret
		
		; delete setting, re-prompt
8431  E1      	getnmx:	pop	h
8432  36FF    		mvi	m,0ffh
8434  3E01    		mvi	a,1
8436  320B86  		sta	dirty
8439  D1      		pop	d
843A  18B9    		jr	getnume
		
843C  E1      	getxit:	pop	h
843D  D1      		pop	d
843E  C9      		ret
		
		; DE=prompt prefix, HL=value location
843F          	getstre:
843F  3E07    		mvi	a,BEL
8441  CDDF81  		call	conout
8444          	getstr:
8444  D5      		push	d
8445  E5      		push	h
8446  CDF581  		call	msgout
8449  7E      		mov	a,m
844A  FEFF    		cpi	0ffh
844C  2804    		jrz	getst0
844E  EB      		xchg
844F  CDF581  		call	msgout
8452  112285  	getst0:	lxi	d,gpunn
8455  CDF581  		call	msgout
8458  CD9481  		call	linin
845B  DADC82  		jc	nmerr9
845E  79      		mov	a,c
845F  B7      		ora	a
8460  28DA    		jrz	getxit
			; no error checking left?
8462  E1      		pop	h
8463  D1      		pop	d
			; TODO: are we guaranteed 'inbuf' is terminated?
8464  110E86  		lxi	d,inbuf
8467  1A      		ldax	d
8468  FE1B    		cpi	ESC	; delete setting
846A  2809    		jrz	getstx
846C  1A      	getst2:	ldax	d
846D  B7      		ora	a
846E  280E    		jrz	getst1
8470  77      		mov	m,a
8471  23      		inx	h
8472  13      		inx	d
8473  18F7    		jr	getst2
8475  36FF    	getstx:	mvi	m,0ffh
8477  3E01    		mvi	a,1
8479  320B86  		sta	dirty
847C  18C1    		jr	getstre
847E  3600    	getst1:	mvi	m,0
8480  3E01    		mvi	a,1
8482  320B86  		sta	dirty
8485  C9      		ret
		
0000          	 if z180
		 endif
		
8486  6F6E6669	signon:	db	'onfig setup v'
      67207365
      74757020
      76
8493  302E32  		db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
8496  0D0A00  		db	CR,LF,0
		
8499  53657475	csbad:	db	'Setup bank checksum error. Clear setup data (',0
      70206261
      6E6B2063
      6865636B
      73756D20
      6572726F
      722E2043
      6C656172
      20736574
      75702064
      61746120
      2800
84C7  53657475	nochg:	db	'Setup not changed',CR,LF,0
      70206E6F
      74206368
      616E6765
      640D0A00
84DB  53617665	dochg:	db	'Save changes (',0
      20636861
      6E676573
      202800
84EA  53657475	saved:	db	'Setup data saved',CR,LF,0
      70206461
      74612073
      61766564
      0D0A00
84FD  53657475	failed:	db	'Setup flash failed, checksum error',CR,LF,0
      7020666C
      61736820
      6661696C
      65642C20
      63686563
      6B73756D
      20657272
      6F720D0A
      00
		
8522  293A2000	gpunn:	db	'): ',0
8526  5072696D	gpdev:	db	'Primary/Default boot device (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20646576
      69636520
      2800
8544  5072696D	gpuni:	db	'Primary/Default boot unit (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20756E69
      74202800
8560  5072696D	gpstr:	db	'Primary/Default boot string (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20737472
      696E6720
      2800
FFFF          	 if not nofp
857E  5365636F	gsdev:	db	'Secondary boot device (',0
      6E646172
      7920626F
      6F742064
      65766963
      65202800
8596  5365636F	gsuni:	db	'Secondary boot unit (',0
      6E646172
      7920626F
      6F742075
      6E697420
      2800
85AC  5365636F	gsstr:	db	'Secondary boot string (',0
      6E646172
      7920626F
      6F742073
      7472696E
      67202800
		 endif
FFFF          	 if not z180
85C4  48382D35	g512k:	db	'H8-512K RAM installed (',0
      31324B20
      52414D20
      696E7374
      616C6C65
      64202800
		 endif
85DC  485F3720	dport:	db	'H_7 Port (FF=use SW1) (',0
      506F7274
      20284646
      3D757365
      20535731
      29202800
85F4  56444950	vport:	db	'VDIP1 Port (FF=(D8)) (',0
      3120506F
      72742028
      46463D28
      44382929
      202800
0000          	 if z180
		 endif
		
860B  00      	dirty:	db	0
860C  0000    	curmsg:	dw	0
		
860E          	inbuf:	ds	128	; input entry buffer
		
868E          		ds	128
		stack:	ds	0
		
870E  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFF
		
8800          	last:	end



Statistics:

     4	passes
     0	jr promotions
   183	symbols
  1792	bytes

   437	macro calls
  3759	macro bytes
     0	invented symbols
