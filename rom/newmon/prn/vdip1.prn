                ; util routines for accessing VDIP1
                ; caller must define 'vdbuf' as input buffer,
                ; and 'vdip1' as base port.
                	maclib	z80
                
                	public	strcpy,strcmp,sync,runout
                	public	vdcmd,vdend,vdrd,vdmsg,vdout,vdprmp
                	extrn	vdbuf
                
 201B =         ticcnt	equ	201bh
                
 000D =         CR	equ	13
                
                	cseg
                
                ;****** must be kept in-sync with vdip1.lib ******;
                ; util routines for accessing VDIP1
                ; caller must define 'vdbuf' as input buffer,
                ; and 'vdip1' as base port.
                
 00D8 =         vdip1	equ	0d8h	; base port
                
 00D9 =         vd$dat	equ	vdip1+1
 00DA =         vd$sts	equ	vdip1+2
                
 0004 =         vd$txe	equ	00000100b	; Tx ready
 0008 =         vd$rxr	equ	00001000b	; Rx data ready
                
 0000 443A5C3E0Dvdprmp:	db	'D:\>',CR
 0005 7264662000rdf:	db	'rdf ',0,0,0,128,CR
                
                ; copy HL to DE, until NUL
                strcpy:
 000E 7E        	mov	a,m
 000F 12        	stax	d
 0010 B7        	ora	a
 0011 C8        	rz
 0012 23        	inx	h
 0013 13        	inx	d
                	jr	strcpy
 0014+18F8      	DB	18H,STRCPY-$-1
                
                ; compare DE to HL, until CR or NUL
                strcmp:
 0016 1A        	ldax	d
 0017 BE        	cmp	m
 0018 C0        	rnz
 0019 B7        	ora	a
 001A C8        	rz
 001B FE0D      	cpi	CR
 001D C8        	rz
 001E 23        	inx	h
 001F 13        	inx	d
                	jr	strcmp
 0020+18F4      	DB	18H,STRCMP-$-1
                
                ; send command, wait for prompt or error
                ; HL=command string, CR term
                vdcmd:	
 0022 CDCD00    	call	vdmsg
                vdend:
 0025 CD8100    	call	vdinp
 0028 210000    	lxi	h,vdbuf
 002B 110000    	lxi	d,vdprmp
 002E CD1600    	call	strcmp
 0031 C8        	rz	; OK
                	; error, always?
 0032 37        	stc
 0033 C9        	ret
                
                ; read record (128 bytes) from file, into HL
                ; returns CY if error, else HL at "next" addr
 0034 E5        vdrd:	push	h
 0035 210500    	lxi	h,rdf
 0038 CDCD00    	call	vdmsg
 003B E1        	pop	h
 003C CDB300    	call	vdinb
 003F E5        	push	h
 0040 CD8100    	call	vdinp
 0043 210000    	lxi	h,vdbuf
 0046 110000    	lxi	d,vdprmp
 0049 CD1600    	call	strcmp
 004C E1        	pop	h	; "next" buffer addr
 004D C8        	rz
 004E 37        	stc
 004F C9        	ret
                
 0050 0605      sync:	mvi	b,5
 0052 3E45      	mvi	a,'E'
 0054 CDC200    	call	vdout
 0057 3E0D      	mvi	a,CR
 0059 CDC200    	call	vdout
 005C CD8100    	call	vdinp	; line to vdbuf
 005F D8        	rc
 0060 3A0000    	lda	vdbuf
 0063 FE45      	cpi	'E'
                	jrnz	sync0
 0065+2006      	DB	20H,SYNC0-$-1
 0067 3A0100    	lda	vdbuf+1
 006A FE0D      	cpi	CR
 006C C8        	rz
                sync0:	djnz	sync
 006D+10E1      	DB	10H,SYNC-$-1
 006F 37        	stc
 0070 C9        	ret
                
                ; Observed timing:
                ; [0-562mS]
                ;	(cr)
                ;	Ver 03.68VDAPF On-Line:(cr)
                ; [250mS]
                ;	Device Detected P2(cr)
                ; [16-18mS]
                ;	No Upgrade(cr)
                ; [1-2mS]
                ;	D:\>(cr)
                ; Delays are measured between (cr)s, include all characters.
                
                ; get rid of any characters waiting... flush input
                ; Stop if we hit '>',CR
                runout0:
 0071 5F        	mov	e,a
                runout:
 0072 CD8F00    	call	vdinz	; short timeout...
 0075 D8        	rc		; done - nothing more to drain
 0076 FE0D      	cpi	CR
                	jrnz	runout0
 0078+20F7      	DB	20H,RUNOUT0-$-1
 007A 7B        	mov	a,e
 007B FE3E      	cpi	'>'
                	jrnz	runout
 007D+20F3      	DB	20H,RUNOUT-$-1
 007F AF        	xra	a
 0080 C9        	ret
                
                ;;;;;;;; everything else is private ;;;;;;;;;
                
                ; receive chars until CR, into vdbuf
                ; returns HL->[CR] (if NC)
 0081 210000    vdinp:	lxi	h,vdbuf
 0084 CD9800    vdi2:	call	vdinc
 0087 D8        	rc
 0088 77        	mov	m,a
 0089 FE0D      	cpi	CR
 008B C8        	rz
 008C 23        	inx	h
                	jr	vdi2
 008D+18F5      	DB	18H,VDI2-$-1
                
                ; short-timeout input - for draining
                vdinz:
 008F 0632      	mvi	b,50		; 100mS timeout
 0091 E5        	push	h
 0092 211B20    	lxi	h,ticcnt	; use 2mS increments
 0095 4E        	mov	c,m
                	jr	vdi0
 0096+1807      	DB	18H,VDI0-$-1
                
                ; avoid hung situations
                vdinc:
 0098 0606      	mvi	b,6		; 2.5-3 second timeout
 009A E5        	push	h
 009B 211C20    	lxi	h,ticcnt+1	; hi byte ticks at 512mS
 009E 4E        	mov	c,m		; current tick...
 009F DBDA      vdi0:	in	vd$sts
 00A1 E608      	ani	vd$rxr
                	jrnz	vdi1
 00A3+200A      	DB	20H,VDI1-$-1
 00A5 7E        	mov	a,m
 00A6 B9        	cmp	c
                	jrz	vdi0
 00A7+28F6      	DB	28H,VDI0-$-1
 00A9 4F        	mov	c,a
                	djnz	vdi0
 00AA+10F3      	DB	10H,VDI0-$-1
 00AC E1        	pop	h
 00AD 37        	stc
 00AE C9        	ret
 00AF DBD9      vdi1:	in	vd$dat
 00B1 E1        	pop	h
 00B2 C9        	ret
                
                ; get read data.
                ; HL=buffer, length always 128
 00B3 0680      vdinb:	mvi	b,128
 00B5 DBDA      vdb0:	in	vd$sts
 00B7 E608      	ani	vd$rxr
                	jrz	vdb0
 00B9+28FA      	DB	28H,VDB0-$-1
 00BB DBD9      	in	vd$dat
 00BD 77        	mov	m,a
 00BE 23        	inx	h
                	djnz	vdb0
 00BF+10F4      	DB	10H,VDB0-$-1
 00C1 C9        	ret
                
                ; send char to VDIP1
                ; A=char
 00C2 F5        vdout:	push	psw
 00C3 DBDA      vdo0:	in	vd$sts
 00C5 E604      	ani	vd$txe
                	jrz	vdo0
 00C7+28FA      	DB	28H,VDO0-$-1
 00C9 F1        	pop	psw
 00CA D3D9      	out	vd$dat
 00CC C9        	ret
                
                ; HL=message, terminated by CR
                vdmsg:
 00CD DBDA      	in	vd$sts
 00CF E604      	ani	vd$txe
                	jrz	vdmsg
 00D1+28FA      	DB	28H,VDMSG-$-1
 00D3 7E        	mov	a,m
 00D4 D3D9      	out	vd$dat
 00D6 FE0D      	cpi	CR	; CR
 00D8 C8        	rz
 00D9 23        	inx	h
                	jr	vdmsg
 00DA+18F1      	DB	18H,VDMSG-$-1
                ; end of library
                
 00DC           	end
