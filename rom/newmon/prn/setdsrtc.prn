                ; A util to set time/date into the DS1302 RTC.
                ; Prompts for a time/date string, and parses it and sets RTC
                
                	maclib	core
                	maclib	z80
                
 000D =         CR	equ	13
 000A =         LF	equ	10
 0009 =         TAB	equ	9
 0008 =         BS	equ	8
 0007 =         BEL	equ	7
 0003 =         CTLC	equ	3
                
 0080 =         rtc	equ	080h	; bit-bang port address
 0010 =         ds$ce	equ	00010000b
 0020 =         ds$wen	equ	00100000b
 0040 =         ds$clk	equ	01000000b
 0080 =         ds$wd	equ	10000000b
                
 2280 =         linbuf	equ	2280h
                
                	cseg
                
 0000 C30300    	jmp	start
                
                	dseg
 0000 4453313330signon:	db	'DS1302 Set Time',CR,LF
 0011 4375727265	db	'Current time: ',0
 0020 4E65772074newtime: db	'New time: ',0
 002B 0D0A456E74enter:	db	CR,LF,'Enter MM/DD/YY HH:MM:SS (24-hour)',CR,LF
 0050 3E2000    	db	'> ',0
 0053 54696D6520noset:	db	'Time not set',CR,LF,0
 0062 2028524554setmsg:	db	' (RETURN to set): ',0
 0075 4453313330setto:	db	'DS1302 set to ',0
                
                time:	; buffer for burst-mode DS1302 RTC data
 0084 00        sec:	db	0	; bit7 = CH
 0085 00        min:	db	0
 0086 00        hrs:	db	0	; bit7 = 12/24
 0087 00        dom:	db	0
 0088 00        mon:	db	0
 0089 00        dow:	db	0
 008A 00        yrs:	db	0
 0007 =         timez	equ	$-time
                ;prt:	db	80h	; bit7 = prot
                
 008B           	ds	64
 00CB           stack:	ds	0
                
 00CB 00        ds$ctl:	db	0
                
                	cseg
                start:
 0003 31CB00    	lxi	sp,stack
 0006 CDAD01    	call	dsend	; initialzes ctl port to idle state
 0009 210000    	lxi	h,signon
 000C CD4400    	call	msgout
 000F CDF401    	call	gettime
 0012 CD7A00    	call	show
 0015 212B00    	lxi	h,enter
 0018 CD4400    	call	msgout
                
 001B 218022    	lxi	h,linbuf
 001E CDBD00    	call	linin
                	jrc	quit
 0021+3833      	DB	38H,QUIT-$-1
 0023 218022    	lxi	h,linbuf
 0026 CDFC00    	call	parse
                	jrc	error
 0029+382B      	DB	38H,ERROR-$-1
 002B 212000    	lxi	h,newtime
 002E CD4400    	call	msgout
 0031 CD7A00    	call	show
 0034 216200    	lxi	h,setmsg
 0037 CD4400    	call	msgout
 003A 218022    	lxi	h,linbuf
 003D CDBD00    	call	linin
                	jrc	quit
 0040+3814      	DB	38H,QUIT-$-1
 0042 CDCB01    	call	settime
 0045 217500    	lxi	h,setto
 0048 CD4400    	call	msgout
 004B CDF401    	call	gettime
 004E CD7A00    	call	show
 0051 CD1B00    	call	crlf
                	jr	exit
 0054+1806      	DB	18H,EXIT-$-1
                
                error:	; TODO...
 0056 215300    quit:	lxi	h,noset
 0059 CD4400    	call	msgout
 005C 2A1E00    exit:	lhld	retmon
 005F E9        	pchl
                
                chrout:	liyd	conout
 0060+FD2A      	DB	0FDH,2AH
 0062+2600      	DW	CONOUT
                	pciy
 0064+FDE9      	DB	0FDH,0E9H
                
 0066 F5        hexout:	push	psw
 0067 07        	rlc
 0068 07        	rlc
 0069 07        	rlc
 006A 07        	rlc
 006B CD6F00    	call	hexdig
 006E F1        	pop	psw
 006F E60F      hexdig:	ani	0fh
 0071 C690      	adi	90h
 0073 27        	daa
 0074 CE40      	aci	40h
 0076 27        	daa
 0077 C36000    	jmp	chrout
                
                ; MM/DD/YY HH:MM:SS
 007A 3A8800    show:	lda	mon
 007D CD6600    	call	hexout
 0080 3E2F      	mvi	a,'/'
 0082 CD6000    	call	chrout
 0085 3A8700    	lda	dom
 0088 CD6600    	call	hexout
 008B 3E2F      	mvi	a,'/'
 008D CD6000    	call	chrout
 0090 3A8A00    	lda	yrs
 0093 CD6600    	call	hexout
 0096 3E20      	mvi	a,' '
 0098 CD6000    	call	chrout
 009B 3A8600    	lda	hrs
 009E CD6600    	call	hexout
 00A1 3E3A      	mvi	a,':'
 00A3 CD6000    	call	chrout
 00A6 3A8500    	lda	min
 00A9 CD6600    	call	hexout
 00AC 3E3A      	mvi	a,':'
 00AE CD6000    	call	chrout
 00B1 3A8400    	lda	sec
 00B4 CD6600    	call	hexout
 00B7 C9        	ret
                
 00B8 3600      linix:	mvi	m,0	; terminate buffer
 00BA C31B00    	jmp	crlf
                
                ; input a filename from console, allow backspace
                ; HL=buffer
                ; returns C=num chars, buffer NUL terminated
                linin:
 00BD 0E00      	mvi	c,0	; count chars
 00BF CD4A00    lini0	call	conin
 00C2 FE0D      	cpi	CR
                	jrz	linix
 00C4+28F2      	DB	28H,LINIX-$-1
 00C6 FE03      	cpi	CTLC	; cancel
 00C8 37        	stc
 00C9 C8        	rz
 00CA FE08      	cpi	BS
                	jrz	backup
 00CC+2817      	DB	28H,BACKUP-$-1
 00CE FE20      	cpi	' '
                	jrc	chrnak
 00D0+380C      	DB	38H,CHRNAK-$-1
 00D2 FE7F      	cpi	'~'+1
                	jrnc	chrnak
 00D4+3008      	DB	30H,CHRNAK-$-1
 00D6 77        chrok:	mov	m,a
 00D7 23        	inx	h
 00D8 0C        	inr	c
 00D9 CD6000    	call	chrout	; echo
                	; TODO: detect overflow...
                	jr	lini0
 00DC+18E1      	DB	18H,LINI0-$-1
 00DE 3E07      chrnak:	mvi	a,BEL
 00E0 CD6000    	call	chrout
                	jr	lini0
 00E3+18DA      	DB	18H,LINI0-$-1
                backup:
 00E5 79        	mov	a,c
 00E6 B7        	ora	a
                	jrz	lini0
 00E7+28D6      	DB	28H,LINI0-$-1
 00E9 0D        	dcr	c
 00EA 2B        	dcx	h
 00EB 3E08      	mvi	a,BS
 00ED CD6000    	call	chrout
 00F0 3E20      	mvi	a,' '
 00F2 CD6000    	call	chrout
 00F5 3E08      	mvi	a,BS
 00F7 CD6000    	call	chrout
                	jr	lini0
 00FA+18C3      	DB	18H,LINI0-$-1
                
                ; TODO: support reorder/partials?
                ; HL="MM/DD/YY HH:MM:SS"
                parse:
                	; TODO: skip blanks
 00FC CD4C01    	call	parsnm	; month
 00FF 7E        	mov	a,m
 0100 FE2F      	cpi	'/'
 0102 37        	stc
 0103 C0        	rnz
 0104 23        	inx	h
 0105 79        	mov	a,c
 0106 328800    	sta	mon
 0109 CD4C01    	call	parsnm	; day of month
 010C 7E        	mov	a,m
 010D FE2F      	cpi	'/'
 010F 37        	stc
 0110 C0        	rnz
 0111 23        	inx	h
 0112 79        	mov	a,c
 0113 328700    	sta	dom
 0116 CD4C01    	call	parsnm	; year of century
 0119 7E        	mov	a,m
 011A FE20      	cpi	' '	; or NUL?
 011C 37        	stc
 011D C0        	rnz
 011E 23        	inx	h
 011F 79        	mov	a,c
 0120 328A00    	sta	yrs
 0123 CD4C01    	call	parsnm	; hour (24-hour)
 0126 7E        	mov	a,m
 0127 FE3A      	cpi	':'
 0129 37        	stc
 012A C0        	rnz
 012B 23        	inx	h
 012C 79        	mov	a,c
 012D 328600    	sta	hrs
 0130 CD4C01    	call	parsnm	; minutes
 0133 7E        	mov	a,m
 0134 FE3A      	cpi	':'	; seconds optional?
 0136 37        	stc
 0137 C0        	rnz
 0138 23        	inx	h
 0139 79        	mov	a,c
 013A 328500    	sta	min
 013D CD4C01    	call	parsnm	; seconds
 0140 7E        	mov	a,m
 0141 FE00      	cpi	0	; blanks? others?
 0143 37        	stc
 0144 C0        	rnz
 0145 23        	inx	h
 0146 79        	mov	a,c
 0147 328400    	sta	sec
 014A AF        	xra	a
 014B C9        	ret
                
                ; parse (up to) two digits, return C = BCD number
                ; HL=input string
                ; returns HL at next char
 014C CD5701    parsnm:	call	pnm
 014F 78        	mov	a,b
 0150 07        	rlc
 0151 07        	rlc
 0152 07        	rlc
 0153 07        	rlc
 0154 B1        	ora	c
 0155 4F        	mov	c,a
 0156 C9        	ret
                
                ; parse (up to) two digits, return B=10's, C=1's
                ; HL=input string
                ; returns HL at next char
                pnm:
 0157 010000    	lxi	b,0
 015A 7E        	mov	a,m
 015B D630      	sui	'0'
 015D D8        	rc
 015E FE0A      	cpi	10
 0160 3F        	cmc
 0161 D8        	rc
 0162 23        	inx	h
 0163 4F        	mov	c,a
 0164 7E        	mov	a,m
 0165 D630      	sui	'0'
 0167 D8        	rc
 0168 FE0A      	cpi	10
 016A 3F        	cmc
 016B D8        	rc
 016C 23        	inx	h
 016D 41        	mov	b,c
 016E 4F        	mov	c,a
 016F C9        	ret
                
                ; DS1302 routines, using NC-89 ports
                ; "in rtc" reads SDA on D0
                ; "out rtc" ... bit bang...
                
                ; get a byte from DS1302. Assumes read command already sent.
                ; return byte in E, rtc ctrl port same state as entry (ds$clk high)
                dsget:
 0170 1E00      	mvi	e,0
 0172 0608      	mvi	b,8
 0174 3ACB00    	lda	ds$ctl
 0177 F620      	ori	ds$wen	; disable write
                dsg1:
 0179 E6BF      	ani	not ds$clk	; clock low
 017B D380      	out	rtc
 017D 00        	nop		; delay >= 250nS
 017E F5        	push	psw
 017F DB80      	in	rtc		; read data line
 0181 1F        	rar
                	rarr	e
 0182+CB1B      	DB	0CBH, 18H + E
 0184 F1        	pop	psw
 0185 F640      	ori	ds$clk
 0187 D380      	out	rtc
 0189 00        	nop		; delay >= 250nS
                	djnz	dsg1
 018A+10ED      	DB	10H,DSG1-$-1
 018C 32CB00    	sta	ds$ctl
 018F C9        	ret
                
                ; output byte in E (destructive)
                dsput:
 0190 0608      	mvi	b,8
 0192 3ACB00    	lda	ds$ctl
 0195 E6DF      	ani	not ds$wen	; /WE active
                dsp1:
 0197 E6BF      	ani	not ds$clk	; clock low
 0199 D380      	out	rtc
 019B 00        	nop		; delay >= 250nS
 019C 17        	ral		; pop old data bit off...
                	rarr	e	; CY = next data bit
 019D+CB1B      	DB	0CBH, 18H + E
 019F 1F        	rar		; new data bit in place
                ;	jrnc	dsp2
                ;	ori	ds$wd
                ;	jr	dsp3
                ;dsp2:	ani	not ds$wd
 01A0 D380      dsp3:	out	rtc
 01A2 F640      	ori	ds$clk		; clock high
 01A4 D380      	out	rtc
 01A6 00        	nop		; delay >= 250nS
                	djnz	dsp1
 01A7+10EE      	DB	10H,DSP1-$-1
 01A9 32CB00    	sta	ds$ctl	; leave clk high, /WE asserted, data = ?
 01AC C9        	ret
                
                dsend:
 01AD 3E20      	mvi	a,ds$wen
 01AF D380      	out	rtc
 01B1 32CB00    	sta	ds$ctl
 01B4 C9        	ret
                
                ; command byte in E (destroyed)
                dscmd:
 01B5 CDAD01    	call	dsend	; force idle
 01B8 00        	nop	; delay >= 1uS
 01B9 00        	nop
 01BA 00        	nop
 01BB 00        	nop
 01BC F610      	ori	ds$ce
 01BE D380      	out	rtc
 01C0 32CB00    	sta	ds$ctl
 01C3 00        	nop	; delay >= 1uS
 01C4 00        	nop
 01C5 00        	nop
 01C6 00        	nop
 01C7 CD9001    	call	dsput
 01CA C9        	ret
                
                settime:
 01CB 1E8E      	mvi	e,10001110b	; write ctrl reg (disable prot)
 01CD CDB501    	call	dscmd
 01D0 1E00      	mvi	e,0		; unprotect
 01D2 CD9001    	call	dsput
 01D5 CDAD01    	call	dsend
 01D8 1EBE      	mvi	e,10111110b	; burst write clock
 01DA CDB501    	call	dscmd
 01DD 218400    	lxi	h,time
 01E0 0607      	mvi	b,timez
 01E2 C5        st1:	push	b
 01E3 5E        	mov	e,m
 01E4 CD9001    	call	dsput
 01E7 23        	inx	h
 01E8 C1        	pop	b
                	djnz	st1
 01E9+10F7      	DB	10H,ST1-$-1
 01EB 1E80      	mvi	e,80h		; protect
 01ED CD9001    	call	dsput
 01F0 C3AD01    	jmp	dsend
 01F3 C9        	ret
                
                gettime:
 01F4 1EBF      	mvi	e,10111111b	; burst read clock
 01F6 CDB501    	call	dscmd
 01F9 218400    	lxi	h,time
 01FC 0607      	mvi	b,timez
 01FE C5        gt1:	push	b
 01FF CD7001    	call	dsget
 0202 73        	mov	m,e
 0203 23        	inx	h
 0204 C1        	pop	b
                	djnz	gt1
 0205+10F7      	DB	10H,GT1-$-1
 0207 C3AD01    	jmp	dsend
                
 020A           	end
