		; Boot Module for WizNet
			maclib	ram
**** ram.lib ****
**** bwiznet.asm ****
			maclib	core
**** core.lib ****
**** bwiznet.asm ****
			maclib	z80
**** z80.lib ****
**** bwiznet.asm ****
		
		; WIZNET/NVRAM (SPI adapter) defines
0040          	spi	equ	40h	; base port
0040          	spi$dat	equ	spi+0
0041          	spi$ctl	equ	spi+1	; must be spi$dat+1
0041          	spi$sta	equ	spi+1
		
0001          	WZSCS	equ	01b	; /SCS for WIZNET
0002          	NVSCS	equ	10b	; /SCS for NVRAM
		
		; NVRAM constants
		; NVRAM/SEEPROM commands
0003          	NVRD	equ	00000011b
0002          	NVWR	equ	00000010b
0005          	RDSR	equ	00000101b
0006          	WREN	equ	00000110b
		; NVRAM/SEEPROM status bits
0001          	WIP	equ	00000001b
		
		; WIZNET constants
0008          	nsocks	equ	8
0008          	sock0	equ	000$01$000b	; base pattern for Sn_ regs
0014          	txbuf0	equ	000$10$100b	; base pattern for Tx buffer
0018          	rxbuf0	equ	000$11$000b	; base pattern for Rx buffer
		
		; common regs
0001          	gar	equ	1
0005          	subr	equ	5
0009          	shar	equ	9
000F          	sipr	equ	15
0015          	ir	equ	21
0017          	sir	equ	23
001D          	pmagic	equ	29
		
		; socket regs, relative
0000          	sn$mr	equ	0
0001          	sn$cr	equ	1
0002          	sn$ir	equ	2
0003          	sn$sr	equ	3
0004          	sn$prt	equ	4
000C          	sn$dipr	equ	12
0010          	sn$dprt	equ	16
001D          	sn$resv8 equ	29	; reserved
0024          	sn$txwr	equ	36
0026          	sn$rxrsr equ	38
0028          	sn$rxrd	equ	40
002F          	sn$kpalvtr equ	47
		
001D          	NvKPALVTR equ	sn$resv8 ; place to stash keep-alive in nvram
		
		; socket commands
0001          	OPEN	equ	01h
0004          	CONNECT	equ	04h
0008          	DISC	equ	08h
0020          	SEND	equ	20h
0040          	RECV	equ	40h
		
		; socket status
0013          	SOKINIT	equ	13h
0017          	ESTABLISHED equ	17h
		
2280          		org	2280h
2280          	server:	ds	1	; SID, dest of send
2281          	nodeid:	ds	1	; our node id
2282          	cursok:	ds	1	; current socket select patn
2283          	curptr:	ds	2	; into chip mem
2285          	msgptr:	ds	2
2287          	msglen:	ds	2
2289          	totlen:	ds	2
228B          	dma:	ds	2
		
2300          		org	2300h
		msgbuf:	ds	0
2300          	msg$fmt: ds	1
2301          	msg$did: ds	1
2302          	msg$sid: ds	1
2303          	msg$fnc: ds	1
2304          	msg$siz: ds	1
2305          	msg$dat: ds	128
		
2400          		org	2400h
2400          	nvbuf:	ds	512
		
1000          		org	1000h
1000  04      	first:	db	HIGH (last-first)	; +0: num pages
1001  10      		db	HIGH first		; +1: ORG page
1002  3C01    		db	60,1	; +2,+3: phy drv base, num
		
1004  C31710  		jmp	init	; +4: init entry
1007  C33911  		jmp	boot	; +7: boot entry
		
100A  57      		db	'W'	; +10: Boot command letter
100B  05      		db	5	; +11: front panel key
100C  40      		db	40h	; +12: port, 0 if variable
100D  918C9D  		db	10010001b,10001100b,10011101b	; +13: FP display ("NET")
1010  57697A4E		db	'WizNet',0	; +16: mnemonic string
      657400
		
1017          	init:
1017  DDE5    		pushix
1019  3EC3    		mvi	a,0c3h
101B  211D12  		lxi	h,wizsr
101E  322300  		sta	sndrcv
1021  222400  		shld	sndrcv+1
1024  21E011  		lxi	h,wizopn
1027  323300  		sta	wizopen
102A  223400  		shld	wizopen+1
102D  210C12  		lxi	h,wizcls
1030  223600  		shld	wizclose	; not a jump
1033  CDF412  		call	wizcfg	; configure chip from nvram
1036  DDE1    		popix
1038  D8      		rc
1039  328122  		sta	nodeid ; our slave (client) ID
103C  AF      		xra	a	; NC
103D  C9      		ret
		
103E          	getwiz1:
103E  3E01    		mvi	a,WZSCS
1040  D341    		out	spi$ctl
1042  0E40    		mvi	c,spi$dat
1044  AF      		xra	a
1045  ED79    		outp	a	; hi adr always 0
1047  ED59    		outp	e
1049  CB92    		res	2,d
104B  ED51    		outp	d
104D  ED78    		inp	a	; prime MISO
104F  ED78    		inp	a
1051  F5      		push	psw
1052  0C      		inr	c	; ctl port
1053  AF      		xra	a
1054  ED79    		outp	a	; clear SCS
1056  F1      		pop	psw
1057  C9      		ret
		
1058          	putwiz1:
1058  F5      		push	psw
1059  3E01    		mvi	a,WZSCS
105B  D341    		out	spi$ctl
105D  0E40    		mvi	c,spi$dat
105F  AF      		xra	a
1060  ED79    		outp	a	; hi adr always 0
1062  ED59    		outp	e
1064  CBD2    		setb	2,d
1066  ED51    		outp	d
1068  F1      		pop	psw
1069  ED79    		outp	a	; data
106B  0C      		inr	c	; ctl port
106C  AF      		xra	a
106D  ED79    		outp	a	; clear SCS
106F  C9      		ret
		
		; Get 16-bit value from chip
		; Prereq: IDM_AR0 already set, auto-incr on
		; Entry: A=value for IDM_AR1
		; Return: HL=register pair contents
1070          	getwiz2:
1070  3E01    		mvi	a,WZSCS
1072  D341    		out	spi$ctl
1074  0E40    		mvi	c,spi$dat
1076  AF      		xra	a
1077  ED79    		outp	a	; hi adr always 0
1079  ED59    		outp	e
107B  CB92    		res	2,d
107D  ED51    		outp	d
107F  ED78    		inp	a	; prime MISO
1081  ED60    		inp	h	; data
1083  ED68    		inp	l	; data
1085  0C      		inr	c	; ctl port
1086  AF      		xra	a
1087  ED79    		outp	a	; clear SCS
1089  C9      		ret
		
		; HL = output data, E = off, D = BSB, B = len
108A          	wizset:
108A  3E01    		mvi	a,WZSCS
108C  D341    		out	spi$ctl
108E  0E40    		mvi	c,spi$dat
1090  AF      		xra	a
1091  ED79    		outp	a	; hi adr always 0
1093  ED59    		outp	e
1095  CBD2    		setb	2,d
1097  ED51    		outp	d
1099  EDB3    		outir
109B  0C      		inr	c	; ctl port
109C  AF      		xra	a
109D  ED79    		outp	a	; clear SCS
109F  C9      		ret
		
		; Put 16-bit value to chip
		; Prereq: IDM_AR0 already set, auto-incr on
		; Entry: A=value for IDM_AR1
		;        HL=register pair contents
10A0          	putwiz2:
10A0  3E01    		mvi	a,WZSCS
10A2  D341    		out	spi$ctl
10A4  0E40    		mvi	c,spi$dat
10A6  AF      		xra	a
10A7  ED79    		outp	a	; hi adr always 0
10A9  ED59    		outp	e
10AB  CBD2    		setb	2,d
10AD  ED51    		outp	d
10AF  ED61    		outp	h	; data to write
10B1  ED69    		outp	l
10B3  0C      		inr	c	; ctl port
10B4  AF      		xra	a
10B5  ED79    		outp	a	; clear SCS
10B7  C9      		ret
		
		; Issue command, wait for complete
		; D=Socket ctl byte
		; Returns: A=Sn_SR
10B8  47      	wizcmd:	mov	b,a
10B9  1E01    		mvi	e,sn$cr
10BB  CBD2    		setb	2,d
10BD  3E01    		mvi	a,WZSCS
10BF  D341    		out	spi$ctl
10C1  0E40    		mvi	c,spi$dat
10C3  AF      		xra	a
10C4  ED79    		outp	a	; hi adr always 0
10C6  ED59    		outp	e
10C8  ED51    		outp	d
10CA  ED41    		outp	b	; command
10CC  0C      		inr	c	; ctl port
10CD  AF      		xra	a
10CE  ED79    		outp	a	; clear SCS
10D0  CD3E10  	wc0:	call	getwiz1
10D3  B7      		ora	a
10D4  20FA    		jrnz	wc0
10D6  1E03    		mvi	e,sn$sr
10D8  CD3E10  		call	getwiz1
10DB  C9      		ret
		
		; HL=socket relative pointer (TX_WR)
		; DE=length (preserved, not used)
		; Returns: HL=msgptr, C=spi$dat
10DC          	cpsetup:
10DC  3E01    		mvi	a,WZSCS
10DE  D341    		out	spi$ctl
10E0  0E40    		mvi	c,spi$dat
10E2  ED61    		outp	h
10E4  ED69    		outp	l
10E6  3A8222  		lda	cursok
10E9  B0      		ora	b
10EA  ED79    		outp	a
10EC  2A8522  		lhld	msgptr
10EF  C9      		ret
		
		; length always <= 133 bytes, never overflows OUTIR/INIR
10F0          	cpyout:
10F0  0614    		mvi	b,txbuf0
10F2  CDDC10  		call	cpsetup
10F5  43      		mov	b,e	; length
10F6  EDB3    		outir		; send data
10F8  228522  		shld	msgptr
10FB  0C      		inr	c	; ctl port
10FC  AF      		xra	a
10FD  ED79    		outp	a	; clear SCS
10FF  C9      		ret
		
		; HL=socket relative pointer (RX_RD)
		; DE=length
		; Destroys IDM_AR0, IDM_AR1
		; length always <= 133 bytes, never overflows OUTIR/INIR
1100          	cpyin:
1100  0618    		mvi	b,rxbuf0
1102  CDDC10  		call	cpsetup	;
1105  ED78    		inp	a	; prime MISO
1107  43      		mov	b,e	; fraction of page
1108  EDB2    		inir		; recv data
110A  228522  		shld	msgptr
110D  0C      		inr	c	; ctl port
110E  AF      		xra	a
110F  ED79    		outp	a	; clear SCS
1111  C9      		ret
		
		; L=bits to reset
		; D=socket base
1112          	wizsts:
1112  1E02    		mvi	e,sn$ir
1114  CD3E10  		call	getwiz1	; destroys C
1117  F5      		push	psw
1118  A5      		ana	l
1119  2804    		jrz	ws0	; don't reset if not set (could race)
111B  7D      		mov	a,l
111C  CD5810  		call	putwiz1
111F  F1      	ws0:	pop	psw
1120  C9      		ret
		
		; D=socket BSB, C=bits to check
		; Return: A=status reg
1121  21007D  	wizist:	lxi	h,32000
1124  C5      	wst0:	push	b	; C has status bits to check
1125  E5      		push	h
1126  69      		mov	l,c
1127  CD1211  		call	wizsts
112A  E1      		pop	h
112B  C1      		pop	b
112C  47      		mov	b,a
112D  A1      		ana	c
112E  2007    		jrnz	wst1
1130  2B      		dcx	h
1131  7C      		mov	a,h
1132  B5      		ora	l
1133  20EF    		jrnz	wst0
1135  37      		stc
1136  C9      		ret
1137  78      	wst1:	mov	a,b
1138  C9      		ret
		
		;	WIZNET boot routine
		;
1139          	boot:
			; extract optional string. must do it now, before we
			; overwrite bootbf.
1139  110523  		lxi	d,msg$dat	; target for string
113C  218022  		lxi	h,bootbf
113F  AF      		xra	a
1140  320423  		sta	msg$siz
1143  7E      		mov	a,m
1144  FEC3    		cpi	0c3h	; no string
1146  2809    		jrz	nb5
1148  3C      		inr	a	; include len byte
1149  4F      		mov	c,a
			; we send N+1 bytes, NUL term
114A  320423  		sta	msg$siz
114D  0600    		mvi	b,0
114F  EDB0    		ldir
1151  AF      	nb5:	xra	a
1152  12      		stax	d	; NUL term
1153  3A3121  		lda	AIO$UNI	; server id, 0..9
1156  328022  		sta	server
			; locate server node id in chip's socket regs.
			;
1159  0608    		mvi	b,nsocks
115B  110408  		lxi	d,(sock0 shl 8) + sn$prt
115E          	nb1:
115E  CD7010  		call	getwiz2	; destroys C,HL
1161  7C      		mov	a,h
1162  FE31    		cpi	31h
1164  2006    		jrnz	nb0
1166  3A8022  		lda	server
1169  BD      		cmp	l
116A  2807    		jrz	nb2	; found server socket
116C          	nb0:
116C  3E20    		mvi	a,001$00$000b
116E  82      		add	d	; next socket
116F  57      		mov	d,a
1170  10EC    		djnz	nb1
1172  C9      		ret	; error: server not configured
1173          	nb2:	; D = server socket BSB
1173  7A      		mov	a,d
1174  E6E0    		ani	11100000b
1176  328222  		sta	cursok
1179  CDE011  		call	wizopn
117C  D8      		rc	; any error
117D  3E01    		mvi	a,1	; FNC for "boot me"
117F  320323  		sta	msg$fnc
			; string already setup
1182          	loop:
1182  3EB0    		mvi	a,0b0h	; FMT for client boot messages
1184  320023  		sta	msg$fmt
1187  CD1D12  		call	wizsr
118A  D8      		rc	; network failure
118B  3A0023  		lda	msg$fmt
118E  FEB1    		cpi	0b1h	; FMT for server boot responses
1190  C0      		rnz
			; TODO: verify SID?
1191  3A0323  		lda	msg$fnc
1194  B7      		ora	a
1195  C8      		rz	; NAK - error
1196  3D      		dcr	a
1197  2830    		jrz	ldmsg
1199  3D      		dcr	a
119A  2825    		jrz	stdma
119C  3D      		dcr	a
119D  2809    		jrz	load
119F  3D      		dcr	a
11A0  C0      		rnz	; unsupported FNC
			; done: execute boot code
11A1  CD0C12  		call	wizcls
11A4  2A0523  		lhld	msg$dat
11A7  E9      		pchl
11A8  2A8B22  	load:	lhld	dma
11AB  EB      		xchg
11AC  210523  		lxi	h,msg$dat
11AF  018000  		lxi	b,128
11B2  EDB0    		ldir
11B4  EB      		xchg
11B5  228B22  		shld	dma
11B8  AF      	ack:	xra	a	; FNC 0 = ACK
11B9  320323  		sta	msg$fnc
11BC  320423  		sta	msg$siz
11BF  18C1    		jr	loop
11C1  2A0523  	stdma:	lhld	msg$dat
11C4  228B22  		shld	dma
11C7  18EF    		jr	ack
11C9  CD1B00  	ldmsg:	call	crlf
11CC  210523  		lxi	h,msg$dat
11CF  7E      	ldm0:	mov	a,m
11D0  23      		inx	h
11D1  FE24    		cpi	'$'
11D3  28E3    		jrz	ack
11D5  CDDA11  		call	chrout
11D8  18F5    		jr	ldm0
		
		; must preserve HL
11DA  FD2A2600	chrout:	liyd	conout
11DE  FDE9    		pciy
		
		; D = server socket BSB
11E0          	wizopn:
11E0  1E03    		mvi	e,sn$sr
11E2  CD3E10  		call	getwiz1
11E5  FE17    		cpi	ESTABLISHED
11E7  C8      		rz	; ready to rock-n-roll...
			; try to open...
11E8  FE13    		cpi	SOKINIT
11EA  2809    		jrz	nb4
11EC  3E01    		mvi	a,OPEN
11EE  CDB810  		call	wizcmd
11F1  FE13    		cpi	SOKINIT
11F3  37      		stc
11F4  C0      		rnz	; failed to open (init)
11F5  1E02    	nb4:	mvi	e,sn$ir	; ensure no lingering bits...
11F7  3E1F    		mvi	a,00011111b
11F9  CD5810  		call	putwiz1
11FC  3E04    		mvi	a,CONNECT
11FE  CDB810  		call	wizcmd
1201  0E0B    		mvi	c,00001011b	; CON, DISCON, or TIMEOUT
1203  CD2111  		call	wizist	; returns when one is set, or CY
1206  D8      		rc
1207  E601    		ani	00000001b	; need CON
1209  D601    		sui	00000001b	; CY if bit is 0
120B  C9      		ret
		
120C          	wizcls:
120C  3A8222  		lda	cursok
120F  F608    		ori	sock0
1211  57      		mov	d,a
1212  3E08    		mvi	a,DISC
1214  CDB810  		call	wizcmd
1217  0E0A    		mvi	c,00001010b	; DISCON, or TIMEOUT
1219  CD2111  		call	wizist	; returns when one is set, or CY
121C  C9      		ret	; don't care which result?
		
		;	Send Message on Network, receive response
		;	msgbuf setup with FMT, FNC, LEN, data
		;	msg len always <= 128 (133 total) bytes.
121D          	wizsr:			; BC = message addr
			; TODO: drain/flush receiver
		; begin send phase
121D  210023  		lxi	h,msgbuf
1220  228522  		shld	msgptr
1223  3A8222  		lda	cursok
1226  F608    		ori	sock0
1228  57      		mov	d,a
			; D=socket patn
1229  3A8022  		lda	server
122C  320123  		sta	msg$did	; Set Server ID (dest) in header
122F  3A8122  		lda	nodeid
1232  320223  		sta	msg$sid	; Set Slave ID (src) in header
1235  3A0423  		lda	msg$siz	; msg siz (-1)
1238  C606    		adi	5+1	; hdr, +1 for (-1)
123A  6F      		mov	l,a
123B  2600    		mvi	h,0
123D  228722  		shld	msglen
1240  1E24    		mvi	e,sn$txwr
1242  CD7010  		call	getwiz2
1245  228322  		shld	curptr
1248  2A8722  		lhld	msglen
124B  ED4B8322		lbcd	curptr
124F  09      		dad	b
1250  1E24    		mvi	e,sn$txwr
1252  CDA010  		call	putwiz2
			; send data
1255  2A8722  		lhld	msglen
1258  EB      		xchg
1259  2A8322  		lhld	curptr
125C  CDF010  		call	cpyout
125F  3A8222  		lda	cursok
1262  F608    		ori	sock0
1264  57      		mov	d,a
1265  3E20    		mvi	a,SEND
1267  CDB810  		call	wizcmd
			; ignore Sn_SR?
126A  0E1A    		mvi	c,00011010b	; SEND_OK bit, TIMEOUT, DISConnect
126C  CD2111  		call	wizist
126F  D8      		rc
1270  E610    		ani	00010000b	; SEND_OK
1272  37      		stc
1273  C8      		rz
		; begin recv phase - loop
1274  3A8222  		lda	cursok	; is D still socket BSB?
1277  F608    		ori	sock0
1279  57      		mov	d,a
		;	Receive Message from Network
127A  210023  		lxi	h,msgbuf
127D  228522  		shld	msgptr
1280  0E06    		mvi	c,00000110b	; RECV, DISC
1282  CD2111  		call	wizist	; check for recv within timeout
1285  386A    		jrc	rerr
1287  E604    		ani	00000100b	; RECV
1289  2866    		jrz	rerr
128B  210000  		lxi	h,0
128E  228922  		shld	totlen
1291          	rm0:	; D must be socket base...
1291  1E26    		mvi	e,sn$rxrsr	; length
1293  CD7010  		call	getwiz2
1296  7C      		mov	a,h
1297  B5      		ora	l
1298  28F7    		jrz	rm0
129A  228722  		shld	msglen		; not CP/NET msg len
129D  1E28    		mvi	e,sn$rxrd	; pointer
129F  CD7010  		call	getwiz2
12A2  228322  		shld	curptr
12A5  ED4B8722		lbcd	msglen	; BC=Sn_RX_RSR
12A9  2A8922  		lhld	totlen
12AC  B7      		ora	a
12AD  ED42    		dsbc	b
12AF  228922  		shld	totlen	; might be negative...
12B2  ED4B8322		lbcd	curptr
12B6  2A8722  		lhld	msglen	; BC=Sn_RX_RD, HL=Sn_RX_RSR
12B9  09      		dad	b	; HL=nxt RD
12BA  1E28    		mvi	e,sn$rxrd
12BC  CDA010  		call	putwiz2
			; DE destroyed...
12BF  ED5B8722		lded	msglen
12C3  2A8322  		lhld	curptr
12C6  CD0011  		call	cpyin
12C9  3A8222  		lda	cursok
12CC  F608    		ori	sock0
12CE  57      		mov	d,a
12CF  3E40    		mvi	a,RECV
12D1  CDB810  		call	wizcmd
			; ignore Sn_SR?
12D4  2A8922  		lhld	totlen	; might be neg (first pass)
12D7  7C      		mov	a,h
12D8  B7      		ora	a
12D9  F2ED12  		jp	rm1
			; can we guarantee at least msg hdr?
12DC  3A0423  		lda	msg$siz	; msg siz (-1)
12DF  C606    		adi	5+1	; header, +1 for (-1)
12E1  5F      		mov	e,a
12E2  3E00    		mvi	a,0
12E4  8F      		adc	a
12E5  57      		mov	d,a	; true msg len
12E6  19      		dad	d	; subtract what we already have
12E7  3008    		jrnc	rerr	; something is wrong, if still neg
12E9  228922  		shld	totlen
12EC  7C      		mov	a,h
12ED  B5      	rm1:	ora	l
12EE  20A1    		jrnz	rm0
12F0  C9      		ret	; success (A=0)
		
12F1          	rerr:
12F1  AF      	err:	xra	a
12F2  3D      		dcr	a	; NZ
12F3  C9      		ret
		
		; Try to read NVRAM config for WIZNET.
		; Returns: A = node id (PMAGIC) or CY if error (no config)
12F4          	wizcfg:	; restore config from NVRAM
12F4  210000  		lxi	h,0
12F7  110002  		lxi	d,512
12FA  CDA113  		call	nvget
12FD  CD7D13  		call	vcksum
1300  37      		stc
1301  C0      		rnz	; checksum wrong - no config available
1302  210124  		lxi	h,nvbuf+gar
1305  1600    		mvi	d,0
1307  1E01    		mvi	e,gar
1309  0612    		mvi	b,18	; GAR+SUBR+SHAR+SIPR
130B  CD8A10  		call	wizset
130E  3A1D24  		lda	nvbuf+pmagic
1311  1E1D    		mvi	e,pmagic
1313  CD5810  		call	putwiz1
1316  DD212024		lxix	nvbuf+32	; start of socket0 data
131A  1608    		mvi	d,SOCK0
131C  0608    		mvi	b,8
131E          	rest0:
131E  C5      		push	b
131F  DD7E04  		ldx	a,sn$prt
1322  FE31    		cpi	31h
1324  201E    		jrnz	rest1	; skip unconfigured sockets
1326  3E01    		mvi	a,1	; TCP mode
1328  1E00    		mvi	e,sn$mr
132A  CD5810  		call	putwiz1	; force TCP/IP mode
132D  DD7E1D  		ldx	a,NvKPALVTR
1330  1E2F    		mvi	e,sn$kpalvtr
1332  B7      		ora	a
1333  C45810  		cnz	putwiz1
1336  1E04    		mvi	e,sn$prt
1338  0602    		mvi	b,2
133A  CD5513  		call	setsok
133D  1E0C    		mvi	e,sn$dipr
133F  0606    		mvi	b,6	; DIPR and DPORT
1341  CD5513  		call	setsok
1344          	rest1:
1344  012000  		lxi	b,32
1347  DD09    		dadx	b
1349  3E20    		mvi	a,001$00$000b	; socket BSB incr value
134B  82      		add	d
134C  57      		mov	d,a
134D  C1      		pop	b
134E  10CE    		djnz	rest0
1350  3A1D24  		lda	nvbuf+pmagic	; our node id
1353  B7      		ora	a	; NC
1354  C9      		ret
		
		; IX = base data buffer for socket, D = socket BSB, E = offset, B = length
		; destroys HL, B, C
1355          	setsok:
1355  DDE5    		pushix
1357  E1      		pop	h
1358  D5      		push	d
1359  1600    		mvi	d,0
135B  19      		dad	d	; HL points to data in 'buf'
135C  D1      		pop	d
135D  CD8A10  		call	wizset
1360  C9      		ret
		
1361          	cksum32:
1361  210000  		lxi	h,0
1364  110000  		lxi	d,0
1367  DD7E00  	cks0:	ldx	a,+0
136A  DD23    		inxix
136C  83      		add	e
136D  5F      		mov	e,a
136E  3007    		jrnc	cks1
1370  14      		inr	d
1371  2004    		jrnz	cks1
1373  2C      		inr	l
1374  2001    		jrnz	cks1
1376  24      		inr	h
1377  0B      	cks1:	dcx	b
1378  78      		mov	a,b
1379  B1      		ora	c
137A  20EB    		jrnz	cks0
137C  C9      		ret
		
		; Validates checksum in 'buf'
		; return: NZ on error
137D          	vcksum:
137D  DD210024		lxix	nvbuf
1381  01FC01  		lxi	b,508
1384  CD6113  		call	cksum32
1387  ED4BFE25		lbcd	nvbuf+510
138B  78      		mov	a,b	;
138C  B1      		ora	c	; check first half zero
138D  ED42    		dsbc	b
138F  C0      		rnz
1390  ED4BFC25		lbcd	nvbuf+508
1394  B0      		ora	b	;
1395  B1      		ora	c	; check second half zero
1396  EB      		xchg
1397  ED42    		dsbc	b
1399  C0      		rnz
139A  B7      		ora	a	; was checksum all zero?
139B  2802    		jrz	vcksm0
139D  AF      		xra	a	; ZR
139E  C9      		ret
139F  3C      	vcksm0:	inr	a	; NZ
13A0  C9      		ret
		
		; Get a block of data from NVRAM to 'buf'
		; HL = nvram address, DE = length (always multiple of 256)
13A1          	nvget:
13A1  3E02    		mvi	a,NVSCS
13A3  D341    		out	spi$ctl
13A5  3E03    		mvi	a,NVRD
13A7  D340    		out	spi$dat
13A9  7C      		mov	a,h
13AA  D340    		out	spi$dat
13AC  7D      		mov	a,l
13AD  D340    		out	spi$dat
13AF  DB40    		in	spi$dat	; prime pump
13B1  0E40    		mvi	c,spi$dat
13B3  210024  		lxi	h,nvbuf
13B6  43      		mov	b,e
13B7  EDB2    	nvget0:	inir	; B = 0 after
13B9  15      		dcr	d
13BA  20FB    		jrnz	nvget0
13BC  AF      		xra	a	; not SCS
13BD  D341    		out	spi$ctl
13BF  C9      		ret
		
13C0  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
0000          	if ($ > 1800h)
		endif
		
1400          	last:	end



Statistics:

     4	passes
     0	jr promotions
   172	symbols
  1024	bytes

   226	macro calls
  3759	macro bytes
     0	invented symbols
