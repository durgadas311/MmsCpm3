		; Boot Module for WizNet
			maclib	ram
**** ram.lib ****
**** bwiznet.asm ****
			maclib	core
**** core.lib ****
**** bwiznet.asm ****
			maclib	z80
**** z80.lib ****
**** bwiznet.asm ****
		
		; WIZNET/NVRAM (SPI adapter) defines
0040          	spi	equ	40h	; base port
0040          	spi$dat	equ	spi+0
0041          	spi$ctl	equ	spi+1	; must be spi$dat+1
0041          	spi$sta	equ	spi+1
		
0001          	WZSCS	equ	01b	; /SCS for WIZNET
0002          	NVSCS	equ	10b	; /SCS for NVRAM
		
		; NVRAM constants
		; NVRAM/SEEPROM commands
0003          	NVRD	equ	00000011b
0002          	NVWR	equ	00000010b
0005          	RDSR	equ	00000101b
0006          	WREN	equ	00000110b
		; NVRAM/SEEPROM status bits
0001          	WIP	equ	00000001b
		
		; WIZNET constants
0008          	nsocks	equ	8
0008          	sock0	equ	000$01$000b	; base pattern for Sn_ regs
0014          	txbuf0	equ	000$10$100b	; base pattern for Tx buffer
0018          	rxbuf0	equ	000$11$000b	; base pattern for Rx buffer
		
		; common regs
0001          	gar	equ	1
0005          	subr	equ	5
0009          	shar	equ	9
000F          	sipr	equ	15
0015          	ir	equ	21
0017          	sir	equ	23
001D          	pmagic	equ	29
		
		; socket regs, relative
0000          	sn$mr	equ	0
0001          	sn$cr	equ	1
0002          	sn$ir	equ	2
0003          	sn$sr	equ	3
0004          	sn$prt	equ	4
000C          	sn$dipr	equ	12
0010          	sn$dprt	equ	16
001D          	sn$resv8 equ	29	; reserved
0024          	sn$txwr	equ	36
0026          	sn$rxrsr equ	38
0028          	sn$rxrd	equ	40
002F          	sn$kpalvtr equ	47
		
001D          	NvKPALVTR equ	sn$resv8 ; place to stash keep-alive in nvram
		
		; socket commands
0001          	OPEN	equ	01h
0004          	CONNECT	equ	04h
0008          	DISC	equ	08h
0020          	SEND	equ	20h
0040          	RECV	equ	40h
		
		; socket status
0013          	SOKINIT	equ	13h
0017          	ESTABLISHED equ	17h
		
2300          		org	2300h
2300          	server:	ds	1	; SID, dest of send
2301          	nodeid:	ds	1	; our node id
2302          	cursok:	ds	1	; current socket select patn
2303          	curptr:	ds	2	; into chip mem
2305          	msgptr:	ds	2
2307          	msglen:	ds	2
2309          	totlen:	ds	2
230B          	dma:	ds	2
		
2340          		org	2340h
		msgbuf:	ds	0
2340          	msg$fmt: ds	1
2341          	msg$did: ds	1
2342          	msg$sid: ds	1
2343          	msg$fnc: ds	1
2344          	msg$siz: ds	1
2345          	msg$dat: ds	128
		
2400          		org	2400h
2400          	nvbuf:	ds	512
		
1000          		org	1000h
1000  04      	first:	db	HIGH (last-first)	; +0: num pages
1001  10      		db	HIGH first		; +1: ORG page
1002  3CFF    		db	60,255	; +2,+3: phy drv base, num
		
1004  C31710  		jmp	init	; +4: init entry
1007  C33911  		jmp	boot	; +7: boot entry
		
100A  57      		db	'W'	; +10: Boot command letter
100B  05      		db	5	; +11: front panel key
100C  40      		db	40h	; +12: port, 0 if variable
100D  918C9D  		db	10010001b,10001100b,10011101b	; +13: FP display ("NET")
1010  57697A4E		db	'WizNet',0	; +16: mnemonic string
      657400
		
1017          	init:
1017  DDE5    		pushix
1019  3EC3    		mvi	a,0c3h
101B  212012  		lxi	h,wizsr
101E  322300  		sta	sndrcv
1021  222400  		shld	sndrcv+1
1024  21E311  		lxi	h,wizopn
1027  323300  		sta	wizopen
102A  223400  		shld	wizopen+1
102D  210F12  		lxi	h,wizcls
1030  223600  		shld	wizclose	; not a jump
1033  CDF712  		call	wizcfg	; configure chip from nvram
1036  DDE1    		popix
1038  D8      		rc
1039  320123  		sta	nodeid ; our slave (client) ID
103C  AF      		xra	a	; NC
103D  C9      		ret
		
103E          	getwiz1:
103E  3E01    		mvi	a,WZSCS
1040  D341    		out	spi$ctl
1042  0E40    		mvi	c,spi$dat
1044  AF      		xra	a
1045  ED79    		outp	a	; hi adr always 0
1047  ED59    		outp	e
1049  CB92    		res	2,d
104B  ED51    		outp	d
104D  ED78    		inp	a	; prime MISO
104F  ED78    		inp	a
1051  F5      		push	psw
1052  0C      		inr	c	; ctl port
1053  AF      		xra	a
1054  ED79    		outp	a	; clear SCS
1056  F1      		pop	psw
1057  C9      		ret
		
1058          	putwiz1:
1058  F5      		push	psw
1059  3E01    		mvi	a,WZSCS
105B  D341    		out	spi$ctl
105D  0E40    		mvi	c,spi$dat
105F  AF      		xra	a
1060  ED79    		outp	a	; hi adr always 0
1062  ED59    		outp	e
1064  CBD2    		setb	2,d
1066  ED51    		outp	d
1068  F1      		pop	psw
1069  ED79    		outp	a	; data
106B  0C      		inr	c	; ctl port
106C  AF      		xra	a
106D  ED79    		outp	a	; clear SCS
106F  C9      		ret
		
		; Get 16-bit value from chip
		; Prereq: IDM_AR0 already set, auto-incr on
		; Entry: A=value for IDM_AR1
		; Return: HL=register pair contents
1070          	getwiz2:
1070  3E01    		mvi	a,WZSCS
1072  D341    		out	spi$ctl
1074  0E40    		mvi	c,spi$dat
1076  AF      		xra	a
1077  ED79    		outp	a	; hi adr always 0
1079  ED59    		outp	e
107B  CB92    		res	2,d
107D  ED51    		outp	d
107F  ED78    		inp	a	; prime MISO
1081  ED60    		inp	h	; data
1083  ED68    		inp	l	; data
1085  0C      		inr	c	; ctl port
1086  AF      		xra	a
1087  ED79    		outp	a	; clear SCS
1089  C9      		ret
		
		; HL = output data, E = off, D = BSB, B = len
108A          	wizset:
108A  3E01    		mvi	a,WZSCS
108C  D341    		out	spi$ctl
108E  0E40    		mvi	c,spi$dat
1090  AF      		xra	a
1091  ED79    		outp	a	; hi adr always 0
1093  ED59    		outp	e
1095  CBD2    		setb	2,d
1097  ED51    		outp	d
1099  EDB3    		outir
109B  0C      		inr	c	; ctl port
109C  AF      		xra	a
109D  ED79    		outp	a	; clear SCS
109F  C9      		ret
		
		; Put 16-bit value to chip
		; Prereq: IDM_AR0 already set, auto-incr on
		; Entry: A=value for IDM_AR1
		;        HL=register pair contents
10A0          	putwiz2:
10A0  3E01    		mvi	a,WZSCS
10A2  D341    		out	spi$ctl
10A4  0E40    		mvi	c,spi$dat
10A6  AF      		xra	a
10A7  ED79    		outp	a	; hi adr always 0
10A9  ED59    		outp	e
10AB  CBD2    		setb	2,d
10AD  ED51    		outp	d
10AF  ED61    		outp	h	; data to write
10B1  ED69    		outp	l
10B3  0C      		inr	c	; ctl port
10B4  AF      		xra	a
10B5  ED79    		outp	a	; clear SCS
10B7  C9      		ret
		
		; Issue command, wait for complete
		; D=Socket ctl byte
		; Returns: A=Sn_SR
10B8  47      	wizcmd:	mov	b,a
10B9  1E01    		mvi	e,sn$cr
10BB  CBD2    		setb	2,d
10BD  3E01    		mvi	a,WZSCS
10BF  D341    		out	spi$ctl
10C1  0E40    		mvi	c,spi$dat
10C3  AF      		xra	a
10C4  ED79    		outp	a	; hi adr always 0
10C6  ED59    		outp	e
10C8  ED51    		outp	d
10CA  ED41    		outp	b	; command
10CC  0C      		inr	c	; ctl port
10CD  AF      		xra	a
10CE  ED79    		outp	a	; clear SCS
10D0  CD3E10  	wc0:	call	getwiz1
10D3  B7      		ora	a
10D4  20FA    		jrnz	wc0
10D6  1E03    		mvi	e,sn$sr
10D8  CD3E10  		call	getwiz1
10DB  C9      		ret
		
		; HL=socket relative pointer (TX_WR)
		; DE=length (preserved, not used)
		; Returns: HL=msgptr, C=spi$dat
10DC          	cpsetup:
10DC  3E01    		mvi	a,WZSCS
10DE  D341    		out	spi$ctl
10E0  0E40    		mvi	c,spi$dat
10E2  ED61    		outp	h
10E4  ED69    		outp	l
10E6  3A0223  		lda	cursok
10E9  B0      		ora	b
10EA  ED79    		outp	a
10EC  2A0523  		lhld	msgptr
10EF  C9      		ret
		
		; length always <= 133 bytes, never overflows OUTIR/INIR
10F0          	cpyout:
10F0  0614    		mvi	b,txbuf0
10F2  CDDC10  		call	cpsetup
10F5  43      		mov	b,e	; length
10F6  EDB3    		outir		; send data
10F8  220523  		shld	msgptr
10FB  0C      		inr	c	; ctl port
10FC  AF      		xra	a
10FD  ED79    		outp	a	; clear SCS
10FF  C9      		ret
		
		; HL=socket relative pointer (RX_RD)
		; DE=length
		; Destroys IDM_AR0, IDM_AR1
		; length always <= 133 bytes, never overflows OUTIR/INIR
1100          	cpyin:
1100  0618    		mvi	b,rxbuf0
1102  CDDC10  		call	cpsetup	;
1105  ED78    		inp	a	; prime MISO
1107  43      		mov	b,e	; fraction of page
1108  EDB2    		inir		; recv data
110A  220523  		shld	msgptr
110D  0C      		inr	c	; ctl port
110E  AF      		xra	a
110F  ED79    		outp	a	; clear SCS
1111  C9      		ret
		
		; L=bits to reset
		; D=socket base
1112          	wizsts:
1112  1E02    		mvi	e,sn$ir
1114  CD3E10  		call	getwiz1	; destroys C
1117  F5      		push	psw
1118  A5      		ana	l
1119  2804    		jrz	ws0	; don't reset if not set (could race)
111B  7D      		mov	a,l
111C  CD5810  		call	putwiz1
111F  F1      	ws0:	pop	psw
1120  C9      		ret
		
		; D=socket BSB, C=bits to check
		; Return: A=status reg
1121  21007D  	wizist:	lxi	h,32000
1124  C5      	wst0:	push	b	; C has status bits to check
1125  E5      		push	h
1126  69      		mov	l,c
1127  CD1211  		call	wizsts
112A  E1      		pop	h
112B  C1      		pop	b
112C  47      		mov	b,a
112D  A1      		ana	c
112E  2007    		jrnz	wst1
1130  2B      		dcx	h
1131  7C      		mov	a,h
1132  B5      		ora	l
1133  20EF    		jrnz	wst0
1135  37      		stc
1136  C9      		ret
1137  78      	wst1:	mov	a,b
1138  C9      		ret
		
		;	WIZNET boot routine
		;
1139          	boot:
			; extract optional string. must do it now, before we
			; overwrite bootbf.
1139  114523  		lxi	d,msg$dat	; target for string
113C  218022  		lxi	h,bootbf
113F  AF      		xra	a
1140  324423  		sta	msg$siz
1143  7E      		mov	a,m
1144  FEC3    		cpi	0c3h	; no string
1146  280C    		jrz	nb5
1148  B7      		ora	a	; check for "", too
1149  2809    		jrz	nb5
114B  3C      		inr	a	; include len byte
114C  4F      		mov	c,a
			; we send N+1 bytes, NUL term
114D  324423  		sta	msg$siz
1150  0600    		mvi	b,0
1152  EDB0    		ldir
1154  AF      	nb5:	xra	a
1155  12      		stax	d	; NUL term
1156  3A3121  		lda	AIO$UNI	; server id, 0..254
1159  320023  		sta	server
			; locate server node id in chip's socket regs.
			;
115C  0608    		mvi	b,nsocks
115E  110408  		lxi	d,(sock0 shl 8) + sn$prt
1161          	nb1:
1161  CD7010  		call	getwiz2	; destroys C,HL
1164  7C      		mov	a,h
1165  FE31    		cpi	31h
1167  2006    		jrnz	nb0
1169  3A0023  		lda	server
116C  BD      		cmp	l
116D  2807    		jrz	nb2	; found server socket
116F          	nb0:
116F  3E20    		mvi	a,001$00$000b
1171  82      		add	d	; next socket
1172  57      		mov	d,a
1173  10EC    		djnz	nb1
1175  C9      		ret	; error: server not configured
1176          	nb2:	; D = server socket BSB
1176  7A      		mov	a,d
1177  E6E0    		ani	11100000b
1179  320223  		sta	cursok
117C  CDE311  		call	wizopn
117F  D8      		rc	; any error
1180  3E01    		mvi	a,1	; FNC for "boot me"
1182  324323  		sta	msg$fnc
			; string already setup
1185          	loop:
1185  3EB0    		mvi	a,0b0h	; FMT for client boot messages
1187  324023  		sta	msg$fmt
118A  CD2012  		call	wizsr
118D  D8      		rc	; network failure
118E  3A4023  		lda	msg$fmt
1191  FEB1    		cpi	0b1h	; FMT for server boot responses
1193  C0      		rnz
			; TODO: verify SID?
1194  3A4323  		lda	msg$fnc
1197  B7      		ora	a
1198  C8      		rz	; NAK - error
1199  3D      		dcr	a
119A  2830    		jrz	ldmsg
119C  3D      		dcr	a
119D  2825    		jrz	stdma
119F  3D      		dcr	a
11A0  2809    		jrz	load
11A2  3D      		dcr	a
11A3  C0      		rnz	; unsupported FNC
			; done: execute boot code
11A4  CD0F12  		call	wizcls
11A7  2A4523  		lhld	msg$dat
11AA  E9      		pchl
11AB  2A0B23  	load:	lhld	dma
11AE  EB      		xchg
11AF  214523  		lxi	h,msg$dat
11B2  018000  		lxi	b,128
11B5  EDB0    		ldir
11B7  EB      		xchg
11B8  220B23  		shld	dma
11BB  AF      	ack:	xra	a	; FNC 0 = ACK
11BC  324323  		sta	msg$fnc
11BF  324423  		sta	msg$siz
11C2  18C1    		jr	loop
11C4  2A4523  	stdma:	lhld	msg$dat
11C7  220B23  		shld	dma
11CA  18EF    		jr	ack
11CC  CD1B00  	ldmsg:	call	crlf
11CF  214523  		lxi	h,msg$dat
11D2  7E      	ldm0:	mov	a,m
11D3  23      		inx	h
11D4  FE24    		cpi	'$'
11D6  28E3    		jrz	ack
11D8  CDDD11  		call	chrout
11DB  18F5    		jr	ldm0
		
		; must preserve HL
11DD  FD2A2600	chrout:	liyd	conout
11E1  FDE9    		pciy
		
		; D = server socket BSB
11E3          	wizopn:
11E3  1E03    		mvi	e,sn$sr
11E5  CD3E10  		call	getwiz1
11E8  FE17    		cpi	ESTABLISHED
11EA  C8      		rz	; ready to rock-n-roll...
			; try to open...
11EB  FE13    		cpi	SOKINIT
11ED  2809    		jrz	nb4
11EF  3E01    		mvi	a,OPEN
11F1  CDB810  		call	wizcmd
11F4  FE13    		cpi	SOKINIT
11F6  37      		stc
11F7  C0      		rnz	; failed to open (init)
11F8  1E02    	nb4:	mvi	e,sn$ir	; ensure no lingering bits...
11FA  3E1F    		mvi	a,00011111b
11FC  CD5810  		call	putwiz1
11FF  3E04    		mvi	a,CONNECT
1201  CDB810  		call	wizcmd
1204  0E0B    		mvi	c,00001011b	; CON, DISCON, or TIMEOUT
1206  CD2111  		call	wizist	; returns when one is set, or CY
1209  D8      		rc
120A  E601    		ani	00000001b	; need CON
120C  D601    		sui	00000001b	; CY if bit is 0
120E  C9      		ret
		
120F          	wizcls:
120F  3A0223  		lda	cursok
1212  F608    		ori	sock0
1214  57      		mov	d,a
1215  3E08    		mvi	a,DISC
1217  CDB810  		call	wizcmd
121A  0E0A    		mvi	c,00001010b	; DISCON, or TIMEOUT
121C  CD2111  		call	wizist	; returns when one is set, or CY
121F  C9      		ret	; don't care which result?
		
		;	Send Message on Network, receive response
		;	msgbuf setup with FMT, FNC, LEN, data
		;	msg len always <= 128 (133 total) bytes.
1220          	wizsr:			; BC = message addr
			; TODO: drain/flush receiver
		; begin send phase
1220  214023  		lxi	h,msgbuf
1223  220523  		shld	msgptr
1226  3A0223  		lda	cursok
1229  F608    		ori	sock0
122B  57      		mov	d,a
			; D=socket patn
122C  3A0023  		lda	server
122F  324123  		sta	msg$did	; Set Server ID (dest) in header
1232  3A0123  		lda	nodeid
1235  324223  		sta	msg$sid	; Set Slave ID (src) in header
1238  3A4423  		lda	msg$siz	; msg siz (-1)
123B  C606    		adi	5+1	; hdr, +1 for (-1)
123D  6F      		mov	l,a
123E  2600    		mvi	h,0
1240  220723  		shld	msglen
1243  1E24    		mvi	e,sn$txwr
1245  CD7010  		call	getwiz2
1248  220323  		shld	curptr
124B  2A0723  		lhld	msglen
124E  ED4B0323		lbcd	curptr
1252  09      		dad	b
1253  1E24    		mvi	e,sn$txwr
1255  CDA010  		call	putwiz2
			; send data
1258  2A0723  		lhld	msglen
125B  EB      		xchg
125C  2A0323  		lhld	curptr
125F  CDF010  		call	cpyout
1262  3A0223  		lda	cursok
1265  F608    		ori	sock0
1267  57      		mov	d,a
1268  3E20    		mvi	a,SEND
126A  CDB810  		call	wizcmd
			; ignore Sn_SR?
126D  0E1A    		mvi	c,00011010b	; SEND_OK bit, TIMEOUT, DISConnect
126F  CD2111  		call	wizist
1272  D8      		rc
1273  E610    		ani	00010000b	; SEND_OK
1275  37      		stc
1276  C8      		rz
		; begin recv phase - loop
1277  3A0223  		lda	cursok	; is D still socket BSB?
127A  F608    		ori	sock0
127C  57      		mov	d,a
		;	Receive Message from Network
127D  214023  		lxi	h,msgbuf
1280  220523  		shld	msgptr
1283  0E06    		mvi	c,00000110b	; RECV, DISC
1285  CD2111  		call	wizist	; check for recv within timeout
1288  386A    		jrc	rerr
128A  E604    		ani	00000100b	; RECV
128C  2866    		jrz	rerr
128E  210000  		lxi	h,0
1291  220923  		shld	totlen
1294          	rm0:	; D must be socket base...
1294  1E26    		mvi	e,sn$rxrsr	; length
1296  CD7010  		call	getwiz2
1299  7C      		mov	a,h
129A  B5      		ora	l
129B  28F7    		jrz	rm0
129D  220723  		shld	msglen		; not CP/NET msg len
12A0  1E28    		mvi	e,sn$rxrd	; pointer
12A2  CD7010  		call	getwiz2
12A5  220323  		shld	curptr
12A8  ED4B0723		lbcd	msglen	; BC=Sn_RX_RSR
12AC  2A0923  		lhld	totlen
12AF  B7      		ora	a
12B0  ED42    		dsbc	b
12B2  220923  		shld	totlen	; might be negative...
12B5  ED4B0323		lbcd	curptr
12B9  2A0723  		lhld	msglen	; BC=Sn_RX_RD, HL=Sn_RX_RSR
12BC  09      		dad	b	; HL=nxt RD
12BD  1E28    		mvi	e,sn$rxrd
12BF  CDA010  		call	putwiz2
			; DE destroyed...
12C2  ED5B0723		lded	msglen
12C6  2A0323  		lhld	curptr
12C9  CD0011  		call	cpyin
12CC  3A0223  		lda	cursok
12CF  F608    		ori	sock0
12D1  57      		mov	d,a
12D2  3E40    		mvi	a,RECV
12D4  CDB810  		call	wizcmd
			; ignore Sn_SR?
12D7  2A0923  		lhld	totlen	; might be neg (first pass)
12DA  7C      		mov	a,h
12DB  B7      		ora	a
12DC  F2F012  		jp	rm1
			; can we guarantee at least msg hdr?
12DF  3A4423  		lda	msg$siz	; msg siz (-1)
12E2  C606    		adi	5+1	; header, +1 for (-1)
12E4  5F      		mov	e,a
12E5  3E00    		mvi	a,0
12E7  8F      		adc	a
12E8  57      		mov	d,a	; true msg len
12E9  19      		dad	d	; subtract what we already have
12EA  3008    		jrnc	rerr	; something is wrong, if still neg
12EC  220923  		shld	totlen
12EF  7C      		mov	a,h
12F0  B5      	rm1:	ora	l
12F1  20A1    		jrnz	rm0
12F3  C9      		ret	; success (A=0)
		
12F4          	rerr:
12F4  AF      	err:	xra	a
12F5  3D      		dcr	a	; NZ
12F6  C9      		ret
		
		; Try to read NVRAM config for WIZNET.
		; Returns: A = node id (PMAGIC) or CY if error (no config)
12F7          	wizcfg:	; restore config from NVRAM
12F7  210000  		lxi	h,0
12FA  110002  		lxi	d,512
12FD  CDA413  		call	nvget
1300  CD8013  		call	vcksum
1303  37      		stc
1304  C0      		rnz	; checksum wrong - no config available
1305  210124  		lxi	h,nvbuf+gar
1308  1600    		mvi	d,0
130A  1E01    		mvi	e,gar
130C  0612    		mvi	b,18	; GAR+SUBR+SHAR+SIPR
130E  CD8A10  		call	wizset
1311  3A1D24  		lda	nvbuf+pmagic
1314  1E1D    		mvi	e,pmagic
1316  CD5810  		call	putwiz1
1319  DD212024		lxix	nvbuf+32	; start of socket0 data
131D  1608    		mvi	d,SOCK0
131F  0608    		mvi	b,8
1321          	rest0:
1321  C5      		push	b
1322  DD7E04  		ldx	a,sn$prt
1325  FE31    		cpi	31h
1327  201E    		jrnz	rest1	; skip unconfigured sockets
1329  3E01    		mvi	a,1	; TCP mode
132B  1E00    		mvi	e,sn$mr
132D  CD5810  		call	putwiz1	; force TCP/IP mode
1330  DD7E1D  		ldx	a,NvKPALVTR
1333  1E2F    		mvi	e,sn$kpalvtr
1335  B7      		ora	a
1336  C45810  		cnz	putwiz1
1339  1E04    		mvi	e,sn$prt
133B  0602    		mvi	b,2
133D  CD5813  		call	setsok
1340  1E0C    		mvi	e,sn$dipr
1342  0606    		mvi	b,6	; DIPR and DPORT
1344  CD5813  		call	setsok
1347          	rest1:
1347  012000  		lxi	b,32
134A  DD09    		dadx	b
134C  3E20    		mvi	a,001$00$000b	; socket BSB incr value
134E  82      		add	d
134F  57      		mov	d,a
1350  C1      		pop	b
1351  10CE    		djnz	rest0
1353  3A1D24  		lda	nvbuf+pmagic	; our node id
1356  B7      		ora	a	; NC
1357  C9      		ret
		
		; IX = base data buffer for socket, D = socket BSB, E = offset, B = length
		; destroys HL, B, C
1358          	setsok:
1358  DDE5    		pushix
135A  E1      		pop	h
135B  D5      		push	d
135C  1600    		mvi	d,0
135E  19      		dad	d	; HL points to data in 'buf'
135F  D1      		pop	d
1360  CD8A10  		call	wizset
1363  C9      		ret
		
1364          	cksum32:
1364  210000  		lxi	h,0
1367  110000  		lxi	d,0
136A  DD7E00  	cks0:	ldx	a,+0
136D  DD23    		inxix
136F  83      		add	e
1370  5F      		mov	e,a
1371  3007    		jrnc	cks1
1373  14      		inr	d
1374  2004    		jrnz	cks1
1376  2C      		inr	l
1377  2001    		jrnz	cks1
1379  24      		inr	h
137A  0B      	cks1:	dcx	b
137B  78      		mov	a,b
137C  B1      		ora	c
137D  20EB    		jrnz	cks0
137F  C9      		ret
		
		; Validates checksum in 'buf'
		; return: NZ on error
1380          	vcksum:
1380  DD210024		lxix	nvbuf
1384  01FC01  		lxi	b,508
1387  CD6413  		call	cksum32
138A  ED4BFE25		lbcd	nvbuf+510
138E  78      		mov	a,b	;
138F  B1      		ora	c	; check first half zero
1390  ED42    		dsbc	b
1392  C0      		rnz
1393  ED4BFC25		lbcd	nvbuf+508
1397  B0      		ora	b	;
1398  B1      		ora	c	; check second half zero
1399  EB      		xchg
139A  ED42    		dsbc	b
139C  C0      		rnz
139D  B7      		ora	a	; was checksum all zero?
139E  2802    		jrz	vcksm0
13A0  AF      		xra	a	; ZR
13A1  C9      		ret
13A2  3C      	vcksm0:	inr	a	; NZ
13A3  C9      		ret
		
		; Get a block of data from NVRAM to 'buf'
		; HL = nvram address, DE = length (always multiple of 256)
13A4          	nvget:
13A4  3E02    		mvi	a,NVSCS
13A6  D341    		out	spi$ctl
13A8  3E03    		mvi	a,NVRD
13AA  D340    		out	spi$dat
13AC  7C      		mov	a,h
13AD  D340    		out	spi$dat
13AF  7D      		mov	a,l
13B0  D340    		out	spi$dat
13B2  DB40    		in	spi$dat	; prime pump
13B4  0E40    		mvi	c,spi$dat
13B6  210024  		lxi	h,nvbuf
13B9  43      		mov	b,e
13BA  EDB2    	nvget0:	inir	; B = 0 after
13BC  15      		dcr	d
13BD  20FB    		jrnz	nvget0
13BF  AF      		xra	a	; not SCS
13C0  D341    		out	spi$ctl
13C2  C9      		ret
		
13C3  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FF
0000          	if ($ > 1800h)
		endif
		
1400          	last:	end



Statistics:

     4	passes
     0	jr promotions
   187	symbols
  1024	bytes

   226	macro calls
  3759	macro bytes
     0	invented symbols
