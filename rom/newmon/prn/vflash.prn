                ; Stand-Alone Program to flash the ROM from an image on VDIP1 USB stick
 0009 =         VERN	equ	09h
                	maclib	z180
                
 000D =         CR	equ	13
 000A =         LF	equ	10
 0008 =         BS	equ	8
 0007 =         BEL	equ	7
 0003 =         CTLC	equ	3
                
 1000 =         monrom	equ	4096	; length of first contig block in ROM (monitor)
 8000 =         romlen	equ	8000h	; full ROM is 32K
 0000 =         rombeg	equ	0000h	; start of ROM runtime image (in-place)
 8000 =         romend	equ	rombeg+romlen	; end of in-place ROM
 4000 =         K16	equ	16384	; constant: 16K
                
 0038 =         mmu$cbr	equ	38h
 0039 =         mmu$bbr	equ	39h
 003A =         mmu$cbar equ	3ah
                
                ; buffer used to hold ROM image for flashing.
                ; NOTE: the first monrom bytes will be destroyed during flash.
 7000 =         imgbuf	equ	romend-monrom	; 4K below end of full ROM
 F000 =         imgtop	equ	imgbuf+romlen	; end of imgbuf
                ; The overlap is OK because the first 4K is flashed using
                ; the not ORG0,not MEM1 "legacy" map, and the memory (image buf)
                ; at imgbuf is still accessible. Once that 4K is flash, we
                ; switch to not ORG0,MEM1 "extended" map, and continue flashing.
                
 2009 =         ctl$F0	equ	2009h
 2036 =         ctl$F2	equ	2036h
                
                	extrn	strcpy,strcmp
                	extrn	vdcmd,vdrd,sync,runout
                	public	vdbuf
                
                	cseg
                begin:
 0000 311B05    	lxi	sp,stack
 0003 CD9801    	call	cpu$type
 0006 32A001    	sta	z180	; 'true' if a Z180
 0009 11A201    	lxi	d,signon
 000C CDC303    	call	msgout
 000F 3AA001    	lda	z180
 0012 B7        	ora	a
                	jrz	begin0
 0013+2806      	DB	28H,BEGIN0-$-1
 0015 11C801    	lxi	d,mz180
 0018 CDC303    	call	msgout
 001B CD0804    begin0:	call	crlf
                	; 2mS clock is needed for accessing VDIP1 (timeouts)
 001E 210920    	lxi	h,ctl$F0
 0021 7E        	mov	a,m
 0022 F640      	ori	01000000b	; 2mS back on
 0024 77        	mov	m,a
 0025 D3F0      	out	0f0h
 0027 FB        	ei
 0028 CD0000    	call	runout
 002B CD0000    	call	sync
 002E DA4C01    	jc	error
 0031 11B902    over:	lxi	d,quest
 0034 CDC303    	call	msgout
 0037 CD5903    	call	linin
 003A DA8101    	jc	cancel
 003D 79        	mov	a,c
 003E B7        	ora	a
                	jrnz	go1	; already CR terminated...
 003F+200C      	DB	20H,GO1-$-1
 0041 21F402    	lxi	h,defrom
 0044 111B04    	lxi	d,inbuf
 0047 CD0000    	call	strcpy
 004A 3E0D      	mvi	a,CR
 004C 12        	stax	d
 004D 211704    go1:	lxi	h,opr
 0050 CD0000    	call	vdcmd
 0053 DA7501    	jc	nofile
 0056 210070    	lxi	h,imgbuf	; 4k below end of ROM
 0059 CD0000    loop0:	call	vdrd
 005C DA6D01    	jc	rderr
 005F CDEC03    	call	progress
 0062 7C        	mov	a,h
 0063 FEF0      	cpi	HIGH imgtop
                	jrnz	loop0
 0065+20F2      	DB	20H,LOOP0-$-1
                	; one more read, should be error (EOF)
 0067 210040    	lxi	h,4000h	; a safe place to destroy...
 006A CD0000    	call	vdrd
 006D D26D01    	jnc	rderr
 0070 CD7A01    	call	close
 0073 110070    	lxi	d,imgbuf
 0076 CDFF02    	call	vchksm	; verify checksum
 0079 DA5F01    	jc	ckerr
                	; now validate product codes..
 007C 2AFE7F    	lhld	imgbuf+0ffeh
                	lded	0ffeh
 007F+ED5B      	DB	0EDH,5BH
 0081+FE0F      	DW	0FFEH
 0083 B7        	ora	a
                	dsbc	d
 0084+ED52      	DB	0EDH,D*8+42H
 0086 7C        	mov	a,h
 0087 B5        	ora	l
 0088 C26801    	jnz	pcerr
                	; see if we should clear setup area
 008B 116C02    	lxi	d,clear
 008E CDC303    	call	msgout
 0091 CD5903    	call	linin
 0094 3A1B04    	lda	inbuf
 0097 FE59      	cpi	'Y'
                	jrnz	noera
 0099+2009      	DB	20H,NOERA-$-1
 009B 32A101    	sta	era
 009E 118502    	lxi	d,clring
 00A1 CDC303    	call	msgout
                noera:
                	; now, ready to start flash...
 00A4 119B02    	lxi	d,ready
 00A7 CDC303    	call	msgout
 00AA CD5903    	call	linin
 00AD DA8101    	jc	cancel
                	; after started, there's no going back...
                	; disable any interruptions, as each page must be
                	; entirely written with strict time constraints
                	; (<<150uS between each byte).
 00B0 F3        	di
 00B1 3AA001    	lda	z180
 00B4 B7        	ora	a
                	jrz	z80$flash
 00B5+284B      	DB	28H,Z80$FLASH-$-1
                ; z180$flash:
 00B7 AF        	xra	a	; base page of RAM, where we are now.
                	out0	a,mmu$cbr
 00B8+ED3938    	DB	0EDH, A*8+01H, MMU$CBR
 00BB 3EF8      	mvi	a,0f8h	; start page of ROM in padr space.
                	out0	a,mmu$bbr
 00BD+ED3939    	DB	0EDH, A*8+01H, MMU$BBR
 00C0 3E70      	mvi	a,0111$0000b	; bnk at 0000, com1 at 7000
                	out0	a,mmu$cbar
 00C2+ED393A    	DB	0EDH, A*8+01H, MMU$CBAR
                	; 0000-6FFF is ROM...
 00C5 3EA0      	mvi	a,10100000b	; WE, no legacy ROM
 00C7 D3F2      	out	0f2h
 00C9 210070    	lxi	h,imgbuf
 00CC 110000    	lxi	d,0	; ROM
 00CF 010001    	lxi	b,K16/64	; first 16K
 00D2 3AA101    	lda	era
 00D5 B7        	ora	a
                	jrnz	flsall
 00D6+2012      	DB	20H,FLSALL-$-1
 00D8 014000    	lxi	b,1000h/64	; first 4K
 00DB CDCC03    	call	flash
                	jrc	error
 00DE+386C      	DB	38H,ERROR-$-1
 00E0 010008    	lxi	b,0800h
 00E3 09        	dad	b
 00E4 EB        	xchg
 00E5 09        	dad	b
 00E6 EB        	xchg
 00E7 01A000    	lxi	b,(K16-1800h)/64
                flsall:
 00EA CDCC03    	call	flash
                	jrc	error
 00ED+385D      	DB	38H,ERROR-$-1
                	; now slide window sash for rest of ROM...
 00EF 3E80      	mvi	a,1000$0000b	; bnk at 0000, com1 at 8000
                	out0	a,mmu$cbar
 00F1+ED393A    	DB	0EDH, A*8+01H, MMU$CBAR
 00F4 010001    	lxi	b,(8000h-K16)/64	; rest of ROM
 00F7 CDCC03    	call	flash
                	jrc	error
 00FA+3850      	DB	38H,ERROR-$-1
 00FC 3E20      	mvi	a,00100000b	; WE off, no legacy ROM
 00FE D3F2      	out	0f2h
                	jr	comm$flash
 0100+1832      	DB	18H,COMM$FLASH-$-1
                ;
                z80$flash:
 0102 3E80      	mvi	a,10000000b	; WE, partial ROM
 0104 D3F2      	out	0f2h
 0106 210070    	lxi	h,imgbuf
 0109 110000    	lxi	d,0	; ROM
 010C 014000    	lxi	b,4096/64	; first 4K
 010F CDCC03    	call	flash
                	jrc	error
 0112+3838      	DB	38H,ERROR-$-1
 0114 3E88      	mvi	a,10001000b	; WE, enable full ROM
 0116 D3F2      	out	0f2h
 0118 01C001    	lxi	b,(8000h-4096)/64	; rest of ROM
 011B 3AA101    	lda	era
 011E B7        	ora	a
                	jrnz	flsal1
 011F+200A      	DB	20H,FLSAL1-$-1
 0121 010008    	lxi	b,0800h
 0124 09        	dad	b
 0125 EB        	xchg
 0126 09        	dad	b
 0127 EB        	xchg
 0128 01A001    	lxi	b,(8000h-1800h)/64	; rest of ROM
 012B CDCC03    flsal1:	call	flash
                	jrc	error
 012E+381C      	DB	38H,ERROR-$-1
 0130 3E08      	mvi	a,00001000b	; WE off, enable full ROM
 0132 D3F2      	out	0f2h
                comm$flash:	; full ROM still mapped at 0000...
                	; NOTE: first 32K RAM has been trashed...
                	; no point to restoring it in any way.
                	; if we decide to try and return to monitor,
                	; need to go back to legacy mode and jump 0000.
 0134 110000    	lxi	d,0	; ROM
 0137 CDFF02    	call	vchksm
                	jrc	ckerr2
 013A+381B      	DB	38H,CKERR2-$-1
                	; even though RAM is trashed, allow Z180 to
                	; restore ROM even if we don't jump to it.
 013C 3AA001    	lda	z180
 013F B7        	ora	a
                	jrz	comm0
 0140+2804      	DB	28H,COMM0-$-1
 0142 AF        	xra	a
                	out0	a,mmu$bbr	; switch back to normal
 0143+ED3939    	DB	0EDH, A*8+01H, MMU$BBR
                comm0:
 0146 11D002    	lxi	d,done
 0149 CDC303    	call	msgout
                error:
 014C AF        	xra	a	; back to RESET state (WE off)
 014D D3F2      	out	0f2h
                	; do something smarter...?
 014F 11E602    	lxi	d,die
 0152 CDC303    	call	msgout
 0155 F3        	di
 0156 76        	hlt
                
 0157 11F701    ckerr2:	lxi	d,cserr
 015A CDC303    	call	msgout
                	jr	error
 015D+18ED      	DB	18H,ERROR-$-1
                
 015F 11F701    ckerr:	lxi	d,cserr
 0162 CDC303    eloop:	call	msgout
 0165 C33100    	jmp	over
                
 0168 11D401    pcerr:	lxi	d,perr
                	jr	eloop
 016B+18F5      	DB	18H,ELOOP-$-1
                
                ; file is still open...
 016D CD7A01    rderr:	call	close
 0170 111302    	lxi	d,fierr
                	jr	eloop
 0173+18ED      	DB	18H,ELOOP-$-1
                
 0175 113A02    nofile:	lxi	d,nferr
                	jr	eloop
 0178+18E8      	DB	18H,ELOOP-$-1
                
 017A 21D001    close:	lxi	h,clf
 017D CD0000    	call	vdcmd
 0180 C9        	ret
                
                ; cancel, before any flash took place...
                ; safe return to ROM possible?
 0181 115602    cancel:	lxi	d,canc
 0184 CDC303    	call	msgout
 0187 CD0804    	call	crlf
 018A CDAD03    	call	conout	; another LF
 018D F3        	di
 018E AF        	xra	a
 018F D3F2      	out	0f2h
 0191 3EDF      	mvi	a,0dfh	; reset state of FP
 0193 D3F0      	out	0f0h
 0195 C30000    	jmp	0
                
                ; Destroys BC and A...
                ; Return A==0 for Z80, A<>0 for Z180
                cpu$type:
 0198 3E01      	mvi	a,1
                	mlt	b	; NEG if Z80... 01 -> FF
 019A+ED4C      	DB	0EDH, B*8+4CH
 019C D6FF      	sui	0ffh	; FF (Z80): NC,00; else (Z180): CY,nn
 019E 9F        	sbb	a	; FF: Z180, 00: Z80
 019F C9        	ret
                
 01A0 00        z180:	db	0
 01A1 00        era:	db	0	; erase setup?
 01A2 0D0A56464Csignon:	db	CR,LF,'VFLASH v'
 01AC 302E39    	db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
 01AF 202D205570	db	' - Update ROM from VDIP1',0
 01C8 20285A3138mz180:	db	' (Z180)',0
 01D0 636C660D  clf:	db	'clf',CR
 01D4 07524F4D20perr:	db	BEL,'ROM image does not match system',CR,LF,0
 01F7 07524F4D20cserr:	db	BEL,'ROM image checksum error',CR,LF,0
 0213 07524F4D20fierr:	db	BEL,'ROM image read error, or size wrong',CR,LF,0
 023A 07524F4D20nferr:	db	BEL,'ROM image file not found',CR,LF,0
 0256 524F4D2066canc:	db	'ROM flash cancelled',CR,LF,0
 026C 436C656172clear:	db	'Clear setup data (Y/N)? ',0
 0285 4572617369clring:	db	'Erasing setup data!',CR,LF,0
 029B 5072657373ready:	db	'Press RETURN to start flash: ',0
                
 02B9 456E746572quest:	db	'Enter ROM image file: ',0
 02D0 524F4D2075done:	db	'ROM update complete',CR,LF,0
 02E6 5072657373die:	db	'Press RESET',CR,LF,0
                
 02F4 68386D6F6Edefrom:	db	'h8mon2.rom',0	; default rom image file
                
                ; DE=start of ROM image
                ; must skip block 0x1000-0x17ff (relative)
 02FF 210000    vchksm:	lxi	h,0
 0302 224B03    	shld	sum
 0305 224D03    	shld	sum+2
 0308 010010    	lxi	b,1000h
 030B CD2803    	call	sum$bc
 030E 210008    	lxi	h,0800h	; skip block
 0311 19        	dad	d
 0312 EB        	xchg
 0313 01FC67    	lxi	b,8000h-1800h-4
 0316 CD2803    	call	sum$bc
 0319 214B03    	lxi	h,sum
 031C 0604      	mvi	b,4
 031E 1A        vchk1:	ldax	d
 031F BE        	cmp	m
 0320 37        	stc
 0321 C0        	rnz
 0322 13        	inx	d
 0323 23        	inx	h
                	djnz	vchk1
 0324+10F8      	DB	10H,VCHK1-$-1
 0326 AF        	xra	a	; NC
 0327 C9        	ret
                
 0328 1A        sum$bc:	ldax	d
 0329 CD3C03    	call	sum1
 032C 13        	inx	d
 032D 0B        	dcx	b
 032E 79        	mov	a,c
 032F B7        	ora	a
                	jrnz	sum$bc
 0330+20F6      	DB	20H,SUM$BC-$-1
 0332 78        	mov	a,b
 0333 B7        	ora	a
 0334 C8        	rz
 0335 E603      	ani	00000011b
 0337 CCEC03    	cz	progress
                	jr	sum$bc
 033A+18EC      	DB	18H,SUM$BC-$-1
                
 033C 214B03    sum1:	lxi	h,sum
 033F 86        	add	m
 0340 77        	mov	m,a
 0341 D0        	rnc
 0342 23        	inx	h
 0343 34        	inr	m
 0344 C0        	rnz
 0345 23        	inx	h
 0346 34        	inr	m
 0347 C0        	rnz
 0348 23        	inx	h
 0349 34        	inr	m
 034A C9        	ret
                
 034B 00000000  sum:	db	0,0,0,0
                
 034F 3E0D      linix:	mvi	a,CR
 0351 77        	mov	m,a	; terminate buffer
 0352 CDAD03    	call	conout
 0355 3E0A      	mvi	a,LF
                	jr	conout
 0357+1854      	DB	18H,CONOUT-$-1
                
                ; input a filename from console, allow backspace
                ; returns C=num chars
                linin:
 0359 211B04    	lxi	h,inbuf
 035C 0E00      	mvi	c,0	; count chars
 035E CDB803    lini0	call	conin
 0361 FE0D      	cpi	CR
                	jrz	linix
 0363+28EA      	DB	28H,LINIX-$-1
 0365 FE03      	cpi	CTLC	; cancel
 0367 37        	stc
 0368 C8        	rz
 0369 FE08      	cpi	BS
                	jrz	backup
 036B+2829      	DB	28H,BACKUP-$-1
 036D FE2E      	cpi	'.'
                	jrz	chrok
 036F+2816      	DB	28H,CHROK-$-1
 0371 FE2D      	cpi	'-'
                	jrz	chrok
 0373+2812      	DB	28H,CHROK-$-1
 0375 FE30      	cpi	'0'
                	jrc	chrnak
 0377+3816      	DB	38H,CHRNAK-$-1
 0379 FE3A      	cpi	'9'+1
                	jrc	chrok
 037B+380A      	DB	38H,CHROK-$-1
 037D E65F      	ani	01011111b	; toupper
 037F FE41      	cpi	'A'
                	jrc	chrnak
 0381+380C      	DB	38H,CHRNAK-$-1
 0383 FE5B      	cpi	'Z'+1
                	jrnc	chrnak
 0385+3008      	DB	30H,CHRNAK-$-1
 0387 77        chrok:	mov	m,a
 0388 23        	inx	h
 0389 0C        	inr	c
 038A CDAD03    	call	conout
                	; TODO: detect overflow...
                	jr	lini0
 038D+18CF      	DB	18H,LINI0-$-1
 038F 3E07      chrnak:	mvi	a,BEL
 0391 CDAD03    	call	conout
                	jr	lini0
 0394+18C8      	DB	18H,LINI0-$-1
                backup:
 0396 79        	mov	a,c
 0397 B7        	ora	a
                	jrz	lini0
 0398+28C4      	DB	28H,LINI0-$-1
 039A 0D        	dcr	c
 039B 2B        	dcx	h
 039C 3E08      	mvi	a,BS
 039E CDAD03    	call	conout
 03A1 3E20      	mvi	a,' '
 03A3 CDAD03    	call	conout
 03A6 3E08      	mvi	a,BS
 03A8 CDAD03    	call	conout
                	jr	lini0
 03AB+18B1      	DB	18H,LINI0-$-1
                
 03AD F5        conout:	push	psw
 03AE DBED      cono0:	in	0edh
 03B0 E620      	ani	00100000b
                	jrz	cono0
 03B2+28FA      	DB	28H,CONO0-$-1
 03B4 F1        	pop	psw
 03B5 D3E8      	out	0e8h
 03B7 C9        	ret
                
 03B8 DBED      conin:	in	0edh
 03BA E601      	ani	00000001b
                	jrz	conin
 03BC+28FA      	DB	28H,CONIN-$-1
 03BE DBE8      	in	0e8h
 03C0 E67F      	ani	01111111b
 03C2 C9        	ret
                
 03C3 1A        msgout:	ldax	d
 03C4 B7        	ora	a
 03C5 C8        	rz
 03C6 CDAD03    	call	conout
 03C9 13        	inx	d
                	jr	msgout
 03CA+18F7      	DB	18H,MSGOUT-$-1
                
                ; flash ROM from HL to DE, 64 bytes at a time.
                ; DE must be on a 64-byte boundary.
                ; BC=num pages to flash
                ; returns CY on error, else HL,DE at next 64 bytes
                ; caller must set WE... and MEM1 as needed.
                flash:
 03CC C5        	push	b
 03CD 014000    	lxi	b,64
                	ldir
 03D0+EDB0      	DB	0EDH,0B0H
                	; -----
 03D2 2B        	dcx	h
 03D3 1B        	dcx	d	; last addr written...
                	; wait for write cycle to begin...
                	; TODO: timeout this loop?
 03D4 1A        flash2:	ldax	d
 03D5 AE        	xra	m
 03D6 E680      	ani	10000000b	; bit7 is inverted when busy...
                	jrz	flash2
 03D8+28FA      	DB	28H,FLASH2-$-1
                	; wait for write cycle to end...
                	; TODO: timeout this loop?
 03DA 1A        flash0:	ldax	d
 03DB AE        	xra	m
 03DC E680      	ani	10000000b	; bit7 is inverted when busy...
                	jrnz	flash0
 03DE+20FA      	DB	20H,FLASH0-$-1
 03E0 23        	inx	h
 03E1 13        	inx	d
                	; done with page...
 03E2 CDEC03    	call	progress
 03E5 C1        	pop	b
 03E6 0B        	dcx	b
 03E7 78        	mov	a,b
 03E8 B1        	ora	c
                	jrnz	flash
 03E9+20E1      	DB	20H,FLASH-$-1
                	;xra	a	; NC already
 03EB C9        	ret
                
                progress:
 03EC E5        	push	h
 03ED C5        	push	b
 03EE 211204    	lxi	h,spinx
 03F1 34        	inr	m
 03F2 7E        	mov	a,m
 03F3 E603      	ani	00000011b
 03F5 4F        	mov	c,a
 03F6 0600      	mvi	b,0
 03F8 211304    	lxi	h,spin
 03FB 09        	dad	b
 03FC 7E        	mov	a,m
 03FD CDAD03    	call	conout
 0400 3E08      	mvi	a,BS
 0402 CDAD03    	call	conout
 0405 C1        	pop	b
 0406 E1        	pop	h
 0407 C9        	ret
                
 0408 3E0D      crlf:	mvi	a,CR
 040A CDAD03    	call	conout
 040D 3E0A      	mvi	a,LF
 040F C3AD03    	jmp	conout
                
 0412 00        spinx:	db	0
 0413 2D5C7C2F  spin:	db	'-','\','|','/'
                
 0417 6F707220  opr:	db	'opr '	; in position for filename...
 041B           inbuf:	ds	128	; file name entry buffer
                
 049B           	ds	128
 051B           stack:	ds	0
                
 051B           vdbuf:	ds	128	; for vdip1.lib
 059B           	end
