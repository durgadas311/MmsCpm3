                ; A config util for WizNET 550 devices, attached in parallel-SPI interface
                ; Sets config into NVRAM, unless 'w' option prefix to set to WIZ850io directly.
                ; interactive stand-alone version.
 0001 =         VERN	equ	01h
                
                	extrn	wizcfg,wizcfg0,wizcmd,wizget,wizset,wizclose,setsok,settcp
                	extrn	gkeep,skeep
                	extrn	cksum32,vcksum,scksum,nvget
                
                	public	nvbuf	; for wizcfg routine
                
                	maclib	z80
                
 000D =         CR	equ	13
 000A =         LF	equ	10
 0009 =         TAB	equ	9
 0008 =         BS	equ	8
 0007 =         BEL	equ	7
 0003 =         CTLC	equ	3
                
                	cseg
                
 0000 C30300    	jmp	start
                
                	dseg
 0000 4E6F646520idmsg:	db	'Node ID:  ',0
 000B 4761746577gwmsg:	db	'Gateway:  ',0
 0016 5375626E65ntmsg:	db	'Subnet:   ',0
 0021 4D41433A20mcmsg:	db	'MAC:      ',0
 002C 4950204164ipmsg:	db	'IP Addr:  ',0
 0037 536F636B65sock:	db	'Socket '
 003E 5F3A2000  sokn:	db	       '_: ',0
 0042 44656C6574ntdev:	db	'Delete Map: ',0
 004F 4E65772044newdev:	db	'New Device Map ? ',0
                
 0061 09        quest3:	db	TAB
 0062 09        quest2:	db	TAB
 0063 093F2000  quest:	db	TAB,'? ',0
                
 0067 57495A4346usage:	db	'WIZCFG v'
 006F 302E31    	db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
 0072 0D0A00    	db	CR,LF,0
                
 0075 5365740D0Adone:	db	'Set',CR,LF,0
 007B 4E6F742043ncfg:	db	'Not Configured',TAB,0
 008B 4E5652414Dnverr:	db	'NVRAM block not initialized',CR,LF,0
 00A9 496E697469newbuf:	db	'Initializing new NVRAM block',CR,LF,0
 00C8 4E6F206368nchg:	db	'No changes to config',CR,LF,0
 00DF 5361766520qsave:	db	'Save changes? ',0
 00EE 0D0A57495Amabrt:	db	CR,LF,'WIZCFG aborted',CR,LF,0
                
                	cseg
                start:
 0003 312901    	lxi	sp,stack
                	; TODO: scan for 'W'?
                	;lda	cmd
                	;ora	a
                	;jz	show
                
                	; read in currrent config (pick source)
 0006 3A3501    	lda	direct
 0009 B7        	ora	a
 000A CA4000    	jz	nvshow
                
                ; get config from WIZ850io...
 000D CD9805    	call	nvbinit	; fill buf with FF
 0010 21B701    	lxi	h,nvbuf
 0013 110000    	lxi	d,0	; offset +0, BSB=0
 0016 0620      	mvi	b,32	; entire block
 0018 CD0000    	call	wizget
 001B 21D701    	lxi	h,nvbuf+32	; socket array area
 001E 1608      	mvi	d,SOCK0	; BSB 08h = Socket 0 Register Block
 0020 1E00      	mvi	e,0	; offset +0
 0022 0608      	mvi	b,8	; num sockets
 0024 C5        save0:	push	b
 0025 E5        	push	h
 0026 0620      	mvi	b,32	; save all between, restore skips
 0028 CD0000    	call	wizget	; HL = next block
 002B E5        	push	h
 002C D5        	push	d
 002D CD0000    	call	gkeep	; trashes HL,E
 0030 D1        	pop	d
 0031 E1        	pop	h
                	popix
 0032+DDE1      	DB	0DDH,0E1H
                	stx	a,NvKPALVTR
 0034+DD771D    	DB	0DDH,70H+A,NVKPALVTR
 0037 C1        	pop	b
 0038 3E20      	mvi	a,001$00$000b	; socket BSB incr value
 003A 82        	add	d
 003B 57        	mov	d,a
                	djnz	save0
 003C+10E6      	DB	10H,SAVE0-$-1
                	jr	over
 003E+180A      	DB	18H,OVER-$-1
                
                ; get config from NVRAM...
                nvshow:
 0040 CD8105    	call	nvgetb	; inits buf if needed
                	jr	over
 0043+1805      	DB	18H,OVER-$-1
 0045 3E07      over0:	mvi	a,BEL
 0047 CD1C06    	call	chrout
                ; interate over all possible settings, prompting for new values...
                over:
                	; Node ID
 004A 3AD401    	lda	nvbuf+PMAGIC
 004D CDF505    	call	shid
 0050 116100    	lxi	d,quest3
 0053 CD1306    	call	msgout
 0056 CD2C06    	call	linin
 0059 DA1F02    	jc	abort
 005C 79        	mov	a,c
 005D B7        	ora	a
                	jrz	next1	; no change
 005E+281A      	DB	28H,NEXT1-$-1
 0060 213701    	lxi	h,cmdlin
 0063 41        	mov	b,c
 0064 CDD104    	call	parshx
 0067 DA4500    	jc	over0
 006A 7A        	mov	a,d
 006B 32D401    	sta	nvbuf+PMAGIC
 006E 3E01      	mvi	a,1
 0070 323601    	sta	dirty
                	jr	next1
 0073+1805      	DB	18H,NEXT1-$-1
                
 0075 3E07      over1:	mvi	a,BEL
 0077 CD1C06    	call	chrout
                next1:	; IP Addr
 007A 21C601    	lxi	h,nvbuf+SIPR
 007D 112C00    	lxi	d,ipmsg
 0080 CD0006    	call	ship
 0083 116200    	lxi	d,quest2
 0086 CD1306    	call	msgout
 0089 CD2C06    	call	linin
 008C DA1F02    	jc	abort
 008F 79        	mov	a,c
 0090 B7        	ora	a
                	jrz	next2	; no change
 0091+2819      	DB	28H,NEXT2-$-1
 0093 213701    	lxi	h,cmdlin
 0096 41        	mov	b,c
                	lxix	nvbuf+SIPR
 0097+DD21      	DB	0DDH,21H
 0099+C601      	DW	NVBUF+SIPR
 009B CDFE04    	call	parsadr
                	jrc	over1
 009E+38D5      	DB	38H,OVER1-$-1
 00A0 3E01      	mvi	a,1
 00A2 323601    	sta	dirty
                	jr	next2
 00A5+1805      	DB	18H,NEXT2-$-1
                
 00A7 3E07      over2:	mvi	a,BEL
 00A9 CD1C06    	call	chrout
                next2:	;Subnet
 00AC 21BC01    	lxi	h,nvbuf+SUBR
 00AF 111600    	lxi	d,ntmsg
 00B2 CD0006    	call	ship
 00B5 116200    	lxi	d,quest2
 00B8 CD1306    	call	msgout
 00BB CD2C06    	call	linin
 00BE DA1F02    	jc	abort
 00C1 79        	mov	a,c
 00C2 B7        	ora	a
                	jrz	next3	; no change
 00C3+2819      	DB	28H,NEXT3-$-1
 00C5 213701    	lxi	h,cmdlin
 00C8 41        	mov	b,c
                	lxix	nvbuf+SUBR
 00C9+DD21      	DB	0DDH,21H
 00CB+BC01      	DW	NVBUF+SUBR
 00CD CDFE04    	call	parsadr
                	jrc	over2
 00D0+38D5      	DB	38H,OVER2-$-1
 00D2 3E01      	mvi	a,1
 00D4 323601    	sta	dirty
                	jr	next3
 00D7+1805      	DB	18H,NEXT3-$-1
                
 00D9 3E07      over3:	mvi	a,BEL
 00DB CD1C06    	call	chrout
                next3:	; Gateway IP
 00DE 21B801    	lxi	h,nvbuf+GAR
 00E1 110B00    	lxi	d,gwmsg
 00E4 CD0006    	call	ship
 00E7 116200    	lxi	d,quest2
 00EA CD1306    	call	msgout
 00ED CD2C06    	call	linin
 00F0 DA1F02    	jc	abort
 00F3 79        	mov	a,c
 00F4 B7        	ora	a
                	jrz	next4	; no change
 00F5+2819      	DB	28H,NEXT4-$-1
 00F7 213701    	lxi	h,cmdlin
 00FA 41        	mov	b,c
                	lxix	nvbuf+GAR
 00FB+DD21      	DB	0DDH,21H
 00FD+B801      	DW	NVBUF+GAR
 00FF CDFE04    	call	parsadr
                	jrc	over3
 0102+38D5      	DB	38H,OVER3-$-1
 0104 3E01      	mvi	a,1
 0106 323601    	sta	dirty
                	jr	next4
 0109+1805      	DB	18H,NEXT4-$-1
                
 010B 3E07      over4:	mvi	a,BEL
 010D CD1C06    	call	chrout
                next4:	; MAC address
 0110 21C001    	lxi	h,nvbuf+SHAR
 0113 CD0806    	call	shmac
 0116 116300    	lxi	d,quest
 0119 CD1306    	call	msgout
 011C CD2C06    	call	linin
 011F DA1F02    	jc	abort
 0122 79        	mov	a,c
 0123 B7        	ora	a
                	jrz	next5	; no change
 0124+2812      	DB	28H,NEXT5-$-1
 0126 213701    	lxi	h,cmdlin
 0129 41        	mov	b,c
                	lxix	nvbuf+SHAR
 012A+DD21      	DB	0DDH,21H
 012C+C001      	DW	NVBUF+SHAR
 012E CD9004    	call	parsmac
                	jrc	over4
 0131+38D8      	DB	38H,OVER4-$-1
 0133 3E01      	mvi	a,1
 0135 323601    	sta	dirty
                next5:	; now the sockets
 0138 0608      	mvi	b,nsock
                	lxix	nvbuf+32	; start of sockets
 013A+DD21      	DB	0DDH,21H
 013C+D701      	DW	NVBUF+32
 013E 3E30      	mvi	a,'0'
 0140 323E00    	sta	sokn
                	jr	soklup
 0143+1805      	DB	18H,SOKLUP-$-1
                
 0145 3E07      over5:	mvi	a,BEL
 0147 CD1C06    	call	chrout
                soklup:	
 014A C5        	push	b
 014B CD6B03    	call	showsok
 014E 116300    	lxi	d,quest
 0151 CD1306    	call	msgout
 0154 CD2C06    	call	linin
 0157 DA1F02    	jc	abort
 015A 79        	mov	a,c
 015B B7        	ora	a
                	jrz	next5b	; NC also
 015C+280C      	DB	28H,NEXT5B-$-1
                	; TODO: allow de-config?
 015E 213701    	lxi	h,cmdlin
 0161 41        	mov	b,c
 0162 CD0503    	call	parsok
 0165 3E01      	mvi	a,1	; must preserve CY
 0167 323601    	sta	dirty	;
 016A C1        next5b:	pop	b
                	jrc	over5
 016B+38D8      	DB	38H,OVER5-$-1
 016D 112000    	lxi	d,32
                	dadx	d
 0170+DD19      	DB	0DDH,D*8+09H
 0172 3A3E00    	lda	sokn
 0175 3C        	inr	a
 0176 323E00    	sta	sokn
                	djnz	soklup
 0179+10CF      	DB	10H,SOKLUP-$-1
                
                	; CP/NET device table
                	; first, see if any maps currently exist
 017B 21D702    	lxi	h,nvbuf+NvCFGTBL
 017E 23        	inx	h
 017F 23        	inx	h
 0180 0E00      	mvi	c,0	; drive A:
 0182 7E        next6c:	mov	a,m
 0183 FEFF      	cpi	0ffh	; not set
                	jrnz	next6a	; something exists...
 0185+2033      	DB	20H,NEXT6A-$-1
 0187 23        next6b:	inx	h
 0188 23        	inx	h
 0189 0C        	inr	c
 018A 79        	mov	a,c
 018B FE10      	cpi	16	; CON:
                	jrz	next6b
 018D+28F8      	DB	28H,NEXT6B-$-1
 018F FE12      	cpi	18
                	jrc	next6c
 0191+38EF      	DB	38H,NEXT6C-$-1
                	; end of cfgtbl, now ask about new entries
 0193 114F00    next6e:	lxi	d,newdev	; includes '?'
 0196 CD1306    	call	msgout
 0199 CD2C06    	call	linin	; empty line means done
 019C DA1F02    	jc	abort
 019F 79        	mov	a,c
 01A0 B7        	ora	a
                	jrz	fini
 01A1+284B      	DB	28H,FINI-$-1
                	; string format like A:, B:=F:[0], LST:=0[0]
 01A3 213701    	lxi	h,cmdlin
 01A6 41        	mov	b,c
 01A7 CD7502    	call	parsex
                	jrnc	next6d
 01AA+3007      	DB	30H,NEXT6D-$-1
 01AC 3E07      	mvi	a,BEL
 01AE CD1C06    	call	chrout
                	jr	next6e
 01B1+18E0      	DB	18H,NEXT6E-$-1
 01B3 3E01      next6d:	mvi	a,1
 01B5 323601    	sta	dirty
                	jr	next6e
 01B8+18D9      	DB	18H,NEXT6E-$-1
                
                next6a:	; mapping exists, prompt for delete. HL=map, C=dev
 01BA 114200    	lxi	d,ntdev
 01BD CD1306    	call	msgout
 01C0 CD2802    	call	shwexp
 01C3 116200    	lxi	d,quest2
 01C6 FE5D      	cpi	']'
                	jrnz	next6f
 01C8+2003      	DB	20H,NEXT6F-$-1
 01CA 116300    	lxi	d,quest
 01CD CD1306    next6f:	call	msgout
 01D0 E5        	push	h	; save cfgtbl ptr
 01D1 C5        	push	b	; save dev idx
 01D2 CD2C06    	call	linin
 01D5 C1        	pop	b	; restore dev idx
 01D6 E1        	pop	h	; restore cfgtbl ptr
 01D7 DA1F02    	jc	abort
 01DA 3A3701    	lda	cmdlin
 01DD FE59      	cpi	'Y'
                	jrnz	next6b	; next map
 01DF+20A6      	DB	20H,NEXT6B-$-1
 01E1 3EFF      	mvi	a,0ffh
 01E3 77        	mov	m,a
 01E4 23        	inx	h
 01E5 77        	mov	m,a
 01E6 2B        	dcx	h
 01E7 3E01      	mvi	a,1
 01E9 323601    	sta	dirty
                	jr	next6b	; next map
 01EC+1899      	DB	18H,NEXT6B-$-1
                
                ; collected all changes...
 01EE 3A3601    fini:	lda	dirty
 01F1 B7        	ora	a
 01F2 CA1602    	jz	nochg
                	; prompt to save changes...
 01F5 11DF00    	lxi	d,qsave
 01F8 CD1306    	call	msgout
 01FB CD2C06    	call	linin
                	jrc	exit
 01FE+381C      	DB	38H,EXIT-$-1
 0200 3A3701    	lda	cmdlin
 0203 FE59      	cpi	'Y'
                	jrnz	exit
 0205+2015      	DB	20H,EXIT-$-1
 0207 3A3501    	lda	direct
                	jrnz	savwiz
 020A+2005      	DB	20H,SAVWIZ-$-1
 020C CD4F03    	call	nvsetit
                	jr	exit
 020F+180B      	DB	18H,EXIT-$-1
                savwiz:
 0211 CD0000    	call	wizcfg0	; config WIZ850io from nvbuf
                	; no error possible?
                	jr	exit
 0214+1806      	DB	18H,EXIT-$-1
                
 0216 11C800    nochg:	lxi	d,nchg
 0219 CD1306    	call	msgout
 021C C30000    exit:	jmp	0
                
 021F 11EE00    abort:	lxi	d,mabrt
 0222 CD1306    	call	msgout
 0225 C30000    	jmp	0
                
                ; HL=map ptr, C=local dev (0-15, 17)
                shwexp:
 0228 79        	mov	a,c
 0229 CD5602    	call	shwdev
 022C 7E        	mov	a,m
 022D B7        	ora	a
 022E F0        	rp		; local device
 022F 3E3D      	mvi	a,'='
 0231 CD1C06    	call	chrout
 0234 79        	mov	a,c
 0235 FE11      	cpi	17	; LST:?
                	jrz	shwex1
 0237+2816      	DB	28H,SHWEX1-$-1
                	; drive
 0239 7E        	mov	a,m
 023A 23        	inx	h
 023B E60F      	ani	0fh
 023D CD5602    	call	shwdev
 0240 3E5B      shwex0:	mvi	a,'['
 0242 CD1C06    	call	chrout
 0245 7E        	mov	a,m	; SID
 0246 2B        	dcx	h
 0247 CD6D04    	call	hexout
 024A 3E5D      	mvi	a,']'
 024C C31C06    	jmp	chrout
 024F 7E        shwex1:	mov	a,m
 0250 23        	inx	h
 0251 CD7604    	call	hexdig
                	jr	shwex0
 0254+18EA      	DB	18H,SHWEX0-$-1
                
                ; print device name, A:-P: or LST:
                ; A=dev id
 0256 FE11      shwdev:	cpi	17
                	jrz	shwdv0
 0258+280A      	DB	28H,SHWDV0-$-1
 025A C641      	adi	'A'
 025C CD1C06    	call	chrout
 025F 3E3A      shwdv1:	mvi	a,':'
 0261 C31C06    	jmp	chrout
 0264 3E4C      shwdv0:	mvi	a,'L'
 0266 CD1C06    	call	chrout
 0269 3E53      	mvi	a,'S'
 026B CD1C06    	call	chrout
 026E 3E54      	mvi	a,'T'
 0270 CD1C06    	call	chrout
                	jr	shwdv1
 0273+18EA      	DB	18H,SHWDV1-$-1
                
                ; Parse a device map expression
                ; "A:" or "LST:" sets device to LOCAL
                ; "A:=B:[0]" or "LST:=0[0]" sets device networked
                ; HL=cmdlin
                ; B=len
                parsex:
 0275 CDC102    	call	parsdv
 0278 D8        	rc
 0279 FE3D      	cpi	'='	; network vs. local?
                	jrz	parsnw
 027B+2810      	DB	28H,PARSNW-$-1
                	; set device local
 027D 010000    	lxi	b,0
 0280 1C        parsx0:	inr	e	; skip extra "entry" at start of cfgtbl
 0281 1600      	mvi	d,0
 0283 21D702    	lxi	h,nvbuf+NvCFGTBL
 0286 19        	dad	d
 0287 19        	dad	d
 0288 70        	mov	m,b
 0289 23        	inx	h
 028A 71        	mov	m,c
 028B AF        	xra	a
 028C C9        	ret
                
                parsnw:
 028D 7B        	mov	a,e
 028E FE11      	cpi	17	; LST:
                	jrz	parsls
 0290+2811      	DB	28H,PARSLS-$-1
 0292 53        	mov	d,e	; save local drive name
 0293 CDC102    	call	parsdv
 0296 D8        	rc
 0297 FE5B      	cpi	'['
                	jrz	parsrv
 0299+2816      	DB	28H,PARSRV-$-1
                	; use SID "00"
 029B 43        pars00:	mov	b,e	; B=remote dev (0-15)
                	setb	7,b	; dev is networked
 029C+CBF8      	DB	0CBH,7*8+B+0C0H
 029E 0E00      	mvi	c,0	; C=SID (00)
 02A0 5A        	mov	e,d	; E=local dev
                	jr	parsx0
 02A1+18DD      	DB	18H,PARSX0-$-1
                
                parsls:	; have "LST:="
 02A3 3E5B      	mvi	a,'['
 02A5 CDD104    	call	parshx
 02A8 D8        	rc
 02A9 F5        	push	psw
 02AA 7B        	mov	a,e
 02AB E60F      	ani	0fh
 02AD 5F        	mov	e,a
 02AE F1        	pop	psw
                	jrnz	pars00	; use default SID
 02AF+20EA      	DB	20H,PARS00-$-1
                	;jr	parsrv
                parsrv:	; D=local, E=remote drive name
 02B1 D5        	push	d	; save local/remote drive name
 02B2 0E5D      	mvi	c,']'
 02B4 CDD104    	call	parshx	; SID
 02B7 C1        	pop	b	; B=local, C=remote drive name
 02B8 D8        	rc
                	; E=SID, B=local, C=remote
 02B9 53        	mov	d,e	; D=SID (temp)
 02BA 58        	mov	e,b	; E=local
 02BB 41        	mov	b,c	; B=remote drive
 02BC 4A        	mov	c,d	; C=SID
                	setb	7,b	; drive is networked
 02BD+CBF8      	DB	0CBH,7*8+B+0C0H
                	jr	parsx0
 02BF+18BF      	DB	18H,PARSX0-$-1
                
                ; Parse device, A:..P: or LST:
                ; returns E=0..15,17 or CY if error
                parsdv:
 02C1 78        	mov	a,b	; chars left
 02C2 FE02      	cpi	2
 02C4 D8        	rc
 02C5 7E        	mov	a,m
 02C6 D641      	sui	'A'
 02C8 D8        	rc
 02C9 5F        	mov	e,a
 02CA 23        	inx	h
 02CB 7E        	mov	a,m
 02CC 05        	dcr	b
 02CD FE3A      	cpi	':'
                	jrnz	pv1	; LST: or error
 02CF+200E      	DB	20H,PV1-$-1
 02D1 23        	inx	h
 02D2 05        	dcr	b
 02D3 7B        	mov	a,e	; must be 0..15
 02D4 FE10      	cpi	16
 02D6 3F        	cmc
 02D7 C8        	rz
 02D8 78        pv2:	mov	a,b
 02D9 B7        	ora	a
 02DA C8        	rz	; end of string: NUL
 02DB 7E        	mov	a,m	; delimiter
 02DC 23        	inx	h
 02DD 05        	dcr	b
 02DE C9        	ret
                pv1:
 02DF 7B        	mov	a,e
 02E0 FE0B      	cpi	'L'-'A'
 02E2 37        	stc
 02E3 C0        	rnz
 02E4 3E53      	mvi	a,'S'
 02E6 CDFA02    	call	check1
 02E9 D8        	rc
 02EA 3E54      	mvi	a,'T'
 02EC CDFA02    	call	check1
 02EF D8        	rc
 02F0 3E3A      	mvi	a,':'
 02F2 CDFA02    	call	check1
 02F5 D8        	rc
 02F6 1E11      	mvi	e,17
                	jr	pv2
 02F8+18DE      	DB	18H,PV2-$-1
                
                ; Tests if A==curr char on cmdlin
                ; CY if fail, next char if true
                check1:
 02FA BE        	cmp	m
 02FB 37        	stc
 02FC C0        	rnz
 02FD 78        	mov	a,b
 02FE B7        	ora	a
 02FF 37        	stc
 0300 C8        	rz
 0301 23        	inx	h
 0302 05        	dcr	b
 0303 AF        	xra	a
 0304 C9        	ret
                
                ; Parse new Socket config
                ; IX=socket ptr, HL=cmdlin, B=len
                parsok:
                	; parse <srvid> <ipadr> <port>
 0305 0E00      	mvi	c,0	; NUL won't ever be seen
 0307 CDD104    	call	parshx
 030A D8        	rc	; non-destructive error
                	mvix	31h,SnPORT
 030B+DD360431  	DB	0DDH,36H,SNPORT,31H
                	stx	d,SnPORT+1	; server ID
 030F+DD7205    	DB	0DDH,70H+D,SNPORT+1
 0312 CD8304    	call	skipb
 0315 D8        	rc
                	pushix
 0316+DDE5      	DB	0DDH,0E5H
 0318 110C00    	lxi	d,SnDIPR
                	dadx	d
 031B+DD19      	DB	0DDH,D*8+09H
 031D CDFE04    	call	parsadr	; non-destructive on error
                	popix
 0320+DDE1      	DB	0DDH,0E1H
 0322 D8        	rc
 0323 CD8304    	call	skipb
 0326 D8        	rc
 0327 CD5005    	call	parsnm
 032A D8        	rc	; non-destructive error
                	stx	d,SnDPORT
 032B+DD7210    	DB	0DDH,70H+D,SNDPORT
                	stx	e,SnDPORT+1
 032E+DD7311    	DB	0DDH,70H+E,SNDPORT+1
                	; optional keep-alive timeout
                	mvix	0,NvKPALVTR
 0331+DD361D00  	DB	0DDH,36H,NVKPALVTR,0
 0335 CD8304    	call	skipb
                	jrc	nokp
 0338+3813      	DB	38H,NOKP-$-1
 033A 78        	mov	a,b
 033B B7        	ora	a
 033C C45005    	cnz	parsnm
 033F D8        	rc	; non-destructive error
 0340 CD4904    	call	div5
 0343 7A        	mov	a,d
 0344 B7        	ora	a
 0345 CA4A03    	jz	nokp0
 0348 1EFF      	mvi	e,0ffh	; max keepalive
                nokp0:	stx	e,NvKPALVTR
 034A+DD731D    	DB	0DDH,70H+E,NVKPALVTR
 034D B7        nokp:	ora	a	; NC
 034E C9        	ret
                
                nvsetit:
                	lxix	nvbuf
 034F+DD21      	DB	0DDH,21H
 0351+B701      	DW	NVBUF
 0353 CD0000    	call	scksum
 0356 210000    	lxi	h,0	; WIZNET uses 512 bytes at 0000 in NVRAM
 0359 110002    	lxi	d,512
 035C CDA605    	call	nvset
 035F C9        	ret
                
                ; Convert 'sokn' (ASCII digit) to socket BSB
                getsokn:
 0360 3A3E00    	lda	sokn
 0363 D630      	sui	'0'
 0365 0F        	rrc
 0366 0F        	rrc
 0367 0F        	rrc		; xxx00000
 0368 F608      	ori	SOCK0	; xxx01000
 036A C9        	ret
                
                ; Must show unconfigured sockets, to allow config
                ; IX=socket ptr, 'sokn' already set
                showsok:
 036B 113700    	lxi	d,sock
 036E CD1306    	call	msgout
                	ldx	a,SnPORT
 0371+DD7E04    	DB	0DDH,A*8+46H,SNPORT
 0374 FE31      	cpi	31h
                	jrnz	nosok
 0376+2032      	DB	20H,NOSOK-$-1
                	ldx	a,SnPORT+1
 0378+DD7E05    	DB	0DDH,A*8+46H,SNPORT+1
 037B CD6D04    	call	hexout
 037E 3E20      	mvi	a,' '
 0380 CD1C06    	call	chrout
                	pushix
 0383+DDE5      	DB	0DDH,0E5H
 0385 E1        	pop	h
 0386 110C00    	lxi	d,SnDIPR
 0389 19        	dad	d
 038A CDC303    	call	ipout
 038D 3E20      	mvi	a,' '
 038F CD1C06    	call	chrout
                	ldx	d,SnDPORT
 0392+DD5610    	DB	0DDH,D*8+46H,SNDPORT
                	ldx	e,SnDPORT+1
 0395+DD5E11    	DB	0DDH,E*8+46H,SNDPORT+1
 0398 CDDF03    	call	dec16
 039B 3E20      	mvi	a,' '
 039D CD1C06    	call	chrout
                	ldx	a,NvKPALVTR
 03A0+DD7E1D    	DB	0DDH,A*8+46H,NVKPALVTR
 03A3 CD5F04    	call	mult5
 03A6 CDDF03    	call	dec16
 03A9 C9        	ret
 03AA 117B00    nosok:	lxi	d,ncfg
 03AD CD1306    	call	msgout
 03B0 C9        	ret
                
                hwout:
 03B1 0606      	mvi	b,6
 03B3 0E3A      	mvi	c,':'
 03B5 7E        hw0:	mov	a,m
 03B6 CD6D04    	call	hexout
 03B9 05        	dcr	b
 03BA C8        	rz
 03BB 79        	mov	a,c
 03BC CD1C06    	call	chrout
 03BF 23        	inx	h
 03C0 C3B503    	jmp	hw0
                
                ipout:
 03C3 0604      	mvi	b,4
 03C5 0E2E      	mvi	c,'.'
 03C7 7E        ip0:	mov	a,m
 03C8 CD1B04    	call	decout
 03CB 05        	dcr	b
 03CC C8        	rz
 03CD 79        	mov	a,c
 03CE CD1C06    	call	chrout
 03D1 23        	inx	h
 03D2 C3C703    	jmp	ip0
                
                crlf:
 03D5 3E0D      	mvi	a,CR
 03D7 CD1C06    	call	chrout
 03DA 3E0A      	mvi	a,LF
 03DC C31C06    	jmp	chrout
                
                dec16:
 03DF EB        	xchg	; remainder in HL
 03E0 0E00      	mvi	c,0
 03E2 111027    	lxi	d,10000
 03E5 CD0104    	call	div16
 03E8 11E803    	lxi	d,1000
 03EB CD0104    	call	div16
 03EE 116400    	lxi	d,100
 03F1 CD0104    	call	div16
 03F4 110A00    	lxi	d,10
 03F7 CD0104    	call	div16
 03FA 7D        	mov	a,l
 03FB C630      	adi	'0'
 03FD CD1C06    	call	chrout
 0400 C9        	ret
                
 0401 0600      div16:	mvi	b,0
 0403 B7        dv0:	ora	a
                	dsbc	d
 0404+ED52      	DB	0EDH,D*8+42H
 0406 04        	inr	b
                	jrnc	dv0
 0407+30FA      	DB	30H,DV0-$-1
 0409 19        	dad	d
 040A 05        	dcr	b
                	jrnz	dv1
 040B+2005      	DB	20H,DV1-$-1
                	bit	0,c
 040D+CB41      	DB	0CBH,0*8+C+40H
                	jrnz	dv1
 040F+2001      	DB	20H,DV1-$-1
 0411 C9        	ret
                dv1:	setb	0,c
 0412+CBC1      	DB	0CBH,0*8+C+0C0H
 0414 3E30      	mvi	a,'0'
 0416 80        	add	b
 0417 CD1C06    	call	chrout
 041A C9        	ret
                
                ; A=number to print
                ; leading zeroes blanked - must preserve B
                decout:
 041B C5        	push	b
 041C 0E00      	mvi	c,0
 041E 1664      	mvi	d,100
 0420 CD2F04    	call	divide
 0423 160A      	mvi	d,10
 0425 CD2F04    	call	divide
 0428 C630      	adi	'0'
 042A CD1C06    	call	chrout
 042D C1        	pop	b
 042E C9        	ret
                
 042F 1E00      divide:	mvi	e,0
 0431 92        div0:	sub	d
 0432 1C        	inr	e
                	jrnc	div0
 0433+30FC      	DB	30H,DIV0-$-1
 0435 82        	add	d
 0436 1D        	dcr	e
                	jrnz	div1
 0437+2005      	DB	20H,DIV1-$-1
                	bit	0,c
 0439+CB41      	DB	0CBH,0*8+C+40H
                	jrnz	div1
 043B+2001      	DB	20H,DIV1-$-1
 043D C9        	ret
                div1:	setb	0,c
 043E+CBC1      	DB	0CBH,0*8+C+0C0H
 0440 F5        	push	psw	; remainder
 0441 3E30      	mvi	a,'0'
 0443 83        	add	e
 0444 CD1C06    	call	chrout
 0447 F1        	pop	psw	; remainder
 0448 C9        	ret
                
                ; brute-force divide DE by 5
                ; Return: DE=quotient (remainder lost)
 0449 E5        div5:	push	h
 044A C5        	push	b
 044B EB        	xchg
 044C 010500    	lxi	b,5
 044F 110000    	lxi	d,0
 0452 B7        	ora	a
                div50:	dsbc	b
 0453+ED42      	DB	0EDH,B*8+42H
 0455 DA5C04    	jc	div51
 0458 13        	inx	d
 0459 C35304    	jmp	div50
 045C C1        div51:	pop	b
 045D E1        	pop	h
 045E C9        	ret
                
                ; Multiply A by 5, result in DE
 045F EB        mult5:	xchg	; save HL
 0460 6F        	mov	l,a
 0461 2600      	mvi	h,0
 0463 29        	dad	h	; *2
 0464 29        	dad	h	; *4
 0465 85        	add	l	; *5
 0466 6F        	mov	l,a
 0467 3E00      	mvi	a,0
 0469 8C        	adc	h
 046A 67        	mov	h,a
 046B EB        	xchg	; result to DE, restore HL
 046C C9        	ret
                
                hexout:
 046D F5        	push	psw
 046E 0F        	rrc
 046F 0F        	rrc
 0470 0F        	rrc
 0471 0F        	rrc
 0472 CD7604    	call	hexdig
 0475 F1        	pop	psw
                	;jmp	hexdig
                hexdig:
 0476 E60F      	ani	0fh
 0478 C690      	adi	90h
 047A 27        	daa
 047B CE40      	aci	40h
 047D 27        	daa
 047E C31C06    	jmp	chrout
                
                skipb1:	; skip character, then skip blanks
 0481 23        	inx	h
 0482 05        	dcr	b
                skipb:	; skip blanks
 0483 78        	mov	a,b
 0484 B7        	ora	a
 0485 37        	stc
 0486 C8        	rz
 0487 7E        skip0:	mov	a,m
 0488 FE20      	cpi	' '
 048A C0        	rnz	; no carry?
 048B 23        	inx	h
                	djnz	skip0
 048C+10F9      	DB	10H,SKIP0-$-1
 048E 37        	stc
 048F C9        	ret
                
                ; IX=destination
                ; parse into temp, for non-destructive error exits
                parsmac:
                	lxiy	temp
 0490+FD21      	DB	0FDH,21H
 0492+2901      	DW	TEMP
 0494 0E3A      	mvi	c,':'
                pm00:
 0496 CDD104    	call	parshx
 0499 D8        	rc
                	sty	d,+0
 049A+FD7200    	DB	0FDH,70H+D,+0
 049D CACA04    	jz	pm1	; hit term char
                	; TODO: check for 6 bytes...
                	; now copy into place
                	lxiy	temp
 04A0+FD21      	DB	0FDH,21H
 04A2+2901      	DW	TEMP
                	ldy	a,+0
 04A4+FD7E00    	DB	0FDH,A*8+46H,+0
                	stx	a,+0
 04A7+DD7700    	DB	0DDH,70H+A,+0
                	ldy	a,+1
 04AA+FD7E01    	DB	0FDH,A*8+46H,+1
                	stx	a,+1
 04AD+DD7701    	DB	0DDH,70H+A,+1
                	ldy	a,+2
 04B0+FD7E02    	DB	0FDH,A*8+46H,+2
                	stx	a,+2
 04B3+DD7702    	DB	0DDH,70H+A,+2
                	ldy	a,+3
 04B6+FD7E03    	DB	0FDH,A*8+46H,+3
                	stx	a,+3
 04B9+DD7703    	DB	0DDH,70H+A,+3
                	ldy	a,+4
 04BC+FD7E04    	DB	0FDH,A*8+46H,+4
                	stx	a,+4
 04BF+DD7704    	DB	0DDH,70H+A,+4
                	ldy	a,+5
 04C2+FD7E05    	DB	0FDH,A*8+46H,+5
                	stx	a,+5
 04C5+DD7705    	DB	0DDH,70H+A,+5
 04C8 B7        	ora	a	; NC, no error
 04C9 C9        	ret
                pm1:
                	inxiy
 04CA+FD23      	DB	0FDH,23H
 04CC 23        	inx	h	; skip ':'
                	djnz	pm00
 04CD+10C7      	DB	10H,PM00-$-1
                	; error if ends here...
 04CF 37        	stc
 04D0 C9        	ret
                
                ; C=term char
                ; returns CY if error, Z if term char, NZ end of text
                ; returns D=value
                parshx:
 04D1 1600      	mvi	d,0
 04D3 7E        pm0:	mov	a,m
 04D4 B9        	cmp	c
 04D5 C8        	rz
 04D6 FE20      	cpi	' '
                	jrz	nzret
 04D8+2821      	DB	28H,NZRET-$-1
 04DA D630      	sui	'0'
 04DC D8        	rc
 04DD FE0A      	cpi	'9'-'0'+1
                	jrc	pm3
 04DF+3809      	DB	38H,PM3-$-1
 04E1 D611      	sui	'A'-'0'
 04E3 D8        	rc
 04E4 FE06      	cpi	'F'-'A'+1
 04E6 3F        	cmc
 04E7 D8        	rc
 04E8 C60A      	adi	10
                pm3:
 04EA E60F      	ani	0fh
 04EC 5F        	mov	e,a
 04ED 7A        	mov	a,d
 04EE 87        	add	a
 04EF D8        	rc
 04F0 87        	add	a
 04F1 D8        	rc
 04F2 87        	add	a
 04F3 D8        	rc
 04F4 87        	add	a
 04F5 D8        	rc
 04F6 83        	add	e	; carry not possible
 04F7 57        	mov	d,a
 04F8 23        	inx	h
                	djnz	pm0
 04F9+10D8      	DB	10H,PM0-$-1
                nzret:
 04FB AF        	xra	a
 04FC 3C        	inr	a	; NZ
 04FD C9        	ret
                
                ; IX=destination
                ; Parse into temp location, so errors are non-destructive
                parsadr:
                	lxiy	temp
 04FE+FD21      	DB	0FDH,21H
 0500+2901      	DW	TEMP
 0502 0E2E      	mvi	c,'.'
                pa00:
 0504 1600      	mvi	d,0
 0506 7E        pa0:	mov	a,m
 0507 B9        	cmp	c
 0508 CA4605    	jz	pa1
 050B FE20      	cpi	' '
 050D CA2505    	jz	pa2
 0510 FE30      	cpi	'0'
 0512 D8        	rc
 0513 FE3A      	cpi	'9'+1
 0515 3F        	cmc
 0516 D8        	rc
 0517 E60F      	ani	0fh
 0519 5F        	mov	e,a
 051A 7A        	mov	a,d
 051B 87        	add	a	; *2
 051C 87        	add	a	; *4
 051D 82        	add	d	; *5
 051E 87        	add	a	; *10
 051F 83        	add	e
 0520 D8        	rc
 0521 57        	mov	d,a
 0522 23        	inx	h
                	djnz	pa0
 0523+10E1      	DB	10H,PA0-$-1
                pa2:
                	; TODO: check for 4 bytes...
                	sty	d,+0
 0525+FD7200    	DB	0FDH,70H+D,+0
                	; now copy value into place
                	lxiy	temp
 0528+FD21      	DB	0FDH,21H
 052A+2901      	DW	TEMP
                	ldy	a,+0
 052C+FD7E00    	DB	0FDH,A*8+46H,+0
                	stx	a,+0
 052F+DD7700    	DB	0DDH,70H+A,+0
                	ldy	a,+1
 0532+FD7E01    	DB	0FDH,A*8+46H,+1
                	stx	a,+1
 0535+DD7701    	DB	0DDH,70H+A,+1
                	ldy	a,+2
 0538+FD7E02    	DB	0FDH,A*8+46H,+2
                	stx	a,+2
 053B+DD7702    	DB	0DDH,70H+A,+2
                	ldy	a,+3
 053E+FD7E03    	DB	0FDH,A*8+46H,+3
                	stx	a,+3
 0541+DD7703    	DB	0DDH,70H+A,+3
 0544 B7        	ora	a	; NC, no error
 0545 C9        	ret
                
                pa1:
                	sty	d,+0
 0546+FD7200    	DB	0FDH,70H+D,+0
                	inxiy
 0549+FD23      	DB	0FDH,23H
 054B 23        	inx	h	; skip '.'
                	djnz	pa00
 054C+10B6      	DB	10H,PA00-$-1
                	; error if ends here... (string ends in '.')
 054E 37        	stc
 054F C9        	ret
                
                ; Parse a 16-bit (max) decimal number
                parsnm:
 0550 110000    	lxi	d,0
 0553 7E        pd0:	mov	a,m
 0554 FE20      	cpi	' '
 0556 C8        	rz
 0557 FE30      	cpi	'0'
 0559 D8        	rc
 055A FE3A      	cpi	'9'+1
 055C 3F        	cmc
 055D D8        	rc
 055E E60F      	ani	0fh
 0560 E5        	push	h
 0561 62        	mov	h,d
 0562 6B        	mov	l,e
 0563 29        	dad	h	; *2
 0564 DA7F05    	jc	pd1
 0567 29        	dad	h	; *4
 0568 DA7F05    	jc	pd1
 056B 19        	dad	d	; *5
 056C DA7F05    	jc	pd1
 056F 29        	dad	h	; *10
 0570 DA7F05    	jc	pd1
 0573 5F        	mov	e,a
 0574 1600      	mvi	d,0
 0576 19        	dad	d
 0577 EB        	xchg
 0578 E1        	pop	h
 0579 D8        	rc
 057A 23        	inx	h
                	djnz	pd0
 057B+10D6      	DB	10H,PD0-$-1
 057D B7        	ora	a	; NC
 057E C9        	ret
                
 057F E1        pd1:	pop	h
 0580 C9        	ret	; CY still set
                
                ; Get a block of data from NVRAM to 'buf'
                ; Verify checksum, init block if needed.
                nvgetb:
                	lxix	nvbuf
 0581+DD21      	DB	0DDH,21H
 0583+B701      	DW	NVBUF
 0585 210000    	lxi	h,0
 0588 110002    	lxi	d,512
 058B CD0000    	call	nvget
 058E CD0000    	call	vcksum
 0591 C8        	rz	; chksum OK, ready to update/use
 0592 11A900    	lxi	d,newbuf
 0595 CD1306    	call	msgout
                nvbinit:
 0598 21B701    	lxi	h,nvbuf
 059B 36FF      	mvi	m,0ffh
 059D 54        	mov	d,h
 059E 5D        	mov	e,l
 059F 23        	inx	h
 05A0 01FF01    	lxi	b,512-1
                	ldir
 05A3+EDB0      	DB	0EDH,0B0H
 05A5 C9        	ret
                
                if 0
                ; NOTE: this delay varies with CPU clock speed.
                msleep:
                	push	h
                mslp0:	push	psw
                	lxi	h,79	; ~1mS at 2.048MHz (200uS at 10.24MHz)
                mslp1:	dcx	h
                	mov	a,h
                	ora	l
                	jrnz	mslp1
                	pop	psw
                	dcr	a
                	jrnz	mslp0
                	pop	h
                	ret
                endif
                
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                ; These defines should be in a common file...
 0040 =         spi	equ	40h
                
 0040 =         spi?dat	equ	spi+0
 0041 =         spi?ctl	equ	spi+1
 0041 =         spi?sts	equ	spi+1
                
 0002 =         NVSCS	equ	10b	; H8xSPI SCS for NVRAM
                
                ; Standard W5500 register offsets
 0001 =         GAR	equ	1	; offset of GAR, etc.
 0005 =         SUBR	equ	5
 0009 =         SHAR	equ	9
 000F =         SIPR	equ	15
 001D =         PMAGIC	equ	29	; used for node ID
                
 0008 =         nsock	equ	8
 0008 =         SOCK0	equ	000$01$000b
 0028 =         SOCK1	equ	001$01$000b
 0048 =         SOCK2	equ	010$01$000b
 0068 =         SOCK3	equ	011$01$000b
 0088 =         SOCK4	equ	100$01$000b
 00A8 =         SOCK5	equ	101$01$000b
 00C8 =         SOCK6	equ	110$01$000b
 00E8 =         SOCK7	equ	111$01$000b
                
 0000 =         SnMR	equ	0
 0001 =         SnCR	equ	1
 0002 =         SnIR	equ	2
 0003 =         SnSR	equ	3
 0004 =         SnPORT	equ	4
 000C =         SnDIPR	equ	12
 0010 =         SnDPORT	equ	16
 0014 =         SnRESV1 equ     20      ; 0x14 reserved
 0017 =         SnRESV2 equ     23      ; 0x17 reserved
 0018 =         SnRESV3 equ     24      ; 0x18 reserved
 0019 =         SnRESV4 equ     25      ; 0x19 reserved
 001A =         SnRESV5 equ     26      ; 0x1a reserved
 001B =         SnRESV6 equ     27      ; 0x1b reserved
 001C =         SnRESV7 equ     28      ; 0x1c reserved
 001D =         SnRESV8 equ     29      ; 0x1d reserved
 001F =         SnTXBUF	equ	31	; TXBUF_SIZE
                
 001D =         NvKPALVTR equ	SnRESV8	; where to stash keepalive in NVRAM
 002F =         SnKPALVTR equ	47	; Keep alive timeout, 5s units
 0120 =         NvCFGTBL  equ	288	; location of CP/NET cfgtbl template
                
                ; Socket SR values
 0000 =         CLOSED	equ	00h
                
                ; Socket CR commands
 0008 =         DISCON	equ	08h
                
                ; Standard NVRAM defines
                
                ; NVRAM/SEEPROM commands
 0003 =         NVRD	equ	00000011b
 0002 =         NVWR	equ	00000010b
 0005 =         RDSR	equ	00000101b
 0006 =         WREN	equ	00000110b
                ; NVRAM/SEEPROM status bits
 0001 =         WIP	equ	00000001b
                
                ; Put block of data to NVRAM from 'buf'
                ; HL = nvram address, DE = length
                ; Must write in 128-byte blocks (pages).
                ; HL must be 128-byte aligned, DE must be multiple of 128
                nvset:
 05A6 E5        	push	h
 05A7 21B701    	lxi	h,nvbuf	; HL = buf, TOS = nvadr
 05AA 0E41      	mvi	c,spi?ctl
                nvset0:
                	; wait for WIP=0...
 05AC 3E02      	mvi	a,NVSCS
                	outp	a
 05AE+ED79      	DB	0EDH,A*8+41H
 05B0 3E05      	mvi	a,RDSR
 05B2 D340      	out	spi?dat
 05B4 DB40      	in	spi?dat	; prime pump
 05B6 DB40      	in	spi?dat	; status register
 05B8 F5        	push	psw
 05B9 AF        	xra	a
                	outp	a	; not SCS
 05BA+ED79      	DB	0EDH,A*8+41H
 05BC F1        	pop	psw
 05BD E601      	ani	WIP
                	jrnz	nvset0
 05BF+20EB      	DB	20H,NVSET0-$-1
 05C1 3E02      	mvi	a,NVSCS
                	outp	a
 05C3+ED79      	DB	0EDH,A*8+41H
 05C5 3E06      	mvi	a,WREN
 05C7 D340      	out	spi?dat
 05C9 AF        	xra	a
                	outp	a	; not SCS
 05CA+ED79      	DB	0EDH,A*8+41H
 05CC 3E02      	mvi	a,NVSCS
                	outp	a
 05CE+ED79      	DB	0EDH,A*8+41H
 05D0 3E02      	mvi	a,NVWR
 05D2 D340      	out	spi?dat
 05D4 E3        	xthl	; get nvadr
 05D5 7C        	mov	a,h
 05D6 D340      	out	spi?dat
 05D8 7D        	mov	a,l
 05D9 D340      	out	spi?dat
 05DB 018000    	lxi	b,128
 05DE 09        	dad	b	; update nvadr
 05DF EB        	xchg
 05E0 B7        	ora	a
                	dsbc	b	; update length
 05E1+ED42      	DB	0EDH,B*8+42H
 05E3 EB        	xchg
 05E4 E3        	xthl	; get buf adr
 05E5 41        	mov	b,c	; B = 128
 05E6 0E40      	mvi	c,spi?dat
                	outir		; HL = next page in 'buf'
 05E8+EDB3      	DB	0EDH,0B3H
 05EA 0E41      	mvi	c,spi?ctl
 05EC AF        	xra	a
                	outp	a	; not SCS
 05ED+ED79      	DB	0EDH,A*8+41H
                ;	mvi	a,50
                ;	call	msleep	; wait for WIP to go "1"?
 05EF 7B        	mov	a,e
 05F0 B2        	ora	d
                	jrnz	nvset0
 05F1+20B9      	DB	20H,NVSET0-$-1
 05F3 E1        	pop	h
 05F4 C9        	ret
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                
                ; A = PMAGIC
 05F5 F5        shid:	push	psw
 05F6 110000    	lxi	d,idmsg
 05F9 CD1306    	call	msgout
 05FC F1        	pop	psw
 05FD C36D04    	jmp	hexout
                
                ; HL = IP addr, DE = prefix msg
 0600 E5        ship:	push	h
 0601 CD1306    	call	msgout
 0604 E1        	pop	h
 0605 C3C303    	jmp	ipout
                
                ; HL = mac addr
 0608 E5        shmac:	push	h
 0609 112100    	lxi	d,mcmsg
 060C CD1306    	call	msgout
 060F E1        	pop	h
 0610 C3B103    	jmp	hwout
                
 0613 1A        msgout:	ldax	d
 0614 B7        	ora	a
 0615 C8        	rz
 0616 13        	inx	d
 0617 CD1C06    	call	conout
                	jr	msgout
 061A+18F7      	DB	18H,MSGOUT-$-1
                
                chrout:
 061C F5        conout:	push	psw
 061D DBED      cono0:	in	0edh
 061F E620      	ani	00100000b
                	jrz	cono0
 0621+28FA      	DB	28H,CONO0-$-1
 0623 F1        	pop	psw
 0624 D3E8      	out	0e8h
 0626 C9        	ret
                
 0627 3600      linix:	mvi	m,0	; terminate buffer
 0629 C3D503    	jmp	crlf
                
                ; input a line from console, allow backspace
                ; returns C=num chars
                linin:
 062C 213701    	lxi	h,cmdlin
 062F 0E00      	mvi	c,0	; count chars
 0631 CD7906    lini0	call	conin
 0634 FE0D      	cpi	CR
                	jrz	linix
 0636+28EF      	DB	28H,LINIX-$-1
 0638 FE03      	cpi	CTLC	; cancel
 063A 37        	stc
 063B C8        	rz
 063C FE08      	cpi	BS
                	jrz	backup
 063E+2822      	DB	28H,BACKUP-$-1
 0640 FE20      	cpi	' '
                	jrc	chrnak
 0642+3817      	DB	38H,CHRNAK-$-1
 0644 FE41      	cpi	'A'
                	jrc	chrok
 0646+3806      	DB	38H,CHROK-$-1
 0648 E65F      	ani	01011111b	; toupper
 064A FE5B      	cpi	'Z'+1
                	jrnc	chrnak
 064C+300D      	DB	30H,CHRNAK-$-1
 064E 77        chrok:	mov	m,a
 064F 23        	inx	h
 0650 0C        	inr	c
 0651 FA5906    	jm	chrovf	; 128 chars max
 0654 CD1C06    	call	conout
                	jr	lini0
 0657+18D8      	DB	18H,LINI0-$-1
 0659 2B        chrovf:	dcx	h
 065A 0D        	dcr	c
 065B 3E07      chrnak:	mvi	a,BEL
 065D CD1C06    	call	conout
                	jr	lini0
 0660+18CF      	DB	18H,LINI0-$-1
                backup:
 0662 79        	mov	a,c
 0663 B7        	ora	a
                	jrz	lini0
 0664+28CB      	DB	28H,LINI0-$-1
 0666 0D        	dcr	c
 0667 2B        	dcx	h
 0668 3E08      	mvi	a,BS
 066A CD1C06    	call	conout
 066D 3E20      	mvi	a,' '
 066F CD1C06    	call	conout
 0672 3E08      	mvi	a,BS
 0674 CD1C06    	call	conout
                	jr	lini0
 0677+18B8      	DB	18H,LINI0-$-1
                
 0679 DBED      conin:	in	0edh
 067B E601      	ani	00000001b
                	jrz	conin
 067D+28FA      	DB	28H,CONIN-$-1
 067F DBE8      	in	0e8h
 0681 E67F      	ani	01111111b
 0683 C9        	ret
                
                	dseg
 0101           	ds	40
 0129           stack:	ds	0
                
 0129 0000000000temp:	db	0,0,0,0,0,0	; space for IP or MAC addr
 012F 0000000000	db	0,0,0,0,0,0	; pad for error entry?
 0135 00        direct:	db	0
 0136 00        dirty:	db	0
                
 0137           cmdlin:	ds	128
                
 01B7           nvbuf:	ds	512
                
 03B7           	end
