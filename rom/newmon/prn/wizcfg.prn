                ; A config util for WizNET 550 devices, attached in parallel-SPI interface
                ; Sets config into NVRAM, unless 'w' option prefix to set to WIZ850io directly.
                ; interactive stand-alone version.
 0001 =         VERN	equ	01h
                
                	extrn	wizcfg,wizcfg0,wizcmd,wizget,wizset,wizclose,setsok,settcp
                	extrn	gkeep,skeep
                	extrn	cksum32,vcksum,scksum,nvget
                
                	public	nvbuf	; for wizcfg routine
                
                	maclib	z80
                
 000D =         CR	equ	13
 000A =         LF	equ	10
 0009 =         TAB	equ	9
 0008 =         BS	equ	8
 0007 =         BEL	equ	7
 0003 =         CTLC	equ	3
                
                	cseg
                
 0000 C30300    	jmp	start
                
                	dseg
 0000 4E6F646520idmsg:	db	'Node ID:  ',0
 000B 4761746577gwmsg:	db	'Gateway:  ',0
 0016 5375626E65ntmsg:	db	'Subnet:   ',0
 0021 4D41433A20mcmsg:	db	'MAC:      ',0
 002C 4950204164ipmsg:	db	'IP Addr:  ',0
 0037 536F636B65sock:	db	'Socket '
 003E 5F3A2000  sokn:	db	       '_: ',0
 0042 44656C6574ntdev:	db	'Delete Map: ',0
 004F 4E65772044newdev:	db	'New Device Map ? ',0
                
 0061 09        quest3:	db	TAB
 0062 09        quest2:	db	TAB
 0063 093F2000  quest:	db	TAB,'? ',0
                
 0067 57495A4346usage:	db	'WIZCFG v'
 006F 302E31    	db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
 0072 0D0A00    	db	CR,LF,0
                
 0075 5365740D0Adone:	db	'Set',CR,LF,0
 007B 4E6F742043ncfg:	db	'Not Configured',TAB,0
 008B 4E5652414Dnverr:	db	'NVRAM block not initialized',CR,LF,0
 00A9 496E697469newbuf:	db	'Initializing new NVRAM block',CR,LF,0
 00C8 4E6F206368nchg:	db	'No changes to config',CR,LF,0
 00DF 5361766520qsave:	db	'Save changes? ',0
 00EE 0D0A57495Amabrt:	db	CR,LF,'WIZCFG aborted',CR,LF,0
                
                	cseg
                start:
 0003 312901    	lxi	sp,stack
                	; TODO: scan for 'W'?
                	;lda	cmd
                	;ora	a
                	;jz	show
                
                	; read in currrent config (pick source)
 0006 3A3501    	lda	direct
 0009 B7        	ora	a
 000A CA3C00    	jz	nvshow
                
                ; get config from WIZ850io...
 000D CD9405    	call	nvbinit	; fill buf with FF
 0010 21B701    	lxi	h,nvbuf
 0013 110000    	lxi	d,0	; offset +0, BSB=0
 0016 0620      	mvi	b,32	; entire block
 0018 CD0000    	call	wizget
 001B 21D701    	lxi	h,nvbuf+32	; socket array area
 001E 1608      	mvi	d,SOCK0	; BSB 08h = Socket 0 Register Block
 0020 1E00      	mvi	e,0	; offset +0
 0022 0608      	mvi	b,8	; num sockets
 0024 C5        save0:	push	b
 0025 E5        	push	h
 0026 0620      	mvi	b,32	; save all between, restore skips
 0028 CD0000    	call	wizget	; HL = next block
 002B CD0000    	call	gkeep
                	popix
 002E+DDE1      	DB	0DDH,0E1H
                	stx	a,NvKPALVTR
 0030+DD771D    	DB	0DDH,70H+A,NVKPALVTR
 0033 C1        	pop	b
 0034 3E20      	mvi	a,001$00$000b	; socket BSB incr value
 0036 82        	add	d
 0037 57        	mov	d,a
                	djnz	save0
 0038+10EA      	DB	10H,SAVE0-$-1
                	jr	over
 003A+180A      	DB	18H,OVER-$-1
                
                ; get config from NVRAM...
                nvshow:
 003C CD7D05    	call	nvgetb	; inits buf if needed
                	jr	over
 003F+1805      	DB	18H,OVER-$-1
 0041 3E07      over0:	mvi	a,BEL
 0043 CD1806    	call	chrout
                ; interate over all possible settings, prompting for new values...
                over:
                	; Node ID
 0046 3AD401    	lda	nvbuf+PMAGIC
 0049 CDF105    	call	shid
 004C 116100    	lxi	d,quest3
 004F CD0F06    	call	msgout
 0052 CD2806    	call	linin
 0055 DA1B02    	jc	abort
 0058 79        	mov	a,c
 0059 B7        	ora	a
                	jrz	next1	; no change
 005A+281A      	DB	28H,NEXT1-$-1
 005C 213701    	lxi	h,cmdlin
 005F 41        	mov	b,c
 0060 CDCD04    	call	parshx
 0063 DA4100    	jc	over0
 0066 7A        	mov	a,d
 0067 32D401    	sta	nvbuf+PMAGIC
 006A 3E01      	mvi	a,1
 006C 323601    	sta	dirty
                	jr	next1
 006F+1805      	DB	18H,NEXT1-$-1
                
 0071 3E07      over1:	mvi	a,BEL
 0073 CD1806    	call	chrout
                next1:	; IP Addr
 0076 21C601    	lxi	h,nvbuf+SIPR
 0079 112C00    	lxi	d,ipmsg
 007C CDFC05    	call	ship
 007F 116200    	lxi	d,quest2
 0082 CD0F06    	call	msgout
 0085 CD2806    	call	linin
 0088 DA1B02    	jc	abort
 008B 79        	mov	a,c
 008C B7        	ora	a
                	jrz	next2	; no change
 008D+2819      	DB	28H,NEXT2-$-1
 008F 213701    	lxi	h,cmdlin
 0092 41        	mov	b,c
                	lxix	nvbuf+SIPR
 0093+DD21      	DB	0DDH,21H
 0095+C601      	DW	NVBUF+SIPR
 0097 CDFA04    	call	parsadr
                	jrc	over1
 009A+38D5      	DB	38H,OVER1-$-1
 009C 3E01      	mvi	a,1
 009E 323601    	sta	dirty
                	jr	next2
 00A1+1805      	DB	18H,NEXT2-$-1
                
 00A3 3E07      over2:	mvi	a,BEL
 00A5 CD1806    	call	chrout
                next2:	;Subnet
 00A8 21BC01    	lxi	h,nvbuf+SUBR
 00AB 111600    	lxi	d,ntmsg
 00AE CDFC05    	call	ship
 00B1 116200    	lxi	d,quest2
 00B4 CD0F06    	call	msgout
 00B7 CD2806    	call	linin
 00BA DA1B02    	jc	abort
 00BD 79        	mov	a,c
 00BE B7        	ora	a
                	jrz	next3	; no change
 00BF+2819      	DB	28H,NEXT3-$-1
 00C1 213701    	lxi	h,cmdlin
 00C4 41        	mov	b,c
                	lxix	nvbuf+SUBR
 00C5+DD21      	DB	0DDH,21H
 00C7+BC01      	DW	NVBUF+SUBR
 00C9 CDFA04    	call	parsadr
                	jrc	over2
 00CC+38D5      	DB	38H,OVER2-$-1
 00CE 3E01      	mvi	a,1
 00D0 323601    	sta	dirty
                	jr	next3
 00D3+1805      	DB	18H,NEXT3-$-1
                
 00D5 3E07      over3:	mvi	a,BEL
 00D7 CD1806    	call	chrout
                next3:	; Gateway IP
 00DA 21B801    	lxi	h,nvbuf+GAR
 00DD 110B00    	lxi	d,gwmsg
 00E0 CDFC05    	call	ship
 00E3 116200    	lxi	d,quest2
 00E6 CD0F06    	call	msgout
 00E9 CD2806    	call	linin
 00EC DA1B02    	jc	abort
 00EF 79        	mov	a,c
 00F0 B7        	ora	a
                	jrz	next4	; no change
 00F1+2819      	DB	28H,NEXT4-$-1
 00F3 213701    	lxi	h,cmdlin
 00F6 41        	mov	b,c
                	lxix	nvbuf+GAR
 00F7+DD21      	DB	0DDH,21H
 00F9+B801      	DW	NVBUF+GAR
 00FB CDFA04    	call	parsadr
                	jrc	over3
 00FE+38D5      	DB	38H,OVER3-$-1
 0100 3E01      	mvi	a,1
 0102 323601    	sta	dirty
                	jr	next4
 0105+1805      	DB	18H,NEXT4-$-1
                
 0107 3E07      over4:	mvi	a,BEL
 0109 CD1806    	call	chrout
                next4:	; MAC address
 010C 21C001    	lxi	h,nvbuf+SHAR
 010F CD0406    	call	shmac
 0112 116300    	lxi	d,quest
 0115 CD0F06    	call	msgout
 0118 CD2806    	call	linin
 011B DA1B02    	jc	abort
 011E 79        	mov	a,c
 011F B7        	ora	a
                	jrz	next5	; no change
 0120+2812      	DB	28H,NEXT5-$-1
 0122 213701    	lxi	h,cmdlin
 0125 41        	mov	b,c
                	lxix	nvbuf+SHAR
 0126+DD21      	DB	0DDH,21H
 0128+C001      	DW	NVBUF+SHAR
 012A CD8C04    	call	parsmac
                	jrc	over4
 012D+38D8      	DB	38H,OVER4-$-1
 012F 3E01      	mvi	a,1
 0131 323601    	sta	dirty
                next5:	; now the sockets
 0134 0608      	mvi	b,nsock
                	lxix	nvbuf+32	; start of sockets
 0136+DD21      	DB	0DDH,21H
 0138+D701      	DW	NVBUF+32
 013A 3E30      	mvi	a,'0'
 013C 323E00    	sta	sokn
                	jr	soklup
 013F+1805      	DB	18H,SOKLUP-$-1
                
 0141 3E07      over5:	mvi	a,BEL
 0143 CD1806    	call	chrout
                soklup:	
 0146 C5        	push	b
 0147 CD6703    	call	showsok
 014A 116300    	lxi	d,quest
 014D CD0F06    	call	msgout
 0150 CD2806    	call	linin
 0153 DA1B02    	jc	abort
 0156 79        	mov	a,c
 0157 B7        	ora	a
                	jrz	next5b	; NC also
 0158+280C      	DB	28H,NEXT5B-$-1
                	; TODO: allow de-config?
 015A 213701    	lxi	h,cmdlin
 015D 41        	mov	b,c
 015E CD0103    	call	parsok
 0161 3E01      	mvi	a,1	; must preserve CY
 0163 323601    	sta	dirty	;
 0166 C1        next5b:	pop	b
                	jrc	over5
 0167+38D8      	DB	38H,OVER5-$-1
 0169 112000    	lxi	d,32
                	dadx	d
 016C+DD19      	DB	0DDH,D*8+09H
 016E 3A3E00    	lda	sokn
 0171 3C        	inr	a
 0172 323E00    	sta	sokn
                	djnz	soklup
 0175+10CF      	DB	10H,SOKLUP-$-1
                
                	; CP/NET device table
                	; first, see if any maps currently exist
 0177 21D702    	lxi	h,nvbuf+NvCFGTBL
 017A 23        	inx	h
 017B 23        	inx	h
 017C 0E00      	mvi	c,0	; drive A:
 017E 7E        next6c:	mov	a,m
 017F FEFF      	cpi	0ffh	; not set
                	jrnz	next6a	; something exists...
 0181+2033      	DB	20H,NEXT6A-$-1
 0183 23        next6b:	inx	h
 0184 23        	inx	h
 0185 0C        	inr	c
 0186 79        	mov	a,c
 0187 FE10      	cpi	16	; CON:
                	jrz	next6b
 0189+28F8      	DB	28H,NEXT6B-$-1
 018B FE12      	cpi	18
                	jrc	next6c
 018D+38EF      	DB	38H,NEXT6C-$-1
                	; end of cfgtbl, now ask about new entries
 018F 114F00    next6e:	lxi	d,newdev	; includes '?'
 0192 CD0F06    	call	msgout
 0195 CD2806    	call	linin	; empty line means done
 0198 DA1B02    	jc	abort
 019B 79        	mov	a,c
 019C B7        	ora	a
                	jrz	fini
 019D+284B      	DB	28H,FINI-$-1
                	; string format like A:, B:=F:[0], LST:=0[0]
 019F 213701    	lxi	h,cmdlin
 01A2 41        	mov	b,c
 01A3 CD7102    	call	parsex
                	jrnc	next6d
 01A6+3007      	DB	30H,NEXT6D-$-1
 01A8 3E07      	mvi	a,BEL
 01AA CD1806    	call	chrout
                	jr	next6e
 01AD+18E0      	DB	18H,NEXT6E-$-1
 01AF 3E01      next6d:	mvi	a,1
 01B1 323601    	sta	dirty
                	jr	next6e
 01B4+18D9      	DB	18H,NEXT6E-$-1
                
                next6a:	; mapping exists, prompt for delete. HL=map, C=dev
 01B6 114200    	lxi	d,ntdev
 01B9 CD0F06    	call	msgout
 01BC CD2402    	call	shwexp
 01BF 116200    	lxi	d,quest2
 01C2 FE5D      	cpi	']'
                	jrnz	next6f
 01C4+2003      	DB	20H,NEXT6F-$-1
 01C6 116300    	lxi	d,quest
 01C9 CD0F06    next6f:	call	msgout
 01CC E5        	push	h	; save cfgtbl ptr
 01CD C5        	push	b	; save dev idx
 01CE CD2806    	call	linin
 01D1 C1        	pop	b	; restore dev idx
 01D2 E1        	pop	h	; restore cfgtbl ptr
 01D3 DA1B02    	jc	abort
 01D6 3A3701    	lda	cmdlin
 01D9 FE59      	cpi	'Y'
                	jrnz	next6b	; next map
 01DB+20A6      	DB	20H,NEXT6B-$-1
 01DD 3EFF      	mvi	a,0ffh
 01DF 77        	mov	m,a
 01E0 23        	inx	h
 01E1 77        	mov	m,a
 01E2 2B        	dcx	h
 01E3 3E01      	mvi	a,1
 01E5 323601    	sta	dirty
                	jr	next6b	; next map
 01E8+1899      	DB	18H,NEXT6B-$-1
                
                ; collected all changes...
 01EA 3A3601    fini:	lda	dirty
 01ED B7        	ora	a
 01EE CA1202    	jz	nochg
                	; prompt to save changes...
 01F1 11DF00    	lxi	d,qsave
 01F4 CD0F06    	call	msgout
 01F7 CD2806    	call	linin
                	jrc	exit
 01FA+381C      	DB	38H,EXIT-$-1
 01FC 3A3701    	lda	cmdlin
 01FF FE59      	cpi	'Y'
                	jrnz	exit
 0201+2015      	DB	20H,EXIT-$-1
 0203 3A3501    	lda	direct
                	jrnz	savwiz
 0206+2005      	DB	20H,SAVWIZ-$-1
 0208 CD4B03    	call	nvsetit
                	jr	exit
 020B+180B      	DB	18H,EXIT-$-1
                savwiz:
 020D CD0000    	call	wizcfg0	; config WIZ850io from nvbuf
                	; no error possible?
                	jr	exit
 0210+1806      	DB	18H,EXIT-$-1
                
 0212 11C800    nochg:	lxi	d,nchg
 0215 CD0F06    	call	msgout
 0218 C30000    exit:	jmp	0
                
 021B 11EE00    abort:	lxi	d,mabrt
 021E CD0F06    	call	msgout
 0221 C30000    	jmp	0
                
                ; HL=map ptr, C=local dev (0-15, 17)
                shwexp:
 0224 79        	mov	a,c
 0225 CD5202    	call	shwdev
 0228 7E        	mov	a,m
 0229 B7        	ora	a
 022A F0        	rp		; local device
 022B 3E3D      	mvi	a,'='
 022D CD1806    	call	chrout
 0230 79        	mov	a,c
 0231 FE11      	cpi	17	; LST:?
                	jrz	shwex1
 0233+2816      	DB	28H,SHWEX1-$-1
                	; drive
 0235 7E        	mov	a,m
 0236 23        	inx	h
 0237 E60F      	ani	0fh
 0239 CD5202    	call	shwdev
 023C 3E5B      shwex0:	mvi	a,'['
 023E CD1806    	call	chrout
 0241 7E        	mov	a,m	; SID
 0242 2B        	dcx	h
 0243 CD6904    	call	hexout
 0246 3E5D      	mvi	a,']'
 0248 C31806    	jmp	chrout
 024B 7E        shwex1:	mov	a,m
 024C 23        	inx	h
 024D CD7204    	call	hexdig
                	jr	shwex0
 0250+18EA      	DB	18H,SHWEX0-$-1
                
                ; print device name, A:-P: or LST:
                ; A=dev id
 0252 FE11      shwdev:	cpi	17
                	jrz	shwdv0
 0254+280A      	DB	28H,SHWDV0-$-1
 0256 C641      	adi	'A'
 0258 CD1806    	call	chrout
 025B 3E3A      shwdv1:	mvi	a,':'
 025D C31806    	jmp	chrout
 0260 3E4C      shwdv0:	mvi	a,'L'
 0262 CD1806    	call	chrout
 0265 3E53      	mvi	a,'S'
 0267 CD1806    	call	chrout
 026A 3E54      	mvi	a,'T'
 026C CD1806    	call	chrout
                	jr	shwdv1
 026F+18EA      	DB	18H,SHWDV1-$-1
                
                ; Parse a device map expression
                ; "A:" or "LST:" sets device to LOCAL
                ; "A:=B:[0]" or "LST:=0[0]" sets device networked
                ; HL=cmdlin
                ; B=len
                parsex:
 0271 CDBD02    	call	parsdv
 0274 D8        	rc
 0275 FE3D      	cpi	'='	; network vs. local?
                	jrz	parsnw
 0277+2810      	DB	28H,PARSNW-$-1
                	; set device local
 0279 010000    	lxi	b,0
 027C 1C        parsx0:	inr	e	; skip extra "entry" at start of cfgtbl
 027D 1600      	mvi	d,0
 027F 21D702    	lxi	h,nvbuf+NvCFGTBL
 0282 19        	dad	d
 0283 19        	dad	d
 0284 70        	mov	m,b
 0285 23        	inx	h
 0286 71        	mov	m,c
 0287 AF        	xra	a
 0288 C9        	ret
                
                parsnw:
 0289 7B        	mov	a,e
 028A FE11      	cpi	17	; LST:
                	jrz	parsls
 028C+2811      	DB	28H,PARSLS-$-1
 028E 53        	mov	d,e	; save local drive name
 028F CDBD02    	call	parsdv
 0292 D8        	rc
 0293 FE5B      	cpi	'['
                	jrz	parsrv
 0295+2816      	DB	28H,PARSRV-$-1
                	; use SID "00"
 0297 43        pars00:	mov	b,e	; B=remote dev (0-15)
                	setb	7,b	; dev is networked
 0298+CBF8      	DB	0CBH,7*8+B+0C0H
 029A 0E00      	mvi	c,0	; C=SID (00)
 029C 5A        	mov	e,d	; E=local dev
                	jr	parsx0
 029D+18DD      	DB	18H,PARSX0-$-1
                
                parsls:	; have "LST:="
 029F 3E5B      	mvi	a,'['
 02A1 CDCD04    	call	parshx
 02A4 D8        	rc
 02A5 F5        	push	psw
 02A6 7B        	mov	a,e
 02A7 E60F      	ani	0fh
 02A9 5F        	mov	e,a
 02AA F1        	pop	psw
                	jrnz	pars00	; use default SID
 02AB+20EA      	DB	20H,PARS00-$-1
                	;jr	parsrv
                parsrv:	; D=local, E=remote drive name
 02AD D5        	push	d	; save local/remote drive name
 02AE 0E5D      	mvi	c,']'
 02B0 CDCD04    	call	parshx	; SID
 02B3 C1        	pop	b	; B=local, C=remote drive name
 02B4 D8        	rc
                	; E=SID, B=local, C=remote
 02B5 53        	mov	d,e	; D=SID (temp)
 02B6 58        	mov	e,b	; E=local
 02B7 41        	mov	b,c	; B=remote drive
 02B8 4A        	mov	c,d	; C=SID
                	setb	7,b	; drive is networked
 02B9+CBF8      	DB	0CBH,7*8+B+0C0H
                	jr	parsx0
 02BB+18BF      	DB	18H,PARSX0-$-1
                
                ; Parse device, A:..P: or LST:
                ; returns E=0..15,17 or CY if error
                parsdv:
 02BD 78        	mov	a,b	; chars left
 02BE FE02      	cpi	2
 02C0 D8        	rc
 02C1 7E        	mov	a,m
 02C2 D641      	sui	'A'
 02C4 D8        	rc
 02C5 5F        	mov	e,a
 02C6 23        	inx	h
 02C7 7E        	mov	a,m
 02C8 05        	dcr	b
 02C9 FE3A      	cpi	':'
                	jrnz	pv1	; LST: or error
 02CB+200E      	DB	20H,PV1-$-1
 02CD 23        	inx	h
 02CE 05        	dcr	b
 02CF 7B        	mov	a,e	; must be 0..15
 02D0 FE10      	cpi	16
 02D2 3F        	cmc
 02D3 C8        	rz
 02D4 78        pv2:	mov	a,b
 02D5 B7        	ora	a
 02D6 C8        	rz	; end of string: NUL
 02D7 7E        	mov	a,m	; delimiter
 02D8 23        	inx	h
 02D9 05        	dcr	b
 02DA C9        	ret
                pv1:
 02DB 7B        	mov	a,e
 02DC FE0B      	cpi	'L'-'A'
 02DE 37        	stc
 02DF C0        	rnz
 02E0 3E53      	mvi	a,'S'
 02E2 CDF602    	call	check1
 02E5 D8        	rc
 02E6 3E54      	mvi	a,'T'
 02E8 CDF602    	call	check1
 02EB D8        	rc
 02EC 3E3A      	mvi	a,':'
 02EE CDF602    	call	check1
 02F1 D8        	rc
 02F2 1E11      	mvi	e,17
                	jr	pv2
 02F4+18DE      	DB	18H,PV2-$-1
                
                ; Tests if A==curr char on cmdlin
                ; CY if fail, next char if true
                check1:
 02F6 BE        	cmp	m
 02F7 37        	stc
 02F8 C0        	rnz
 02F9 78        	mov	a,b
 02FA B7        	ora	a
 02FB 37        	stc
 02FC C8        	rz
 02FD 23        	inx	h
 02FE 05        	dcr	b
 02FF AF        	xra	a
 0300 C9        	ret
                
                ; Parse new Socket config
                ; IX=socket ptr, HL=cmdlin, B=len
                parsok:
                	; parse <srvid> <ipadr> <port>
 0301 0E00      	mvi	c,0	; NUL won't ever be seen
 0303 CDCD04    	call	parshx
 0306 D8        	rc	; non-destructive error
                	mvix	31h,SnPORT
 0307+DD360431  	DB	0DDH,36H,SNPORT,31H
                	stx	d,SnPORT+1	; server ID
 030B+DD7205    	DB	0DDH,70H+D,SNPORT+1
 030E CD7F04    	call	skipb
 0311 D8        	rc
                	pushix
 0312+DDE5      	DB	0DDH,0E5H
 0314 110C00    	lxi	d,SnDIPR
                	dadx	d
 0317+DD19      	DB	0DDH,D*8+09H
 0319 CDFA04    	call	parsadr	; non-destructive on error
                	popix
 031C+DDE1      	DB	0DDH,0E1H
 031E D8        	rc
 031F CD7F04    	call	skipb
 0322 D8        	rc
 0323 CD4C05    	call	parsnm
 0326 D8        	rc	; non-destructive error
                	stx	d,SnDPORT
 0327+DD7210    	DB	0DDH,70H+D,SNDPORT
                	stx	e,SnDPORT+1
 032A+DD7311    	DB	0DDH,70H+E,SNDPORT+1
                	; optional keep-alive timeout
                	mvix	0,NvKPALVTR
 032D+DD361D00  	DB	0DDH,36H,NVKPALVTR,0
 0331 CD7F04    	call	skipb
                	jrc	nokp
 0334+3813      	DB	38H,NOKP-$-1
 0336 78        	mov	a,b
 0337 B7        	ora	a
 0338 C44C05    	cnz	parsnm
 033B D8        	rc	; non-destructive error
 033C CD4504    	call	div5
 033F 7A        	mov	a,d
 0340 B7        	ora	a
 0341 CA4603    	jz	nokp0
 0344 1EFF      	mvi	e,0ffh	; max keepalive
                nokp0:	stx	e,NvKPALVTR
 0346+DD731D    	DB	0DDH,70H+E,NVKPALVTR
 0349 B7        nokp:	ora	a	; NC
 034A C9        	ret
                
                nvsetit:
                	lxix	nvbuf
 034B+DD21      	DB	0DDH,21H
 034D+B701      	DW	NVBUF
 034F CD0000    	call	scksum
 0352 210000    	lxi	h,0	; WIZNET uses 512 bytes at 0000 in NVRAM
 0355 110002    	lxi	d,512
 0358 CDA205    	call	nvset
 035B C9        	ret
                
                ; Convert 'sokn' (ASCII digit) to socket BSB
                getsokn:
 035C 3A3E00    	lda	sokn
 035F D630      	sui	'0'
 0361 0F        	rrc
 0362 0F        	rrc
 0363 0F        	rrc		; xxx00000
 0364 F608      	ori	SOCK0	; xxx01000
 0366 C9        	ret
                
                ; Must show unconfigured sockets, to allow config
                ; IX=socket ptr, 'sokn' already set
                showsok:
 0367 113700    	lxi	d,sock
 036A CD0F06    	call	msgout
                	ldx	a,SnPORT
 036D+DD7E04    	DB	0DDH,A*8+46H,SNPORT
 0370 FE31      	cpi	31h
                	jrnz	nosok
 0372+2032      	DB	20H,NOSOK-$-1
                	ldx	a,SnPORT+1
 0374+DD7E05    	DB	0DDH,A*8+46H,SNPORT+1
 0377 CD6904    	call	hexout
 037A 3E20      	mvi	a,' '
 037C CD1806    	call	chrout
                	pushix
 037F+DDE5      	DB	0DDH,0E5H
 0381 E1        	pop	h
 0382 110C00    	lxi	d,SnDIPR
 0385 19        	dad	d
 0386 CDBF03    	call	ipout
 0389 3E20      	mvi	a,' '
 038B CD1806    	call	chrout
                	ldx	d,SnDPORT
 038E+DD5610    	DB	0DDH,D*8+46H,SNDPORT
                	ldx	e,SnDPORT+1
 0391+DD5E11    	DB	0DDH,E*8+46H,SNDPORT+1
 0394 CDDB03    	call	dec16
 0397 3E20      	mvi	a,' '
 0399 CD1806    	call	chrout
                	ldx	a,NvKPALVTR
 039C+DD7E1D    	DB	0DDH,A*8+46H,NVKPALVTR
 039F CD5B04    	call	mult5
 03A2 CDDB03    	call	dec16
 03A5 C9        	ret
 03A6 117B00    nosok:	lxi	d,ncfg
 03A9 CD0F06    	call	msgout
 03AC C9        	ret
                
                hwout:
 03AD 0606      	mvi	b,6
 03AF 0E3A      	mvi	c,':'
 03B1 7E        hw0:	mov	a,m
 03B2 CD6904    	call	hexout
 03B5 05        	dcr	b
 03B6 C8        	rz
 03B7 79        	mov	a,c
 03B8 CD1806    	call	chrout
 03BB 23        	inx	h
 03BC C3B103    	jmp	hw0
                
                ipout:
 03BF 0604      	mvi	b,4
 03C1 0E2E      	mvi	c,'.'
 03C3 7E        ip0:	mov	a,m
 03C4 CD1704    	call	decout
 03C7 05        	dcr	b
 03C8 C8        	rz
 03C9 79        	mov	a,c
 03CA CD1806    	call	chrout
 03CD 23        	inx	h
 03CE C3C303    	jmp	ip0
                
                crlf:
 03D1 3E0D      	mvi	a,CR
 03D3 CD1806    	call	chrout
 03D6 3E0A      	mvi	a,LF
 03D8 C31806    	jmp	chrout
                
                dec16:
 03DB EB        	xchg	; remainder in HL
 03DC 0E00      	mvi	c,0
 03DE 111027    	lxi	d,10000
 03E1 CDFD03    	call	div16
 03E4 11E803    	lxi	d,1000
 03E7 CDFD03    	call	div16
 03EA 116400    	lxi	d,100
 03ED CDFD03    	call	div16
 03F0 110A00    	lxi	d,10
 03F3 CDFD03    	call	div16
 03F6 7D        	mov	a,l
 03F7 C630      	adi	'0'
 03F9 CD1806    	call	chrout
 03FC C9        	ret
                
 03FD 0600      div16:	mvi	b,0
 03FF B7        dv0:	ora	a
                	dsbc	d
 0400+ED52      	DB	0EDH,D*8+42H
 0402 04        	inr	b
                	jrnc	dv0
 0403+30FA      	DB	30H,DV0-$-1
 0405 19        	dad	d
 0406 05        	dcr	b
                	jrnz	dv1
 0407+2005      	DB	20H,DV1-$-1
                	bit	0,c
 0409+CB41      	DB	0CBH,0*8+C+40H
                	jrnz	dv1
 040B+2001      	DB	20H,DV1-$-1
 040D C9        	ret
                dv1:	setb	0,c
 040E+CBC1      	DB	0CBH,0*8+C+0C0H
 0410 3E30      	mvi	a,'0'
 0412 80        	add	b
 0413 CD1806    	call	chrout
 0416 C9        	ret
                
                ; A=number to print
                ; leading zeroes blanked - must preserve B
                decout:
 0417 C5        	push	b
 0418 0E00      	mvi	c,0
 041A 1664      	mvi	d,100
 041C CD2B04    	call	divide
 041F 160A      	mvi	d,10
 0421 CD2B04    	call	divide
 0424 C630      	adi	'0'
 0426 CD1806    	call	chrout
 0429 C1        	pop	b
 042A C9        	ret
                
 042B 1E00      divide:	mvi	e,0
 042D 92        div0:	sub	d
 042E 1C        	inr	e
                	jrnc	div0
 042F+30FC      	DB	30H,DIV0-$-1
 0431 82        	add	d
 0432 1D        	dcr	e
                	jrnz	div1
 0433+2005      	DB	20H,DIV1-$-1
                	bit	0,c
 0435+CB41      	DB	0CBH,0*8+C+40H
                	jrnz	div1
 0437+2001      	DB	20H,DIV1-$-1
 0439 C9        	ret
                div1:	setb	0,c
 043A+CBC1      	DB	0CBH,0*8+C+0C0H
 043C F5        	push	psw	; remainder
 043D 3E30      	mvi	a,'0'
 043F 83        	add	e
 0440 CD1806    	call	chrout
 0443 F1        	pop	psw	; remainder
 0444 C9        	ret
                
                ; brute-force divide DE by 5
                ; Return: DE=quotient (remainder lost)
 0445 E5        div5:	push	h
 0446 C5        	push	b
 0447 EB        	xchg
 0448 010500    	lxi	b,5
 044B 110000    	lxi	d,0
 044E B7        	ora	a
                div50:	dsbc	b
 044F+ED42      	DB	0EDH,B*8+42H
 0451 DA5804    	jc	div51
 0454 13        	inx	d
 0455 C34F04    	jmp	div50
 0458 C1        div51:	pop	b
 0459 E1        	pop	h
 045A C9        	ret
                
                ; Multiply A by 5, result in DE
 045B EB        mult5:	xchg	; save HL
 045C 6F        	mov	l,a
 045D 2600      	mvi	h,0
 045F 29        	dad	h	; *2
 0460 29        	dad	h	; *4
 0461 85        	add	l	; *5
 0462 6F        	mov	l,a
 0463 3E00      	mvi	a,0
 0465 8C        	adc	h
 0466 67        	mov	h,a
 0467 EB        	xchg	; result to DE, restore HL
 0468 C9        	ret
                
                hexout:
 0469 F5        	push	psw
 046A 0F        	rrc
 046B 0F        	rrc
 046C 0F        	rrc
 046D 0F        	rrc
 046E CD7204    	call	hexdig
 0471 F1        	pop	psw
                	;jmp	hexdig
                hexdig:
 0472 E60F      	ani	0fh
 0474 C690      	adi	90h
 0476 27        	daa
 0477 CE40      	aci	40h
 0479 27        	daa
 047A C31806    	jmp	chrout
                
                skipb1:	; skip character, then skip blanks
 047D 23        	inx	h
 047E 05        	dcr	b
                skipb:	; skip blanks
 047F 78        	mov	a,b
 0480 B7        	ora	a
 0481 37        	stc
 0482 C8        	rz
 0483 7E        skip0:	mov	a,m
 0484 FE20      	cpi	' '
 0486 C0        	rnz	; no carry?
 0487 23        	inx	h
                	djnz	skip0
 0488+10F9      	DB	10H,SKIP0-$-1
 048A 37        	stc
 048B C9        	ret
                
                ; IX=destination
                ; parse into temp, for non-destructive error exits
                parsmac:
                	lxiy	temp
 048C+FD21      	DB	0FDH,21H
 048E+2901      	DW	TEMP
 0490 0E3A      	mvi	c,':'
                pm00:
 0492 CDCD04    	call	parshx
 0495 D8        	rc
                	sty	d,+0
 0496+FD7200    	DB	0FDH,70H+D,+0
 0499 CAC604    	jz	pm1	; hit term char
                	; TODO: check for 6 bytes...
                	; now copy into place
                	lxiy	temp
 049C+FD21      	DB	0FDH,21H
 049E+2901      	DW	TEMP
                	ldy	a,+0
 04A0+FD7E00    	DB	0FDH,A*8+46H,+0
                	stx	a,+0
 04A3+DD7700    	DB	0DDH,70H+A,+0
                	ldy	a,+1
 04A6+FD7E01    	DB	0FDH,A*8+46H,+1
                	stx	a,+1
 04A9+DD7701    	DB	0DDH,70H+A,+1
                	ldy	a,+2
 04AC+FD7E02    	DB	0FDH,A*8+46H,+2
                	stx	a,+2
 04AF+DD7702    	DB	0DDH,70H+A,+2
                	ldy	a,+3
 04B2+FD7E03    	DB	0FDH,A*8+46H,+3
                	stx	a,+3
 04B5+DD7703    	DB	0DDH,70H+A,+3
                	ldy	a,+4
 04B8+FD7E04    	DB	0FDH,A*8+46H,+4
                	stx	a,+4
 04BB+DD7704    	DB	0DDH,70H+A,+4
                	ldy	a,+5
 04BE+FD7E05    	DB	0FDH,A*8+46H,+5
                	stx	a,+5
 04C1+DD7705    	DB	0DDH,70H+A,+5
 04C4 B7        	ora	a	; NC, no error
 04C5 C9        	ret
                pm1:
                	inxiy
 04C6+FD23      	DB	0FDH,23H
 04C8 23        	inx	h	; skip ':'
                	djnz	pm00
 04C9+10C7      	DB	10H,PM00-$-1
                	; error if ends here...
 04CB 37        	stc
 04CC C9        	ret
                
                ; C=term char
                ; returns CY if error, Z if term char, NZ end of text
                ; returns D=value
                parshx:
 04CD 1600      	mvi	d,0
 04CF 7E        pm0:	mov	a,m
 04D0 B9        	cmp	c
 04D1 C8        	rz
 04D2 FE20      	cpi	' '
                	jrz	nzret
 04D4+2821      	DB	28H,NZRET-$-1
 04D6 D630      	sui	'0'
 04D8 D8        	rc
 04D9 FE0A      	cpi	'9'-'0'+1
                	jrc	pm3
 04DB+3809      	DB	38H,PM3-$-1
 04DD D611      	sui	'A'-'0'
 04DF D8        	rc
 04E0 FE06      	cpi	'F'-'A'+1
 04E2 3F        	cmc
 04E3 D8        	rc
 04E4 C60A      	adi	10
                pm3:
 04E6 E60F      	ani	0fh
 04E8 5F        	mov	e,a
 04E9 7A        	mov	a,d
 04EA 87        	add	a
 04EB D8        	rc
 04EC 87        	add	a
 04ED D8        	rc
 04EE 87        	add	a
 04EF D8        	rc
 04F0 87        	add	a
 04F1 D8        	rc
 04F2 83        	add	e	; carry not possible
 04F3 57        	mov	d,a
 04F4 23        	inx	h
                	djnz	pm0
 04F5+10D8      	DB	10H,PM0-$-1
                nzret:
 04F7 AF        	xra	a
 04F8 3C        	inr	a	; NZ
 04F9 C9        	ret
                
                ; IX=destination
                ; Parse into temp location, so errors are non-destructive
                parsadr:
                	lxiy	temp
 04FA+FD21      	DB	0FDH,21H
 04FC+2901      	DW	TEMP
 04FE 0E2E      	mvi	c,'.'
                pa00:
 0500 1600      	mvi	d,0
 0502 7E        pa0:	mov	a,m
 0503 B9        	cmp	c
 0504 CA4205    	jz	pa1
 0507 FE20      	cpi	' '
 0509 CA2105    	jz	pa2
 050C FE30      	cpi	'0'
 050E D8        	rc
 050F FE3A      	cpi	'9'+1
 0511 3F        	cmc
 0512 D8        	rc
 0513 E60F      	ani	0fh
 0515 5F        	mov	e,a
 0516 7A        	mov	a,d
 0517 87        	add	a	; *2
 0518 87        	add	a	; *4
 0519 82        	add	d	; *5
 051A 87        	add	a	; *10
 051B 83        	add	e
 051C D8        	rc
 051D 57        	mov	d,a
 051E 23        	inx	h
                	djnz	pa0
 051F+10E1      	DB	10H,PA0-$-1
                pa2:
                	; TODO: check for 4 bytes...
                	sty	d,+0
 0521+FD7200    	DB	0FDH,70H+D,+0
                	; now copy value into place
                	lxiy	temp
 0524+FD21      	DB	0FDH,21H
 0526+2901      	DW	TEMP
                	ldy	a,+0
 0528+FD7E00    	DB	0FDH,A*8+46H,+0
                	stx	a,+0
 052B+DD7700    	DB	0DDH,70H+A,+0
                	ldy	a,+1
 052E+FD7E01    	DB	0FDH,A*8+46H,+1
                	stx	a,+1
 0531+DD7701    	DB	0DDH,70H+A,+1
                	ldy	a,+2
 0534+FD7E02    	DB	0FDH,A*8+46H,+2
                	stx	a,+2
 0537+DD7702    	DB	0DDH,70H+A,+2
                	ldy	a,+3
 053A+FD7E03    	DB	0FDH,A*8+46H,+3
                	stx	a,+3
 053D+DD7703    	DB	0DDH,70H+A,+3
 0540 B7        	ora	a	; NC, no error
 0541 C9        	ret
                
                pa1:
                	sty	d,+0
 0542+FD7200    	DB	0FDH,70H+D,+0
                	inxiy
 0545+FD23      	DB	0FDH,23H
 0547 23        	inx	h	; skip '.'
                	djnz	pa00
 0548+10B6      	DB	10H,PA00-$-1
                	; error if ends here... (string ends in '.')
 054A 37        	stc
 054B C9        	ret
                
                ; Parse a 16-bit (max) decimal number
                parsnm:
 054C 110000    	lxi	d,0
 054F 7E        pd0:	mov	a,m
 0550 FE20      	cpi	' '
 0552 C8        	rz
 0553 FE30      	cpi	'0'
 0555 D8        	rc
 0556 FE3A      	cpi	'9'+1
 0558 3F        	cmc
 0559 D8        	rc
 055A E60F      	ani	0fh
 055C E5        	push	h
 055D 62        	mov	h,d
 055E 6B        	mov	l,e
 055F 29        	dad	h	; *2
 0560 DA7B05    	jc	pd1
 0563 29        	dad	h	; *4
 0564 DA7B05    	jc	pd1
 0567 19        	dad	d	; *5
 0568 DA7B05    	jc	pd1
 056B 29        	dad	h	; *10
 056C DA7B05    	jc	pd1
 056F 5F        	mov	e,a
 0570 1600      	mvi	d,0
 0572 19        	dad	d
 0573 EB        	xchg
 0574 E1        	pop	h
 0575 D8        	rc
 0576 23        	inx	h
                	djnz	pd0
 0577+10D6      	DB	10H,PD0-$-1
 0579 B7        	ora	a	; NC
 057A C9        	ret
                
 057B E1        pd1:	pop	h
 057C C9        	ret	; CY still set
                
                ; Get a block of data from NVRAM to 'buf'
                ; Verify checksum, init block if needed.
                nvgetb:
                	lxix	nvbuf
 057D+DD21      	DB	0DDH,21H
 057F+B701      	DW	NVBUF
 0581 210000    	lxi	h,0
 0584 110002    	lxi	d,512
 0587 CD0000    	call	nvget
 058A CD0000    	call	vcksum
 058D C8        	rz	; chksum OK, ready to update/use
 058E 11A900    	lxi	d,newbuf
 0591 CD0F06    	call	msgout
                nvbinit:
 0594 21B701    	lxi	h,nvbuf
 0597 36FF      	mvi	m,0ffh
 0599 54        	mov	d,h
 059A 5D        	mov	e,l
 059B 23        	inx	h
 059C 01FF01    	lxi	b,512-1
                	ldir
 059F+EDB0      	DB	0EDH,0B0H
 05A1 C9        	ret
                
                if 0
                ; NOTE: this delay varies with CPU clock speed.
                msleep:
                	push	h
                mslp0:	push	psw
                	lxi	h,79	; ~1mS at 2.048MHz (200uS at 10.24MHz)
                mslp1:	dcx	h
                	mov	a,h
                	ora	l
                	jrnz	mslp1
                	pop	psw
                	dcr	a
                	jrnz	mslp0
                	pop	h
                	ret
                endif
                
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                ; These defines should be in a common file...
 0040 =         spi	equ	40h
                
 0040 =         spi?dat	equ	spi+0
 0041 =         spi?ctl	equ	spi+1
 0041 =         spi?sts	equ	spi+1
                
 0002 =         NVSCS	equ	10b	; H8xSPI SCS for NVRAM
                
                ; Standard W5500 register offsets
 0001 =         GAR	equ	1	; offset of GAR, etc.
 0005 =         SUBR	equ	5
 0009 =         SHAR	equ	9
 000F =         SIPR	equ	15
 001D =         PMAGIC	equ	29	; used for node ID
                
 0008 =         nsock	equ	8
 0008 =         SOCK0	equ	000$01$000b
 0028 =         SOCK1	equ	001$01$000b
 0048 =         SOCK2	equ	010$01$000b
 0068 =         SOCK3	equ	011$01$000b
 0088 =         SOCK4	equ	100$01$000b
 00A8 =         SOCK5	equ	101$01$000b
 00C8 =         SOCK6	equ	110$01$000b
 00E8 =         SOCK7	equ	111$01$000b
                
 0000 =         SnMR	equ	0
 0001 =         SnCR	equ	1
 0002 =         SnIR	equ	2
 0003 =         SnSR	equ	3
 0004 =         SnPORT	equ	4
 000C =         SnDIPR	equ	12
 0010 =         SnDPORT	equ	16
 0014 =         SnRESV1 equ     20      ; 0x14 reserved
 0017 =         SnRESV2 equ     23      ; 0x17 reserved
 0018 =         SnRESV3 equ     24      ; 0x18 reserved
 0019 =         SnRESV4 equ     25      ; 0x19 reserved
 001A =         SnRESV5 equ     26      ; 0x1a reserved
 001B =         SnRESV6 equ     27      ; 0x1b reserved
 001C =         SnRESV7 equ     28      ; 0x1c reserved
 001D =         SnRESV8 equ     29      ; 0x1d reserved
 001F =         SnTXBUF	equ	31	; TXBUF_SIZE
                
 001D =         NvKPALVTR equ	SnRESV8	; where to stash keepalive in NVRAM
 002F =         SnKPALVTR equ	47	; Keep alive timeout, 5s units
 0120 =         NvCFGTBL  equ	288	; location of CP/NET cfgtbl template
                
                ; Socket SR values
 0000 =         CLOSED	equ	00h
                
                ; Socket CR commands
 0008 =         DISCON	equ	08h
                
                ; Standard NVRAM defines
                
                ; NVRAM/SEEPROM commands
 0003 =         NVRD	equ	00000011b
 0002 =         NVWR	equ	00000010b
 0005 =         RDSR	equ	00000101b
 0006 =         WREN	equ	00000110b
                ; NVRAM/SEEPROM status bits
 0001 =         WIP	equ	00000001b
                
                ; Put block of data to NVRAM from 'buf'
                ; HL = nvram address, DE = length
                ; Must write in 128-byte blocks (pages).
                ; HL must be 128-byte aligned, DE must be multiple of 128
                nvset:
 05A2 E5        	push	h
 05A3 21B701    	lxi	h,nvbuf	; HL = buf, TOS = nvadr
 05A6 0E41      	mvi	c,spi?ctl
                nvset0:
                	; wait for WIP=0...
 05A8 3E02      	mvi	a,NVSCS
                	outp	a
 05AA+ED79      	DB	0EDH,A*8+41H
 05AC 3E05      	mvi	a,RDSR
 05AE D340      	out	spi?dat
 05B0 DB40      	in	spi?dat	; prime pump
 05B2 DB40      	in	spi?dat	; status register
 05B4 F5        	push	psw
 05B5 AF        	xra	a
                	outp	a	; not SCS
 05B6+ED79      	DB	0EDH,A*8+41H
 05B8 F1        	pop	psw
 05B9 E601      	ani	WIP
                	jrnz	nvset0
 05BB+20EB      	DB	20H,NVSET0-$-1
 05BD 3E02      	mvi	a,NVSCS
                	outp	a
 05BF+ED79      	DB	0EDH,A*8+41H
 05C1 3E06      	mvi	a,WREN
 05C3 D340      	out	spi?dat
 05C5 AF        	xra	a
                	outp	a	; not SCS
 05C6+ED79      	DB	0EDH,A*8+41H
 05C8 3E02      	mvi	a,NVSCS
                	outp	a
 05CA+ED79      	DB	0EDH,A*8+41H
 05CC 3E02      	mvi	a,NVWR
 05CE D340      	out	spi?dat
 05D0 E3        	xthl	; get nvadr
 05D1 7C        	mov	a,h
 05D2 D340      	out	spi?dat
 05D4 7D        	mov	a,l
 05D5 D340      	out	spi?dat
 05D7 018000    	lxi	b,128
 05DA 09        	dad	b	; update nvadr
 05DB EB        	xchg
 05DC B7        	ora	a
                	dsbc	b	; update length
 05DD+ED42      	DB	0EDH,B*8+42H
 05DF EB        	xchg
 05E0 E3        	xthl	; get buf adr
 05E1 41        	mov	b,c	; B = 128
 05E2 0E40      	mvi	c,spi?dat
                	outir		; HL = next page in 'buf'
 05E4+EDB3      	DB	0EDH,0B3H
 05E6 0E41      	mvi	c,spi?ctl
 05E8 AF        	xra	a
                	outp	a	; not SCS
 05E9+ED79      	DB	0EDH,A*8+41H
                ;	mvi	a,50
                ;	call	msleep	; wait for WIP to go "1"?
 05EB 7B        	mov	a,e
 05EC B2        	ora	d
                	jrnz	nvset0
 05ED+20B9      	DB	20H,NVSET0-$-1
 05EF E1        	pop	h
 05F0 C9        	ret
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                
                ; A = PMAGIC
 05F1 F5        shid:	push	psw
 05F2 110000    	lxi	d,idmsg
 05F5 CD0F06    	call	msgout
 05F8 F1        	pop	psw
 05F9 C36904    	jmp	hexout
                
                ; HL = IP addr, DE = prefix msg
 05FC E5        ship:	push	h
 05FD CD0F06    	call	msgout
 0600 E1        	pop	h
 0601 C3BF03    	jmp	ipout
                
                ; HL = mac addr
 0604 E5        shmac:	push	h
 0605 112100    	lxi	d,mcmsg
 0608 CD0F06    	call	msgout
 060B E1        	pop	h
 060C C3AD03    	jmp	hwout
                
 060F 1A        msgout:	ldax	d
 0610 B7        	ora	a
 0611 C8        	rz
 0612 13        	inx	d
 0613 CD1806    	call	conout
                	jr	msgout
 0616+18F7      	DB	18H,MSGOUT-$-1
                
                chrout:
 0618 F5        conout:	push	psw
 0619 DBED      cono0:	in	0edh
 061B E620      	ani	00100000b
                	jrz	cono0
 061D+28FA      	DB	28H,CONO0-$-1
 061F F1        	pop	psw
 0620 D3E8      	out	0e8h
 0622 C9        	ret
                
 0623 3600      linix:	mvi	m,0	; terminate buffer
 0625 C3D103    	jmp	crlf
                
                ; input a line from console, allow backspace
                ; returns C=num chars
                linin:
 0628 213701    	lxi	h,cmdlin
 062B 0E00      	mvi	c,0	; count chars
 062D CD7506    lini0	call	conin
 0630 FE0D      	cpi	CR
                	jrz	linix
 0632+28EF      	DB	28H,LINIX-$-1
 0634 FE03      	cpi	CTLC	; cancel
 0636 37        	stc
 0637 C8        	rz
 0638 FE08      	cpi	BS
                	jrz	backup
 063A+2822      	DB	28H,BACKUP-$-1
 063C FE20      	cpi	' '
                	jrc	chrnak
 063E+3817      	DB	38H,CHRNAK-$-1
 0640 FE41      	cpi	'A'
                	jrc	chrok
 0642+3806      	DB	38H,CHROK-$-1
 0644 E65F      	ani	01011111b	; toupper
 0646 FE5B      	cpi	'Z'+1
                	jrnc	chrnak
 0648+300D      	DB	30H,CHRNAK-$-1
 064A 77        chrok:	mov	m,a
 064B 23        	inx	h
 064C 0C        	inr	c
 064D FA5506    	jm	chrovf	; 128 chars max
 0650 CD1806    	call	conout
                	jr	lini0
 0653+18D8      	DB	18H,LINI0-$-1
 0655 2B        chrovf:	dcx	h
 0656 0D        	dcr	c
 0657 3E07      chrnak:	mvi	a,BEL
 0659 CD1806    	call	conout
                	jr	lini0
 065C+18CF      	DB	18H,LINI0-$-1
                backup:
 065E 79        	mov	a,c
 065F B7        	ora	a
                	jrz	lini0
 0660+28CB      	DB	28H,LINI0-$-1
 0662 0D        	dcr	c
 0663 2B        	dcx	h
 0664 3E08      	mvi	a,BS
 0666 CD1806    	call	conout
 0669 3E20      	mvi	a,' '
 066B CD1806    	call	conout
 066E 3E08      	mvi	a,BS
 0670 CD1806    	call	conout
                	jr	lini0
 0673+18B8      	DB	18H,LINI0-$-1
                
 0675 DBED      conin:	in	0edh
 0677 E601      	ani	00000001b
                	jrz	conin
 0679+28FA      	DB	28H,CONIN-$-1
 067B DBE8      	in	0e8h
 067D E67F      	ani	01111111b
 067F C9        	ret
                
                	dseg
 0101           	ds	40
 0129           stack:	ds	0
                
 0129 0000000000temp:	db	0,0,0,0,0,0	; space for IP or MAC addr
 012F 0000000000	db	0,0,0,0,0,0	; pad for error entry?
 0135 00        direct:	db	0
 0136 00        dirty:	db	0
                
 0137           cmdlin:	ds	128
                
 01B7           nvbuf:	ds	512
                
 03B7           	end
