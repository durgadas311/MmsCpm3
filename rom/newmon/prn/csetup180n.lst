		; Command module for SETUP
0002          	VERN	equ	02h
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
FFFF          	z180	equ	true
FFFF          	nofp	equ	true
		
			maclib	ram
**** ram.lib ****
**** csetup180n.asm ****
			maclib	setup
**** setup.lib ****
**** csetup180n.asm ****
FFFF          	if z180
			maclib	z180
**** z180.lib ****
**** csetup180n.asm ****
		else
		endif
		
000D          	CR	equ	13
000A          	LF	equ	10
0008          	BS	equ	8
0003          	CTLC	equ	3
0007          	BEL	equ	7
001B          	ESC	equ	27
		
FFFF          	if z180
0038          	mmu$cbr	equ	38h
0039          	mmu$bbr	equ	39h
003A          	mmu$cbar equ	3ah
		endif
		
8000          		org	8000h	; out of reach of ROM overlay...
8000  08      	first:	db	HIGH (last-first)	; +0: num pages
8001  80      		db	HIGH first		; +1: ORG page
8002  FF00    		db	255,0	; +2,+3: phy drv base, num
		
8004  C31D80  		jmp	init	; +4: init entry
8007  C31F80  		jmp	exec	; +7: action entry
		
800A  43      		db	'C'	; +10: Command letter
800B  FF      		db	-1	; +11: front panel key
800C  00      		db	0	; +12: port, 0 if variable
800D  FFFFFF  		db	11111111b,11111111b,11111111b	; +13: FP display
8010  436F6E66		db	'Config Setup',0	; +16: mnemonic string
      69672053
      65747570
      00
		
801D          	init:
801D  AF      		xra	a	; NC
801E  C9      		ret
		
801F          	exec:
801F  111685  		lxi	d,signon
8022  CD0282  		call	msgout
8025  CD0F81  		call	get$su	; get a copy of setup data
8028  DCBC82  		cc	cserr	; offer to clear if checksum error
			; Primary/Default boot options
802B  11B685  		lxi	d,gpdev
802E  210488  		lxi	h,last+dpdev
8031  CD4E83  		call	getlet
8034  11D485  		lxi	d,gpuni
8037  210588  		lxi	h,last+dpuni
803A  CD0784  		call	getnum
803D  11F085  		lxi	d,gpstr
8040  210688  		lxi	h,last+dpstr
8043  CD5184  		call	getstr
0000          	if not nofp
		endif
			; Add-ons Installed
0000          	if not z180
		endif
		
8046  3E36    		mvi	a,'6'
8048  320F86  		sta	dport+1
804B  110E86  		lxi	d,dport
804E  210B89  		lxi	h,last+h67pt
8051  CDC483  		call	gethex
		
8054  3E34    		mvi	a,'4'
8056  320F86  		sta	dport+1
8059  110E86  		lxi	d,dport
805C  210C89  		lxi	h,last+h47pt
805F  CDC483  		call	gethex
		
8062  3E33    		mvi	a,'3'
8064  320F86  		sta	dport+1
8067  110E86  		lxi	d,dport
806A  210D89  		lxi	h,last+h37pt
806D  CDC483  		call	gethex
		
0000          	if 0	; H17 is not configurable?
		endif
FFFF          	if z180
8070  112686  		lxi	d,gwait
8073  210F89  		lxi	h,last+waits
8076  CD9884  		call	getwt
		endif
		
			; TODO: more setup?
8079  3A3E86  		lda	dirty
807C  B7      		ora	a
807D  C28780  		jnz	mkchg
8080  115785  	xxchg:	lxi	d,nochg
8083  CD0282  		call	msgout
8086  C9      		ret
		
8087  116B85  	mkchg:	lxi	d,dochg
808A  214186  		lxi	h,inbuf
808D  36FF    		mvi	m,0ffh
808F  CDEF82  		call	getyn
8092  3A4186  		lda	inbuf
8095  B7      		ora	a
8096  20E8    		jrnz	xxchg
8098  110088  		lxi	d,last
809B  01FE07  		lxi	b,sulen
809E  CD6B81  		call	schksm
80A1  2A8E81  		lhld	sum
80A4  229081  		shld	ssum
80A7  F3      		di
FFFF          	if z180
80A8  ED383A  		in0	a,mmu$cbar	; preserve monitor CBAR
80AB  F5      		push	psw
80AC  3A3620  		lda	ctl$F2
80AF  F5      		push	psw
80B0  0680    		mvi	b,1000$0000b
80B2  ED013A  		out0	b,mmu$cbar
80B5  0600    		mvi	b,0
80B7  ED0138  		out0	b,mmu$cbr
80BA  06F8    		mvi	b,0f8h
80BC  ED0139  		out0	b,mmu$bbr
80BF  F6A0    		ori	10100000b	; WE, no legacy ROM
80C1  D3F2    		out	0f2h
		else
		endif
80C3  210088  		lxi	h,last
80C6  110010  		lxi	d,suadr
80C9  012000  		lxi	b,susize/64
80CC  CD9582  		call	flash
			;jrc	error	; never returned, actually
80CF  F1      		pop	psw
80D0  F5      		push	psw
80D1  E67F    		ani	01111111b	; WE off
80D3  D3F2    		out	0f2h
80D5  110010  		lxi	d,suadr
80D8  01FE07  		lxi	b,sulen
80DB  CD4C81  		call	vchksm
80DE  2A8E81  		lhld	sum
80E1  EB      		xchg
80E2  2A9081  		lhld	ssum
80E5  B7      		ora	a
80E6  ED52    		dsbc	d
80E8  201D    		jrnz	error
80EA  F1      		pop	psw
80EB  D3F2    		out	0f2h
FFFF          	if z180
80ED  AF      		xra	a
80EE  D339    		out	mmu$bbr
80F0  F1      		pop	psw
80F1  ED393A  		out0	a,mmu$cbar
		endif
80F4  FB      		ei
80F5  117A85  		lxi	d,saved
80F8  CD0282  		call	msgout
			; Update monitor copy
80FB  210088  		lxi	h,last
80FE  1100F8  		lxi	d,susave
8101  011001  		lxi	b,sumax
8104  EDB0    		ldir
8106  C9      		ret
		
		; PSW is on stack...
8107  F1      	error:	pop	psw
8108  118D85  		lxi	d,failed
810B  CD0282  		call	msgout
810E  C9      		ret	; what else can we do?
		
810F  F3      	get$su:	di
FFFF          	if z180
8110  ED383A  		in0	a,mmu$cbar	; preserve monitor CBAR
8113  F5      		push	psw
8114  3A3620  		lda	ctl$F2
8117  F5      		push	psw
8118  0680    		mvi	b,1000$0000b
811A  ED013A  		out0	b,mmu$cbar
811D  0600    		mvi	b,0
811F  ED0138  		out0	b,mmu$cbr
8122  06F8    		mvi	b,0f8h
8124  ED0139  		out0	b,mmu$bbr
8127  F6A0    		ori	10100000b	; WE, no legacy ROM
8129  D3F2    		out	0f2h
812B  210010  		lxi	h,suadr
812E  110088  		lxi	d,last
8131  010008  		lxi	b,susize
8134  EDB0    		ldir
8136  F1      		pop	psw
8137  D3F2    		out	0f2h
8139  AF      		xra	a
813A  ED3939  		out0	a,mmu$bbr
813D  F1      		pop	psw
813E  ED393A  		out0	a,mmu$cbar
		else
		endif
8141  FB      		ei
8142  110088  		lxi	d,last
8145  01FE07  		lxi	b,sulen
8148  CD4C81  		call	vchksm
814B  C9      		ret	; CY=checksum error
		
		; DE=code start, BC=length
		; Returns CY on error
814C  210000  	vchksm:	lxi	h,0
814F  228E81  		shld	sum
8152  1A      	vchk0:	ldax	d
8153  CD8581  		call	sum1
8156  13      		inx	d
8157  0B      		dcx	b
8158  78      		mov	a,b
8159  B1      		ora	c
815A  20F6    		jrnz	vchk0
815C  218E81  		lxi	h,sum
815F  0602    		mvi	b,2
8161  1A      	vchk2:	ldax	d
8162  BE      		cmp	m
8163  37      		stc
8164  C0      		rnz
8165  13      		inx	d
8166  23      		inx	h
8167  10F8    		djnz	vchk2
8169  AF      		xra	a	; NC
816A  C9      		ret
		
		; DE=code start, BC=length
		; Sets checksum after code
816B  210000  	schksm:	lxi	h,0
816E  228E81  		shld	sum
8171  1A      	schk0:	ldax	d
8172  CD8581  		call	sum1
8175  13      		inx	d
8176  0B      		dcx	b
8177  78      		mov	a,b
8178  B1      		ora	c
8179  20F6    		jrnz	schk0
817B  218E81  		lxi	h,sum
817E  7E      		mov	a,m
817F  12      		stax	d
8180  23      		inx	h
8181  13      		inx	d
8182  7E      		mov	a,m
8183  12      		stax	d
8184  C9      		ret
		
8185  218E81  	sum1:	lxi	h,sum
8188  86      		add	m
8189  77      		mov	m,a
818A  D0      		rnc
818B  23      		inx	h
818C  34      		inr	m
818D  C9      		ret
		
818E  0000    	sum:	dw	0
8190  0000    	ssum:	dw	0
		
8192  3E1B    	liniz:	mvi	a,ESC
8194  324186  		sta	inbuf
8197  0E01    		mvi	c,1
8199  C3B282  		jmp	crlf
819C  3600    	linix:	mvi	m,0	; terminate buffer
819E  C3B282  		jmp	crlf
		
		; input a filename from console, allow backspace
		; returns C=num chars
81A1          	linin:
81A1  214186  		lxi	h,inbuf
81A4  0E00    		mvi	c,0	; count chars
81A6  CDF781  	lini0	call	conin
81A9  FE0D    		cpi	CR
81AB  28EF    		jrz	linix
81AD  FE1B    		cpi	ESC
81AF  28E1    		jrz	liniz
81B1  FE03    		cpi	CTLC	; cancel
81B3  37      		stc
81B4  C8      		rz
81B5  FE08    		cpi	BS
81B7  281C    		jrz	backup
81B9  FE20    		cpi	' '
81BB  3811    		jrc	chrnak
81BD  FE7F    		cpi	'~'+1
81BF  300D    		jrnc	chrnak
81C1  77      	chrok:	mov	m,a
81C2  23      		inx	h
81C3  0C      		inr	c
81C4  FACC81  		jm	chrovf	; 128 chars max
81C7  CDEC81  		call	conout
			; TODO: detect overflow...
81CA  18DA    		jr	lini0
81CC  2B      	chrovf:	dcx	h
81CD  0D      		dcr	c
81CE  3E07    	chrnak:	mvi	a,BEL
81D0  CDEC81  		call	conout
81D3  18D1    		jr	lini0
81D5          	backup:
81D5  79      		mov	a,c
81D6  B7      		ora	a
81D7  28CD    		jrz	lini0
81D9  0D      		dcr	c
81DA  2B      		dcx	h
81DB  3E08    		mvi	a,BS
81DD  CDEC81  		call	conout
81E0  3E20    		mvi	a,' '
81E2  CDEC81  		call	conout
81E5  3E08    		mvi	a,BS
81E7  CDEC81  		call	conout
81EA  18BA    		jr	lini0
		
81EC          	chrout:
81EC  F5      	conout:	push	psw
81ED  DBED    	cono0:	in	0edh
81EF  E620    		ani	00100000b
81F1  28FA    		jrz	cono0
81F3  F1      		pop	psw
81F4  D3E8    		out	0e8h
81F6  C9      		ret
		
81F7  DBED    	conin:	in	0edh
81F9  E601    		ani	00000001b
81FB  28FA    		jrz	conin
81FD  DBE8    		in	0e8h
81FF  E67F    		ani	01111111b
8201  C9      		ret
		
8202  1A      	msgout:	ldax	d
8203  B7      		ora	a
8204  C8      		rz
8205  CDEC81  		call	conout
8208  13      		inx	d
8209  18F7    		jr	msgout
		
		; A=number to print
		; leading zeroes blanked - must preserve B
820B          	decout:
820B  C5      		push	b
820C  0E00    		mvi	c,0
820E  1664    		mvi	d,100
8210  CD3382  		call	divide
8213  160A    		mvi	d,10
8215  CD3382  		call	divide
8218  C630    		adi	'0'
821A  CDEC81  		call	chrout
821D  C1      		pop	b
821E  C9      		ret
		
821F          	hexout:
821F  F5      		push	psw
8220  07      		rlc
8221  07      		rlc
8222  07      		rlc
8223  07      		rlc
8224  CD2882  		call	hexdig
8227  F1      		pop	psw
8228  E60F    	hexdig:	ani	0fh
822A  C690    		adi	90h
822C  27      		daa
822D  CE40    		aci	40h
822F  27      		daa
8230  C3EC81  		jmp	chrout
		
8233  1E00    	divide:	mvi	e,0
8235  92      	div0:	sub	d
8236  1C      		inr	e
8237  30FC    		jrnc	div0
8239  82      		add	d
823A  1D      		dcr	e
823B  2005    		jrnz	div1
823D  CB41    		bit	0,c
823F  2001    		jrnz	div1
8241  C9      		ret
8242  CBC1    	div1:	setb	0,c
8244  F5      		push	psw	; remainder
8245  3E30    		mvi	a,'0'
8247  83      		add	e
8248  CDEC81  		call	chrout
824B  F1      		pop	psw	; remainder
824C  C9      		ret
		
824D          	parshx:
824D  1600    		mvi	d,0
824F  7E      	px0:	mov	a,m
8250  B7      		ora	a
8251  C8      		rz
8252  D630    		sui	'0'
8254  D8      		rc
8255  FE0A    		cpi	'9'-'0'+1
8257  380A    		jrc	px3
8259  D611    		sui	'A'-'0'
825B  E6DF    		ani	11011111b	; toupper
825D  FE06    		cpi	'F'-'A'+1
825F  3F      		cmc
8260  D8      		rc
8261  C60A    		adi	10
8263  5F      	px3:	mov	e,a
8264  7A      		mov	a,d
8265  87      		add	a
8266  D8      		rc
8267  87      		add	a
8268  D8      		rc
8269  87      		add	a
826A  D8      		rc
826B  87      		add	a
826C  D8      		rc
826D  83      		add	e	; no CY possible
826E  57      		mov	d,a
826F  23      		inx	h
8270  10DD    		djnz	px0
8272  B7      		ora	a
8273  C9      		ret
		
		; Parse a 8-bit (max) decimal number
		; HL=string, B=count
		; Returns D=number, CY=error
8274          	parsnm:
8274  110000  		lxi	d,0
8277  7E      	pd0:	mov	a,m
8278  B7      		ora	a
8279  C8      		rz
827A  FE30    		cpi	'0'
827C  D8      		rc
827D  FE3A    		cpi	'9'+1
827F  3F      		cmc
8280  D8      		rc
8281  E60F    		ani	0fh
8283  5F      		mov	e,a
8284  7A      		mov	a,d
8285  87      		add	a	; *2
8286  D8      		rc
8287  87      		add	a	; *4
8288  D8      		rc
8289  82      		add	d	; *5
828A  D8      		rc
828B  87      		add	a	; *10
828C  D8      		rc
828D  83      		add	e	;
828E  D8      		rc
828F  57      		mov	d,a
8290  23      		inx	h
8291  10E4    		djnz	pd0
8293  B7      		ora	a	; NC
8294  C9      		ret
		
		; flash ROM from HL to DE, 64 bytes at a time.
		; DE must be on a 64-byte boundary.
		; BC=num pages to flash
		; returns CY on error, else HL,DE at next 64 bytes
		; caller must set WE... and MEM1 as needed.
8295          	flash:
8295  C5      		push	b
8296  014000  		lxi	b,64
8299  EDB0    		ldir
			; -----
829B  2B      		dcx	h
829C  1B      		dcx	d	; last addr written...
			; wait for write cycle to begin...
			; TODO: timeout this loop?
829D  1A      	flash2:	ldax	d
829E  AE      		xra	m
829F  E680    		ani	10000000b	; bit7 is inverted when busy...
82A1  28FA    		jrz	flash2
			; wait for write cycle to end...
			; TODO: timeout this loop?
82A3  1A      	flash0:	ldax	d
82A4  AE      		xra	m
82A5  E680    		ani	10000000b	; bit7 is inverted when busy...
82A7  20FA    		jrnz	flash0
82A9  23      		inx	h
82AA  13      		inx	d
			; done with page...
			;call	progress	; TODO: progress needed?
82AB  C1      		pop	b
82AC  0B      		dcx	b
82AD  78      		mov	a,b
82AE  B1      		ora	c
82AF  20E4    		jrnz	flash
			;xra	a	; NC already
82B1  C9      		ret
		
82B2  3E0D    	crlf:	mvi	a,CR
82B4  CDEC81  		call	conout
82B7  3E0A    		mvi	a,LF
82B9  C3EC81  		jmp	conout
		
82BC  112985  	cserr:	lxi	d,csbad
82BF  CD0282  		call	msgout
82C2  214186  		lxi	h,inbuf
82C5  36FF    		mvi	m,0ffh
82C7  CDEF82  		call	getyn
82CA  3A4186  		lda	inbuf
82CD  B7      		ora	a	; NZ=no
82CE  201B    		jrnz	cserr9
82D0  210088  		lxi	h,last
82D3  54      		mov	d,h
82D4  5D      		mov	e,l
82D5  36FF    		mvi	m,0ffh
82D7  13      		inx	d
82D8  01FF07  		lxi	b,susize-1
82DB  EDB0    		ldir
82DD  210000  		lxi	h,0
82E0  220288  		shld	last+subase
82E3  3E01    		mvi	a,1
82E5  323E86  		sta	dirty
82E8  C9      		ret
		
		; CY preserved if set...
82E9  E1      	nmerr9:	pop	h	; discard saved HL
82EA  D1      		pop	d	; discard saved DE
82EB  E1      	cserr9:	pop	h	; discard our ret adr
82EC  C38080  		jmp	xxchg	; return to monitor
		
		; DE=prompt prefix, HL=value location
		; get a Y/N, Wait for CR, allow BS.
		; Stores 0ffh for "no", 000h for "yes"
82EF          	getyn:
82EF  CD0282  		call	msgout
82F2  7E      		mov	a,m
82F3  B7      		ora	a
82F4  3E4E    		mvi	a,'N'
82F6  2002    		jrnz	getyn1
82F8  3E59    		mvi	a,'Y'
82FA  CDEC81  	getyn1:	call	conout
82FD  11B285  		lxi	d,gpunn
8300  CD0282  		call	msgout
8303  CDF781  	getyn2:	call	conin
8306  FE0D    		cpi	CR
8308  CAA783  		jz	getlt1	; same processing
830B  E65F    		ani	01011111b	; toupper
830D  FE59    		cpi	'Y'
830F  280B    		jrz	getyn0
8311  FE4E    		cpi	'N'
8313  2807    		jrz	getyn0
8315  3E07    		mvi	a,BEL
8317  CDEC81  		call	conout
831A  18E7    		jr	getyn2
831C  CDEC81  	getyn0:	call	conout
831F  D64E    		sui	'N'	;  0='N',  X='Y'
8321  D601    		sui	1	; CY='N', NC='Y'
8323  9F      		sbb	a	; FF='N', 00='Y'
8324  4F      		mov	c,a
8325  CDF781  	getyn5:	call	conin
8328  FE0D    		cpi	CR
832A  2875    		jrz	getlt3	; same processing
832C  FE08    		cpi	BS
832E  2807    		jrz	getyn4
8330  3E07    		mvi	a,BEL
8332  CDEC81  		call	conout
8335  18EE    		jr	getyn5
8337  CDEC81  	getyn4:	call	conout
833A  3E20    		mvi	a,' '
833C  CDEC81  		call	conout
833F  3E08    		mvi	a,BS
8341  CDEC81  		call	conout
8344  18BD    		jr	getyn2
		
		; DE=prompt prefix, HL=value location
		; get a single letter, toupper. Wait for CR, allow BS
		; TODO: allow value meaning "not defined"?
8346          	getlete:
8346  3E07    		mvi	a,BEL
8348  CDEC81  		call	conout
834B  CDB282  		call	crlf
834E          	getlet:
834E  ED533F86		sded	curmsg
8352  CD0282  		call	msgout
8355  7E      		mov	a,m
8356  FEFF    		cpi	0ffh
8358  2803    		jrz	getlt6
835A  CDEC81  		call	conout
835D  11B285  	getlt6:	lxi	d,gpunn
8360  CD0282  		call	msgout
8363  CDF781  	getlt2:	call	conin
8366  FE0D    		cpi	CR
8368  283D    		jrz	getlt1
836A  FE1B    		cpi	ESC
836C  2844    		jrz	getltx
836E  E65F    		ani	01011111b	; toupper
8370  FE42    		cpi	'B'	; 'A' means default, makes no sense here
8372  3837    		jrc	getlt0
8374  FE5B    		cpi	'Z'+1
8376  3033    		jrnc	getlt0
			; wait for CR, honor BS
8378  4F      		mov	c,a
8379  CDEC81  		call	conout
837C  CDF781  	getlt5:	call	conin
837F  FE0D    		cpi	CR
8381  281E    		jrz	getlt3
8383  FE08    		cpi	BS
8385  280B    		jrz	getlt4
8387  FE1B    		cpi	ESC
8389  2827    		jrz	getltx
838B  3E07    		mvi	a,BEL
838D  CDEC81  		call	conout
8390  18EA    		jr	getlt5
8392  CDEC81  	getlt4:	call	conout
8395  3E20    		mvi	a,' '
8397  CDEC81  		call	conout
839A  3E08    		mvi	a,BS
839C  CDEC81  		call	conout
839F  18C2    		jr	getlt2
83A1  71      	getlt3:	mov	m,c
83A2  3E01    		mvi	a,1
83A4  323E86  		sta	dirty
83A7  CDB282  	getlt1:	call	crlf
83AA  C9      		ret
83AB  3E07    	getlt0:	mvi	a,BEL
83AD  CDEC81  		call	conout
83B0  18B1    		jr	getlt2
		
		; delete setting, re-prompt
83B2  36FF    	getltx:	mvi	m,0ffh
83B4  3E01    		mvi	a,1
83B6  323E86  		sta	dirty
83B9  ED5B3F86		lded	curmsg
83BD  1887    		jr	getlete
		
		; DE=prompt prefix, HL=value location
83BF          	gethexe:
83BF  3E07    		mvi	a,BEL
83C1  CDEC81  		call	conout
83C4          	gethex:
83C4  D5      		push	d
83C5  E5      		push	h
83C6  CD0282  		call	msgout
83C9  7E      		mov	a,m
83CA  CD1F82  		call	hexout
83CD  11B285  		lxi	d,gpunn
83D0  CD0282  		call	msgout
83D3  CDA181  		call	linin
83D6  DAE982  		jc	nmerr9
83D9  79      		mov	a,c
83DA  B7      		ora	a
83DB  286C    		jrz	getxit
83DD  3A4186  		lda	inbuf
83E0  FE1B    		cpi	ESC	; delete setting
83E2  2813    		jrz	gethxx
83E4  41      		mov	b,c
83E5  214186  		lxi	h,inbuf
83E8  CD4D82  		call	parshx
83EB  7A      		mov	a,d
83EC  E1      		pop	h
83ED  D1      		pop	d
83EE  38CF    		jrc	gethexe
83F0  77      		mov	m,a
83F1  3E01    		mvi	a,1
83F3  323E86  		sta	dirty
83F6  C9      		ret
		
		; delete setting, re-prompt
83F7  E1      	gethxx:	pop	h
83F8  36FF    		mvi	m,0ffh
83FA  3E01    		mvi	a,1
83FC  323E86  		sta	dirty
83FF  D1      		pop	d
8400  18BD    		jr	gethexe
		
		; DE=prompt prefix, HL=value location
8402          	getnume:
8402  3E07    		mvi	a,BEL
8404  CDEC81  		call	conout
8407          	getnum:
8407  D5      		push	d
8408  E5      		push	h
8409  CD0282  		call	msgout
840C  7E      		mov	a,m
840D  FEFF    		cpi	0ffh
840F  2803    		jrz	getnm0
8411  CD0B82  		call	decout
8414  11B285  	getnm0:	lxi	d,gpunn
8417  CD0282  		call	msgout
841A  CDA181  		call	linin
841D  DAE982  		jc	nmerr9
8420  79      		mov	a,c
8421  B7      		ora	a
8422  2825    		jrz	getxit
8424  3A4186  		lda	inbuf
8427  FE1B    		cpi	ESC	; delete setting
8429  2813    		jrz	getnmx
842B  41      		mov	b,c
842C  214186  		lxi	h,inbuf
842F  CD7482  		call	parsnm
8432  7A      		mov	a,d
8433  E1      		pop	h
8434  D1      		pop	d
8435  38CB    		jrc	getnume
8437  77      		mov	m,a
8438  3E01    		mvi	a,1
843A  323E86  		sta	dirty
843D  C9      		ret
		
		; delete setting, re-prompt
843E  E1      	getnmx:	pop	h
843F  36FF    		mvi	m,0ffh
8441  3E01    		mvi	a,1
8443  323E86  		sta	dirty
8446  D1      		pop	d
8447  18B9    		jr	getnume
		
8449  E1      	getxit:	pop	h
844A  D1      		pop	d
844B  C9      		ret
		
		; DE=prompt prefix, HL=value location
844C          	getstre:
844C  3E07    		mvi	a,BEL
844E  CDEC81  		call	conout
8451          	getstr:
8451  D5      		push	d
8452  E5      		push	h
8453  CD0282  		call	msgout
8456  7E      		mov	a,m
8457  FEFF    		cpi	0ffh
8459  2804    		jrz	getst0
845B  EB      		xchg
845C  CD0282  		call	msgout
845F  11B285  	getst0:	lxi	d,gpunn
8462  CD0282  		call	msgout
8465  CDA181  		call	linin
8468  DAE982  		jc	nmerr9
846B  79      		mov	a,c
846C  B7      		ora	a
846D  28DA    		jrz	getxit
			; no error checking left?
846F  E1      		pop	h
8470  D1      		pop	d
			; TODO: are we guaranteed 'inbuf' is terminated?
8471  114186  		lxi	d,inbuf
8474  1A      		ldax	d
8475  FE1B    		cpi	ESC	; delete setting
8477  2809    		jrz	getstx
8479  1A      	getst2:	ldax	d
847A  B7      		ora	a
847B  280E    		jrz	getst1
847D  77      		mov	m,a
847E  23      		inx	h
847F  13      		inx	d
8480  18F7    		jr	getst2
8482  36FF    	getstx:	mvi	m,0ffh
8484  3E01    		mvi	a,1
8486  323E86  		sta	dirty
8489  18C1    		jr	getstre
848B  3600    	getst1:	mvi	m,0
848D  3E01    		mvi	a,1
848F  323E86  		sta	dirty
8492  C9      		ret
		
FFFF          	if z180
8493  3E07    	getwte:	mvi	a,BEL
8495  CDEC81  		call	conout
8498          	getwt:
8498  D5      		push	d
8499  E5      		push	h
849A  CD0282  		call	msgout
849D  7E      		mov	a,m
849E  CDD584  		call	wtout
84A1  11B285  		lxi	d,gpunn
84A4  CD0282  		call	msgout
84A7  CDA181  		call	linin
84AA  DAE982  		jc	nmerr9
84AD  79      		mov	a,c
84AE  B7      		ora	a
84AF  2898    		jrz	getxit
84B1  3A4186  		lda	inbuf
84B4  FE1B    		cpi	ESC	; delete setting
84B6  2812    		jrz	getwtx
84B8  41      		mov	b,c
84B9  214186  		lxi	h,inbuf
84BC  CDEF84  		call	parwt
84BF  E1      		pop	h
84C0  D1      		pop	d
84C1  38D0    		jrc	getwte
84C3  77      		mov	m,a
84C4  3E01    		mvi	a,1
84C6  323E86  		sta	dirty
84C9  C9      		ret
		
84CA  E1      	getwtx:	pop	h
84CB  36FF    		mvi	m,0ffh
84CD  3E01    		mvi	a,1
84CF  323E86  		sta	dirty
84D2  D1      		pop	d
84D3  18BE    		jr	getwte
		
84D5  FEFF    	wtout:	cpi	0ffh
84D7  C8      		rz
84D8  F5      		push	psw
84D9  07      		rlc
84DA  07      		rlc
84DB  CDE884  		call	wtout1
84DE  3E2C    		mvi	a,','
84E0  CDEC81  		call	conout
84E3  F1      		pop	psw
84E4  0F      		rrc
84E5  0F      		rrc
84E6  0F      		rrc
84E7  0F      		rrc
84E8  E603    	wtout1:	ani	3
84EA  C630    		adi	'0'
84EC  C3EC81  		jmp	conout
		
84EF  CD0E85  	parwt:	call	parwt1
84F2  D8      		rc
84F3  0F      		rrc
84F4  0F      		rrc
84F5  57      		mov	d,a
84F6  23      		inx	h
84F7  7E      		mov	a,m
84F8  FE2C    		cpi	','
84FA  37      		stc
84FB  C0      		rnz
84FC  23      		inx	h
84FD  CD0E85  		call	parwt1
8500  D8      		rc
8501  07      		rlc
8502  07      		rlc
8503  07      		rlc
8504  07      		rlc
8505  B2      		ora	d
8506  57      		mov	d,a
8507  23      		inx	h
8508  7E      		mov	a,m
8509  D601    		sui	1	; CY only if was 00
850B  3F      		cmc
850C  7A      		mov	a,d
850D  C9      		ret
		
850E          	parwt1:
850E  7E      		mov	a,m
850F  D630    		sui	'0'
8511  D8      		rc
8512  FE04    		cpi	'3'-'0'+1
8514  3F      		cmc
8515  C9      		ret
		endif
		
8516  6F6E6669	signon:	db	'onfig setup v'
      67207365
      74757020
      76
8523  302E32  		db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
8526  0D0A00  		db	CR,LF,0
		
8529  53657475	csbad:	db	'Setup bank checksum error. Clear setup data (',0
      70206261
      6E6B2063
      6865636B
      73756D20
      6572726F
      722E2043
      6C656172
      20736574
      75702064
      61746120
      2800
8557  53657475	nochg:	db	'Setup not changed',CR,LF,0
      70206E6F
      74206368
      616E6765
      640D0A00
856B  53617665	dochg:	db	'Save changes (',0
      20636861
      6E676573
      202800
857A  53657475	saved:	db	'Setup data saved',CR,LF,0
      70206461
      74612073
      61766564
      0D0A00
858D  53657475	failed:	db	'Setup flash failed, checksum error',CR,LF,0
      7020666C
      61736820
      6661696C
      65642C20
      63686563
      6B73756D
      20657272
      6F720D0A
      00
		
85B2  293A2000	gpunn:	db	'): ',0
85B6  5072696D	gpdev:	db	'Primary/Default boot device (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20646576
      69636520
      2800
85D4  5072696D	gpuni:	db	'Primary/Default boot unit (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20756E69
      74202800
85F0  5072696D	gpstr:	db	'Primary/Default boot string (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20737472
      696E6720
      2800
0000          	if not nofp
		endif
0000          	if not z180
		endif
860E  485F3720	dport:	db	'H_7 Port (FF=use SW1) (',0
      506F7274
      20284646
      3D757365
      20535731
      29202800
FFFF          	if z180
8626  57414954	gwait:	db	'WAIT states (MEM,I/O) (',0
      20737461
      74657320
      284D454D
      2C492F4F
      29202800
		endif
		
863E  00      	dirty:	db	0
863F  0000    	curmsg:	dw	0
		
8641          	inbuf:	ds	128	; input entry buffer
		
86C1          		ds	128
		stack:	ds	0
		
8741  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFF
		
8800          	last:	end



Statistics:

     4	passes
     0	jr promotions
   188	symbols
  1792	bytes

   409	macro calls
  3984	macro bytes
     0	invented symbols
