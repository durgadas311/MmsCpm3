		; Command module for SETUP
0002          	VERN	equ	02h
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
FFFF          	z180	equ	true
FFFF          	nofp	equ	true
		
			maclib	ram
**** ram.lib ****
**** csetup180n.asm ****
			maclib	setup
**** setup.lib ****
**** csetup180n.asm ****
FFFF          	 if z180
			maclib	z180
**** z180.lib ****
**** csetup180n.asm ****
		 else
		 endif
		
000D          	CR	equ	13
000A          	LF	equ	10
0008          	BS	equ	8
0003          	CTLC	equ	3
0007          	BEL	equ	7
001B          	ESC	equ	27
		
FFFF          	 if z180
0038          	mmu$cbr	equ	38h
0039          	mmu$bbr	equ	39h
003A          	mmu$cbar equ	3ah
		 endif
		
8000          		org	8000h	; out of reach of ROM overlay...
8000  08      	first:	db	HIGH (last-first)	; +0: num pages
8001  80      		db	HIGH first		; +1: ORG page
8002  FF00    		db	255,0	; +2,+3: phy drv base, num
		
8004  C31D80  		jmp	init	; +4: init entry
8007  C31F80  		jmp	exec	; +7: action entry
		
800A  43      		db	'C'	; +10: Command letter
800B  FF      		db	-1	; +11: front panel key
800C  00      		db	0	; +12: port, 0 if variable
800D  FFFFFF  		db	11111111b,11111111b,11111111b	; +13: FP display
8010  436F6E66		db	'Config Setup',0	; +16: mnemonic string
      69672053
      65747570
      00
		
801D          	init:
801D  AF      		xra	a	; NC
801E  C9      		ret
		
801F          	exec:
801F  111F85  		lxi	d,signon
8022  CD0B82  		call	msgout
8025  CD1881  		call	get$su	; get a copy of setup data
8028  DCC582  		cc	cserr	; offer to clear if checksum error
			; Primary/Default boot options
802B  11BF85  		lxi	d,gpdev
802E  210488  		lxi	h,last+dpdev
8031  CD5783  		call	getlet
8034  11DD85  		lxi	d,gpuni
8037  210588  		lxi	h,last+dpuni
803A  CD1084  		call	getnum
803D  11F985  		lxi	d,gpstr
8040  210688  		lxi	h,last+dpstr
8043  CD5A84  		call	getstr
0000          	 if not nofp
		 endif
			; Add-ons Installed
0000          	 if not z180
		 endif
		
8046  3E36    		mvi	a,'6'
8048  321886  		sta	dport+1
804B  111786  		lxi	d,dport
804E  210B89  		lxi	h,last+h67pt
8051  CDCD83  		call	gethex
		
8054  3E34    		mvi	a,'4'
8056  321886  		sta	dport+1
8059  111786  		lxi	d,dport
805C  210C89  		lxi	h,last+h47pt
805F  CDCD83  		call	gethex
		
8062  3E33    		mvi	a,'3'
8064  321886  		sta	dport+1
8067  111786  		lxi	d,dport
806A  210D89  		lxi	h,last+h37pt
806D  CDCD83  		call	gethex
		
0000          	 if 0	; H17 is not configurable?
		 endif
8070  112F86  		lxi	d,vport
8073  211089  		lxi	h,last+vdipt
8076  CDCD83  		call	gethex
FFFF          	 if z180
8079  114686  		lxi	d,gwait
807C  210F89  		lxi	h,last+waits
807F  CDA184  		call	getwt
		 endif
		
			; TODO: more setup?
8082  3A5E86  		lda	dirty
8085  B7      		ora	a
8086  C29080  		jnz	mkchg
8089  116085  	xxchg:	lxi	d,nochg
808C  CD0B82  		call	msgout
808F  C9      		ret
		
8090  117485  	mkchg:	lxi	d,dochg
8093  216186  		lxi	h,inbuf
8096  36FF    		mvi	m,0ffh
8098  CDF882  		call	getyn
809B  3A6186  		lda	inbuf
809E  B7      		ora	a
809F  20E8    		jrnz	xxchg
80A1  110088  		lxi	d,last
80A4  01FE07  		lxi	b,sulen
80A7  CD7481  		call	schksm
80AA  2A9781  		lhld	sum
80AD  229981  		shld	ssum
80B0  F3      		di
FFFF          	 if z180
80B1  ED383A  		in0	a,mmu$cbar	; preserve monitor CBAR
80B4  F5      		push	psw
80B5  3A3620  		lda	ctl$F2
80B8  F5      		push	psw
80B9  0680    		mvi	b,1000$0000b
80BB  ED013A  		out0	b,mmu$cbar
80BE  0600    		mvi	b,0
80C0  ED0138  		out0	b,mmu$cbr
80C3  06F8    		mvi	b,0f8h
80C5  ED0139  		out0	b,mmu$bbr
80C8  F6A0    		ori	10100000b	; WE, no legacy ROM
80CA  D3F2    		out	0f2h
		 else
		 endif
80CC  210088  		lxi	h,last
80CF  110010  		lxi	d,suadr
80D2  012000  		lxi	b,susize/64
80D5  CD9E82  		call	flash
			;jrc	error	; never returned, actually
80D8  F1      		pop	psw
80D9  F5      		push	psw
80DA  E67F    		ani	01111111b	; WE off
80DC  D3F2    		out	0f2h
80DE  110010  		lxi	d,suadr
80E1  01FE07  		lxi	b,sulen
80E4  CD5581  		call	vchksm
80E7  2A9781  		lhld	sum
80EA  EB      		xchg
80EB  2A9981  		lhld	ssum
80EE  B7      		ora	a
80EF  ED52    		dsbc	d
80F1  201D    		jrnz	error
80F3  F1      		pop	psw
80F4  D3F2    		out	0f2h
FFFF          	 if z180
80F6  AF      		xra	a
80F7  D339    		out	mmu$bbr
80F9  F1      		pop	psw
80FA  ED393A  		out0	a,mmu$cbar
		 endif
80FD  FB      		ei
80FE  118385  		lxi	d,saved
8101  CD0B82  		call	msgout
			; Update monitor copy
8104  210088  		lxi	h,last
8107  1100F8  		lxi	d,susave
810A  011101  		lxi	b,sumax
810D  EDB0    		ldir
810F  C9      		ret
		
		; PSW is on stack...
8110  F1      	error:	pop	psw
8111  119685  		lxi	d,failed
8114  CD0B82  		call	msgout
8117  C9      		ret	; what else can we do?
		
8118  F3      	get$su:	di
FFFF          	 if z180
8119  ED383A  		in0	a,mmu$cbar	; preserve monitor CBAR
811C  F5      		push	psw
811D  3A3620  		lda	ctl$F2
8120  F5      		push	psw
8121  0680    		mvi	b,1000$0000b
8123  ED013A  		out0	b,mmu$cbar
8126  0600    		mvi	b,0
8128  ED0138  		out0	b,mmu$cbr
812B  06F8    		mvi	b,0f8h
812D  ED0139  		out0	b,mmu$bbr
8130  F6A0    		ori	10100000b	; WE, no legacy ROM
8132  D3F2    		out	0f2h
8134  210010  		lxi	h,suadr
8137  110088  		lxi	d,last
813A  010008  		lxi	b,susize
813D  EDB0    		ldir
813F  F1      		pop	psw
8140  D3F2    		out	0f2h
8142  AF      		xra	a
8143  ED3939  		out0	a,mmu$bbr
8146  F1      		pop	psw
8147  ED393A  		out0	a,mmu$cbar
		 else
		 endif
814A  FB      		ei
814B  110088  		lxi	d,last
814E  01FE07  		lxi	b,sulen
8151  CD5581  		call	vchksm
8154  C9      		ret	; CY=checksum error
		
		; DE=code start, BC=length
		; Returns CY on error
8155  210000  	vchksm:	lxi	h,0
8158  229781  		shld	sum
815B  1A      	vchk0:	ldax	d
815C  CD8E81  		call	sum1
815F  13      		inx	d
8160  0B      		dcx	b
8161  78      		mov	a,b
8162  B1      		ora	c
8163  20F6    		jrnz	vchk0
8165  219781  		lxi	h,sum
8168  0602    		mvi	b,2
816A  1A      	vchk2:	ldax	d
816B  BE      		cmp	m
816C  37      		stc
816D  C0      		rnz
816E  13      		inx	d
816F  23      		inx	h
8170  10F8    		djnz	vchk2
8172  AF      		xra	a	; NC
8173  C9      		ret
		
		; DE=code start, BC=length
		; Sets checksum after code
8174  210000  	schksm:	lxi	h,0
8177  229781  		shld	sum
817A  1A      	schk0:	ldax	d
817B  CD8E81  		call	sum1
817E  13      		inx	d
817F  0B      		dcx	b
8180  78      		mov	a,b
8181  B1      		ora	c
8182  20F6    		jrnz	schk0
8184  219781  		lxi	h,sum
8187  7E      		mov	a,m
8188  12      		stax	d
8189  23      		inx	h
818A  13      		inx	d
818B  7E      		mov	a,m
818C  12      		stax	d
818D  C9      		ret
		
818E  219781  	sum1:	lxi	h,sum
8191  86      		add	m
8192  77      		mov	m,a
8193  D0      		rnc
8194  23      		inx	h
8195  34      		inr	m
8196  C9      		ret
		
8197  0000    	sum:	dw	0
8199  0000    	ssum:	dw	0
		
819B  3E1B    	liniz:	mvi	a,ESC
819D  326186  		sta	inbuf
81A0  0E01    		mvi	c,1
81A2  C3BB82  		jmp	crlf
81A5  3600    	linix:	mvi	m,0	; terminate buffer
81A7  C3BB82  		jmp	crlf
		
		; input a filename from console, allow backspace
		; returns C=num chars
81AA          	linin:
81AA  216186  		lxi	h,inbuf
81AD  0E00    		mvi	c,0	; count chars
81AF  CD0082  	lini0	call	conin
81B2  FE0D    		cpi	CR
81B4  28EF    		jrz	linix
81B6  FE1B    		cpi	ESC
81B8  28E1    		jrz	liniz
81BA  FE03    		cpi	CTLC	; cancel
81BC  37      		stc
81BD  C8      		rz
81BE  FE08    		cpi	BS
81C0  281C    		jrz	backup
81C2  FE20    		cpi	' '
81C4  3811    		jrc	chrnak
81C6  FE7F    		cpi	'~'+1
81C8  300D    		jrnc	chrnak
81CA  77      	chrok:	mov	m,a
81CB  23      		inx	h
81CC  0C      		inr	c
81CD  FAD581  		jm	chrovf	; 128 chars max
81D0  CDF581  		call	conout
			; TODO: detect overflow...
81D3  18DA    		jr	lini0
81D5  2B      	chrovf:	dcx	h
81D6  0D      		dcr	c
81D7  3E07    	chrnak:	mvi	a,BEL
81D9  CDF581  		call	conout
81DC  18D1    		jr	lini0
81DE          	backup:
81DE  79      		mov	a,c
81DF  B7      		ora	a
81E0  28CD    		jrz	lini0
81E2  0D      		dcr	c
81E3  2B      		dcx	h
81E4  3E08    		mvi	a,BS
81E6  CDF581  		call	conout
81E9  3E20    		mvi	a,' '
81EB  CDF581  		call	conout
81EE  3E08    		mvi	a,BS
81F0  CDF581  		call	conout
81F3  18BA    		jr	lini0
		
81F5          	chrout:
81F5  F5      	conout:	push	psw
81F6  DBED    	cono0:	in	0edh
81F8  E620    		ani	00100000b
81FA  28FA    		jrz	cono0
81FC  F1      		pop	psw
81FD  D3E8    		out	0e8h
81FF  C9      		ret
		
8200  DBED    	conin:	in	0edh
8202  E601    		ani	00000001b
8204  28FA    		jrz	conin
8206  DBE8    		in	0e8h
8208  E67F    		ani	01111111b
820A  C9      		ret
		
820B  1A      	msgout:	ldax	d
820C  B7      		ora	a
820D  C8      		rz
820E  CDF581  		call	conout
8211  13      		inx	d
8212  18F7    		jr	msgout
		
		; A=number to print
		; leading zeroes blanked - must preserve B
8214          	decout:
8214  C5      		push	b
8215  0E00    		mvi	c,0
8217  1664    		mvi	d,100
8219  CD3C82  		call	divide
821C  160A    		mvi	d,10
821E  CD3C82  		call	divide
8221  C630    		adi	'0'
8223  CDF581  		call	chrout
8226  C1      		pop	b
8227  C9      		ret
		
8228          	hexout:
8228  F5      		push	psw
8229  07      		rlc
822A  07      		rlc
822B  07      		rlc
822C  07      		rlc
822D  CD3182  		call	hexdig
8230  F1      		pop	psw
8231  E60F    	hexdig:	ani	0fh
8233  C690    		adi	90h
8235  27      		daa
8236  CE40    		aci	40h
8238  27      		daa
8239  C3F581  		jmp	chrout
		
823C  1E00    	divide:	mvi	e,0
823E  92      	div0:	sub	d
823F  1C      		inr	e
8240  30FC    		jrnc	div0
8242  82      		add	d
8243  1D      		dcr	e
8244  2005    		jrnz	div1
8246  CB41    		bit	0,c
8248  2001    		jrnz	div1
824A  C9      		ret
824B  CBC1    	div1:	setb	0,c
824D  F5      		push	psw	; remainder
824E  3E30    		mvi	a,'0'
8250  83      		add	e
8251  CDF581  		call	chrout
8254  F1      		pop	psw	; remainder
8255  C9      		ret
		
8256          	parshx:
8256  1600    		mvi	d,0
8258  7E      	px0:	mov	a,m
8259  B7      		ora	a
825A  C8      		rz
825B  D630    		sui	'0'
825D  D8      		rc
825E  FE0A    		cpi	'9'-'0'+1
8260  380A    		jrc	px3
8262  D611    		sui	'A'-'0'
8264  E6DF    		ani	11011111b	; toupper
8266  FE06    		cpi	'F'-'A'+1
8268  3F      		cmc
8269  D8      		rc
826A  C60A    		adi	10
826C  5F      	px3:	mov	e,a
826D  7A      		mov	a,d
826E  87      		add	a
826F  D8      		rc
8270  87      		add	a
8271  D8      		rc
8272  87      		add	a
8273  D8      		rc
8274  87      		add	a
8275  D8      		rc
8276  83      		add	e	; no CY possible
8277  57      		mov	d,a
8278  23      		inx	h
8279  10DD    		djnz	px0
827B  B7      		ora	a
827C  C9      		ret
		
		; Parse a 8-bit (max) decimal number
		; HL=string, B=count
		; Returns D=number, CY=error
827D          	parsnm:
827D  110000  		lxi	d,0
8280  7E      	pd0:	mov	a,m
8281  B7      		ora	a
8282  C8      		rz
8283  FE30    		cpi	'0'
8285  D8      		rc
8286  FE3A    		cpi	'9'+1
8288  3F      		cmc
8289  D8      		rc
828A  E60F    		ani	0fh
828C  5F      		mov	e,a
828D  7A      		mov	a,d
828E  87      		add	a	; *2
828F  D8      		rc
8290  87      		add	a	; *4
8291  D8      		rc
8292  82      		add	d	; *5
8293  D8      		rc
8294  87      		add	a	; *10
8295  D8      		rc
8296  83      		add	e	;
8297  D8      		rc
8298  57      		mov	d,a
8299  23      		inx	h
829A  10E4    		djnz	pd0
829C  B7      		ora	a	; NC
829D  C9      		ret
		
		; flash ROM from HL to DE, 64 bytes at a time.
		; DE must be on a 64-byte boundary.
		; BC=num pages to flash
		; returns CY on error, else HL,DE at next 64 bytes
		; caller must set WE... and MEM1 as needed.
829E          	flash:
829E  C5      		push	b
829F  014000  		lxi	b,64
82A2  EDB0    		ldir
			; -----
82A4  2B      		dcx	h
82A5  1B      		dcx	d	; last addr written...
			; wait for write cycle to begin...
			; TODO: timeout this loop?
82A6  1A      	flash2:	ldax	d
82A7  AE      		xra	m
82A8  E680    		ani	10000000b	; bit7 is inverted when busy...
82AA  28FA    		jrz	flash2
			; wait for write cycle to end...
			; TODO: timeout this loop?
82AC  1A      	flash0:	ldax	d
82AD  AE      		xra	m
82AE  E680    		ani	10000000b	; bit7 is inverted when busy...
82B0  20FA    		jrnz	flash0
82B2  23      		inx	h
82B3  13      		inx	d
			; done with page...
			;call	progress	; TODO: progress needed?
82B4  C1      		pop	b
82B5  0B      		dcx	b
82B6  78      		mov	a,b
82B7  B1      		ora	c
82B8  20E4    		jrnz	flash
			;xra	a	; NC already
82BA  C9      		ret
		
82BB  3E0D    	crlf:	mvi	a,CR
82BD  CDF581  		call	conout
82C0  3E0A    		mvi	a,LF
82C2  C3F581  		jmp	conout
		
82C5  113285  	cserr:	lxi	d,csbad
82C8  CD0B82  		call	msgout
82CB  216186  		lxi	h,inbuf
82CE  36FF    		mvi	m,0ffh
82D0  CDF882  		call	getyn
82D3  3A6186  		lda	inbuf
82D6  B7      		ora	a	; NZ=no
82D7  201B    		jrnz	cserr9
82D9  210088  		lxi	h,last
82DC  54      		mov	d,h
82DD  5D      		mov	e,l
82DE  36FF    		mvi	m,0ffh
82E0  13      		inx	d
82E1  01FF07  		lxi	b,susize-1
82E4  EDB0    		ldir
82E6  210000  		lxi	h,0
82E9  220288  		shld	last+subase
82EC  3E01    		mvi	a,1
82EE  325E86  		sta	dirty
82F1  C9      		ret
		
		; CY preserved if set...
82F2  E1      	nmerr9:	pop	h	; discard saved HL
82F3  D1      		pop	d	; discard saved DE
82F4  E1      	cserr9:	pop	h	; discard our ret adr
82F5  C38980  		jmp	xxchg	; return to monitor
		
		; DE=prompt prefix, HL=value location
		; get a Y/N, Wait for CR, allow BS.
		; Stores 0ffh for "no", 000h for "yes"
82F8          	getyn:
82F8  CD0B82  		call	msgout
82FB  7E      		mov	a,m
82FC  B7      		ora	a
82FD  3E4E    		mvi	a,'N'
82FF  2002    		jrnz	getyn1
8301  3E59    		mvi	a,'Y'
8303  CDF581  	getyn1:	call	conout
8306  11BB85  		lxi	d,gpunn
8309  CD0B82  		call	msgout
830C  CD0082  	getyn2:	call	conin
830F  FE0D    		cpi	CR
8311  CAB083  		jz	getlt1	; same processing
8314  E65F    		ani	01011111b	; toupper
8316  FE59    		cpi	'Y'
8318  280B    		jrz	getyn0
831A  FE4E    		cpi	'N'
831C  2807    		jrz	getyn0
831E  3E07    		mvi	a,BEL
8320  CDF581  		call	conout
8323  18E7    		jr	getyn2
8325  CDF581  	getyn0:	call	conout
8328  D64E    		sui	'N'	;  0='N',  X='Y'
832A  D601    		sui	1	; CY='N', NC='Y'
832C  9F      		sbb	a	; FF='N', 00='Y'
832D  4F      		mov	c,a
832E  CD0082  	getyn5:	call	conin
8331  FE0D    		cpi	CR
8333  2875    		jrz	getlt3	; same processing
8335  FE08    		cpi	BS
8337  2807    		jrz	getyn4
8339  3E07    		mvi	a,BEL
833B  CDF581  		call	conout
833E  18EE    		jr	getyn5
8340  CDF581  	getyn4:	call	conout
8343  3E20    		mvi	a,' '
8345  CDF581  		call	conout
8348  3E08    		mvi	a,BS
834A  CDF581  		call	conout
834D  18BD    		jr	getyn2
		
		; DE=prompt prefix, HL=value location
		; get a single letter, toupper. Wait for CR, allow BS
		; TODO: allow value meaning "not defined"?
834F          	getlete:
834F  3E07    		mvi	a,BEL
8351  CDF581  		call	conout
8354  CDBB82  		call	crlf
8357          	getlet:
8357  ED535F86		sded	curmsg
835B  CD0B82  		call	msgout
835E  7E      		mov	a,m
835F  FEFF    		cpi	0ffh
8361  2803    		jrz	getlt6
8363  CDF581  		call	conout
8366  11BB85  	getlt6:	lxi	d,gpunn
8369  CD0B82  		call	msgout
836C  CD0082  	getlt2:	call	conin
836F  FE0D    		cpi	CR
8371  283D    		jrz	getlt1
8373  FE1B    		cpi	ESC
8375  2844    		jrz	getltx
8377  E65F    		ani	01011111b	; toupper
8379  FE42    		cpi	'B'	; 'A' means default, makes no sense here
837B  3837    		jrc	getlt0
837D  FE5B    		cpi	'Z'+1
837F  3033    		jrnc	getlt0
			; wait for CR, honor BS
8381  4F      		mov	c,a
8382  CDF581  		call	conout
8385  CD0082  	getlt5:	call	conin
8388  FE0D    		cpi	CR
838A  281E    		jrz	getlt3
838C  FE08    		cpi	BS
838E  280B    		jrz	getlt4
8390  FE1B    		cpi	ESC
8392  2827    		jrz	getltx
8394  3E07    		mvi	a,BEL
8396  CDF581  		call	conout
8399  18EA    		jr	getlt5
839B  CDF581  	getlt4:	call	conout
839E  3E20    		mvi	a,' '
83A0  CDF581  		call	conout
83A3  3E08    		mvi	a,BS
83A5  CDF581  		call	conout
83A8  18C2    		jr	getlt2
83AA  71      	getlt3:	mov	m,c
83AB  3E01    		mvi	a,1
83AD  325E86  		sta	dirty
83B0  CDBB82  	getlt1:	call	crlf
83B3  C9      		ret
83B4  3E07    	getlt0:	mvi	a,BEL
83B6  CDF581  		call	conout
83B9  18B1    		jr	getlt2
		
		; delete setting, re-prompt
83BB  36FF    	getltx:	mvi	m,0ffh
83BD  3E01    		mvi	a,1
83BF  325E86  		sta	dirty
83C2  ED5B5F86		lded	curmsg
83C6  1887    		jr	getlete
		
		; DE=prompt prefix, HL=value location
83C8          	gethexe:
83C8  3E07    		mvi	a,BEL
83CA  CDF581  		call	conout
83CD          	gethex:
83CD  D5      		push	d
83CE  E5      		push	h
83CF  CD0B82  		call	msgout
83D2  7E      		mov	a,m
83D3  CD2882  		call	hexout
83D6  11BB85  		lxi	d,gpunn
83D9  CD0B82  		call	msgout
83DC  CDAA81  		call	linin
83DF  DAF282  		jc	nmerr9
83E2  79      		mov	a,c
83E3  B7      		ora	a
83E4  286C    		jrz	getxit
83E6  3A6186  		lda	inbuf
83E9  FE1B    		cpi	ESC	; delete setting
83EB  2813    		jrz	gethxx
83ED  41      		mov	b,c
83EE  216186  		lxi	h,inbuf
83F1  CD5682  		call	parshx
83F4  7A      		mov	a,d
83F5  E1      		pop	h
83F6  D1      		pop	d
83F7  38CF    		jrc	gethexe
83F9  77      		mov	m,a
83FA  3E01    		mvi	a,1
83FC  325E86  		sta	dirty
83FF  C9      		ret
		
		; delete setting, re-prompt
8400  E1      	gethxx:	pop	h
8401  36FF    		mvi	m,0ffh
8403  3E01    		mvi	a,1
8405  325E86  		sta	dirty
8408  D1      		pop	d
8409  18BD    		jr	gethexe
		
		; DE=prompt prefix, HL=value location
840B          	getnume:
840B  3E07    		mvi	a,BEL
840D  CDF581  		call	conout
8410          	getnum:
8410  D5      		push	d
8411  E5      		push	h
8412  CD0B82  		call	msgout
8415  7E      		mov	a,m
8416  FEFF    		cpi	0ffh
8418  2803    		jrz	getnm0
841A  CD1482  		call	decout
841D  11BB85  	getnm0:	lxi	d,gpunn
8420  CD0B82  		call	msgout
8423  CDAA81  		call	linin
8426  DAF282  		jc	nmerr9
8429  79      		mov	a,c
842A  B7      		ora	a
842B  2825    		jrz	getxit
842D  3A6186  		lda	inbuf
8430  FE1B    		cpi	ESC	; delete setting
8432  2813    		jrz	getnmx
8434  41      		mov	b,c
8435  216186  		lxi	h,inbuf
8438  CD7D82  		call	parsnm
843B  7A      		mov	a,d
843C  E1      		pop	h
843D  D1      		pop	d
843E  38CB    		jrc	getnume
8440  77      		mov	m,a
8441  3E01    		mvi	a,1
8443  325E86  		sta	dirty
8446  C9      		ret
		
		; delete setting, re-prompt
8447  E1      	getnmx:	pop	h
8448  36FF    		mvi	m,0ffh
844A  3E01    		mvi	a,1
844C  325E86  		sta	dirty
844F  D1      		pop	d
8450  18B9    		jr	getnume
		
8452  E1      	getxit:	pop	h
8453  D1      		pop	d
8454  C9      		ret
		
		; DE=prompt prefix, HL=value location
8455          	getstre:
8455  3E07    		mvi	a,BEL
8457  CDF581  		call	conout
845A          	getstr:
845A  D5      		push	d
845B  E5      		push	h
845C  CD0B82  		call	msgout
845F  7E      		mov	a,m
8460  FEFF    		cpi	0ffh
8462  2804    		jrz	getst0
8464  EB      		xchg
8465  CD0B82  		call	msgout
8468  11BB85  	getst0:	lxi	d,gpunn
846B  CD0B82  		call	msgout
846E  CDAA81  		call	linin
8471  DAF282  		jc	nmerr9
8474  79      		mov	a,c
8475  B7      		ora	a
8476  28DA    		jrz	getxit
			; no error checking left?
8478  E1      		pop	h
8479  D1      		pop	d
			; TODO: are we guaranteed 'inbuf' is terminated?
847A  116186  		lxi	d,inbuf
847D  1A      		ldax	d
847E  FE1B    		cpi	ESC	; delete setting
8480  2809    		jrz	getstx
8482  1A      	getst2:	ldax	d
8483  B7      		ora	a
8484  280E    		jrz	getst1
8486  77      		mov	m,a
8487  23      		inx	h
8488  13      		inx	d
8489  18F7    		jr	getst2
848B  36FF    	getstx:	mvi	m,0ffh
848D  3E01    		mvi	a,1
848F  325E86  		sta	dirty
8492  18C1    		jr	getstre
8494  3600    	getst1:	mvi	m,0
8496  3E01    		mvi	a,1
8498  325E86  		sta	dirty
849B  C9      		ret
		
FFFF          	 if z180
849C  3E07    	getwte:	mvi	a,BEL
849E  CDF581  		call	conout
84A1          	getwt:
84A1  D5      		push	d
84A2  E5      		push	h
84A3  CD0B82  		call	msgout
84A6  7E      		mov	a,m
84A7  CDDE84  		call	wtout
84AA  11BB85  		lxi	d,gpunn
84AD  CD0B82  		call	msgout
84B0  CDAA81  		call	linin
84B3  DAF282  		jc	nmerr9
84B6  79      		mov	a,c
84B7  B7      		ora	a
84B8  2898    		jrz	getxit
84BA  3A6186  		lda	inbuf
84BD  FE1B    		cpi	ESC	; delete setting
84BF  2812    		jrz	getwtx
84C1  41      		mov	b,c
84C2  216186  		lxi	h,inbuf
84C5  CDF884  		call	parwt
84C8  E1      		pop	h
84C9  D1      		pop	d
84CA  38D0    		jrc	getwte
84CC  77      		mov	m,a
84CD  3E01    		mvi	a,1
84CF  325E86  		sta	dirty
84D2  C9      		ret
		
84D3  E1      	getwtx:	pop	h
84D4  36FF    		mvi	m,0ffh
84D6  3E01    		mvi	a,1
84D8  325E86  		sta	dirty
84DB  D1      		pop	d
84DC  18BE    		jr	getwte
		
84DE  FEFF    	wtout:	cpi	0ffh
84E0  C8      		rz
84E1  F5      		push	psw
84E2  07      		rlc
84E3  07      		rlc
84E4  CDF184  		call	wtout1
84E7  3E2C    		mvi	a,','
84E9  CDF581  		call	conout
84EC  F1      		pop	psw
84ED  0F      		rrc
84EE  0F      		rrc
84EF  0F      		rrc
84F0  0F      		rrc
84F1  E603    	wtout1:	ani	3
84F3  C630    		adi	'0'
84F5  C3F581  		jmp	conout
		
84F8  CD1785  	parwt:	call	parwt1
84FB  D8      		rc
84FC  0F      		rrc
84FD  0F      		rrc
84FE  57      		mov	d,a
84FF  23      		inx	h
8500  7E      		mov	a,m
8501  FE2C    		cpi	','
8503  37      		stc
8504  C0      		rnz
8505  23      		inx	h
8506  CD1785  		call	parwt1
8509  D8      		rc
850A  07      		rlc
850B  07      		rlc
850C  07      		rlc
850D  07      		rlc
850E  B2      		ora	d
850F  57      		mov	d,a
8510  23      		inx	h
8511  7E      		mov	a,m
8512  D601    		sui	1	; CY only if was 00
8514  3F      		cmc
8515  7A      		mov	a,d
8516  C9      		ret
		
8517          	parwt1:
8517  7E      		mov	a,m
8518  D630    		sui	'0'
851A  D8      		rc
851B  FE04    		cpi	'3'-'0'+1
851D  3F      		cmc
851E  C9      		ret
		 endif
		
851F  6F6E6669	signon:	db	'onfig setup v'
      67207365
      74757020
      76
852C  302E32  		db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
852F  0D0A00  		db	CR,LF,0
		
8532  53657475	csbad:	db	'Setup bank checksum error. Clear setup data (',0
      70206261
      6E6B2063
      6865636B
      73756D20
      6572726F
      722E2043
      6C656172
      20736574
      75702064
      61746120
      2800
8560  53657475	nochg:	db	'Setup not changed',CR,LF,0
      70206E6F
      74206368
      616E6765
      640D0A00
8574  53617665	dochg:	db	'Save changes (',0
      20636861
      6E676573
      202800
8583  53657475	saved:	db	'Setup data saved',CR,LF,0
      70206461
      74612073
      61766564
      0D0A00
8596  53657475	failed:	db	'Setup flash failed, checksum error',CR,LF,0
      7020666C
      61736820
      6661696C
      65642C20
      63686563
      6B73756D
      20657272
      6F720D0A
      00
		
85BB  293A2000	gpunn:	db	'): ',0
85BF  5072696D	gpdev:	db	'Primary/Default boot device (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20646576
      69636520
      2800
85DD  5072696D	gpuni:	db	'Primary/Default boot unit (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20756E69
      74202800
85F9  5072696D	gpstr:	db	'Primary/Default boot string (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20737472
      696E6720
      2800
0000          	 if not nofp
		 endif
0000          	 if not z180
		 endif
8617  485F3720	dport:	db	'H_7 Port (FF=use SW1) (',0
      506F7274
      20284646
      3D757365
      20535731
      29202800
862F  56444950	vport:	db	'VDIP1 Port (FF=(D8)) (',0
      3120506F
      72742028
      46463D28
      44382929
      202800
FFFF          	 if z180
8646  57414954	gwait:	db	'WAIT states (MEM,I/O) (',0
      20737461
      74657320
      284D454D
      2C492F4F
      29202800
		 endif
		
865E  00      	dirty:	db	0
865F  0000    	curmsg:	dw	0
		
8661          	inbuf:	ds	128	; input entry buffer
		
86E1          		ds	128
		stack:	ds	0
		
8761  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFF
		
8800          	last:	end



Statistics:

     4	passes
     0	jr promotions
   190	symbols
  1792	bytes

   377	macro calls
  3984	macro bytes
     0	invented symbols
