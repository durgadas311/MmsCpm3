		; Command module for SETUP
0002          	VERN	equ	02h
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
FFFF          	z180	equ	true
FFFF          	nofp	equ	true
		
			maclib	ram
**** ram.lib ****
**** csetup180n.asm ****
			maclib	setup
**** setup.lib ****
**** csetup180n.asm ****
FFFF          	if z180
			maclib	z180
**** z180.lib ****
**** csetup180n.asm ****
		else
		endif
		
000D          	CR	equ	13
000A          	LF	equ	10
0008          	BS	equ	8
0003          	CTLC	equ	3
0007          	BEL	equ	7
001B          	ESC	equ	27
		
FFFF          	if z180
0038          	mmu$cbr	equ	38h
0039          	mmu$bbr	equ	39h
003A          	mmu$cbar equ	3ah
		endif
		
8000          		org	8000h	; out of reach of ROM overlay...
8000  07      	first:	db	HIGH (last-first)	; +0: num pages
8001  80      		db	HIGH first		; +1: ORG page
8002  FF00    		db	255,0	; +2,+3: phy drv base, num
		
8004  C31680  		jmp	init	; +4: init entry
8007  C31880  		jmp	exec	; +7: action entry
		
800A  43      		db	'C'	; +10: Command letter
800B  FF      		db	-1	; +11: front panel key
800C  00      		db	0	; +12: port, 0 if variable
800D  FFFFFF  		db	11111111b,11111111b,11111111b	; +13: FP display
8010  53657475		db	'Setup',0	; +16: mnemonic string
      7000
		
8016          	init:
8016  AF      		xra	a	; NC
8017  C9      		ret
		
8018          	exec:
8018  117484  		lxi	d,signon
801B  CDF281  		call	msgout
801E  CDFF80  		call	get$su	; get a copy of setup data
8021  DCAC82  		cc	cserr	; offer to clear if checksum error
			; Primary/Default boot options
8024  111485  		lxi	d,gpdev
8027  210487  		lxi	h,last+dpdev
802A  CD3E83  		call	getlet
802D  113285  		lxi	d,gpuni
8030  210587  		lxi	h,last+dpuni
8033  CDF283  		call	getnum
8036  114E85  		lxi	d,gpstr
8039  210687  		lxi	h,last+dpstr
803C  CD3784  		call	getstr
0000          	if not nofp
		endif
			; Add-ons Installed
0000          	if not z180
		endif
		
803F  3E36    		mvi	a,'6'
8041  326D85  		sta	dport+1
8044  116C85  		lxi	d,dport
8047  210B88  		lxi	h,last+h67pt
804A  CDB483  		call	gethex
		
804D  3E34    		mvi	a,'4'
804F  326D85  		sta	dport+1
8052  116C85  		lxi	d,dport
8055  210C88  		lxi	h,last+h47pt
8058  CDB483  		call	gethex
		
805B  3E33    		mvi	a,'3'
805D  326D85  		sta	dport+1
8060  116C85  		lxi	d,dport
8063  210D88  		lxi	h,last+h37pt
8066  CDB483  		call	gethex
		
0000          	if 0	; H17 is not configurable?
		endif
		
			; TODO: more setup?
8069  3A8485  		lda	dirty
806C  B7      		ora	a
806D  C27780  		jnz	mkchg
8070  11B584  	xxchg:	lxi	d,nochg
8073  CDF281  		call	msgout
8076  C9      		ret
		
8077  11C984  	mkchg:	lxi	d,dochg
807A  218785  		lxi	h,inbuf
807D  36FF    		mvi	m,0ffh
807F  CDDF82  		call	getyn
8082  3A8785  		lda	inbuf
8085  B7      		ora	a
8086  20E8    		jrnz	xxchg
8088  110087  		lxi	d,last
808B  01FE07  		lxi	b,sulen
808E  CD5B81  		call	schksm
8091  2A7E81  		lhld	sum
8094  228081  		shld	ssum
8097  F3      		di
FFFF          	if z180
8098  ED383A  		in0	a,mmu$cbar	; preserve monitor CBAR
809B  F5      		push	psw
809C  3A3620  		lda	ctl$F2
809F  F5      		push	psw
80A0  0680    		mvi	b,1000$0000b
80A2  ED013A  		out0	b,mmu$cbar
80A5  0600    		mvi	b,0
80A7  ED0138  		out0	b,mmu$cbr
80AA  06F8    		mvi	b,0f8h
80AC  ED0139  		out0	b,mmu$bbr
80AF  F6A0    		ori	10100000b	; WE, no legacy ROM
80B1  D3F2    		out	0f2h
		else
		endif
80B3  210087  		lxi	h,last
80B6  110010  		lxi	d,suadr
80B9  012000  		lxi	b,susize/64
80BC  CD8582  		call	flash
			;jrc	error	; never returned, actually
80BF  F1      		pop	psw
80C0  F5      		push	psw
80C1  E67F    		ani	01111111b	; WE off
80C3  D3F2    		out	0f2h
80C5  110010  		lxi	d,suadr
80C8  01FE07  		lxi	b,sulen
80CB  CD3C81  		call	vchksm
80CE  2A7E81  		lhld	sum
80D1  EB      		xchg
80D2  2A8081  		lhld	ssum
80D5  B7      		ora	a
80D6  ED52    		dsbc	d
80D8  201D    		jrnz	error
80DA  F1      		pop	psw
80DB  D3F2    		out	0f2h
FFFF          	if z180
80DD  AF      		xra	a
80DE  D339    		out	mmu$bbr
80E0  F1      		pop	psw
80E1  ED393A  		out0	a,mmu$cbar
		endif
80E4  FB      		ei
80E5  11D884  		lxi	d,saved
80E8  CDF281  		call	msgout
			; Update monitor copy
80EB  210087  		lxi	h,last
80EE  1100F8  		lxi	d,susave
80F1  010F01  		lxi	b,sumax
80F4  EDB0    		ldir
80F6  C9      		ret
		
		; PSW is on stack...
80F7  F1      	error:	pop	psw
80F8  11EB84  		lxi	d,failed
80FB  CDF281  		call	msgout
80FE  C9      		ret	; what else can we do?
		
80FF  F3      	get$su:	di
FFFF          	if z180
8100  ED383A  		in0	a,mmu$cbar	; preserve monitor CBAR
8103  F5      		push	psw
8104  3A3620  		lda	ctl$F2
8107  F5      		push	psw
8108  0680    		mvi	b,1000$0000b
810A  ED013A  		out0	b,mmu$cbar
810D  0600    		mvi	b,0
810F  ED0138  		out0	b,mmu$cbr
8112  06F8    		mvi	b,0f8h
8114  ED0139  		out0	b,mmu$bbr
8117  F6A0    		ori	10100000b	; WE, no legacy ROM
8119  D3F2    		out	0f2h
811B  210010  		lxi	h,suadr
811E  110087  		lxi	d,last
8121  010008  		lxi	b,susize
8124  EDB0    		ldir
8126  F1      		pop	psw
8127  D3F2    		out	0f2h
8129  AF      		xra	a
812A  ED3939  		out0	a,mmu$bbr
812D  F1      		pop	psw
812E  ED393A  		out0	a,mmu$cbar
		else
		endif
8131  FB      		ei
8132  110087  		lxi	d,last
8135  01FE07  		lxi	b,sulen
8138  CD3C81  		call	vchksm
813B  C9      		ret	; CY=checksum error
		
		; DE=code start, BC=length
		; Returns CY on error
813C  210000  	vchksm:	lxi	h,0
813F  227E81  		shld	sum
8142  1A      	vchk0:	ldax	d
8143  CD7581  		call	sum1
8146  13      		inx	d
8147  0B      		dcx	b
8148  78      		mov	a,b
8149  B1      		ora	c
814A  20F6    		jrnz	vchk0
814C  217E81  		lxi	h,sum
814F  0602    		mvi	b,2
8151  1A      	vchk2:	ldax	d
8152  BE      		cmp	m
8153  37      		stc
8154  C0      		rnz
8155  13      		inx	d
8156  23      		inx	h
8157  10F8    		djnz	vchk2
8159  AF      		xra	a	; NC
815A  C9      		ret
		
		; DE=code start, BC=length
		; Sets checksum after code
815B  210000  	schksm:	lxi	h,0
815E  227E81  		shld	sum
8161  1A      	schk0:	ldax	d
8162  CD7581  		call	sum1
8165  13      		inx	d
8166  0B      		dcx	b
8167  78      		mov	a,b
8168  B1      		ora	c
8169  20F6    		jrnz	schk0
816B  217E81  		lxi	h,sum
816E  7E      		mov	a,m
816F  12      		stax	d
8170  23      		inx	h
8171  13      		inx	d
8172  7E      		mov	a,m
8173  12      		stax	d
8174  C9      		ret
		
8175  217E81  	sum1:	lxi	h,sum
8178  86      		add	m
8179  77      		mov	m,a
817A  D0      		rnc
817B  23      		inx	h
817C  34      		inr	m
817D  C9      		ret
		
817E  0000    	sum:	dw	0
8180  0000    	ssum:	dw	0
		
8182  3E1B    	liniz:	mvi	a,ESC
8184  328785  		sta	inbuf
8187  0E01    		mvi	c,1
8189  C3A282  		jmp	crlf
818C  3600    	linix:	mvi	m,0	; terminate buffer
818E  C3A282  		jmp	crlf
		
		; input a filename from console, allow backspace
		; returns C=num chars
8191          	linin:
8191  218785  		lxi	h,inbuf
8194  0E00    		mvi	c,0	; count chars
8196  CDE781  	lini0	call	conin
8199  FE0D    		cpi	CR
819B  28EF    		jrz	linix
819D  FE1B    		cpi	ESC
819F  28E1    		jrz	liniz
81A1  FE03    		cpi	CTLC	; cancel
81A3  37      		stc
81A4  C8      		rz
81A5  FE08    		cpi	BS
81A7  281C    		jrz	backup
81A9  FE20    		cpi	' '
81AB  3811    		jrc	chrnak
81AD  FE7F    		cpi	'~'+1
81AF  300D    		jrnc	chrnak
81B1  77      	chrok:	mov	m,a
81B2  23      		inx	h
81B3  0C      		inr	c
81B4  FABC81  		jm	chrovf	; 128 chars max
81B7  CDDC81  		call	conout
			; TODO: detect overflow...
81BA  18DA    		jr	lini0
81BC  2B      	chrovf:	dcx	h
81BD  0D      		dcr	c
81BE  3E07    	chrnak:	mvi	a,BEL
81C0  CDDC81  		call	conout
81C3  18D1    		jr	lini0
81C5          	backup:
81C5  79      		mov	a,c
81C6  B7      		ora	a
81C7  28CD    		jrz	lini0
81C9  0D      		dcr	c
81CA  2B      		dcx	h
81CB  3E08    		mvi	a,BS
81CD  CDDC81  		call	conout
81D0  3E20    		mvi	a,' '
81D2  CDDC81  		call	conout
81D5  3E08    		mvi	a,BS
81D7  CDDC81  		call	conout
81DA  18BA    		jr	lini0
		
81DC          	chrout:
81DC  F5      	conout:	push	psw
81DD  DBED    	cono0:	in	0edh
81DF  E620    		ani	00100000b
81E1  28FA    		jrz	cono0
81E3  F1      		pop	psw
81E4  D3E8    		out	0e8h
81E6  C9      		ret
		
81E7  DBED    	conin:	in	0edh
81E9  E601    		ani	00000001b
81EB  28FA    		jrz	conin
81ED  DBE8    		in	0e8h
81EF  E67F    		ani	01111111b
81F1  C9      		ret
		
81F2  1A      	msgout:	ldax	d
81F3  B7      		ora	a
81F4  C8      		rz
81F5  CDDC81  		call	conout
81F8  13      		inx	d
81F9  18F7    		jr	msgout
		
		; A=number to print
		; leading zeroes blanked - must preserve B
81FB          	decout:
81FB  C5      		push	b
81FC  0E00    		mvi	c,0
81FE  1664    		mvi	d,100
8200  CD2382  		call	divide
8203  160A    		mvi	d,10
8205  CD2382  		call	divide
8208  C630    		adi	'0'
820A  CDDC81  		call	chrout
820D  C1      		pop	b
820E  C9      		ret
		
820F          	hexout:
820F  F5      		push	psw
8210  07      		rlc
8211  07      		rlc
8212  07      		rlc
8213  07      		rlc
8214  CD1882  		call	hexdig
8217  F1      		pop	psw
8218  E60F    	hexdig:	ani	0fh
821A  C690    		adi	90h
821C  27      		daa
821D  CE40    		aci	40h
821F  27      		daa
8220  C3DC81  		jmp	chrout
		
8223  1E00    	divide:	mvi	e,0
8225  92      	div0:	sub	d
8226  1C      		inr	e
8227  30FC    		jrnc	div0
8229  82      		add	d
822A  1D      		dcr	e
822B  2005    		jrnz	div1
822D  CB41    		bit	0,c
822F  2001    		jrnz	div1
8231  C9      		ret
8232  CBC1    	div1:	setb	0,c
8234  F5      		push	psw	; remainder
8235  3E30    		mvi	a,'0'
8237  83      		add	e
8238  CDDC81  		call	chrout
823B  F1      		pop	psw	; remainder
823C  C9      		ret
		
823D          	parshx:
823D  1600    		mvi	d,0
823F  7E      	px0:	mov	a,m
8240  B7      		ora	a
8241  C8      		rz
8242  D630    		sui	'0'
8244  D8      		rc
8245  FE0A    		cpi	'9'-'0'+1
8247  380A    		jrc	px3
8249  D611    		sui	'A'-'0'
824B  E6DF    		ani	11011111b	; toupper
824D  FE06    		cpi	'F'-'A'+1
824F  3F      		cmc
8250  D8      		rc
8251  C60A    		adi	10
8253  5F      	px3:	mov	e,a
8254  7A      		mov	a,d
8255  87      		add	a
8256  D8      		rc
8257  87      		add	a
8258  D8      		rc
8259  87      		add	a
825A  D8      		rc
825B  87      		add	a
825C  D8      		rc
825D  83      		add	e	; no CY possible
825E  57      		mov	d,a
825F  23      		inx	h
8260  10DD    		djnz	px0
8262  B7      		ora	a
8263  C9      		ret
		
		; Parse a 8-bit (max) decimal number
		; HL=string, B=count
		; Returns D=number, CY=error
8264          	parsnm:
8264  110000  		lxi	d,0
8267  7E      	pd0:	mov	a,m
8268  B7      		ora	a
8269  C8      		rz
826A  FE30    		cpi	'0'
826C  D8      		rc
826D  FE3A    		cpi	'9'+1
826F  3F      		cmc
8270  D8      		rc
8271  E60F    		ani	0fh
8273  5F      		mov	e,a
8274  7A      		mov	a,d
8275  87      		add	a	; *2
8276  D8      		rc	
8277  87      		add	a	; *4
8278  D8      		rc	
8279  82      		add	d	; *5
827A  D8      		rc	
827B  87      		add	a	; *10
827C  D8      		rc	
827D  83      		add	e	;
827E  D8      		rc
827F  57      		mov	d,a
8280  23      		inx	h
8281  10E4    		djnz	pd0
8283  B7      		ora	a	; NC
8284  C9      		ret
		
		; flash ROM from HL to DE, 64 bytes at a time.
		; DE must be on a 64-byte boundary.
		; BC=num pages to flash
		; returns CY on error, else HL,DE at next 64 bytes
		; caller must set WE... and MEM1 as needed.
8285          	flash:
8285  C5      		push	b
8286  014000  		lxi	b,64
8289  EDB0    		ldir
			; -----
828B  2B      		dcx	h
828C  1B      		dcx	d	; last addr written...
			; wait for write cycle to begin...
			; TODO: timeout this loop?
828D  1A      	flash2:	ldax	d
828E  AE      		xra	m
828F  E680    		ani	10000000b	; bit7 is inverted when busy...
8291  28FA    		jrz	flash2
			; wait for write cycle to end...
			; TODO: timeout this loop?
8293  1A      	flash0:	ldax	d
8294  AE      		xra	m
8295  E680    		ani	10000000b	; bit7 is inverted when busy...
8297  20FA    		jrnz	flash0
8299  23      		inx	h
829A  13      		inx	d
			; done with page...
			;call	progress	; TODO: progress needed?
829B  C1      		pop	b
829C  0B      		dcx	b
829D  78      		mov	a,b
829E  B1      		ora	c
829F  20E4    		jrnz	flash
			;xra	a	; NC already
82A1  C9      		ret
		
82A2  3E0D    	crlf:	mvi	a,CR
82A4  CDDC81  		call	conout
82A7  3E0A    		mvi	a,LF
82A9  C3DC81  		jmp	conout
		
82AC  118784  	cserr:	lxi	d,csbad
82AF  CDF281  		call	msgout
82B2  218785  		lxi	h,inbuf
82B5  36FF    		mvi	m,0ffh
82B7  CDDF82  		call	getyn
82BA  3A8785  		lda	inbuf
82BD  B7      		ora	a	; NZ=no
82BE  201B    		jrnz	cserr9
82C0  210087  		lxi	h,last
82C3  54      		mov	d,h
82C4  5D      		mov	e,l
82C5  36FF    		mvi	m,0ffh
82C7  13      		inx	d
82C8  01FF07  		lxi	b,susize-1
82CB  EDB0    		ldir
82CD  210000  		lxi	h,0
82D0  220287  		shld	last+subase
82D3  3E01    		mvi	a,1
82D5  328485  		sta	dirty
82D8  C9      		ret
		
		; CY preserved if set...
82D9  E1      	nmerr9:	pop	h	; discard saved HL
82DA  D1      		pop	d	; discard saved DE
82DB  E1      	cserr9:	pop	h	; discard our ret adr
82DC  C37080  		jmp	xxchg	; return to monitor
		
		; DE=prompt prefix, HL=value location
		; get a Y/N, Wait for CR, allow BS.
		; Stores 0ffh for "no", 000h for "yes"
82DF          	getyn:
82DF  CDF281  		call	msgout
82E2  7E      		mov	a,m
82E3  B7      		ora	a
82E4  3E4E    		mvi	a,'N'
82E6  2002    		jrnz	getyn1
82E8  3E59    		mvi	a,'Y'
82EA  CDDC81  	getyn1:	call	conout
82ED  111085  		lxi	d,gpunn
82F0  CDF281  		call	msgout
82F3  CDE781  	getyn2:	call	conin
82F6  FE0D    		cpi	CR
82F8  CA9783  		jz	getlt1	; same processing
82FB  E65F    		ani	01011111b	; toupper
82FD  FE59    		cpi	'Y'
82FF  280B    		jrz	getyn0
8301  FE4E    		cpi	'N'
8303  2807    		jrz	getyn0
8305  3E07    		mvi	a,BEL
8307  CDDC81  		call	conout
830A  18E7    		jr	getyn2
830C  CDDC81  	getyn0:	call	conout
830F  D64E    		sui	'N'	;  0='N',  X='Y'
8311  D601    		sui	1	; CY='N', NC='Y'
8313  9F      		sbb	a	; FF='N', 00='Y'
8314  4F      		mov	c,a
8315  CDE781  	getyn5:	call	conin
8318  FE0D    		cpi	CR
831A  2875    		jrz	getlt3	; same processing
831C  FE08    		cpi	BS
831E  2807    		jrz	getyn4
8320  3E07    		mvi	a,BEL
8322  CDDC81  		call	conout
8325  18EE    		jr	getyn5
8327  CDDC81  	getyn4:	call	conout
832A  3E20    		mvi	a,' '
832C  CDDC81  		call	conout
832F  3E08    		mvi	a,BS
8331  CDDC81  		call	conout
8334  18BD    		jr	getyn2
		
		; DE=prompt prefix, HL=value location
		; get a single letter, toupper. Wait for CR, allow BS
		; TODO: allow value meaning "not defined"?
8336          	getlete:
8336  3E07    		mvi	a,BEL
8338  CDDC81  		call	conout
833B  CDA282  		call	crlf
833E          	getlet:
833E  ED538585		sded	curmsg
8342  CDF281  		call	msgout
8345  7E      		mov	a,m
8346  FEFF    		cpi	0ffh
8348  2803    		jrz	getlt6
834A  CDDC81  		call	conout
834D  111085  	getlt6:	lxi	d,gpunn
8350  CDF281  		call	msgout
8353  CDE781  	getlt2:	call	conin
8356  FE0D    		cpi	CR
8358  283D    		jrz	getlt1
835A  FE1B    		cpi	ESC
835C  2844    		jrz	getltx
835E  E65F    		ani	01011111b	; toupper
8360  FE42    		cpi	'B'	; 'A' means default, makes no sense here
8362  3837    		jrc	getlt0
8364  FE5B    		cpi	'Z'+1
8366  3033    		jrnc	getlt0
			; wait for CR, honor BS
8368  4F      		mov	c,a
8369  CDDC81  		call	conout
836C  CDE781  	getlt5:	call	conin
836F  FE0D    		cpi	CR
8371  281E    		jrz	getlt3
8373  FE08    		cpi	BS
8375  280B    		jrz	getlt4
8377  FE1B    		cpi	ESC
8379  2827    		jrz	getltx
837B  3E07    		mvi	a,BEL
837D  CDDC81  		call	conout
8380  18EA    		jr	getlt5
8382  CDDC81  	getlt4:	call	conout
8385  3E20    		mvi	a,' '
8387  CDDC81  		call	conout
838A  3E08    		mvi	a,BS
838C  CDDC81  		call	conout
838F  18C2    		jr	getlt2
8391  71      	getlt3:	mov	m,c
8392  3E01    		mvi	a,1
8394  328485  		sta	dirty
8397  CDA282  	getlt1:	call	crlf
839A  C9      		ret
839B  3E07    	getlt0:	mvi	a,BEL
839D  CDDC81  		call	conout
83A0  18B1    		jr	getlt2
		
		; delete setting, re-prompt
83A2  36FF    	getltx:	mvi	m,0ffh
83A4  3E01    		mvi	a,1
83A6  328485  		sta	dirty
83A9  ED5B8585		lded	curmsg
83AD  1887    		jr	getlete
		
		; DE=prompt prefix, HL=value location
83AF          	gethexe:
83AF  3E07    		mvi	a,BEL
83B1  CDDC81  		call	conout
83B4          	gethex:
83B4  D5      		push	d
83B5  E5      		push	h
83B6  CDF281  		call	msgout
83B9  7E      		mov	a,m
83BA  CD0F82  		call	hexout
83BD  111085  		lxi	d,gpunn
83C0  CDF281  		call	msgout
83C3  CD9181  		call	linin
83C6  DAD982  		jc	nmerr9
83C9  79      		mov	a,c
83CA  B7      		ora	a
83CB  2862    		jrz	getxit
83CD  3A8785  		lda	inbuf
83D0  FE1B    		cpi	ESC	; delete setting
83D2  2813    		jrz	gethxx
83D4  41      		mov	b,c
83D5  218785  		lxi	h,inbuf
83D8  CD3D82  		call	parshx
83DB  7A      		mov	a,d
83DC  E1      		pop	h
83DD  D1      		pop	d
83DE  38CF    		jrc	gethexe
83E0  77      		mov	m,a
83E1  3E01    		mvi	a,1
83E3  328485  		sta	dirty
83E6  C9      		ret
		
		; delete setting, re-prompt
83E7  E1      	gethxx:	pop	h
83E8  36FF    		mvi	m,0ffh
83EA  D1      		pop	d
83EB  18C2    		jr	gethexe
		
		; DE=prompt prefix, HL=value location
83ED          	getnume:
83ED  3E07    		mvi	a,BEL
83EF  CDDC81  		call	conout
83F2          	getnum:
83F2  D5      		push	d
83F3  E5      		push	h
83F4  CDF281  		call	msgout
83F7  7E      		mov	a,m
83F8  FEFF    		cpi	0ffh
83FA  2803    		jrz	getnm0
83FC  CDFB81  		call	decout
83FF  111085  	getnm0:	lxi	d,gpunn
8402  CDF281  		call	msgout
8405  CD9181  		call	linin
8408  DAD982  		jc	nmerr9
840B  79      		mov	a,c
840C  B7      		ora	a
840D  2820    		jrz	getxit
840F  3A8785  		lda	inbuf
8412  FE1B    		cpi	ESC	; delete setting
8414  2813    		jrz	getnmx
8416  41      		mov	b,c
8417  218785  		lxi	h,inbuf
841A  CD6482  		call	parsnm
841D  7A      		mov	a,d
841E  E1      		pop	h
841F  D1      		pop	d
8420  38CB    		jrc	getnume
8422  77      		mov	m,a
8423  3E01    		mvi	a,1
8425  328485  		sta	dirty
8428  C9      		ret
		
		; delete setting, re-prompt
8429  E1      	getnmx:	pop	h
842A  36FF    		mvi	m,0ffh
842C  D1      		pop	d
842D  18BE    		jr	getnume
		
842F  E1      	getxit:	pop	h
8430  D1      		pop	d
8431  C9      		ret
		
		; DE=prompt prefix, HL=value location
8432          	getstre:
8432  3E07    		mvi	a,BEL
8434  CDDC81  		call	conout
8437          	getstr:
8437  D5      		push	d
8438  E5      		push	h
8439  CDF281  		call	msgout
843C  7E      		mov	a,m
843D  FEFF    		cpi	0ffh
843F  2804    		jrz	getst0
8441  EB      		xchg
8442  CDF281  		call	msgout
8445  111085  	getst0:	lxi	d,gpunn
8448  CDF281  		call	msgout
844B  CD9181  		call	linin
844E  DAD982  		jc	nmerr9
8451  79      		mov	a,c
8452  B7      		ora	a
8453  28DA    		jrz	getxit
			; no error checking left?
8455  E1      		pop	h
8456  D1      		pop	d
			; TODO: are we guaranteed 'inbuf' is terminated?
8457  118785  		lxi	d,inbuf
845A  1A      		ldax	d
845B  FE1B    		cpi	ESC	; delete setting
845D  2809    		jrz	getstx
845F  1A      	getst2:	ldax	d
8460  B7      		ora	a
8461  2809    		jrz	getst1
8463  77      		mov	m,a
8464  23      		inx	h
8465  13      		inx	d
8466  18F7    		jr	getst2
8468  36FF    	getstx:	mvi	m,0ffh
846A  18C6    		jr	getstre
846C  3600    	getst1:	mvi	m,0
846E  3E01    		mvi	a,1
8470  328485  		sta	dirty
8473  C9      		ret
		
8474  6F6E6669	signon:	db	'onfig setup v'
      67207365
      74757020
      76
8481  302E32  		db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
8484  0D0A00  		db	CR,LF,0
		
8487  53657475	csbad:	db	'Setup bank checksum error. Clear setup data (',0
      70206261
      6E6B2063
      6865636B
      73756D20
      6572726F
      722E2043
      6C656172
      20736574
      75702064
      61746120
      2800
84B5  53657475	nochg:	db	'Setup not changed',CR,LF,0
      70206E6F
      74206368
      616E6765
      640D0A00
84C9  53617665	dochg:	db	'Save changes (',0
      20636861
      6E676573
      202800
84D8  53657475	saved:	db	'Setup data saved',CR,LF,0
      70206461
      74612073
      61766564
      0D0A00
84EB  53657475	failed:	db	'Setup flash failed, checksum error',CR,LF,0
      7020666C
      61736820
      6661696C
      65642C20
      63686563
      6B73756D
      20657272
      6F720D0A
      00
		
8510  293A2000	gpunn:	db	'): ',0
8514  5072696D	gpdev:	db	'Primary/Default boot device (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20646576
      69636520
      2800
8532  5072696D	gpuni:	db	'Primary/Default boot unit (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20756E69
      74202800
854E  5072696D	gpstr:	db	'Primary/Default boot string (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20737472
      696E6720
      2800
0000          	if not nofp
		endif
0000          	if not z180
		endif
856C  485F3720	dport:	db	'H_7 Port (FF=use SW1) (',0
      506F7274
      20284646
      3D757365
      20535731
      29202800
		
8584  00      	dirty:	db	0
8585  0000    	curmsg:	dw	0
		
8587          	inbuf:	ds	128	; input entry buffer
		
8607          		ds	128
		stack:	ds	0
		
8687  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FF
		
8700          	last:	end



Statistics:

     4	passes
     0	jr promotions
   178	symbols
  1536	bytes

   327	macro calls
  3984	macro bytes
     0	invented symbols
