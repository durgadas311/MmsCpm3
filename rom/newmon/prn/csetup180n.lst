		; Command module for SETUP
0002          	VERN	equ	02h
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
FFFF          	z180	equ	true
FFFF          	nofp	equ	true
		
			maclib	ram
**** ram.lib ****
**** csetup180n.asm ****
			maclib	setup
**** setup.lib ****
**** csetup180n.asm ****
FFFF          	if z180
			maclib	z180
**** z180.lib ****
**** csetup180n.asm ****
		else
		endif
		
000D          	CR	equ	13
000A          	LF	equ	10
0008          	BS	equ	8
0003          	CTLC	equ	3
0007          	BEL	equ	7
001B          	ESC	equ	27
		
FFFF          	if z180
0038          	mmu$cbr	equ	38h
0039          	mmu$bbr	equ	39h
003A          	mmu$cbar equ	3ah
		endif
		
8000          		org	8000h	; out of reach of ROM overlay...
8000  07      	first:	db	HIGH (last-first)	; +0: num pages
8001  80      		db	HIGH first		; +1: ORG page
8002  FF00    		db	255,0	; +2,+3: phy drv base, num
		
8004  C31D80  		jmp	init	; +4: init entry
8007  C31F80  		jmp	exec	; +7: action entry
		
800A  43      		db	'C'	; +10: Command letter
800B  FF      		db	-1	; +11: front panel key
800C  00      		db	0	; +12: port, 0 if variable
800D  FFFFFF  		db	11111111b,11111111b,11111111b	; +13: FP display
8010  436F6E66		db	'Config Setup',0	; +16: mnemonic string
      69672053
      65747570
      00
		
801D          	init:
801D  AF      		xra	a	; NC
801E  C9      		ret
		
801F          	exec:
801F  117B84  		lxi	d,signon
8022  CDF981  		call	msgout
8025  CD0681  		call	get$su	; get a copy of setup data
8028  DCB382  		cc	cserr	; offer to clear if checksum error
			; Primary/Default boot options
802B  111B85  		lxi	d,gpdev
802E  210487  		lxi	h,last+dpdev
8031  CD4583  		call	getlet
8034  113985  		lxi	d,gpuni
8037  210587  		lxi	h,last+dpuni
803A  CDF983  		call	getnum
803D  115585  		lxi	d,gpstr
8040  210687  		lxi	h,last+dpstr
8043  CD3E84  		call	getstr
0000          	if not nofp
		endif
			; Add-ons Installed
0000          	if not z180
		endif
		
8046  3E36    		mvi	a,'6'
8048  327485  		sta	dport+1
804B  117385  		lxi	d,dport
804E  210B88  		lxi	h,last+h67pt
8051  CDBB83  		call	gethex
		
8054  3E34    		mvi	a,'4'
8056  327485  		sta	dport+1
8059  117385  		lxi	d,dport
805C  210C88  		lxi	h,last+h47pt
805F  CDBB83  		call	gethex
		
8062  3E33    		mvi	a,'3'
8064  327485  		sta	dport+1
8067  117385  		lxi	d,dport
806A  210D88  		lxi	h,last+h37pt
806D  CDBB83  		call	gethex
		
0000          	if 0	; H17 is not configurable?
		endif
		
			; TODO: more setup?
8070  3A8B85  		lda	dirty
8073  B7      		ora	a
8074  C27E80  		jnz	mkchg
8077  11BC84  	xxchg:	lxi	d,nochg
807A  CDF981  		call	msgout
807D  C9      		ret
		
807E  11D084  	mkchg:	lxi	d,dochg
8081  218E85  		lxi	h,inbuf
8084  36FF    		mvi	m,0ffh
8086  CDE682  		call	getyn
8089  3A8E85  		lda	inbuf
808C  B7      		ora	a
808D  20E8    		jrnz	xxchg
808F  110087  		lxi	d,last
8092  01FE07  		lxi	b,sulen
8095  CD6281  		call	schksm
8098  2A8581  		lhld	sum
809B  228781  		shld	ssum
809E  F3      		di
FFFF          	if z180
809F  ED383A  		in0	a,mmu$cbar	; preserve monitor CBAR
80A2  F5      		push	psw
80A3  3A3620  		lda	ctl$F2
80A6  F5      		push	psw
80A7  0680    		mvi	b,1000$0000b
80A9  ED013A  		out0	b,mmu$cbar
80AC  0600    		mvi	b,0
80AE  ED0138  		out0	b,mmu$cbr
80B1  06F8    		mvi	b,0f8h
80B3  ED0139  		out0	b,mmu$bbr
80B6  F6A0    		ori	10100000b	; WE, no legacy ROM
80B8  D3F2    		out	0f2h
		else
		endif
80BA  210087  		lxi	h,last
80BD  110010  		lxi	d,suadr
80C0  012000  		lxi	b,susize/64
80C3  CD8C82  		call	flash
			;jrc	error	; never returned, actually
80C6  F1      		pop	psw
80C7  F5      		push	psw
80C8  E67F    		ani	01111111b	; WE off
80CA  D3F2    		out	0f2h
80CC  110010  		lxi	d,suadr
80CF  01FE07  		lxi	b,sulen
80D2  CD4381  		call	vchksm
80D5  2A8581  		lhld	sum
80D8  EB      		xchg
80D9  2A8781  		lhld	ssum
80DC  B7      		ora	a
80DD  ED52    		dsbc	d
80DF  201D    		jrnz	error
80E1  F1      		pop	psw
80E2  D3F2    		out	0f2h
FFFF          	if z180
80E4  AF      		xra	a
80E5  D339    		out	mmu$bbr
80E7  F1      		pop	psw
80E8  ED393A  		out0	a,mmu$cbar
		endif
80EB  FB      		ei
80EC  11DF84  		lxi	d,saved
80EF  CDF981  		call	msgout
			; Update monitor copy
80F2  210087  		lxi	h,last
80F5  1100F8  		lxi	d,susave
80F8  010F01  		lxi	b,sumax
80FB  EDB0    		ldir
80FD  C9      		ret
		
		; PSW is on stack...
80FE  F1      	error:	pop	psw
80FF  11F284  		lxi	d,failed
8102  CDF981  		call	msgout
8105  C9      		ret	; what else can we do?
		
8106  F3      	get$su:	di
FFFF          	if z180
8107  ED383A  		in0	a,mmu$cbar	; preserve monitor CBAR
810A  F5      		push	psw
810B  3A3620  		lda	ctl$F2
810E  F5      		push	psw
810F  0680    		mvi	b,1000$0000b
8111  ED013A  		out0	b,mmu$cbar
8114  0600    		mvi	b,0
8116  ED0138  		out0	b,mmu$cbr
8119  06F8    		mvi	b,0f8h
811B  ED0139  		out0	b,mmu$bbr
811E  F6A0    		ori	10100000b	; WE, no legacy ROM
8120  D3F2    		out	0f2h
8122  210010  		lxi	h,suadr
8125  110087  		lxi	d,last
8128  010008  		lxi	b,susize
812B  EDB0    		ldir
812D  F1      		pop	psw
812E  D3F2    		out	0f2h
8130  AF      		xra	a
8131  ED3939  		out0	a,mmu$bbr
8134  F1      		pop	psw
8135  ED393A  		out0	a,mmu$cbar
		else
		endif
8138  FB      		ei
8139  110087  		lxi	d,last
813C  01FE07  		lxi	b,sulen
813F  CD4381  		call	vchksm
8142  C9      		ret	; CY=checksum error
		
		; DE=code start, BC=length
		; Returns CY on error
8143  210000  	vchksm:	lxi	h,0
8146  228581  		shld	sum
8149  1A      	vchk0:	ldax	d
814A  CD7C81  		call	sum1
814D  13      		inx	d
814E  0B      		dcx	b
814F  78      		mov	a,b
8150  B1      		ora	c
8151  20F6    		jrnz	vchk0
8153  218581  		lxi	h,sum
8156  0602    		mvi	b,2
8158  1A      	vchk2:	ldax	d
8159  BE      		cmp	m
815A  37      		stc
815B  C0      		rnz
815C  13      		inx	d
815D  23      		inx	h
815E  10F8    		djnz	vchk2
8160  AF      		xra	a	; NC
8161  C9      		ret
		
		; DE=code start, BC=length
		; Sets checksum after code
8162  210000  	schksm:	lxi	h,0
8165  228581  		shld	sum
8168  1A      	schk0:	ldax	d
8169  CD7C81  		call	sum1
816C  13      		inx	d
816D  0B      		dcx	b
816E  78      		mov	a,b
816F  B1      		ora	c
8170  20F6    		jrnz	schk0
8172  218581  		lxi	h,sum
8175  7E      		mov	a,m
8176  12      		stax	d
8177  23      		inx	h
8178  13      		inx	d
8179  7E      		mov	a,m
817A  12      		stax	d
817B  C9      		ret
		
817C  218581  	sum1:	lxi	h,sum
817F  86      		add	m
8180  77      		mov	m,a
8181  D0      		rnc
8182  23      		inx	h
8183  34      		inr	m
8184  C9      		ret
		
8185  0000    	sum:	dw	0
8187  0000    	ssum:	dw	0
		
8189  3E1B    	liniz:	mvi	a,ESC
818B  328E85  		sta	inbuf
818E  0E01    		mvi	c,1
8190  C3A982  		jmp	crlf
8193  3600    	linix:	mvi	m,0	; terminate buffer
8195  C3A982  		jmp	crlf
		
		; input a filename from console, allow backspace
		; returns C=num chars
8198          	linin:
8198  218E85  		lxi	h,inbuf
819B  0E00    		mvi	c,0	; count chars
819D  CDEE81  	lini0	call	conin
81A0  FE0D    		cpi	CR
81A2  28EF    		jrz	linix
81A4  FE1B    		cpi	ESC
81A6  28E1    		jrz	liniz
81A8  FE03    		cpi	CTLC	; cancel
81AA  37      		stc
81AB  C8      		rz
81AC  FE08    		cpi	BS
81AE  281C    		jrz	backup
81B0  FE20    		cpi	' '
81B2  3811    		jrc	chrnak
81B4  FE7F    		cpi	'~'+1
81B6  300D    		jrnc	chrnak
81B8  77      	chrok:	mov	m,a
81B9  23      		inx	h
81BA  0C      		inr	c
81BB  FAC381  		jm	chrovf	; 128 chars max
81BE  CDE381  		call	conout
			; TODO: detect overflow...
81C1  18DA    		jr	lini0
81C3  2B      	chrovf:	dcx	h
81C4  0D      		dcr	c
81C5  3E07    	chrnak:	mvi	a,BEL
81C7  CDE381  		call	conout
81CA  18D1    		jr	lini0
81CC          	backup:
81CC  79      		mov	a,c
81CD  B7      		ora	a
81CE  28CD    		jrz	lini0
81D0  0D      		dcr	c
81D1  2B      		dcx	h
81D2  3E08    		mvi	a,BS
81D4  CDE381  		call	conout
81D7  3E20    		mvi	a,' '
81D9  CDE381  		call	conout
81DC  3E08    		mvi	a,BS
81DE  CDE381  		call	conout
81E1  18BA    		jr	lini0
		
81E3          	chrout:
81E3  F5      	conout:	push	psw
81E4  DBED    	cono0:	in	0edh
81E6  E620    		ani	00100000b
81E8  28FA    		jrz	cono0
81EA  F1      		pop	psw
81EB  D3E8    		out	0e8h
81ED  C9      		ret
		
81EE  DBED    	conin:	in	0edh
81F0  E601    		ani	00000001b
81F2  28FA    		jrz	conin
81F4  DBE8    		in	0e8h
81F6  E67F    		ani	01111111b
81F8  C9      		ret
		
81F9  1A      	msgout:	ldax	d
81FA  B7      		ora	a
81FB  C8      		rz
81FC  CDE381  		call	conout
81FF  13      		inx	d
8200  18F7    		jr	msgout
		
		; A=number to print
		; leading zeroes blanked - must preserve B
8202          	decout:
8202  C5      		push	b
8203  0E00    		mvi	c,0
8205  1664    		mvi	d,100
8207  CD2A82  		call	divide
820A  160A    		mvi	d,10
820C  CD2A82  		call	divide
820F  C630    		adi	'0'
8211  CDE381  		call	chrout
8214  C1      		pop	b
8215  C9      		ret
		
8216          	hexout:
8216  F5      		push	psw
8217  07      		rlc
8218  07      		rlc
8219  07      		rlc
821A  07      		rlc
821B  CD1F82  		call	hexdig
821E  F1      		pop	psw
821F  E60F    	hexdig:	ani	0fh
8221  C690    		adi	90h
8223  27      		daa
8224  CE40    		aci	40h
8226  27      		daa
8227  C3E381  		jmp	chrout
		
822A  1E00    	divide:	mvi	e,0
822C  92      	div0:	sub	d
822D  1C      		inr	e
822E  30FC    		jrnc	div0
8230  82      		add	d
8231  1D      		dcr	e
8232  2005    		jrnz	div1
8234  CB41    		bit	0,c
8236  2001    		jrnz	div1
8238  C9      		ret
8239  CBC1    	div1:	setb	0,c
823B  F5      		push	psw	; remainder
823C  3E30    		mvi	a,'0'
823E  83      		add	e
823F  CDE381  		call	chrout
8242  F1      		pop	psw	; remainder
8243  C9      		ret
		
8244          	parshx:
8244  1600    		mvi	d,0
8246  7E      	px0:	mov	a,m
8247  B7      		ora	a
8248  C8      		rz
8249  D630    		sui	'0'
824B  D8      		rc
824C  FE0A    		cpi	'9'-'0'+1
824E  380A    		jrc	px3
8250  D611    		sui	'A'-'0'
8252  E6DF    		ani	11011111b	; toupper
8254  FE06    		cpi	'F'-'A'+1
8256  3F      		cmc
8257  D8      		rc
8258  C60A    		adi	10
825A  5F      	px3:	mov	e,a
825B  7A      		mov	a,d
825C  87      		add	a
825D  D8      		rc
825E  87      		add	a
825F  D8      		rc
8260  87      		add	a
8261  D8      		rc
8262  87      		add	a
8263  D8      		rc
8264  83      		add	e	; no CY possible
8265  57      		mov	d,a
8266  23      		inx	h
8267  10DD    		djnz	px0
8269  B7      		ora	a
826A  C9      		ret
		
		; Parse a 8-bit (max) decimal number
		; HL=string, B=count
		; Returns D=number, CY=error
826B          	parsnm:
826B  110000  		lxi	d,0
826E  7E      	pd0:	mov	a,m
826F  B7      		ora	a
8270  C8      		rz
8271  FE30    		cpi	'0'
8273  D8      		rc
8274  FE3A    		cpi	'9'+1
8276  3F      		cmc
8277  D8      		rc
8278  E60F    		ani	0fh
827A  5F      		mov	e,a
827B  7A      		mov	a,d
827C  87      		add	a	; *2
827D  D8      		rc	
827E  87      		add	a	; *4
827F  D8      		rc	
8280  82      		add	d	; *5
8281  D8      		rc	
8282  87      		add	a	; *10
8283  D8      		rc	
8284  83      		add	e	;
8285  D8      		rc
8286  57      		mov	d,a
8287  23      		inx	h
8288  10E4    		djnz	pd0
828A  B7      		ora	a	; NC
828B  C9      		ret
		
		; flash ROM from HL to DE, 64 bytes at a time.
		; DE must be on a 64-byte boundary.
		; BC=num pages to flash
		; returns CY on error, else HL,DE at next 64 bytes
		; caller must set WE... and MEM1 as needed.
828C          	flash:
828C  C5      		push	b
828D  014000  		lxi	b,64
8290  EDB0    		ldir
			; -----
8292  2B      		dcx	h
8293  1B      		dcx	d	; last addr written...
			; wait for write cycle to begin...
			; TODO: timeout this loop?
8294  1A      	flash2:	ldax	d
8295  AE      		xra	m
8296  E680    		ani	10000000b	; bit7 is inverted when busy...
8298  28FA    		jrz	flash2
			; wait for write cycle to end...
			; TODO: timeout this loop?
829A  1A      	flash0:	ldax	d
829B  AE      		xra	m
829C  E680    		ani	10000000b	; bit7 is inverted when busy...
829E  20FA    		jrnz	flash0
82A0  23      		inx	h
82A1  13      		inx	d
			; done with page...
			;call	progress	; TODO: progress needed?
82A2  C1      		pop	b
82A3  0B      		dcx	b
82A4  78      		mov	a,b
82A5  B1      		ora	c
82A6  20E4    		jrnz	flash
			;xra	a	; NC already
82A8  C9      		ret
		
82A9  3E0D    	crlf:	mvi	a,CR
82AB  CDE381  		call	conout
82AE  3E0A    		mvi	a,LF
82B0  C3E381  		jmp	conout
		
82B3  118E84  	cserr:	lxi	d,csbad
82B6  CDF981  		call	msgout
82B9  218E85  		lxi	h,inbuf
82BC  36FF    		mvi	m,0ffh
82BE  CDE682  		call	getyn
82C1  3A8E85  		lda	inbuf
82C4  B7      		ora	a	; NZ=no
82C5  201B    		jrnz	cserr9
82C7  210087  		lxi	h,last
82CA  54      		mov	d,h
82CB  5D      		mov	e,l
82CC  36FF    		mvi	m,0ffh
82CE  13      		inx	d
82CF  01FF07  		lxi	b,susize-1
82D2  EDB0    		ldir
82D4  210000  		lxi	h,0
82D7  220287  		shld	last+subase
82DA  3E01    		mvi	a,1
82DC  328B85  		sta	dirty
82DF  C9      		ret
		
		; CY preserved if set...
82E0  E1      	nmerr9:	pop	h	; discard saved HL
82E1  D1      		pop	d	; discard saved DE
82E2  E1      	cserr9:	pop	h	; discard our ret adr
82E3  C37780  		jmp	xxchg	; return to monitor
		
		; DE=prompt prefix, HL=value location
		; get a Y/N, Wait for CR, allow BS.
		; Stores 0ffh for "no", 000h for "yes"
82E6          	getyn:
82E6  CDF981  		call	msgout
82E9  7E      		mov	a,m
82EA  B7      		ora	a
82EB  3E4E    		mvi	a,'N'
82ED  2002    		jrnz	getyn1
82EF  3E59    		mvi	a,'Y'
82F1  CDE381  	getyn1:	call	conout
82F4  111785  		lxi	d,gpunn
82F7  CDF981  		call	msgout
82FA  CDEE81  	getyn2:	call	conin
82FD  FE0D    		cpi	CR
82FF  CA9E83  		jz	getlt1	; same processing
8302  E65F    		ani	01011111b	; toupper
8304  FE59    		cpi	'Y'
8306  280B    		jrz	getyn0
8308  FE4E    		cpi	'N'
830A  2807    		jrz	getyn0
830C  3E07    		mvi	a,BEL
830E  CDE381  		call	conout
8311  18E7    		jr	getyn2
8313  CDE381  	getyn0:	call	conout
8316  D64E    		sui	'N'	;  0='N',  X='Y'
8318  D601    		sui	1	; CY='N', NC='Y'
831A  9F      		sbb	a	; FF='N', 00='Y'
831B  4F      		mov	c,a
831C  CDEE81  	getyn5:	call	conin
831F  FE0D    		cpi	CR
8321  2875    		jrz	getlt3	; same processing
8323  FE08    		cpi	BS
8325  2807    		jrz	getyn4
8327  3E07    		mvi	a,BEL
8329  CDE381  		call	conout
832C  18EE    		jr	getyn5
832E  CDE381  	getyn4:	call	conout
8331  3E20    		mvi	a,' '
8333  CDE381  		call	conout
8336  3E08    		mvi	a,BS
8338  CDE381  		call	conout
833B  18BD    		jr	getyn2
		
		; DE=prompt prefix, HL=value location
		; get a single letter, toupper. Wait for CR, allow BS
		; TODO: allow value meaning "not defined"?
833D          	getlete:
833D  3E07    		mvi	a,BEL
833F  CDE381  		call	conout
8342  CDA982  		call	crlf
8345          	getlet:
8345  ED538C85		sded	curmsg
8349  CDF981  		call	msgout
834C  7E      		mov	a,m
834D  FEFF    		cpi	0ffh
834F  2803    		jrz	getlt6
8351  CDE381  		call	conout
8354  111785  	getlt6:	lxi	d,gpunn
8357  CDF981  		call	msgout
835A  CDEE81  	getlt2:	call	conin
835D  FE0D    		cpi	CR
835F  283D    		jrz	getlt1
8361  FE1B    		cpi	ESC
8363  2844    		jrz	getltx
8365  E65F    		ani	01011111b	; toupper
8367  FE42    		cpi	'B'	; 'A' means default, makes no sense here
8369  3837    		jrc	getlt0
836B  FE5B    		cpi	'Z'+1
836D  3033    		jrnc	getlt0
			; wait for CR, honor BS
836F  4F      		mov	c,a
8370  CDE381  		call	conout
8373  CDEE81  	getlt5:	call	conin
8376  FE0D    		cpi	CR
8378  281E    		jrz	getlt3
837A  FE08    		cpi	BS
837C  280B    		jrz	getlt4
837E  FE1B    		cpi	ESC
8380  2827    		jrz	getltx
8382  3E07    		mvi	a,BEL
8384  CDE381  		call	conout
8387  18EA    		jr	getlt5
8389  CDE381  	getlt4:	call	conout
838C  3E20    		mvi	a,' '
838E  CDE381  		call	conout
8391  3E08    		mvi	a,BS
8393  CDE381  		call	conout
8396  18C2    		jr	getlt2
8398  71      	getlt3:	mov	m,c
8399  3E01    		mvi	a,1
839B  328B85  		sta	dirty
839E  CDA982  	getlt1:	call	crlf
83A1  C9      		ret
83A2  3E07    	getlt0:	mvi	a,BEL
83A4  CDE381  		call	conout
83A7  18B1    		jr	getlt2
		
		; delete setting, re-prompt
83A9  36FF    	getltx:	mvi	m,0ffh
83AB  3E01    		mvi	a,1
83AD  328B85  		sta	dirty
83B0  ED5B8C85		lded	curmsg
83B4  1887    		jr	getlete
		
		; DE=prompt prefix, HL=value location
83B6          	gethexe:
83B6  3E07    		mvi	a,BEL
83B8  CDE381  		call	conout
83BB          	gethex:
83BB  D5      		push	d
83BC  E5      		push	h
83BD  CDF981  		call	msgout
83C0  7E      		mov	a,m
83C1  CD1682  		call	hexout
83C4  111785  		lxi	d,gpunn
83C7  CDF981  		call	msgout
83CA  CD9881  		call	linin
83CD  DAE082  		jc	nmerr9
83D0  79      		mov	a,c
83D1  B7      		ora	a
83D2  2862    		jrz	getxit
83D4  3A8E85  		lda	inbuf
83D7  FE1B    		cpi	ESC	; delete setting
83D9  2813    		jrz	gethxx
83DB  41      		mov	b,c
83DC  218E85  		lxi	h,inbuf
83DF  CD4482  		call	parshx
83E2  7A      		mov	a,d
83E3  E1      		pop	h
83E4  D1      		pop	d
83E5  38CF    		jrc	gethexe
83E7  77      		mov	m,a
83E8  3E01    		mvi	a,1
83EA  328B85  		sta	dirty
83ED  C9      		ret
		
		; delete setting, re-prompt
83EE  E1      	gethxx:	pop	h
83EF  36FF    		mvi	m,0ffh
83F1  D1      		pop	d
83F2  18C2    		jr	gethexe
		
		; DE=prompt prefix, HL=value location
83F4          	getnume:
83F4  3E07    		mvi	a,BEL
83F6  CDE381  		call	conout
83F9          	getnum:
83F9  D5      		push	d
83FA  E5      		push	h
83FB  CDF981  		call	msgout
83FE  7E      		mov	a,m
83FF  FEFF    		cpi	0ffh
8401  2803    		jrz	getnm0
8403  CD0282  		call	decout
8406  111785  	getnm0:	lxi	d,gpunn
8409  CDF981  		call	msgout
840C  CD9881  		call	linin
840F  DAE082  		jc	nmerr9
8412  79      		mov	a,c
8413  B7      		ora	a
8414  2820    		jrz	getxit
8416  3A8E85  		lda	inbuf
8419  FE1B    		cpi	ESC	; delete setting
841B  2813    		jrz	getnmx
841D  41      		mov	b,c
841E  218E85  		lxi	h,inbuf
8421  CD6B82  		call	parsnm
8424  7A      		mov	a,d
8425  E1      		pop	h
8426  D1      		pop	d
8427  38CB    		jrc	getnume
8429  77      		mov	m,a
842A  3E01    		mvi	a,1
842C  328B85  		sta	dirty
842F  C9      		ret
		
		; delete setting, re-prompt
8430  E1      	getnmx:	pop	h
8431  36FF    		mvi	m,0ffh
8433  D1      		pop	d
8434  18BE    		jr	getnume
		
8436  E1      	getxit:	pop	h
8437  D1      		pop	d
8438  C9      		ret
		
		; DE=prompt prefix, HL=value location
8439          	getstre:
8439  3E07    		mvi	a,BEL
843B  CDE381  		call	conout
843E          	getstr:
843E  D5      		push	d
843F  E5      		push	h
8440  CDF981  		call	msgout
8443  7E      		mov	a,m
8444  FEFF    		cpi	0ffh
8446  2804    		jrz	getst0
8448  EB      		xchg
8449  CDF981  		call	msgout
844C  111785  	getst0:	lxi	d,gpunn
844F  CDF981  		call	msgout
8452  CD9881  		call	linin
8455  DAE082  		jc	nmerr9
8458  79      		mov	a,c
8459  B7      		ora	a
845A  28DA    		jrz	getxit
			; no error checking left?
845C  E1      		pop	h
845D  D1      		pop	d
			; TODO: are we guaranteed 'inbuf' is terminated?
845E  118E85  		lxi	d,inbuf
8461  1A      		ldax	d
8462  FE1B    		cpi	ESC	; delete setting
8464  2809    		jrz	getstx
8466  1A      	getst2:	ldax	d
8467  B7      		ora	a
8468  2809    		jrz	getst1
846A  77      		mov	m,a
846B  23      		inx	h
846C  13      		inx	d
846D  18F7    		jr	getst2
846F  36FF    	getstx:	mvi	m,0ffh
8471  18C6    		jr	getstre
8473  3600    	getst1:	mvi	m,0
8475  3E01    		mvi	a,1
8477  328B85  		sta	dirty
847A  C9      		ret
		
847B  6F6E6669	signon:	db	'onfig setup v'
      67207365
      74757020
      76
8488  302E32  		db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
848B  0D0A00  		db	CR,LF,0
		
848E  53657475	csbad:	db	'Setup bank checksum error. Clear setup data (',0
      70206261
      6E6B2063
      6865636B
      73756D20
      6572726F
      722E2043
      6C656172
      20736574
      75702064
      61746120
      2800
84BC  53657475	nochg:	db	'Setup not changed',CR,LF,0
      70206E6F
      74206368
      616E6765
      640D0A00
84D0  53617665	dochg:	db	'Save changes (',0
      20636861
      6E676573
      202800
84DF  53657475	saved:	db	'Setup data saved',CR,LF,0
      70206461
      74612073
      61766564
      0D0A00
84F2  53657475	failed:	db	'Setup flash failed, checksum error',CR,LF,0
      7020666C
      61736820
      6661696C
      65642C20
      63686563
      6B73756D
      20657272
      6F720D0A
      00
		
8517  293A2000	gpunn:	db	'): ',0
851B  5072696D	gpdev:	db	'Primary/Default boot device (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20646576
      69636520
      2800
8539  5072696D	gpuni:	db	'Primary/Default boot unit (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20756E69
      74202800
8555  5072696D	gpstr:	db	'Primary/Default boot string (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20737472
      696E6720
      2800
0000          	if not nofp
		endif
0000          	if not z180
		endif
8573  485F3720	dport:	db	'H_7 Port (FF=use SW1) (',0
      506F7274
      20284646
      3D757365
      20535731
      29202800
		
858B  00      	dirty:	db	0
858C  0000    	curmsg:	dw	0
		
858E          	inbuf:	ds	128	; input entry buffer
		
860E          		ds	128
		stack:	ds	0
		
868E  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFF
		
8700          	last:	end



Statistics:

     4	passes
     0	jr promotions
   179	symbols
  1536	bytes

   320	macro calls
  3984	macro bytes
     0	invented symbols
