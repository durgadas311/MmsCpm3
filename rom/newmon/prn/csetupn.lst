		; Command module for SETUP
0002          	VERN	equ	02h
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
0000          	z180	equ	false
FFFF          	nofp	equ	true
		
			maclib	ram
**** ram.lib ****
**** csetupn.asm ****
			maclib	setup
**** setup.lib ****
**** csetupn.asm ****
0000          	 if z180
		 else
			maclib	z80
**** z80.lib ****
**** csetupn.asm ****
		 endif
		
000D          	CR	equ	13
000A          	LF	equ	10
0008          	BS	equ	8
0003          	CTLC	equ	3
0007          	BEL	equ	7
001B          	ESC	equ	27
		
0000          	 if z180
		 endif
		
8000          		org	8000h	; out of reach of ROM overlay...
8000  07      	first:	db	HIGH (last-first)	; +0: num pages
8001  80      		db	HIGH first		; +1: ORG page
8002  FF00    		db	255,0	; +2,+3: phy drv base, num
		
8004  C31D80  		jmp	init	; +4: init entry
8007  C31F80  		jmp	exec	; +7: action entry
		
800A  43      		db	'C'	; +10: Command letter
800B  FF      		db	-1	; +11: front panel key
800C  00      		db	0	; +12: port, 0 if variable
800D  FFFFFF  		db	11111111b,11111111b,11111111b	; +13: FP display
8010  436F6E66		db	'Config Setup',0	; +16: mnemonic string
      69672053
      65747570
      00
		
801D          	init:
801D  AF      		xra	a	; NC
801E  C9      		ret
		
801F          	exec:
801F  116B84  		lxi	d,signon
8022  CDDA81  		call	msgout
8025  CD0081  		call	get$su	; get a copy of setup data
8028  DC9482  		cc	cserr	; offer to clear if checksum error
			; Primary/Default boot options
802B  110B85  		lxi	d,gpdev
802E  210487  		lxi	h,last+dpdev
8031  CD2683  		call	getlet
8034  112985  		lxi	d,gpuni
8037  210587  		lxi	h,last+dpuni
803A  CDDF83  		call	getnum
803D  114585  		lxi	d,gpstr
8040  210687  		lxi	h,last+dpstr
8043  CD2984  		call	getstr
0000          	 if not nofp
		 endif
			; Add-ons Installed
FFFF          	 if not z180
8046  116385  		lxi	d,g512k
8049  210888  		lxi	h,last+m512k
804C  CDC782  		call	getyn
		 endif
		
804F  3E36    		mvi	a,'6'
8051  327C85  		sta	dport+1
8054  117B85  		lxi	d,dport
8057  210B88  		lxi	h,last+h67pt
805A  CD9C83  		call	gethex
		
805D  3E34    		mvi	a,'4'
805F  327C85  		sta	dport+1
8062  117B85  		lxi	d,dport
8065  210C88  		lxi	h,last+h47pt
8068  CD9C83  		call	gethex
		
806B  3E33    		mvi	a,'3'
806D  327C85  		sta	dport+1
8070  117B85  		lxi	d,dport
8073  210D88  		lxi	h,last+h37pt
8076  CD9C83  		call	gethex
		
0000          	 if 0	; H17 is not configurable?
		 endif
8079  119385  		lxi	d,vport
807C  211088  		lxi	h,last+vdipt
807F  CD9C83  		call	gethex
0000          	 if z180
		 endif
		
			; TODO: more setup?
8082  3AAA85  		lda	dirty
8085  B7      		ora	a
8086  C29080  		jnz	mkchg
8089  11AC84  	xxchg:	lxi	d,nochg
808C  CDDA81  		call	msgout
808F  C9      		ret
		
8090  11C084  	mkchg:	lxi	d,dochg
8093  21AD85  		lxi	h,inbuf
8096  36FF    		mvi	m,0ffh
8098  CDC782  		call	getyn
809B  3AAD85  		lda	inbuf
809E  B7      		ora	a
809F  20E8    		jrnz	xxchg
80A1  110087  		lxi	d,last
80A4  01FE07  		lxi	b,sulen
80A7  CD4381  		call	schksm
80AA  2A6681  		lhld	sum
80AD  226881  		shld	ssum
80B0  F3      		di
0000          	 if z180
		 else
80B1  3A3620  		lda	ctl$F2
80B4  F5      		push	psw
80B5  E6DF    		ani	11011111b	; ORG0 off
80B7  F688    		ori	10001000b	; WE, MEM1
80B9  D3F2    		out	0f2h
		 endif
80BB  210087  		lxi	h,last
80BE  110010  		lxi	d,suadr
80C1  012000  		lxi	b,susize/64
80C4  CD6D82  		call	flash
			;jrc	error	; never returned, actually
80C7  F1      		pop	psw
80C8  F5      		push	psw
80C9  E67F    		ani	01111111b	; WE off
80CB  D3F2    		out	0f2h
80CD  110010  		lxi	d,suadr
80D0  01FE07  		lxi	b,sulen
80D3  CD2481  		call	vchksm
80D6  2A6681  		lhld	sum
80D9  EB      		xchg
80DA  2A6881  		lhld	ssum
80DD  B7      		ora	a
80DE  ED52    		dsbc	d
80E0  2016    		jrnz	error
80E2  F1      		pop	psw
80E3  D3F2    		out	0f2h
0000          	 if z180
		 endif
80E5  FB      		ei
80E6  11CF84  		lxi	d,saved
80E9  CDDA81  		call	msgout
			; Update monitor copy
80EC  210087  		lxi	h,last
80EF  1100F8  		lxi	d,susave
80F2  011101  		lxi	b,sumax
80F5  EDB0    		ldir
80F7  C9      		ret
		
		; PSW is on stack...
80F8  F1      	error:	pop	psw
80F9  11E284  		lxi	d,failed
80FC  CDDA81  		call	msgout
80FF  C9      		ret	; what else can we do?
		
8100  F3      	get$su:	di
0000          	 if z180
		 else
8101  3A3620  		lda	ctl$F2
8104  F5      		push	psw
8105  E6DF    		ani	11011111b	; ORG0 off
8107  F608    		ori	00001000b	; MEM1
8109  D3F2    		out	0f2h
810B  210010  		lxi	h,suadr
810E  110087  		lxi	d,last
8111  010008  		lxi	b,susize
8114  EDB0    		ldir
8116  F1      		pop	psw
8117  D3F2    		out	0f2h
		 endif
8119  FB      		ei
811A  110087  		lxi	d,last
811D  01FE07  		lxi	b,sulen
8120  CD2481  		call	vchksm
8123  C9      		ret	; CY=checksum error
		
		; DE=code start, BC=length
		; Returns CY on error
8124  210000  	vchksm:	lxi	h,0
8127  226681  		shld	sum
812A  1A      	vchk0:	ldax	d
812B  CD5D81  		call	sum1
812E  13      		inx	d
812F  0B      		dcx	b
8130  78      		mov	a,b
8131  B1      		ora	c
8132  20F6    		jrnz	vchk0
8134  216681  		lxi	h,sum
8137  0602    		mvi	b,2
8139  1A      	vchk2:	ldax	d
813A  BE      		cmp	m
813B  37      		stc
813C  C0      		rnz
813D  13      		inx	d
813E  23      		inx	h
813F  10F8    		djnz	vchk2
8141  AF      		xra	a	; NC
8142  C9      		ret
		
		; DE=code start, BC=length
		; Sets checksum after code
8143  210000  	schksm:	lxi	h,0
8146  226681  		shld	sum
8149  1A      	schk0:	ldax	d
814A  CD5D81  		call	sum1
814D  13      		inx	d
814E  0B      		dcx	b
814F  78      		mov	a,b
8150  B1      		ora	c
8151  20F6    		jrnz	schk0
8153  216681  		lxi	h,sum
8156  7E      		mov	a,m
8157  12      		stax	d
8158  23      		inx	h
8159  13      		inx	d
815A  7E      		mov	a,m
815B  12      		stax	d
815C  C9      		ret
		
815D  216681  	sum1:	lxi	h,sum
8160  86      		add	m
8161  77      		mov	m,a
8162  D0      		rnc
8163  23      		inx	h
8164  34      		inr	m
8165  C9      		ret
		
8166  0000    	sum:	dw	0
8168  0000    	ssum:	dw	0
		
816A  3E1B    	liniz:	mvi	a,ESC
816C  32AD85  		sta	inbuf
816F  0E01    		mvi	c,1
8171  C38A82  		jmp	crlf
8174  3600    	linix:	mvi	m,0	; terminate buffer
8176  C38A82  		jmp	crlf
		
		; input a filename from console, allow backspace
		; returns C=num chars
8179          	linin:
8179  21AD85  		lxi	h,inbuf
817C  0E00    		mvi	c,0	; count chars
817E  CDCF81  	lini0	call	conin
8181  FE0D    		cpi	CR
8183  28EF    		jrz	linix
8185  FE1B    		cpi	ESC
8187  28E1    		jrz	liniz
8189  FE03    		cpi	CTLC	; cancel
818B  37      		stc
818C  C8      		rz
818D  FE08    		cpi	BS
818F  281C    		jrz	backup
8191  FE20    		cpi	' '
8193  3811    		jrc	chrnak
8195  FE7F    		cpi	'~'+1
8197  300D    		jrnc	chrnak
8199  77      	chrok:	mov	m,a
819A  23      		inx	h
819B  0C      		inr	c
819C  FAA481  		jm	chrovf	; 128 chars max
819F  CDC481  		call	conout
			; TODO: detect overflow...
81A2  18DA    		jr	lini0
81A4  2B      	chrovf:	dcx	h
81A5  0D      		dcr	c
81A6  3E07    	chrnak:	mvi	a,BEL
81A8  CDC481  		call	conout
81AB  18D1    		jr	lini0
81AD          	backup:
81AD  79      		mov	a,c
81AE  B7      		ora	a
81AF  28CD    		jrz	lini0
81B1  0D      		dcr	c
81B2  2B      		dcx	h
81B3  3E08    		mvi	a,BS
81B5  CDC481  		call	conout
81B8  3E20    		mvi	a,' '
81BA  CDC481  		call	conout
81BD  3E08    		mvi	a,BS
81BF  CDC481  		call	conout
81C2  18BA    		jr	lini0
		
81C4          	chrout:
81C4  F5      	conout:	push	psw
81C5  DBED    	cono0:	in	0edh
81C7  E620    		ani	00100000b
81C9  28FA    		jrz	cono0
81CB  F1      		pop	psw
81CC  D3E8    		out	0e8h
81CE  C9      		ret
		
81CF  DBED    	conin:	in	0edh
81D1  E601    		ani	00000001b
81D3  28FA    		jrz	conin
81D5  DBE8    		in	0e8h
81D7  E67F    		ani	01111111b
81D9  C9      		ret
		
81DA  1A      	msgout:	ldax	d
81DB  B7      		ora	a
81DC  C8      		rz
81DD  CDC481  		call	conout
81E0  13      		inx	d
81E1  18F7    		jr	msgout
		
		; A=number to print
		; leading zeroes blanked - must preserve B
81E3          	decout:
81E3  C5      		push	b
81E4  0E00    		mvi	c,0
81E6  1664    		mvi	d,100
81E8  CD0B82  		call	divide
81EB  160A    		mvi	d,10
81ED  CD0B82  		call	divide
81F0  C630    		adi	'0'
81F2  CDC481  		call	chrout
81F5  C1      		pop	b
81F6  C9      		ret
		
81F7          	hexout:
81F7  F5      		push	psw
81F8  07      		rlc
81F9  07      		rlc
81FA  07      		rlc
81FB  07      		rlc
81FC  CD0082  		call	hexdig
81FF  F1      		pop	psw
8200  E60F    	hexdig:	ani	0fh
8202  C690    		adi	90h
8204  27      		daa
8205  CE40    		aci	40h
8207  27      		daa
8208  C3C481  		jmp	chrout
		
820B  1E00    	divide:	mvi	e,0
820D  92      	div0:	sub	d
820E  1C      		inr	e
820F  30FC    		jrnc	div0
8211  82      		add	d
8212  1D      		dcr	e
8213  2005    		jrnz	div1
8215  CB41    		bit	0,c
8217  2001    		jrnz	div1
8219  C9      		ret
821A  CBC1    	div1:	setb	0,c
821C  F5      		push	psw	; remainder
821D  3E30    		mvi	a,'0'
821F  83      		add	e
8220  CDC481  		call	chrout
8223  F1      		pop	psw	; remainder
8224  C9      		ret
		
8225          	parshx:
8225  1600    		mvi	d,0
8227  7E      	px0:	mov	a,m
8228  B7      		ora	a
8229  C8      		rz
822A  D630    		sui	'0'
822C  D8      		rc
822D  FE0A    		cpi	'9'-'0'+1
822F  380A    		jrc	px3
8231  D611    		sui	'A'-'0'
8233  E6DF    		ani	11011111b	; toupper
8235  FE06    		cpi	'F'-'A'+1
8237  3F      		cmc
8238  D8      		rc
8239  C60A    		adi	10
823B  5F      	px3:	mov	e,a
823C  7A      		mov	a,d
823D  87      		add	a
823E  D8      		rc
823F  87      		add	a
8240  D8      		rc
8241  87      		add	a
8242  D8      		rc
8243  87      		add	a
8244  D8      		rc
8245  83      		add	e	; no CY possible
8246  57      		mov	d,a
8247  23      		inx	h
8248  10DD    		djnz	px0
824A  B7      		ora	a
824B  C9      		ret
		
		; Parse a 8-bit (max) decimal number
		; HL=string, B=count
		; Returns D=number, CY=error
824C          	parsnm:
824C  110000  		lxi	d,0
824F  7E      	pd0:	mov	a,m
8250  B7      		ora	a
8251  C8      		rz
8252  FE30    		cpi	'0'
8254  D8      		rc
8255  FE3A    		cpi	'9'+1
8257  3F      		cmc
8258  D8      		rc
8259  E60F    		ani	0fh
825B  5F      		mov	e,a
825C  7A      		mov	a,d
825D  87      		add	a	; *2
825E  D8      		rc
825F  87      		add	a	; *4
8260  D8      		rc
8261  82      		add	d	; *5
8262  D8      		rc
8263  87      		add	a	; *10
8264  D8      		rc
8265  83      		add	e	;
8266  D8      		rc
8267  57      		mov	d,a
8268  23      		inx	h
8269  10E4    		djnz	pd0
826B  B7      		ora	a	; NC
826C  C9      		ret
		
		; flash ROM from HL to DE, 64 bytes at a time.
		; DE must be on a 64-byte boundary.
		; BC=num pages to flash
		; returns CY on error, else HL,DE at next 64 bytes
		; caller must set WE... and MEM1 as needed.
826D          	flash:
826D  C5      		push	b
826E  014000  		lxi	b,64
8271  EDB0    		ldir
			; -----
8273  2B      		dcx	h
8274  1B      		dcx	d	; last addr written...
			; wait for write cycle to begin...
			; TODO: timeout this loop?
8275  1A      	flash2:	ldax	d
8276  AE      		xra	m
8277  E680    		ani	10000000b	; bit7 is inverted when busy...
8279  28FA    		jrz	flash2
			; wait for write cycle to end...
			; TODO: timeout this loop?
827B  1A      	flash0:	ldax	d
827C  AE      		xra	m
827D  E680    		ani	10000000b	; bit7 is inverted when busy...
827F  20FA    		jrnz	flash0
8281  23      		inx	h
8282  13      		inx	d
			; done with page...
			;call	progress	; TODO: progress needed?
8283  C1      		pop	b
8284  0B      		dcx	b
8285  78      		mov	a,b
8286  B1      		ora	c
8287  20E4    		jrnz	flash
			;xra	a	; NC already
8289  C9      		ret
		
828A  3E0D    	crlf:	mvi	a,CR
828C  CDC481  		call	conout
828F  3E0A    		mvi	a,LF
8291  C3C481  		jmp	conout
		
8294  117E84  	cserr:	lxi	d,csbad
8297  CDDA81  		call	msgout
829A  21AD85  		lxi	h,inbuf
829D  36FF    		mvi	m,0ffh
829F  CDC782  		call	getyn
82A2  3AAD85  		lda	inbuf
82A5  B7      		ora	a	; NZ=no
82A6  201B    		jrnz	cserr9
82A8  210087  		lxi	h,last
82AB  54      		mov	d,h
82AC  5D      		mov	e,l
82AD  36FF    		mvi	m,0ffh
82AF  13      		inx	d
82B0  01FF07  		lxi	b,susize-1
82B3  EDB0    		ldir
82B5  210000  		lxi	h,0
82B8  220287  		shld	last+subase
82BB  3E01    		mvi	a,1
82BD  32AA85  		sta	dirty
82C0  C9      		ret
		
		; CY preserved if set...
82C1  E1      	nmerr9:	pop	h	; discard saved HL
82C2  D1      		pop	d	; discard saved DE
82C3  E1      	cserr9:	pop	h	; discard our ret adr
82C4  C38980  		jmp	xxchg	; return to monitor
		
		; DE=prompt prefix, HL=value location
		; get a Y/N, Wait for CR, allow BS.
		; Stores 0ffh for "no", 000h for "yes"
82C7          	getyn:
82C7  CDDA81  		call	msgout
82CA  7E      		mov	a,m
82CB  B7      		ora	a
82CC  3E4E    		mvi	a,'N'
82CE  2002    		jrnz	getyn1
82D0  3E59    		mvi	a,'Y'
82D2  CDC481  	getyn1:	call	conout
82D5  110785  		lxi	d,gpunn
82D8  CDDA81  		call	msgout
82DB  CDCF81  	getyn2:	call	conin
82DE  FE0D    		cpi	CR
82E0  CA7F83  		jz	getlt1	; same processing
82E3  E65F    		ani	01011111b	; toupper
82E5  FE59    		cpi	'Y'
82E7  280B    		jrz	getyn0
82E9  FE4E    		cpi	'N'
82EB  2807    		jrz	getyn0
82ED  3E07    		mvi	a,BEL
82EF  CDC481  		call	conout
82F2  18E7    		jr	getyn2
82F4  CDC481  	getyn0:	call	conout
82F7  D64E    		sui	'N'	;  0='N',  X='Y'
82F9  D601    		sui	1	; CY='N', NC='Y'
82FB  9F      		sbb	a	; FF='N', 00='Y'
82FC  4F      		mov	c,a
82FD  CDCF81  	getyn5:	call	conin
8300  FE0D    		cpi	CR
8302  2875    		jrz	getlt3	; same processing
8304  FE08    		cpi	BS
8306  2807    		jrz	getyn4
8308  3E07    		mvi	a,BEL
830A  CDC481  		call	conout
830D  18EE    		jr	getyn5
830F  CDC481  	getyn4:	call	conout
8312  3E20    		mvi	a,' '
8314  CDC481  		call	conout
8317  3E08    		mvi	a,BS
8319  CDC481  		call	conout
831C  18BD    		jr	getyn2
		
		; DE=prompt prefix, HL=value location
		; get a single letter, toupper. Wait for CR, allow BS
		; TODO: allow value meaning "not defined"?
831E          	getlete:
831E  3E07    		mvi	a,BEL
8320  CDC481  		call	conout
8323  CD8A82  		call	crlf
8326          	getlet:
8326  ED53AB85		sded	curmsg
832A  CDDA81  		call	msgout
832D  7E      		mov	a,m
832E  FEFF    		cpi	0ffh
8330  2803    		jrz	getlt6
8332  CDC481  		call	conout
8335  110785  	getlt6:	lxi	d,gpunn
8338  CDDA81  		call	msgout
833B  CDCF81  	getlt2:	call	conin
833E  FE0D    		cpi	CR
8340  283D    		jrz	getlt1
8342  FE1B    		cpi	ESC
8344  2844    		jrz	getltx
8346  E65F    		ani	01011111b	; toupper
8348  FE42    		cpi	'B'	; 'A' means default, makes no sense here
834A  3837    		jrc	getlt0
834C  FE5B    		cpi	'Z'+1
834E  3033    		jrnc	getlt0
			; wait for CR, honor BS
8350  4F      		mov	c,a
8351  CDC481  		call	conout
8354  CDCF81  	getlt5:	call	conin
8357  FE0D    		cpi	CR
8359  281E    		jrz	getlt3
835B  FE08    		cpi	BS
835D  280B    		jrz	getlt4
835F  FE1B    		cpi	ESC
8361  2827    		jrz	getltx
8363  3E07    		mvi	a,BEL
8365  CDC481  		call	conout
8368  18EA    		jr	getlt5
836A  CDC481  	getlt4:	call	conout
836D  3E20    		mvi	a,' '
836F  CDC481  		call	conout
8372  3E08    		mvi	a,BS
8374  CDC481  		call	conout
8377  18C2    		jr	getlt2
8379  71      	getlt3:	mov	m,c
837A  3E01    		mvi	a,1
837C  32AA85  		sta	dirty
837F  CD8A82  	getlt1:	call	crlf
8382  C9      		ret
8383  3E07    	getlt0:	mvi	a,BEL
8385  CDC481  		call	conout
8388  18B1    		jr	getlt2
		
		; delete setting, re-prompt
838A  36FF    	getltx:	mvi	m,0ffh
838C  3E01    		mvi	a,1
838E  32AA85  		sta	dirty
8391  ED5BAB85		lded	curmsg
8395  1887    		jr	getlete
		
		; DE=prompt prefix, HL=value location
8397          	gethexe:
8397  3E07    		mvi	a,BEL
8399  CDC481  		call	conout
839C          	gethex:
839C  D5      		push	d
839D  E5      		push	h
839E  CDDA81  		call	msgout
83A1  7E      		mov	a,m
83A2  CDF781  		call	hexout
83A5  110785  		lxi	d,gpunn
83A8  CDDA81  		call	msgout
83AB  CD7981  		call	linin
83AE  DAC182  		jc	nmerr9
83B1  79      		mov	a,c
83B2  B7      		ora	a
83B3  286C    		jrz	getxit
83B5  3AAD85  		lda	inbuf
83B8  FE1B    		cpi	ESC	; delete setting
83BA  2813    		jrz	gethxx
83BC  41      		mov	b,c
83BD  21AD85  		lxi	h,inbuf
83C0  CD2582  		call	parshx
83C3  7A      		mov	a,d
83C4  E1      		pop	h
83C5  D1      		pop	d
83C6  38CF    		jrc	gethexe
83C8  77      		mov	m,a
83C9  3E01    		mvi	a,1
83CB  32AA85  		sta	dirty
83CE  C9      		ret
		
		; delete setting, re-prompt
83CF  E1      	gethxx:	pop	h
83D0  36FF    		mvi	m,0ffh
83D2  3E01    		mvi	a,1
83D4  32AA85  		sta	dirty
83D7  D1      		pop	d
83D8  18BD    		jr	gethexe
		
		; DE=prompt prefix, HL=value location
83DA          	getnume:
83DA  3E07    		mvi	a,BEL
83DC  CDC481  		call	conout
83DF          	getnum:
83DF  D5      		push	d
83E0  E5      		push	h
83E1  CDDA81  		call	msgout
83E4  7E      		mov	a,m
83E5  FEFF    		cpi	0ffh
83E7  2803    		jrz	getnm0
83E9  CDE381  		call	decout
83EC  110785  	getnm0:	lxi	d,gpunn
83EF  CDDA81  		call	msgout
83F2  CD7981  		call	linin
83F5  DAC182  		jc	nmerr9
83F8  79      		mov	a,c
83F9  B7      		ora	a
83FA  2825    		jrz	getxit
83FC  3AAD85  		lda	inbuf
83FF  FE1B    		cpi	ESC	; delete setting
8401  2813    		jrz	getnmx
8403  41      		mov	b,c
8404  21AD85  		lxi	h,inbuf
8407  CD4C82  		call	parsnm
840A  7A      		mov	a,d
840B  E1      		pop	h
840C  D1      		pop	d
840D  38CB    		jrc	getnume
840F  77      		mov	m,a
8410  3E01    		mvi	a,1
8412  32AA85  		sta	dirty
8415  C9      		ret
		
		; delete setting, re-prompt
8416  E1      	getnmx:	pop	h
8417  36FF    		mvi	m,0ffh
8419  3E01    		mvi	a,1
841B  32AA85  		sta	dirty
841E  D1      		pop	d
841F  18B9    		jr	getnume
		
8421  E1      	getxit:	pop	h
8422  D1      		pop	d
8423  C9      		ret
		
		; DE=prompt prefix, HL=value location
8424          	getstre:
8424  3E07    		mvi	a,BEL
8426  CDC481  		call	conout
8429          	getstr:
8429  D5      		push	d
842A  E5      		push	h
842B  CDDA81  		call	msgout
842E  7E      		mov	a,m
842F  FEFF    		cpi	0ffh
8431  2804    		jrz	getst0
8433  EB      		xchg
8434  CDDA81  		call	msgout
8437  110785  	getst0:	lxi	d,gpunn
843A  CDDA81  		call	msgout
843D  CD7981  		call	linin
8440  DAC182  		jc	nmerr9
8443  79      		mov	a,c
8444  B7      		ora	a
8445  28DA    		jrz	getxit
			; no error checking left?
8447  E1      		pop	h
8448  D1      		pop	d
			; TODO: are we guaranteed 'inbuf' is terminated?
8449  11AD85  		lxi	d,inbuf
844C  1A      		ldax	d
844D  FE1B    		cpi	ESC	; delete setting
844F  2809    		jrz	getstx
8451  1A      	getst2:	ldax	d
8452  B7      		ora	a
8453  280E    		jrz	getst1
8455  77      		mov	m,a
8456  23      		inx	h
8457  13      		inx	d
8458  18F7    		jr	getst2
845A  36FF    	getstx:	mvi	m,0ffh
845C  3E01    		mvi	a,1
845E  32AA85  		sta	dirty
8461  18C1    		jr	getstre
8463  3600    	getst1:	mvi	m,0
8465  3E01    		mvi	a,1
8467  32AA85  		sta	dirty
846A  C9      		ret
		
0000          	 if z180
		 endif
		
846B  6F6E6669	signon:	db	'onfig setup v'
      67207365
      74757020
      76
8478  302E32  		db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
847B  0D0A00  		db	CR,LF,0
		
847E  53657475	csbad:	db	'Setup bank checksum error. Clear setup data (',0
      70206261
      6E6B2063
      6865636B
      73756D20
      6572726F
      722E2043
      6C656172
      20736574
      75702064
      61746120
      2800
84AC  53657475	nochg:	db	'Setup not changed',CR,LF,0
      70206E6F
      74206368
      616E6765
      640D0A00
84C0  53617665	dochg:	db	'Save changes (',0
      20636861
      6E676573
      202800
84CF  53657475	saved:	db	'Setup data saved',CR,LF,0
      70206461
      74612073
      61766564
      0D0A00
84E2  53657475	failed:	db	'Setup flash failed, checksum error',CR,LF,0
      7020666C
      61736820
      6661696C
      65642C20
      63686563
      6B73756D
      20657272
      6F720D0A
      00
		
8507  293A2000	gpunn:	db	'): ',0
850B  5072696D	gpdev:	db	'Primary/Default boot device (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20646576
      69636520
      2800
8529  5072696D	gpuni:	db	'Primary/Default boot unit (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20756E69
      74202800
8545  5072696D	gpstr:	db	'Primary/Default boot string (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20737472
      696E6720
      2800
0000          	 if not nofp
		 endif
FFFF          	 if not z180
8563  48382D35	g512k:	db	'H8-512K RAM installed (',0
      31324B20
      52414D20
      696E7374
      616C6C65
      64202800
		 endif
857B  485F3720	dport:	db	'H_7 Port (FF=use SW1) (',0
      506F7274
      20284646
      3D757365
      20535731
      29202800
8593  56444950	vport:	db	'VDIP1 Port (FF=(D8)) (',0
      3120506F
      72742028
      46463D28
      44382929
      202800
0000          	 if z180
		 endif
		
85AA  00      	dirty:	db	0
85AB  0000    	curmsg:	dw	0
		
85AD          	inbuf:	ds	128	; input entry buffer
		
862D          		ds	128
		stack:	ds	0
		
86AD  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFF
		
8700          	last:	end



Statistics:

     4	passes
     0	jr promotions
   180	symbols
  1536	bytes

   278	macro calls
  3759	macro bytes
     0	invented symbols
