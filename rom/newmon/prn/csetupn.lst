		; Command module for SETUP
0002          	VERN	equ	02h
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
0000          	z180	equ	false
FFFF          	nofp	equ	true
		
			maclib	ram
**** ram.lib ****
**** csetupn.asm ****
			maclib	setup
**** setup.lib ****
**** csetupn.asm ****
0000          	if z180
		else
			maclib	z80
**** z80.lib ****
**** csetupn.asm ****
		endif
		
000D          	CR	equ	13
000A          	LF	equ	10
0008          	BS	equ	8
0003          	CTLC	equ	3
0007          	BEL	equ	7
001B          	ESC	equ	27
		
0000          	if z180
		endif
		
8000          		org	8000h	; out of reach of ROM overlay...
8000  07      	first:	db	HIGH (last-first)	; +0: num pages
8001  80      		db	HIGH first		; +1: ORG page
8002  FF00    		db	255,0	; +2,+3: phy drv base, num
		
8004  C31D80  		jmp	init	; +4: init entry
8007  C31F80  		jmp	exec	; +7: action entry
		
800A  43      		db	'C'	; +10: Command letter
800B  FF      		db	-1	; +11: front panel key
800C  00      		db	0	; +12: port, 0 if variable
800D  FFFFFF  		db	11111111b,11111111b,11111111b	; +13: FP display
8010  436F6E66		db	'Config Setup',0	; +16: mnemonic string
      69672053
      65747570
      00
		
801D          	init:
801D  AF      		xra	a	; NC
801E  C9      		ret
		
801F          	exec:
801F  116284  		lxi	d,signon
8022  CDD181  		call	msgout
8025  CDF780  		call	get$su	; get a copy of setup data
8028  DC8B82  		cc	cserr	; offer to clear if checksum error
			; Primary/Default boot options
802B  110285  		lxi	d,gpdev
802E  210487  		lxi	h,last+dpdev
8031  CD1D83  		call	getlet
8034  112085  		lxi	d,gpuni
8037  210587  		lxi	h,last+dpuni
803A  CDD683  		call	getnum
803D  113C85  		lxi	d,gpstr
8040  210687  		lxi	h,last+dpstr
8043  CD2084  		call	getstr
0000          	if not nofp
		endif
			; Add-ons Installed
FFFF          	if not z180
8046  115A85  		lxi	d,g512k
8049  210888  		lxi	h,last+m512k
804C  CDBE82  		call	getyn
		endif
		
804F  3E36    		mvi	a,'6'
8051  327385  		sta	dport+1
8054  117285  		lxi	d,dport
8057  210B88  		lxi	h,last+h67pt
805A  CD9383  		call	gethex
		
805D  3E34    		mvi	a,'4'
805F  327385  		sta	dport+1
8062  117285  		lxi	d,dport
8065  210C88  		lxi	h,last+h47pt
8068  CD9383  		call	gethex
		
806B  3E33    		mvi	a,'3'
806D  327385  		sta	dport+1
8070  117285  		lxi	d,dport
8073  210D88  		lxi	h,last+h37pt
8076  CD9383  		call	gethex
		
0000          	if 0	; H17 is not configurable?
		endif
0000          	if z180
		endif
		
			; TODO: more setup?
8079  3A8A85  		lda	dirty
807C  B7      		ora	a
807D  C28780  		jnz	mkchg
8080  11A384  	xxchg:	lxi	d,nochg
8083  CDD181  		call	msgout
8086  C9      		ret
		
8087  11B784  	mkchg:	lxi	d,dochg
808A  218D85  		lxi	h,inbuf
808D  36FF    		mvi	m,0ffh
808F  CDBE82  		call	getyn
8092  3A8D85  		lda	inbuf
8095  B7      		ora	a
8096  20E8    		jrnz	xxchg
8098  110087  		lxi	d,last
809B  01FE07  		lxi	b,sulen
809E  CD3A81  		call	schksm
80A1  2A5D81  		lhld	sum
80A4  225F81  		shld	ssum
80A7  F3      		di
0000          	if z180
		else
80A8  3A3620  		lda	ctl$F2
80AB  F5      		push	psw
80AC  E6DF    		ani	11011111b	; ORG0 off
80AE  F688    		ori	10001000b	; WE, MEM1
80B0  D3F2    		out	0f2h
		endif
80B2  210087  		lxi	h,last
80B5  110010  		lxi	d,suadr
80B8  012000  		lxi	b,susize/64
80BB  CD6482  		call	flash
			;jrc	error	; never returned, actually
80BE  F1      		pop	psw
80BF  F5      		push	psw
80C0  E67F    		ani	01111111b	; WE off
80C2  D3F2    		out	0f2h
80C4  110010  		lxi	d,suadr
80C7  01FE07  		lxi	b,sulen
80CA  CD1B81  		call	vchksm
80CD  2A5D81  		lhld	sum
80D0  EB      		xchg
80D1  2A5F81  		lhld	ssum
80D4  B7      		ora	a
80D5  ED52    		dsbc	d
80D7  2016    		jrnz	error
80D9  F1      		pop	psw
80DA  D3F2    		out	0f2h
0000          	if z180
		endif
80DC  FB      		ei
80DD  11C684  		lxi	d,saved
80E0  CDD181  		call	msgout
			; Update monitor copy
80E3  210087  		lxi	h,last
80E6  1100F8  		lxi	d,susave
80E9  011001  		lxi	b,sumax
80EC  EDB0    		ldir
80EE  C9      		ret
		
		; PSW is on stack...
80EF  F1      	error:	pop	psw
80F0  11D984  		lxi	d,failed
80F3  CDD181  		call	msgout
80F6  C9      		ret	; what else can we do?
		
80F7  F3      	get$su:	di
0000          	if z180
		else
80F8  3A3620  		lda	ctl$F2
80FB  F5      		push	psw
80FC  E6DF    		ani	11011111b	; ORG0 off
80FE  F608    		ori	00001000b	; MEM1
8100  D3F2    		out	0f2h
8102  210010  		lxi	h,suadr
8105  110087  		lxi	d,last
8108  010008  		lxi	b,susize
810B  EDB0    		ldir
810D  F1      		pop	psw
810E  D3F2    		out	0f2h
		endif
8110  FB      		ei
8111  110087  		lxi	d,last
8114  01FE07  		lxi	b,sulen
8117  CD1B81  		call	vchksm
811A  C9      		ret	; CY=checksum error
		
		; DE=code start, BC=length
		; Returns CY on error
811B  210000  	vchksm:	lxi	h,0
811E  225D81  		shld	sum
8121  1A      	vchk0:	ldax	d
8122  CD5481  		call	sum1
8125  13      		inx	d
8126  0B      		dcx	b
8127  78      		mov	a,b
8128  B1      		ora	c
8129  20F6    		jrnz	vchk0
812B  215D81  		lxi	h,sum
812E  0602    		mvi	b,2
8130  1A      	vchk2:	ldax	d
8131  BE      		cmp	m
8132  37      		stc
8133  C0      		rnz
8134  13      		inx	d
8135  23      		inx	h
8136  10F8    		djnz	vchk2
8138  AF      		xra	a	; NC
8139  C9      		ret
		
		; DE=code start, BC=length
		; Sets checksum after code
813A  210000  	schksm:	lxi	h,0
813D  225D81  		shld	sum
8140  1A      	schk0:	ldax	d
8141  CD5481  		call	sum1
8144  13      		inx	d
8145  0B      		dcx	b
8146  78      		mov	a,b
8147  B1      		ora	c
8148  20F6    		jrnz	schk0
814A  215D81  		lxi	h,sum
814D  7E      		mov	a,m
814E  12      		stax	d
814F  23      		inx	h
8150  13      		inx	d
8151  7E      		mov	a,m
8152  12      		stax	d
8153  C9      		ret
		
8154  215D81  	sum1:	lxi	h,sum
8157  86      		add	m
8158  77      		mov	m,a
8159  D0      		rnc
815A  23      		inx	h
815B  34      		inr	m
815C  C9      		ret
		
815D  0000    	sum:	dw	0
815F  0000    	ssum:	dw	0
		
8161  3E1B    	liniz:	mvi	a,ESC
8163  328D85  		sta	inbuf
8166  0E01    		mvi	c,1
8168  C38182  		jmp	crlf
816B  3600    	linix:	mvi	m,0	; terminate buffer
816D  C38182  		jmp	crlf
		
		; input a filename from console, allow backspace
		; returns C=num chars
8170          	linin:
8170  218D85  		lxi	h,inbuf
8173  0E00    		mvi	c,0	; count chars
8175  CDC681  	lini0	call	conin
8178  FE0D    		cpi	CR
817A  28EF    		jrz	linix
817C  FE1B    		cpi	ESC
817E  28E1    		jrz	liniz
8180  FE03    		cpi	CTLC	; cancel
8182  37      		stc
8183  C8      		rz
8184  FE08    		cpi	BS
8186  281C    		jrz	backup
8188  FE20    		cpi	' '
818A  3811    		jrc	chrnak
818C  FE7F    		cpi	'~'+1
818E  300D    		jrnc	chrnak
8190  77      	chrok:	mov	m,a
8191  23      		inx	h
8192  0C      		inr	c
8193  FA9B81  		jm	chrovf	; 128 chars max
8196  CDBB81  		call	conout
			; TODO: detect overflow...
8199  18DA    		jr	lini0
819B  2B      	chrovf:	dcx	h
819C  0D      		dcr	c
819D  3E07    	chrnak:	mvi	a,BEL
819F  CDBB81  		call	conout
81A2  18D1    		jr	lini0
81A4          	backup:
81A4  79      		mov	a,c
81A5  B7      		ora	a
81A6  28CD    		jrz	lini0
81A8  0D      		dcr	c
81A9  2B      		dcx	h
81AA  3E08    		mvi	a,BS
81AC  CDBB81  		call	conout
81AF  3E20    		mvi	a,' '
81B1  CDBB81  		call	conout
81B4  3E08    		mvi	a,BS
81B6  CDBB81  		call	conout
81B9  18BA    		jr	lini0
		
81BB          	chrout:
81BB  F5      	conout:	push	psw
81BC  DBED    	cono0:	in	0edh
81BE  E620    		ani	00100000b
81C0  28FA    		jrz	cono0
81C2  F1      		pop	psw
81C3  D3E8    		out	0e8h
81C5  C9      		ret
		
81C6  DBED    	conin:	in	0edh
81C8  E601    		ani	00000001b
81CA  28FA    		jrz	conin
81CC  DBE8    		in	0e8h
81CE  E67F    		ani	01111111b
81D0  C9      		ret
		
81D1  1A      	msgout:	ldax	d
81D2  B7      		ora	a
81D3  C8      		rz
81D4  CDBB81  		call	conout
81D7  13      		inx	d
81D8  18F7    		jr	msgout
		
		; A=number to print
		; leading zeroes blanked - must preserve B
81DA          	decout:
81DA  C5      		push	b
81DB  0E00    		mvi	c,0
81DD  1664    		mvi	d,100
81DF  CD0282  		call	divide
81E2  160A    		mvi	d,10
81E4  CD0282  		call	divide
81E7  C630    		adi	'0'
81E9  CDBB81  		call	chrout
81EC  C1      		pop	b
81ED  C9      		ret
		
81EE          	hexout:
81EE  F5      		push	psw
81EF  07      		rlc
81F0  07      		rlc
81F1  07      		rlc
81F2  07      		rlc
81F3  CDF781  		call	hexdig
81F6  F1      		pop	psw
81F7  E60F    	hexdig:	ani	0fh
81F9  C690    		adi	90h
81FB  27      		daa
81FC  CE40    		aci	40h
81FE  27      		daa
81FF  C3BB81  		jmp	chrout
		
8202  1E00    	divide:	mvi	e,0
8204  92      	div0:	sub	d
8205  1C      		inr	e
8206  30FC    		jrnc	div0
8208  82      		add	d
8209  1D      		dcr	e
820A  2005    		jrnz	div1
820C  CB41    		bit	0,c
820E  2001    		jrnz	div1
8210  C9      		ret
8211  CBC1    	div1:	setb	0,c
8213  F5      		push	psw	; remainder
8214  3E30    		mvi	a,'0'
8216  83      		add	e
8217  CDBB81  		call	chrout
821A  F1      		pop	psw	; remainder
821B  C9      		ret
		
821C          	parshx:
821C  1600    		mvi	d,0
821E  7E      	px0:	mov	a,m
821F  B7      		ora	a
8220  C8      		rz
8221  D630    		sui	'0'
8223  D8      		rc
8224  FE0A    		cpi	'9'-'0'+1
8226  380A    		jrc	px3
8228  D611    		sui	'A'-'0'
822A  E6DF    		ani	11011111b	; toupper
822C  FE06    		cpi	'F'-'A'+1
822E  3F      		cmc
822F  D8      		rc
8230  C60A    		adi	10
8232  5F      	px3:	mov	e,a
8233  7A      		mov	a,d
8234  87      		add	a
8235  D8      		rc
8236  87      		add	a
8237  D8      		rc
8238  87      		add	a
8239  D8      		rc
823A  87      		add	a
823B  D8      		rc
823C  83      		add	e	; no CY possible
823D  57      		mov	d,a
823E  23      		inx	h
823F  10DD    		djnz	px0
8241  B7      		ora	a
8242  C9      		ret
		
		; Parse a 8-bit (max) decimal number
		; HL=string, B=count
		; Returns D=number, CY=error
8243          	parsnm:
8243  110000  		lxi	d,0
8246  7E      	pd0:	mov	a,m
8247  B7      		ora	a
8248  C8      		rz
8249  FE30    		cpi	'0'
824B  D8      		rc
824C  FE3A    		cpi	'9'+1
824E  3F      		cmc
824F  D8      		rc
8250  E60F    		ani	0fh
8252  5F      		mov	e,a
8253  7A      		mov	a,d
8254  87      		add	a	; *2
8255  D8      		rc
8256  87      		add	a	; *4
8257  D8      		rc
8258  82      		add	d	; *5
8259  D8      		rc
825A  87      		add	a	; *10
825B  D8      		rc
825C  83      		add	e	;
825D  D8      		rc
825E  57      		mov	d,a
825F  23      		inx	h
8260  10E4    		djnz	pd0
8262  B7      		ora	a	; NC
8263  C9      		ret
		
		; flash ROM from HL to DE, 64 bytes at a time.
		; DE must be on a 64-byte boundary.
		; BC=num pages to flash
		; returns CY on error, else HL,DE at next 64 bytes
		; caller must set WE... and MEM1 as needed.
8264          	flash:
8264  C5      		push	b
8265  014000  		lxi	b,64
8268  EDB0    		ldir
			; -----
826A  2B      		dcx	h
826B  1B      		dcx	d	; last addr written...
			; wait for write cycle to begin...
			; TODO: timeout this loop?
826C  1A      	flash2:	ldax	d
826D  AE      		xra	m
826E  E680    		ani	10000000b	; bit7 is inverted when busy...
8270  28FA    		jrz	flash2
			; wait for write cycle to end...
			; TODO: timeout this loop?
8272  1A      	flash0:	ldax	d
8273  AE      		xra	m
8274  E680    		ani	10000000b	; bit7 is inverted when busy...
8276  20FA    		jrnz	flash0
8278  23      		inx	h
8279  13      		inx	d
			; done with page...
			;call	progress	; TODO: progress needed?
827A  C1      		pop	b
827B  0B      		dcx	b
827C  78      		mov	a,b
827D  B1      		ora	c
827E  20E4    		jrnz	flash
			;xra	a	; NC already
8280  C9      		ret
		
8281  3E0D    	crlf:	mvi	a,CR
8283  CDBB81  		call	conout
8286  3E0A    		mvi	a,LF
8288  C3BB81  		jmp	conout
		
828B  117584  	cserr:	lxi	d,csbad
828E  CDD181  		call	msgout
8291  218D85  		lxi	h,inbuf
8294  36FF    		mvi	m,0ffh
8296  CDBE82  		call	getyn
8299  3A8D85  		lda	inbuf
829C  B7      		ora	a	; NZ=no
829D  201B    		jrnz	cserr9
829F  210087  		lxi	h,last
82A2  54      		mov	d,h
82A3  5D      		mov	e,l
82A4  36FF    		mvi	m,0ffh
82A6  13      		inx	d
82A7  01FF07  		lxi	b,susize-1
82AA  EDB0    		ldir
82AC  210000  		lxi	h,0
82AF  220287  		shld	last+subase
82B2  3E01    		mvi	a,1
82B4  328A85  		sta	dirty
82B7  C9      		ret
		
		; CY preserved if set...
82B8  E1      	nmerr9:	pop	h	; discard saved HL
82B9  D1      		pop	d	; discard saved DE
82BA  E1      	cserr9:	pop	h	; discard our ret adr
82BB  C38080  		jmp	xxchg	; return to monitor
		
		; DE=prompt prefix, HL=value location
		; get a Y/N, Wait for CR, allow BS.
		; Stores 0ffh for "no", 000h for "yes"
82BE          	getyn:
82BE  CDD181  		call	msgout
82C1  7E      		mov	a,m
82C2  B7      		ora	a
82C3  3E4E    		mvi	a,'N'
82C5  2002    		jrnz	getyn1
82C7  3E59    		mvi	a,'Y'
82C9  CDBB81  	getyn1:	call	conout
82CC  11FE84  		lxi	d,gpunn
82CF  CDD181  		call	msgout
82D2  CDC681  	getyn2:	call	conin
82D5  FE0D    		cpi	CR
82D7  CA7683  		jz	getlt1	; same processing
82DA  E65F    		ani	01011111b	; toupper
82DC  FE59    		cpi	'Y'
82DE  280B    		jrz	getyn0
82E0  FE4E    		cpi	'N'
82E2  2807    		jrz	getyn0
82E4  3E07    		mvi	a,BEL
82E6  CDBB81  		call	conout
82E9  18E7    		jr	getyn2
82EB  CDBB81  	getyn0:	call	conout
82EE  D64E    		sui	'N'	;  0='N',  X='Y'
82F0  D601    		sui	1	; CY='N', NC='Y'
82F2  9F      		sbb	a	; FF='N', 00='Y'
82F3  4F      		mov	c,a
82F4  CDC681  	getyn5:	call	conin
82F7  FE0D    		cpi	CR
82F9  2875    		jrz	getlt3	; same processing
82FB  FE08    		cpi	BS
82FD  2807    		jrz	getyn4
82FF  3E07    		mvi	a,BEL
8301  CDBB81  		call	conout
8304  18EE    		jr	getyn5
8306  CDBB81  	getyn4:	call	conout
8309  3E20    		mvi	a,' '
830B  CDBB81  		call	conout
830E  3E08    		mvi	a,BS
8310  CDBB81  		call	conout
8313  18BD    		jr	getyn2
		
		; DE=prompt prefix, HL=value location
		; get a single letter, toupper. Wait for CR, allow BS
		; TODO: allow value meaning "not defined"?
8315          	getlete:
8315  3E07    		mvi	a,BEL
8317  CDBB81  		call	conout
831A  CD8182  		call	crlf
831D          	getlet:
831D  ED538B85		sded	curmsg
8321  CDD181  		call	msgout
8324  7E      		mov	a,m
8325  FEFF    		cpi	0ffh
8327  2803    		jrz	getlt6
8329  CDBB81  		call	conout
832C  11FE84  	getlt6:	lxi	d,gpunn
832F  CDD181  		call	msgout
8332  CDC681  	getlt2:	call	conin
8335  FE0D    		cpi	CR
8337  283D    		jrz	getlt1
8339  FE1B    		cpi	ESC
833B  2844    		jrz	getltx
833D  E65F    		ani	01011111b	; toupper
833F  FE42    		cpi	'B'	; 'A' means default, makes no sense here
8341  3837    		jrc	getlt0
8343  FE5B    		cpi	'Z'+1
8345  3033    		jrnc	getlt0
			; wait for CR, honor BS
8347  4F      		mov	c,a
8348  CDBB81  		call	conout
834B  CDC681  	getlt5:	call	conin
834E  FE0D    		cpi	CR
8350  281E    		jrz	getlt3
8352  FE08    		cpi	BS
8354  280B    		jrz	getlt4
8356  FE1B    		cpi	ESC
8358  2827    		jrz	getltx
835A  3E07    		mvi	a,BEL
835C  CDBB81  		call	conout
835F  18EA    		jr	getlt5
8361  CDBB81  	getlt4:	call	conout
8364  3E20    		mvi	a,' '
8366  CDBB81  		call	conout
8369  3E08    		mvi	a,BS
836B  CDBB81  		call	conout
836E  18C2    		jr	getlt2
8370  71      	getlt3:	mov	m,c
8371  3E01    		mvi	a,1
8373  328A85  		sta	dirty
8376  CD8182  	getlt1:	call	crlf
8379  C9      		ret
837A  3E07    	getlt0:	mvi	a,BEL
837C  CDBB81  		call	conout
837F  18B1    		jr	getlt2
		
		; delete setting, re-prompt
8381  36FF    	getltx:	mvi	m,0ffh
8383  3E01    		mvi	a,1
8385  328A85  		sta	dirty
8388  ED5B8B85		lded	curmsg
838C  1887    		jr	getlete
		
		; DE=prompt prefix, HL=value location
838E          	gethexe:
838E  3E07    		mvi	a,BEL
8390  CDBB81  		call	conout
8393          	gethex:
8393  D5      		push	d
8394  E5      		push	h
8395  CDD181  		call	msgout
8398  7E      		mov	a,m
8399  CDEE81  		call	hexout
839C  11FE84  		lxi	d,gpunn
839F  CDD181  		call	msgout
83A2  CD7081  		call	linin
83A5  DAB882  		jc	nmerr9
83A8  79      		mov	a,c
83A9  B7      		ora	a
83AA  286C    		jrz	getxit
83AC  3A8D85  		lda	inbuf
83AF  FE1B    		cpi	ESC	; delete setting
83B1  2813    		jrz	gethxx
83B3  41      		mov	b,c
83B4  218D85  		lxi	h,inbuf
83B7  CD1C82  		call	parshx
83BA  7A      		mov	a,d
83BB  E1      		pop	h
83BC  D1      		pop	d
83BD  38CF    		jrc	gethexe
83BF  77      		mov	m,a
83C0  3E01    		mvi	a,1
83C2  328A85  		sta	dirty
83C5  C9      		ret
		
		; delete setting, re-prompt
83C6  E1      	gethxx:	pop	h
83C7  36FF    		mvi	m,0ffh
83C9  3E01    		mvi	a,1
83CB  328A85  		sta	dirty
83CE  D1      		pop	d
83CF  18BD    		jr	gethexe
		
		; DE=prompt prefix, HL=value location
83D1          	getnume:
83D1  3E07    		mvi	a,BEL
83D3  CDBB81  		call	conout
83D6          	getnum:
83D6  D5      		push	d
83D7  E5      		push	h
83D8  CDD181  		call	msgout
83DB  7E      		mov	a,m
83DC  FEFF    		cpi	0ffh
83DE  2803    		jrz	getnm0
83E0  CDDA81  		call	decout
83E3  11FE84  	getnm0:	lxi	d,gpunn
83E6  CDD181  		call	msgout
83E9  CD7081  		call	linin
83EC  DAB882  		jc	nmerr9
83EF  79      		mov	a,c
83F0  B7      		ora	a
83F1  2825    		jrz	getxit
83F3  3A8D85  		lda	inbuf
83F6  FE1B    		cpi	ESC	; delete setting
83F8  2813    		jrz	getnmx
83FA  41      		mov	b,c
83FB  218D85  		lxi	h,inbuf
83FE  CD4382  		call	parsnm
8401  7A      		mov	a,d
8402  E1      		pop	h
8403  D1      		pop	d
8404  38CB    		jrc	getnume
8406  77      		mov	m,a
8407  3E01    		mvi	a,1
8409  328A85  		sta	dirty
840C  C9      		ret
		
		; delete setting, re-prompt
840D  E1      	getnmx:	pop	h
840E  36FF    		mvi	m,0ffh
8410  3E01    		mvi	a,1
8412  328A85  		sta	dirty
8415  D1      		pop	d
8416  18B9    		jr	getnume
		
8418  E1      	getxit:	pop	h
8419  D1      		pop	d
841A  C9      		ret
		
		; DE=prompt prefix, HL=value location
841B          	getstre:
841B  3E07    		mvi	a,BEL
841D  CDBB81  		call	conout
8420          	getstr:
8420  D5      		push	d
8421  E5      		push	h
8422  CDD181  		call	msgout
8425  7E      		mov	a,m
8426  FEFF    		cpi	0ffh
8428  2804    		jrz	getst0
842A  EB      		xchg
842B  CDD181  		call	msgout
842E  11FE84  	getst0:	lxi	d,gpunn
8431  CDD181  		call	msgout
8434  CD7081  		call	linin
8437  DAB882  		jc	nmerr9
843A  79      		mov	a,c
843B  B7      		ora	a
843C  28DA    		jrz	getxit
			; no error checking left?
843E  E1      		pop	h
843F  D1      		pop	d
			; TODO: are we guaranteed 'inbuf' is terminated?
8440  118D85  		lxi	d,inbuf
8443  1A      		ldax	d
8444  FE1B    		cpi	ESC	; delete setting
8446  2809    		jrz	getstx
8448  1A      	getst2:	ldax	d
8449  B7      		ora	a
844A  280E    		jrz	getst1
844C  77      		mov	m,a
844D  23      		inx	h
844E  13      		inx	d
844F  18F7    		jr	getst2
8451  36FF    	getstx:	mvi	m,0ffh
8453  3E01    		mvi	a,1
8455  328A85  		sta	dirty
8458  18C1    		jr	getstre
845A  3600    	getst1:	mvi	m,0
845C  3E01    		mvi	a,1
845E  328A85  		sta	dirty
8461  C9      		ret
		
0000          	if z180
		endif
		
8462  6F6E6669	signon:	db	'onfig setup v'
      67207365
      74757020
      76
846F  302E32  		db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
8472  0D0A00  		db	CR,LF,0
		
8475  53657475	csbad:	db	'Setup bank checksum error. Clear setup data (',0
      70206261
      6E6B2063
      6865636B
      73756D20
      6572726F
      722E2043
      6C656172
      20736574
      75702064
      61746120
      2800
84A3  53657475	nochg:	db	'Setup not changed',CR,LF,0
      70206E6F
      74206368
      616E6765
      640D0A00
84B7  53617665	dochg:	db	'Save changes (',0
      20636861
      6E676573
      202800
84C6  53657475	saved:	db	'Setup data saved',CR,LF,0
      70206461
      74612073
      61766564
      0D0A00
84D9  53657475	failed:	db	'Setup flash failed, checksum error',CR,LF,0
      7020666C
      61736820
      6661696C
      65642C20
      63686563
      6B73756D
      20657272
      6F720D0A
      00
		
84FE  293A2000	gpunn:	db	'): ',0
8502  5072696D	gpdev:	db	'Primary/Default boot device (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20646576
      69636520
      2800
8520  5072696D	gpuni:	db	'Primary/Default boot unit (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20756E69
      74202800
853C  5072696D	gpstr:	db	'Primary/Default boot string (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20737472
      696E6720
      2800
0000          	if not nofp
		endif
FFFF          	if not z180
855A  48382D35	g512k:	db	'H8-512K RAM installed (',0
      31324B20
      52414D20
      696E7374
      616C6C65
      64202800
		endif
8572  485F3720	dport:	db	'H_7 Port (FF=use SW1) (',0
      506F7274
      20284646
      3D757365
      20535731
      29202800
0000          	if z180
		endif
		
858A  00      	dirty:	db	0
858B  0000    	curmsg:	dw	0
		
858D          	inbuf:	ds	128	; input entry buffer
		
860D          		ds	128
		stack:	ds	0
		
868D  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFF
		
8700          	last:	end



Statistics:

     4	passes
     0	jr promotions
   178	symbols
  1536	bytes

   310	macro calls
  3759	macro bytes
     0	invented symbols
