                ; Basic WIZNET routines
                
                	public	wizcfg,wizcf0,wizcmd,wizget,wizset,wizclose,setsok,settcp
                	public	gkeep,skeep
                
                	maclib	config
                
                	; Caller must supply 'nvbuf'
                	extrn	nvbuf
U               if NVRAM
                	; Requires linking with NVRAM.REL, for 'wizcfg'...
                	extrn	nvget, vcksum
                endif
                
                	maclib	z80
                
                ; WIZNET CTRL bit for writing
 0004 =         WRITE	equ	00000100b
                
 0001 =         GAR	equ	1	; offset of GAR, etc.
 0005 =         SUBR	equ	5
 0009 =         SHAR	equ	9
 000F =         SIPR	equ	15
 001D =         PMAGIC	equ	29	; used for node ID
 001E =         PDPORT	equ	30	; used for server listening port
                
 0008 =         nsock	equ	8
 0008 =         SOCK0	equ	000$01$000b
 0028 =         SOCK1	equ	001$01$000b
 0048 =         SOCK2	equ	010$01$000b
 0068 =         SOCK3	equ	011$01$000b
 0088 =         SOCK4	equ	100$01$000b
 00A8 =         SOCK5	equ	101$01$000b
 00C8 =         SOCK6	equ	110$01$000b
 00E8 =         SOCK7	equ	111$01$000b
                
 0000 =         SnMR	equ	0
 0001 =         SnCR	equ	1
 0002 =         SnIR	equ	2
 0003 =         SnSR	equ	3
 0004 =         SnPORT	equ	4
 000C =         SnDIPR	equ	12
 0010 =         SnDPORT	equ	16
 0014 =         SnRESV1	equ	20	; 0x14 reserved
 0017 =         SnRESV2	equ	23	; 0x17 reserved
 0018 =         SnRESV3	equ	24	; 0x18 reserved
 0019 =         SnRESV4	equ	25	; 0x19 reserved
 001A =         SnRESV5	equ	26	; 0x1a reserved
 001B =         SnRESV6	equ	27	; 0x1b reserved
 001C =         SnRESV7	equ	28	; 0x1c reserved
 001D =         SnRESV8	equ	29	; 0x1d reserved
 001F =         SnTXBUF	equ	31	; TXBUF_SIZE
                
 001D =         NvKPALVTR equ	SnRESV8	; where to stash keepalive in NVRAM
 002F =         SnKPALVTR equ	47	; Keep alive timeout, 5s units
                
                ; Socket SR values
 0000 =         CLOSED	equ	00h
                
                ; Socket CR commands
 0008 =         DISCON	equ	08h
                
                	cseg
                
                ; Send socket command to WIZNET chip, wait for done.
                ; A = command, D = socket BSB
                ; Destroys A
                wizcmd:
 0000 F5        	push	psw
U0001 3E00      	mvi	a,WZSCS
U0003 D300      	out	spi$ctl
 0005 AF        	xra	a
U0006 D300      	out	spi$wr
 0008 3E01      	mvi	a,SnCR
U000A D300      	out	spi$wr
 000C 7A        	mov	a,d
 000D F604      	ori	WRITE
U000F D300      	out	spi$wr
 0011 F1        	pop	psw
U0012 D300      	out	spi$wr	; start command
 0014 AF        	xra	a	;
U0015 D300      	out	spi$ctl
                wc0:
U0017 3E00      	mvi	a,WZSCS
U0019 D300      	out	spi$ctl
 001B AF        	xra	a
U001C D300      	out	spi$wr
 001E 3E01      	mvi	a,SnCR
U0020 D300      	out	spi$wr
 0022 7A        	mov	a,d
U0023 D300      	out	spi$wr
U0025 DB00      	in	spi$rd	; prime pump
U0027 DB00      	in	spi$rd
 0029 F5        	push	psw
 002A AF        	xra	a	;
U002B D300      	out	spi$ctl
 002D F1        	pop	psw
 002E B7        	ora	a
 002F C21700    	jnz	wc0
 0032 C9        	ret
                
                ; E = BSB, D = CTL, HL = data, B = length
                wizget:
U0033 3E00      	mvi	a,WZSCS
U0035 D300      	out	spi$ctl
 0037 AF        	xra	a	; hi adr always 0
U0038 D300      	out	spi$wr
 003A 7B        	mov	a,e
U003B D300      	out	spi$wr
 003D 7A        	mov	a,d
U003E D300      	out	spi$wr
U0040 DB00      	in	spi$rd	; prime pump
U0042 0E00      	mvi	c,spi$rd
                	inir
 0044+EDB2      	DB	0EDH,0B2H
 0046 AF        	xra	a	; not SCS
U0047 D300      	out	spi$ctl
 0049 C9        	ret
                
                ; HL = data to send, E = offset, D = BSB, B = length
                ; destroys HL, B, C, A
                wizset:
U004A 3E00      	mvi	a,WZSCS
U004C D300      	out	spi$ctl
 004E AF        	xra	a	; hi adr always 0
U004F D300      	out	spi$wr
 0051 7B        	mov	a,e
U0052 D300      	out	spi$wr
 0054 7A        	mov	a,d
 0055 F604      	ori	WRITE
U0057 D300      	out	spi$wr
U0059 0E00      	mvi	c,spi$wr
                	outir
 005B+EDB3      	DB	0EDH,0B3H
 005D AF        	xra	a	; not SCS
U005E D300      	out	spi$ctl
 0060 C9        	ret
                
                ; Close socket if active (SR <> CLOSED)
                ; D = socket BSB
                ; Destroys HL, E, B, C, A
                wizclose:
 0061 210000    	lxi	h,tmp
 0064 1E03      	mvi	e,SnSR
 0066 0601      	mvi	b,1
 0068 CD3300    	call	wizget
 006B 3A0000    	lda	tmp
 006E FE00      	cpi	CLOSED
 0070 C8        	rz
 0071 3E08      	mvi	a,DISCON
 0073 CD0000    	call	wizcmd
                	; don't care about results?
 0076 C9        	ret
                
                ; IX = base data buffer for socket, D = socket BSB, E = offset, B = length
                ; destroys HL, B, C
                setsok:
                	pushix
 0077+DDE5      	DB	0DDH,0E5H
 0079 E1        	pop	h
 007A D5        	push	d
 007B 1600      	mvi	d,0
 007D 19        	dad	d	; HL points to data in 'buf'
 007E D1        	pop	d
 007F CD4A00    	call	wizset
 0082 C9        	ret
                
                ; Set socket MR to TCP.
                ; D = socket BSB (result of "getsokn")
                ; Destroys all registers except D.
                settcp:
 0083 210000    	lxi	h,tmp
 0086 3601      	mvi	m,1	; TCP/IP mode
 0088 1E00      	mvi	e,SnMR
 008A 0601      	mvi	b,1
 008C CD4A00    	call	wizset	; force TCP/IP mode
 008F C9        	ret
                
                ; Get KEEP-ALIVE value
                ; D=socket BSB
                ; Return: A=keep-alive value
                gkeep:
 0090 1E2F      	mvi	e,SnKPALVTR
 0092 210000    	lxi	h,tmp
 0095 0601      	mvi	b,1
 0097 CD3300    	call	wizget
 009A 3A0000    	lda	tmp
 009D C9        	ret
                
                ; Set KEEP-ALIVE value - only for DIRECT mode
                ; A=keep-alive time, x5-seconds
                ; D=socket BSB
 009E B7        skeep:	ora	a
 009F C8        	rz	; do not set, rather than "disable"...
 00A0 320000    	sta	tmp
 00A3 1E2F      	mvi	e,SnKPALVTR
 00A5 210000    	lxi	h,tmp
 00A8 0601      	mvi	b,1
 00AA CD4A00    	call	wizset
 00AD C9        	ret
                
                ; restore config from NVRAM
                ; Buffer is 'nvbuf' (512 bytes)
                ; Return: CY if no config
                wizcfg:
U               if NVRAM
                	lxix	nvbuf
                	lxi	h,0
                	lxi	d,512
                	call	nvget
                	lxix	nvbuf
                	call	vcksum
                	stc
                	rnz
                else
 00AE 37        	stc
 00AF C9        	ret
                endif
                wizcf0:
                	lxix	nvbuf
 00B0+DD21      	DB	0DDH,21H
 00B2+0000      	DW	NVBUF
 00B4 210100    	lxi	h,nvbuf+GAR
 00B7 1600      	mvi	d,0
 00B9 1E01      	mvi	e,GAR
 00BB 0612      	mvi	b,18	; GAR, SUBR, SHAR, SIPR
 00BD CD4A00    	call	wizset
 00C0 211D00    	lxi	h,nvbuf+PMAGIC
 00C3 1600      	mvi	d,0
 00C5 1E1D      	mvi	e,PMAGIC
 00C7 0603      	mvi	b,3
 00C9 CD4A00    	call	wizset
                	lxix	nvbuf+32
 00CC+DD21      	DB	0DDH,21H
 00CE+2000      	DW	NVBUF+32
 00D0 1608      	mvi	d,SOCK0
 00D2 0608      	mvi	b,8
 00D4 C5        rest0:	push	b
                	ldx	a,SnPORT
 00D5+DD7E04    	DB	0DDH,A*8+46H,SNPORT
 00D8 FE31      	cpi	31h
 00DA C2F700    	jnz	rest1	; skip unconfigured sockets
 00DD CD6100    	call	wizclose
 00E0 CD8300    	call	settcp	; ensure MR is set to TCP/IP
                	ldx	a,NvKPALVTR
 00E3+DD7E1D    	DB	0DDH,A*8+46H,NVKPALVTR
 00E6 CD9E00    	call	skeep
 00E9 1E04      	mvi	e,SnPORT
 00EB 0602      	mvi	b,2
 00ED CD7700    	call	setsok
 00F0 1E0C      	mvi	e,SnDIPR
 00F2 0606      	mvi	b,6	; DIPR and DPORT
 00F4 CD7700    	call	setsok
 00F7 012000    rest1:	lxi	b,32
                	dadx	b
 00FA+DD09      	DB	0DDH,B*8+09H
 00FC 3E20      	mvi	a,001$00$000b	; socket BSB incr value
 00FE 82        	add	d
 00FF 57        	mov	d,a
 0100 C1        	pop	b
                	djnz	rest0
 0101+10D1      	DB	10H,REST0-$-1
 0103 AF        	xra	a
 0104 C9        	ret
                
                	dseg
 0000 00        tmp:	db	0
                
 0001           	end
