		; Boot Module for SDCard(s) on H8xSPI
			maclib	ram
**** ram.lib ****
**** bsdcard.asm ****
			maclib	core
**** core.lib ****
**** bsdcard.asm ****
			maclib	z80
**** z80.lib ****
**** bsdcard.asm ****
		
0050          	drv0	equ	80
0002          	ndrv	equ	2
		
0040          	spi	equ	40h	; same board as WizNet
		
0040          	spi?dat	equ	spi+0
0041          	spi?ctl	equ	spi+1
0041          	spi?sts	equ	spi+1
		
0004          	SD0SCS	equ	0100b	; SCS for SDCard 0
0008          	SD1SCS	equ	1000b	; SCS for SDCard 1
		
0040          	CMDST	equ	01000000b	; command start bits
		
1000          		org	1000h
1000  03      	first:	db	HIGH (last-first)	; +0: num pages
1001  10      		db	HIGH first		; +1: ORG page
1002  5002    		db	drv0,ndrv	; +2,+3: phy drv base, num
		
1004  C31710  		jmp	init	; +4: init entry
1007  C31910  		jmp	boot	; +7: boot entry
		
100A  53      		db	'S'	; +10: Boot command letter
100B  07      		db	7	; +11: front panel key
100C  42      		db	42h	; +12: port, 0 if variable
100D  A4C2CE  		db	10100100b,11000010b,11001110b	; +13: FP display ("Sdc")
1010  53444361		db	'SDCard',0	; +16: mnemonic string
      726400
		
		; should do card init sequence... but don't know LUN...
1017          	init:
1017  AF      		xra	a	; NC
1018  C9      		ret
		
1019          	boot:
			; Partition is passed to bootloader, but we need
			; segment offset before we can start.
			; stack: retL, retH, str0, str1, ...
1019  210200  		lxi	h,2
101C  39      		dad	sp	; HL=string (maybe)
101D  CD4F10  		call	cardsetup
1020  D8      		rc
1021  CD9610  		call	cardinit
1024  D8      		rc
			; init for reading...
1025  2A5621  		lhld	l2156h
1028  22A211  		shld	cmd17+1
102B  2A5821  		lhld	l2156h+2
102E  22A411  		shld	cmd17+3
1031  218022  		lxi	h,bootbf
1034  227311  		shld	dma
1037  3E0A    		mvi	a,10	; 10 sectors to read
1039  327511  		sta	cnt
103C          	boot0:
103C  2A7311  		lhld	dma
103F  CD3611  		call	read
1042  D8      		rc
1043  CD2011  		call	incr
1046  217511  		lxi	h,cnt
1049  35      		dcr	m
104A  20F0    		jrnz	boot0
104C  C33B00  		jmp	hwboot
		
		; HL=string
104F          	cardsetup:
104F  EB      		xchg		; DE=string
1050  210000  		lxi	h,0	; def segment
1053  225821  		shld	l2156h+2
1056  225A21  		shld	l2156h+4
1059  3A3121  		lda	AIO$UNI	; 0000000d = 0/1
105C  3C      		inr	a	; 01b/10b
105D  07      		rlc
105E  07      		rlc		; = SD0SCS/SD1SCS
105F  327211  		sta	scs
1062  3E50    		mvi	a,drv0
1064  323420  		sta	l2034h	; pre-loader expects 80-88 for partn
1067  1A      		ldax	d
1068  13      		inx	d
1069  FEC3    		cpi	0c3h	; JMP means no string present
106B  2824    		jrz	nostr
106D  B7      		ora	a	; check for "", too
106E  2821    		jrz	nostr
1070  CD5311  		call	trydig
1073  300F    		jrnc	gotdig
1075  CD6211  		call	tryltr
1078  D8      		rc
1079  1A      		ldax	d
107A  13      		inx	d
107B  B7      		ora	a
107C  2813    		jrz	gotit
107E  CD5311  		call	trydig
1081  D8      		rc
1082  1809    		jr	chkend
1084  1A      	gotdig:	ldax	d
1085  13      		inx	d
1086  B7      		ora	a
1087  2808    		jrz	gotit
1089  CD6211  		call	tryltr
108C  D8      		rc
108D  1A      	chkend:	ldax	d
108E  B7      		ora	a
108F  37      		stc
1090  C0      		rnz	; max two chars
1091          	gotit:
1091  225621  	nostr:	shld	l2156h	; l2156h[0]=31:24, l2156h[1]=23:16... (32-bit LBA)
1094  AF      		xra	a
1095  C9      		ret
		
		; perform SDCard power-on initialization
		; returns CY on error
1096          	cardinit:
			; waive 1mS delay... we are well past that...
1096  CDA811  		call	run74	; must cycle >= 74 clocks
			; CMD0 - enter SPI mode
1099  217611  		lxi	h,cmd0
109C  1601    		mvi	d,1
109E  1E01    		mvi	e,1	; turn off SCS
10A0  CDCB11  		call	sdcmd
10A3  D8      		rc
10A4  3A7C11  		lda	cmd0+6	; R1
10A7  FE01    		cpi	00000001b	; IDLE bit set?
10A9  37      		stc
10AA  C0      		rnz
10AB  217D11  		lxi	h,cmd8
10AE  1605    		mvi	d,5
10B0  1E01    		mvi	e,1	; turn off SCS
10B2  CDCB11  		call	sdcmd
10B5  D8      		rc
10B6  3A8311  		lda	cmd8+6
10B9  FE01    		cpi	00000001b	; no error, IDLE bit still set
10BB  2809    		jrz	ok8
10BD  CB57    		bit	2,a	; Illegal Command
10BF  37      		stc
10C0  C8      		rz
			; CMD8 not recognized, SD1 card... (not supported?)
10C1  3E00    		mvi	a,0
10C3  329011  		sta	acmd41+1
10C6          	ok8:
10C6  210500  		lxi	h,5	; small number of errors allowed
10C9          	cdi0:	; this could take a long time...  need timeout...
10C9  E5      		push	h
10CA  218F11  		lxi	h,acmd41
10CD  1601    		mvi	d,1
10CF  CDB111  		call	doacmd
10D2  E1      		pop	h
10D3  D8      		rc
10D4  3A9511  		lda	acmd41+6
10D7  FE00    		cpi	00000000b	; READY?
10D9  280B    		jrz	cdi1
10DB  E67E    		ani	01111110b	; any errors?
10DD  28EA    		jrz	cdi0		; loop infinitely if just "BUSY"
10DF  2B      		dcx	h
10E0  7C      		mov	a,h
10E1  B5      		ora	l
10E2  20E5    		jrnz	cdi0
10E4  37      		stc	; timeout - error
10E5  C9      		ret
10E6          	cdi1:	; done with init
			; now try CMD58 if applicable
10E6  3A9011  		lda	acmd41+1
10E9  B7      		ora	a
10EA  C8      		rz	; no more init for SDC1... return NC
			; SDC2... get CMD58
10EB  219611  		lxi	h,cmd58
10EE  1605    		mvi	d,5
10F0  1E01    		mvi	e,1	; turn off SCS
10F2  CDCB11  		call	sdcmd
10F5  D8      		rc
10F6  3A9D11  		lda	cmd58+7 ; OCR 31:24
10F9  CB7F    		bit	7,a	; power-up status
10FB  37      		stc
10FC  C8      		rz	; card failed to power-up
10FD  CB77    		bit	6,a	; SDSC?
10FF  2802    		jrz	sdhc
1101  AF      		xra	a
1102  C9      		ret
		
1103  210B11  	sdhc:	lxi	h,nosc
1106  CD4400  		call	msgout
1109  37      		stc
110A  C9      		ret
		
110B  53445343	nosc:	db	'SDSC not supported',13,10,0
      206E6F74
      20737570
      706F7274
      65640D0A
      00
		
		; increment LBA in cmd17, and DMA
1120          	incr:
1120  2A7311  		lhld	dma
1123  24      		inr	h	; +256
1124  24      		inr	h	; +512
1125  227311  		shld	dma
1128  21A511  		lxi	h,cmd17+4
112B  34      		inr	m
112C  C0      		rnz
112D  2B      		dcx	h
112E  34      		inr	m
112F  C0      		rnz
1130  2B      		dcx	h
1131  34      		inr	m
1132  C0      		rnz
1133  2B      		dcx	h
1134  34      		inr	m
1135  C9      		ret
		
		; read LBA stored in cmd17...
		; HL=buffer
		; returns CY on error
1136          	read:
1136  E5      		push	h
1137  21A111  		lxi	h,cmd17
113A  1601    		mvi	d,1
113C  1E00    		mvi	e,0	; leave SCS on
113E  CDCB11  		call	sdcmd
1141  E1      		pop	h
1142  380A    		jrc	badblk	; turn off SCS
1144  3AA711  		lda	cmd17+6
1147  B7      		ora	a
1148  2004    		jrnz	badblk	; turn off SCS
114A  CD0D12  		call	sdblk	; turns off SCS
114D  C9      		ret	; CY=error
114E          	badblk:
114E  AF      		xra	a
114F  D341    		out	spi?ctl	; SCS off
1151  37      		stc
1152  C9      		ret
		
1153          	trydig:
1153  FE30    		cpi	'0'	; digit?
1155  D8      		rc	; error
1156  FE3A    		cpi	'9'+1	; max 9 partitions
1158  3F      		cmc
1159  D8      		rc	; error - or letter
115A  D630    		sui	'0'
115C  C650    		adi	drv0
115E  323420  		sta	l2034h	; pre-loader expects 70-78 for partn
1161  C9      		ret
		
1162          	tryltr:
1162  FE41    		cpi	'A'
1164  D8      		rc	; error - or digit
1165  E65F    		ani	5fh	; toupper
1167  D641    		sui	'A'	; 000sssss
1169  FE1A    		cpi	26
116B  3F      		cmc
116C  D8      		rc
116D  07      		rlc
116E  07      		rlc
116F  07      		rlc		; sssss000 = 256M/512B
1170  67      		mov	h,a	;
1171  C9      		ret
		
1172  04      	scs:	db	SD0SCS
1173  0000    	dma:	dw	0
1175  00      	cnt:	db	0
		
		; command is always 6 bytes.
		; CRC is ignored, but "end bit" must be "1".
		; This explains the problems seen with "Samsung 32Pro",
1176  40000000	cmd0:	db	CMDST+0,0,0,0,0,95h
      0095
117C  00      		db	0
117D  48000001	cmd8:	db	CMDST+8,0,0,01h,0aah,87h
      AA87
1183  00000000		db	0,0,0,0,0
      00
1188  77000000	cmd55:	db	CMDST+55,0,0,0,0,1
      0001
118E  00      		db	0
118F  69400000	acmd41:	db	CMDST+41,40h,0,0,0,1
      0001
1195  00      		db	0
1196  7A000000	cmd58:	db	CMDST+58,0,0,0,0,1
      0001
119C  00000000		db	0,0,0,0,0
      00
11A1  51000000	cmd17:	db	CMDST+17,0,0,0,0,1
      0001
11A7  00      		db	0
		
		; run-out at least 74 clock cycles... with SCS off...
11A8  060A    	run74:	mvi	b,10	; 80 cycles
11AA  0E40    		mvi	c,spi?dat
11AC  ED78    	run740:	inp	a
11AE  10FC    		djnz	run740
11B0  C9      		ret
		
		; E=dump flag, always turns off SCS
11B1          	doacmd:
11B1  E5      		push	h
11B2  D5      		push	d
11B3  218811  		lxi	h,cmd55
11B6  1601    		mvi	d,1
11B8  1E00    		mvi	e,0	; do not turn off SCS
11BA  CDCB11  		call	sdcmd
			; ignore results? CMD55 never gives error?
11BD  D1      		pop	d
11BE  E1      		pop	h
11BF  1E01    		mvi	e,1
11C1  CDCB11  		call	sdcmd
11C4  F5      		push	psw
			; for some reason, this is required (at least for ACMD41)
			; when certain cards (Flexon) are in-socket during power up.
			; If the card is re-seated after power up, this is not needed.
			; Unclear if this is a MT011 anomaly or universal.
11C5  DB40    		in	spi?dat
11C7  DB40    		in	spi?dat
11C9  F1      		pop	psw
11CA  C9      		ret
		
		; send (6 byte) command to SDCard, get response.
		; HL=command+response buffer, D=response length
		; return A=response code (00=success), HL=idle length, DE=gap length
11CB          	sdcmd:
11CB  3A7211  		lda	scs
11CE  D341    		out	spi?ctl	; SCS on
11D0  0E40    		mvi	c,spi?dat
			; wait for idle
			; TODO: timeout this loop
11D2  E5      		push	h	; save command+response buffer
11D3  210001  		lxi	h,256	; idle timeout
11D6  ED78    	sdcmd0:	inp	a
11D8  FEFF    		cpi	0ffh
11DA  2808    		jrz	sdcmd1
11DC  2B      		dcx	h
11DD  7C      		mov	a,h
11DE  B5      		ora	l
11DF  20F5    		jrnz	sdcmd0
			; timeout - error
11E1  E1      		pop	h
11E2  37      		stc
11E3  C9      		ret
11E4  E1      	sdcmd1:	pop	h	; command buffer back
11E5  0606    		mvi	b,6
11E7  EDB3    		outir
11E9  ED78    		inp	a	; prime the pump
11EB  E5      		push	h	; points to response area...
11EC  210001  		lxi	h,256	; gap timeout
11EF  ED78    	sdcmd2:	inp	a
11F1  FEFF    		cpi	0ffh
11F3  2008    		jrnz	sdcmd3
11F5  2B      		dcx	h
11F6  7C      		mov	a,h
11F7  B5      		ora	l
11F8  20F5    		jrnz	sdcmd2
11FA  E1      		pop	h
11FB  37      		stc
11FC  C9      		ret
11FD  E1      	sdcmd3:	pop	h	; response buffer back
11FE  42      		mov	b,d
11FF  77      		mov	m,a
1200  23      		inx	h
1201  05      		dcr	b
1202  2802    		jrz	sdcmd4
1204  EDB2    		inir	; rest of response
1206  7B      	sdcmd4:	mov	a,e	; SCS flag
1207  B7      		ora	a
1208  C8      		rz
1209  AF      		xra	a
120A  D341    		out	spi?ctl	; SCS off
120C  C9      		ret	; NC
		
		; read a 512-byte data block, with packet header and CRC (ignored).
		; READ command was already sent and responded to.
		; HL=buffer
		; return CY on error (A=error), SCS always off
120D          	sdblk:
120D  3A7211  		lda	scs
1210  D341    		out	spi?ctl	; SCS on
1212  0E40    		mvi	c,spi?dat
			; wait for packet header (or error)
			; TODO: timeout this loop
1214  110001  		lxi	d,256	; gap timeout
1217  ED78    	sdblk0:	inp	a
1219  FEFF    		cpi	0ffh
121B  2008    		jrnz	sdblk1
121D  1B      		dcx	d
121E  7A      		mov	a,d
121F  B3      		ora	e
1220  20F5    		jrnz	sdblk0
1222  37      		stc
1223  1810    		jr	sdblk2
1225          	sdblk1:	
1225  FEFE    		cpi	11111110b	; data start
1227  37      		stc	; else must be error
1228  200B    		jrnz	sdblk2
122A  0600    		mvi	b,0	; 256 bytes at a time
122C  EDB2    		inir
122E  EDB2    		inir
1230  ED78    		inp	a	; CRC 1
1232  ED78    		inp	a	; CRC 2
1234  AF      		xra	a	; NC
1235  F5      	sdblk2:	push	psw
1236  AF      		xra	a
1237  D341    		out	spi?ctl	; SCS off
1239  F1      		pop	psw
123A  C9      		ret
		
123B  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FF
0000          	if ($ > 1800h)
		endif
		
1300          	last:	end



Statistics:

     4	passes
     0	jr promotions
   132	symbols
   768	bytes

   283	macro calls
  3759	macro bytes
     0	invented symbols
