		; Command module for SETUP
0002          	VERN	equ	02h
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
FFFF          	z180	equ	true
		
			maclib	ram
**** ram.lib ****
**** csetup180.asm ****
			maclib	setup
**** setup.lib ****
**** csetup180.asm ****
FFFF          	if z180
			maclib	z180
**** z180.lib ****
**** csetup180.asm ****
		else
		endif
		
000D          	CR	equ	13
000A          	LF	equ	10
0008          	BS	equ	8
0003          	CTLC	equ	3
0007          	BEL	equ	7
001B          	ESC	equ	27
		
FFFF          	if z180
0038          	mmu$cbr	equ	38h
0039          	mmu$bbr	equ	39h
003A          	mmu$cbar equ	3ah
		endif
		
8000          		org	8000h	; out of reach of ROM overlay...
8000  07      	first:	db	HIGH (last-first)	; +0: num pages
8001  80      		db	HIGH first		; +1: ORG page
8002  FF00    		db	255,0	; +2,+3: phy drv base, num
		
8004  C31680  		jmp	init	; +4: init entry
8007  C31880  		jmp	exec	; +7: action entry
		
800A  43      		db	'C'	; +10: Command letter
800B  FF      		db	-1	; +11: front panel key
800C  00      		db	0	; +12: port, 0 if variable
800D  FFFFFF  		db	11111111b,11111111b,11111111b	; +13: FP display
8010  53657475		db	'Setup',0	; +16: mnemonic string
      7000
		
8016          	init:
8016  AF      		xra	a	; NC
8017  C9      		ret
		
8018          	exec:
8018  117E84  		lxi	d,signon
801B  CDFC81  		call	msgout
801E  CD1281  		call	get$su	; get a copy of setup data
8021  DCB682  		cc	cserr	; offer to clear if checksum error
			; Primary/Default boot options
8024  111E85  		lxi	d,gpdev
8027  210487  		lxi	h,last+dpdev
802A  CD4883  		call	getlet
802D  113C85  		lxi	d,gpuni
8030  210587  		lxi	h,last+dpuni
8033  CDFC83  		call	getnum
8036  115885  		lxi	d,gpstr
8039  210687  		lxi	h,last+dpstr
803C  CD4184  		call	getstr
			; Secondary boot options
803F  117685  		lxi	d,gsdev
8042  218687  		lxi	h,last+dsdev
8045  CD4883  		call	getlet
8048  118E85  		lxi	d,gsuni
804B  218787  		lxi	h,last+dsuni
804E  CDFC83  		call	getnum
8051  11A485  		lxi	d,gsstr
8054  218887  		lxi	h,last+dsstr
8057  CD4184  		call	getstr
			; Add-ons Installed
0000          	if not z180
		endif
		
805A  3E36    		mvi	a,'6'
805C  32D585  		sta	dport+1
805F  11D485  		lxi	d,dport
8062  210B88  		lxi	h,last+h67pt
8065  CDBE83  		call	gethex
		
8068  3E34    		mvi	a,'4'
806A  32D585  		sta	dport+1
806D  11D485  		lxi	d,dport
8070  210C88  		lxi	h,last+h47pt
8073  CDBE83  		call	gethex
		
8076  3E33    		mvi	a,'3'
8078  32D585  		sta	dport+1
807B  11D485  		lxi	d,dport
807E  210D88  		lxi	h,last+h37pt
8081  CDBE83  		call	gethex
		
0000          	if 0	; H17 is not configurable?
		endif
		
			; TODO: more setup?
8084  3AEC85  		lda	dirty
8087  B7      		ora	a
8088  C29280  		jnz	mkchg
808B  11BF84  	xxchg:	lxi	d,nochg
808E  CDFC81  		call	msgout
8091  C9      		ret
		
8092  11D384  	mkchg:	lxi	d,dochg
8095  21EF85  		lxi	h,inbuf
8098  36FF    		mvi	m,0ffh
809A  CDE982  		call	getyn
809D  3AEF85  		lda	inbuf
80A0  B7      		ora	a
80A1  20E8    		jrnz	xxchg
80A3  110087  		lxi	d,last
80A6  01FE07  		lxi	b,sulen
80A9  CD6581  		call	schksm
80AC  2A8881  		lhld	sum
80AF  228A81  		shld	ssum
80B2  F3      		di
80B3  3A3620  		lda	ctl$F2
80B6  F5      		push	psw
FFFF          	if z180
80B7  0600    		mvi	b,0
80B9  ED0138  		out0	b,mmu$cbr
80BC  06F8    		mvi	b,0f8h
80BE  ED0139  		out0	b,mmu$bbr
80C1  0680    		mvi	b,1000$0000b
80C3  ED013A  		out0	b,mmu$cbar
80C6  F6A0    		ori	10100000b	; WE, no legacy ROM
80C8  D3F2    		out	0f2h
		else
		endif
80CA  210087  		lxi	h,last
80CD  110010  		lxi	d,suadr
80D0  012000  		lxi	b,susize/64
80D3  CD8F82  		call	flash
			;jrc	error	; never returned, actually
80D6  F1      		pop	psw
80D7  F5      		push	psw
80D8  E67F    		ani	01111111b	; WE off
80DA  D3F2    		out	0f2h
80DC  110010  		lxi	d,suadr
80DF  01FE07  		lxi	b,sulen
80E2  CD4681  		call	vchksm
80E5  2A8881  		lhld	sum
80E8  EB      		xchg
80E9  2A8A81  		lhld	ssum
80EC  B7      		ora	a
80ED  ED52    		dsbc	d
80EF  2019    		jrnz	error
80F1  F1      		pop	psw
80F2  D3F2    		out	0f2h
FFFF          	if z180
80F4  AF      		xra	a
80F5  D339    		out	mmu$bbr
		endif
80F7  FB      		ei
80F8  11E284  		lxi	d,saved
80FB  CDFC81  		call	msgout
			; Update monitor copy
80FE  210087  		lxi	h,last
8101  1100F8  		lxi	d,susave
8104  010F01  		lxi	b,sumax
8107  EDB0    		ldir
8109  C9      		ret
		
		; PSW is on stack...
810A  F1      	error:	pop	psw
810B  11F584  		lxi	d,failed
810E  CDFC81  		call	msgout
8111  C9      		ret	; what else can we do?
		
8112  F3      	get$su:	di
8113  3A3620  		lda	ctl$F2
8116  F5      		push	psw
FFFF          	if z180
8117  0600    		mvi	b,0
8119  ED0138  		out0	b,mmu$cbr
811C  06F8    		mvi	b,0f8h
811E  ED0139  		out0	b,mmu$bbr
8121  0680    		mvi	b,1000$0000b
8123  ED013A  		out0	b,mmu$cbar
8126  F6A0    		ori	10100000b	; WE, no legacy ROM
8128  D3F2    		out	0f2h
		else
		endif
812A  210010  		lxi	h,suadr
812D  110087  		lxi	d,last
8130  010008  		lxi	b,susize
8133  EDB0    		ldir
8135  F1      		pop	psw
8136  D3F2    		out	0f2h
FFFF          	if z180
8138  AF      		xra	a
8139  D339    		out	mmu$bbr
		endif
813B  FB      		ei
813C  110087  		lxi	d,last
813F  01FE07  		lxi	b,sulen
8142  CD4681  		call	vchksm
8145  C9      		ret	; CY=checksum error
		
		; DE=code start, BC=length
		; Returns CY on error
8146  210000  	vchksm:	lxi	h,0
8149  228881  		shld	sum
814C  1A      	vchk0:	ldax	d
814D  CD7F81  		call	sum1
8150  13      		inx	d
8151  0B      		dcx	b
8152  78      		mov	a,b
8153  B1      		ora	c
8154  20F6    		jrnz	vchk0
8156  218881  		lxi	h,sum
8159  0602    		mvi	b,2
815B  1A      	vchk2:	ldax	d
815C  BE      		cmp	m
815D  37      		stc
815E  C0      		rnz
815F  13      		inx	d
8160  23      		inx	h
8161  10F8    		djnz	vchk2
8163  AF      		xra	a	; NC
8164  C9      		ret
		
		; DE=code start, BC=length
		; Sets checksum after code
8165  210000  	schksm:	lxi	h,0
8168  228881  		shld	sum
816B  1A      	schk0:	ldax	d
816C  CD7F81  		call	sum1
816F  13      		inx	d
8170  0B      		dcx	b
8171  78      		mov	a,b
8172  B1      		ora	c
8173  20F6    		jrnz	schk0
8175  218881  		lxi	h,sum
8178  7E      		mov	a,m
8179  12      		stax	d
817A  23      		inx	h
817B  13      		inx	d
817C  7E      		mov	a,m
817D  12      		stax	d
817E  C9      		ret
		
817F  218881  	sum1:	lxi	h,sum
8182  86      		add	m
8183  77      		mov	m,a
8184  D0      		rnc
8185  23      		inx	h
8186  34      		inr	m
8187  C9      		ret
		
8188  0000    	sum:	dw	0
818A  0000    	ssum:	dw	0
		
818C  3E1B    	liniz:	mvi	a,ESC
818E  32EF85  		sta	inbuf
8191  0E01    		mvi	c,1
8193  C3AC82  		jmp	crlf
8196  3600    	linix:	mvi	m,0	; terminate buffer
8198  C3AC82  		jmp	crlf
		
		; input a filename from console, allow backspace
		; returns C=num chars
819B          	linin:
819B  21EF85  		lxi	h,inbuf
819E  0E00    		mvi	c,0	; count chars
81A0  CDF181  	lini0	call	conin
81A3  FE0D    		cpi	CR
81A5  28EF    		jrz	linix
81A7  FE1B    		cpi	ESC
81A9  28E1    		jrz	liniz
81AB  FE03    		cpi	CTLC	; cancel
81AD  37      		stc
81AE  C8      		rz
81AF  FE08    		cpi	BS
81B1  281C    		jrz	backup
81B3  FE20    		cpi	' '
81B5  3811    		jrc	chrnak
81B7  FE7F    		cpi	'~'+1
81B9  300D    		jrnc	chrnak
81BB  77      	chrok:	mov	m,a
81BC  23      		inx	h
81BD  0C      		inr	c
81BE  FAC681  		jm	chrovf	; 128 chars max
81C1  CDE681  		call	conout
			; TODO: detect overflow...
81C4  18DA    		jr	lini0
81C6  2B      	chrovf:	dcx	h
81C7  0D      		dcr	c
81C8  3E07    	chrnak:	mvi	a,BEL
81CA  CDE681  		call	conout
81CD  18D1    		jr	lini0
81CF          	backup:
81CF  79      		mov	a,c
81D0  B7      		ora	a
81D1  28CD    		jrz	lini0
81D3  0D      		dcr	c
81D4  2B      		dcx	h
81D5  3E08    		mvi	a,BS
81D7  CDE681  		call	conout
81DA  3E20    		mvi	a,' '
81DC  CDE681  		call	conout
81DF  3E08    		mvi	a,BS
81E1  CDE681  		call	conout
81E4  18BA    		jr	lini0
		
81E6          	chrout:
81E6  F5      	conout:	push	psw
81E7  DBED    	cono0:	in	0edh
81E9  E620    		ani	00100000b
81EB  28FA    		jrz	cono0
81ED  F1      		pop	psw
81EE  D3E8    		out	0e8h
81F0  C9      		ret
		
81F1  DBED    	conin:	in	0edh
81F3  E601    		ani	00000001b
81F5  28FA    		jrz	conin
81F7  DBE8    		in	0e8h
81F9  E67F    		ani	01111111b
81FB  C9      		ret
		
81FC  1A      	msgout:	ldax	d
81FD  B7      		ora	a
81FE  C8      		rz
81FF  CDE681  		call	conout
8202  13      		inx	d
8203  18F7    		jr	msgout
		
		; A=number to print
		; leading zeroes blanked - must preserve B
8205          	decout:
8205  C5      		push	b
8206  0E00    		mvi	c,0
8208  1664    		mvi	d,100
820A  CD2D82  		call	divide
820D  160A    		mvi	d,10
820F  CD2D82  		call	divide
8212  C630    		adi	'0'
8214  CDE681  		call	chrout
8217  C1      		pop	b
8218  C9      		ret
		
8219          	hexout:
8219  F5      		push	psw
821A  07      		rlc
821B  07      		rlc
821C  07      		rlc
821D  07      		rlc
821E  CD2282  		call	hexdig
8221  F1      		pop	psw
8222  E60F    	hexdig:	ani	0fh
8224  C690    		adi	90h
8226  27      		daa
8227  CE40    		aci	40h
8229  27      		daa
822A  C3E681  		jmp	chrout
		
822D  1E00    	divide:	mvi	e,0
822F  92      	div0:	sub	d
8230  1C      		inr	e
8231  30FC    		jrnc	div0
8233  82      		add	d
8234  1D      		dcr	e
8235  2005    		jrnz	div1
8237  CB41    		bit	0,c
8239  2001    		jrnz	div1
823B  C9      		ret
823C  CBC1    	div1:	setb	0,c
823E  F5      		push	psw	; remainder
823F  3E30    		mvi	a,'0'
8241  83      		add	e
8242  CDE681  		call	chrout
8245  F1      		pop	psw	; remainder
8246  C9      		ret
		
8247          	parshx:
8247  1600    		mvi	d,0
8249  7E      	px0:	mov	a,m
824A  B7      		ora	a
824B  C8      		rz
824C  D630    		sui	'0'
824E  D8      		rc
824F  FE0A    		cpi	'9'-'0'+1
8251  380A    		jrc	px3
8253  D611    		sui	'A'-'0'
8255  E6DF    		ani	11011111b	; toupper
8257  FE06    		cpi	'F'-'A'+1
8259  3F      		cmc
825A  D8      		rc
825B  C60A    		adi	10
825D  5F      	px3:	mov	e,a
825E  7A      		mov	a,d
825F  87      		add	a
8260  D8      		rc
8261  87      		add	a
8262  D8      		rc
8263  87      		add	a
8264  D8      		rc
8265  87      		add	a
8266  D8      		rc
8267  83      		add	e	; no CY possible
8268  57      		mov	d,a
8269  23      		inx	h
826A  10DD    		djnz	px0
826C  B7      		ora	a
826D  C9      		ret
		
		; Parse a 8-bit (max) decimal number
		; HL=string, B=count
		; Returns D=number, CY=error
826E          	parsnm:
826E  110000  		lxi	d,0
8271  7E      	pd0:	mov	a,m
8272  B7      		ora	a
8273  C8      		rz
8274  FE30    		cpi	'0'
8276  D8      		rc
8277  FE3A    		cpi	'9'+1
8279  3F      		cmc
827A  D8      		rc
827B  E60F    		ani	0fh
827D  5F      		mov	e,a
827E  7A      		mov	a,d
827F  87      		add	a	; *2
8280  D8      		rc	
8281  87      		add	a	; *4
8282  D8      		rc	
8283  82      		add	d	; *5
8284  D8      		rc	
8285  87      		add	a	; *10
8286  D8      		rc	
8287  83      		add	e	;
8288  D8      		rc
8289  57      		mov	d,a
828A  23      		inx	h
828B  10E4    		djnz	pd0
828D  B7      		ora	a	; NC
828E  C9      		ret
		
		; flash ROM from HL to DE, 64 bytes at a time.
		; DE must be on a 64-byte boundary.
		; BC=num pages to flash
		; returns CY on error, else HL,DE at next 64 bytes
		; caller must set WE... and MEM1 as needed.
828F          	flash:
828F  C5      		push	b
8290  014000  		lxi	b,64
8293  EDB0    		ldir
			; -----
8295  2B      		dcx	h
8296  1B      		dcx	d	; last addr written...
			; wait for write cycle to begin...
			; TODO: timeout this loop?
8297  1A      	flash2:	ldax	d
8298  AE      		xra	m
8299  E680    		ani	10000000b	; bit7 is inverted when busy...
829B  28FA    		jrz	flash2
			; wait for write cycle to end...
			; TODO: timeout this loop?
829D  1A      	flash0:	ldax	d
829E  AE      		xra	m
829F  E680    		ani	10000000b	; bit7 is inverted when busy...
82A1  20FA    		jrnz	flash0
82A3  23      		inx	h
82A4  13      		inx	d
			; done with page...
			;call	progress	; TODO: progress needed?
82A5  C1      		pop	b
82A6  0B      		dcx	b
82A7  78      		mov	a,b
82A8  B1      		ora	c
82A9  20E4    		jrnz	flash
			;xra	a	; NC already
82AB  C9      		ret
		
82AC  3E0D    	crlf:	mvi	a,CR
82AE  CDE681  		call	conout
82B1  3E0A    		mvi	a,LF
82B3  C3E681  		jmp	conout
		
82B6  119184  	cserr:	lxi	d,csbad
82B9  CDFC81  		call	msgout
82BC  21EF85  		lxi	h,inbuf
82BF  36FF    		mvi	m,0ffh
82C1  CDE982  		call	getyn
82C4  3AEF85  		lda	inbuf
82C7  B7      		ora	a	; NZ=no
82C8  201B    		jrnz	cserr9
82CA  210087  		lxi	h,last
82CD  54      		mov	d,h
82CE  5D      		mov	e,l
82CF  36FF    		mvi	m,0ffh
82D1  13      		inx	d
82D2  01FF07  		lxi	b,susize-1
82D5  EDB0    		ldir
82D7  210000  		lxi	h,0
82DA  220287  		shld	last+subase
82DD  3E01    		mvi	a,1
82DF  32EC85  		sta	dirty
82E2  C9      		ret
		
		; CY preserved if set...
82E3  E1      	nmerr9:	pop	h	; discard saved HL
82E4  D1      		pop	d	; discard saved DE
82E5  E1      	cserr9:	pop	h	; discard our ret adr
82E6  C38B80  		jmp	xxchg	; return to monitor
		
		; DE=prompt prefix, HL=value location
		; get a Y/N, Wait for CR, allow BS.
		; Stores 0ffh for "no", 000h for "yes"
82E9          	getyn:
82E9  CDFC81  		call	msgout
82EC  7E      		mov	a,m
82ED  B7      		ora	a
82EE  3E4E    		mvi	a,'N'
82F0  2002    		jrnz	getyn1
82F2  3E59    		mvi	a,'Y'
82F4  CDE681  	getyn1:	call	conout
82F7  111A85  		lxi	d,gpunn
82FA  CDFC81  		call	msgout
82FD  CDF181  	getyn2:	call	conin
8300  FE0D    		cpi	CR
8302  CAA183  		jz	getlt1	; same processing
8305  E65F    		ani	01011111b	; toupper
8307  FE59    		cpi	'Y'
8309  280B    		jrz	getyn0
830B  FE4E    		cpi	'N'
830D  2807    		jrz	getyn0
830F  3E07    		mvi	a,BEL
8311  CDE681  		call	conout
8314  18E7    		jr	getyn2
8316  CDE681  	getyn0:	call	conout
8319  D64E    		sui	'N'	;  0='N',  X='Y'
831B  D601    		sui	1	; CY='N', NC='Y'
831D  9F      		sbb	a	; FF='N', 00='Y'
831E  4F      		mov	c,a
831F  CDF181  	getyn5:	call	conin
8322  FE0D    		cpi	CR
8324  2875    		jrz	getlt3	; same processing
8326  FE08    		cpi	BS
8328  2807    		jrz	getyn4
832A  3E07    		mvi	a,BEL
832C  CDE681  		call	conout
832F  18EE    		jr	getyn5
8331  CDE681  	getyn4:	call	conout
8334  3E20    		mvi	a,' '
8336  CDE681  		call	conout
8339  3E08    		mvi	a,BS
833B  CDE681  		call	conout
833E  18BD    		jr	getyn2
		
		; DE=prompt prefix, HL=value location
		; get a single letter, toupper. Wait for CR, allow BS
		; TODO: allow value meaning "not defined"?
8340          	getlete:
8340  3E07    		mvi	a,BEL
8342  CDE681  		call	conout
8345  CDAC82  		call	crlf
8348          	getlet:
8348  ED53ED85		sded	curmsg
834C  CDFC81  		call	msgout
834F  7E      		mov	a,m
8350  FEFF    		cpi	0ffh
8352  2803    		jrz	getlt6
8354  CDE681  		call	conout
8357  111A85  	getlt6:	lxi	d,gpunn
835A  CDFC81  		call	msgout
835D  CDF181  	getlt2:	call	conin
8360  FE0D    		cpi	CR
8362  283D    		jrz	getlt1
8364  FE1B    		cpi	ESC
8366  2844    		jrz	getltx
8368  E65F    		ani	01011111b	; toupper
836A  FE42    		cpi	'B'	; 'A' means default, makes no sense here
836C  3837    		jrc	getlt0
836E  FE5B    		cpi	'Z'+1
8370  3033    		jrnc	getlt0
			; wait for CR, honor BS
8372  4F      		mov	c,a
8373  CDE681  		call	conout
8376  CDF181  	getlt5:	call	conin
8379  FE0D    		cpi	CR
837B  281E    		jrz	getlt3
837D  FE08    		cpi	BS
837F  280B    		jrz	getlt4
8381  FE1B    		cpi	ESC
8383  2827    		jrz	getltx
8385  3E07    		mvi	a,BEL
8387  CDE681  		call	conout
838A  18EA    		jr	getlt5
838C  CDE681  	getlt4:	call	conout
838F  3E20    		mvi	a,' '
8391  CDE681  		call	conout
8394  3E08    		mvi	a,BS
8396  CDE681  		call	conout
8399  18C2    		jr	getlt2
839B  71      	getlt3:	mov	m,c
839C  3E01    		mvi	a,1
839E  32EC85  		sta	dirty
83A1  CDAC82  	getlt1:	call	crlf
83A4  C9      		ret
83A5  3E07    	getlt0:	mvi	a,BEL
83A7  CDE681  		call	conout
83AA  18B1    		jr	getlt2
		
		; delete setting, re-prompt
83AC  36FF    	getltx:	mvi	m,0ffh
83AE  3E01    		mvi	a,1
83B0  32EC85  		sta	dirty
83B3  ED5BED85		lded	curmsg
83B7  1887    		jr	getlete
		
		; DE=prompt prefix, HL=value location
83B9          	gethexe:
83B9  3E07    		mvi	a,BEL
83BB  CDE681  		call	conout
83BE          	gethex:
83BE  D5      		push	d
83BF  E5      		push	h
83C0  CDFC81  		call	msgout
83C3  7E      		mov	a,m
83C4  CD1982  		call	hexout
83C7  111A85  		lxi	d,gpunn
83CA  CDFC81  		call	msgout
83CD  CD9B81  		call	linin
83D0  DAE382  		jc	nmerr9
83D3  79      		mov	a,c
83D4  B7      		ora	a
83D5  2862    		jrz	getxit
83D7  3AEF85  		lda	inbuf
83DA  FE1B    		cpi	ESC	; delete setting
83DC  2813    		jrz	gethxx
83DE  41      		mov	b,c
83DF  21EF85  		lxi	h,inbuf
83E2  CD4782  		call	parshx
83E5  7A      		mov	a,d
83E6  E1      		pop	h
83E7  D1      		pop	d
83E8  38CF    		jrc	gethexe
83EA  77      		mov	m,a
83EB  3E01    		mvi	a,1
83ED  32EC85  		sta	dirty
83F0  C9      		ret
		
		; delete setting, re-prompt
83F1  E1      	gethxx:	pop	h
83F2  36FF    		mvi	m,0ffh
83F4  D1      		pop	d
83F5  18C2    		jr	gethexe
		
		; DE=prompt prefix, HL=value location
83F7          	getnume:
83F7  3E07    		mvi	a,BEL
83F9  CDE681  		call	conout
83FC          	getnum:
83FC  D5      		push	d
83FD  E5      		push	h
83FE  CDFC81  		call	msgout
8401  7E      		mov	a,m
8402  FEFF    		cpi	0ffh
8404  2803    		jrz	getnm0
8406  CD0582  		call	decout
8409  111A85  	getnm0:	lxi	d,gpunn
840C  CDFC81  		call	msgout
840F  CD9B81  		call	linin
8412  DAE382  		jc	nmerr9
8415  79      		mov	a,c
8416  B7      		ora	a
8417  2820    		jrz	getxit
8419  3AEF85  		lda	inbuf
841C  FE1B    		cpi	ESC	; delete setting
841E  2813    		jrz	getnmx
8420  41      		mov	b,c
8421  21EF85  		lxi	h,inbuf
8424  CD6E82  		call	parsnm
8427  7A      		mov	a,d
8428  E1      		pop	h
8429  D1      		pop	d
842A  38CB    		jrc	getnume
842C  77      		mov	m,a
842D  3E01    		mvi	a,1
842F  32EC85  		sta	dirty
8432  C9      		ret
		
		; delete setting, re-prompt
8433  E1      	getnmx:	pop	h
8434  36FF    		mvi	m,0ffh
8436  D1      		pop	d
8437  18BE    		jr	getnume
		
8439  E1      	getxit:	pop	h
843A  D1      		pop	d
843B  C9      		ret
		
		; DE=prompt prefix, HL=value location
843C          	getstre:
843C  3E07    		mvi	a,BEL
843E  CDE681  		call	conout
8441          	getstr:
8441  D5      		push	d
8442  E5      		push	h
8443  CDFC81  		call	msgout
8446  7E      		mov	a,m
8447  FEFF    		cpi	0ffh
8449  2804    		jrz	getst0
844B  EB      		xchg
844C  CDFC81  		call	msgout
844F  111A85  	getst0:	lxi	d,gpunn
8452  CDFC81  		call	msgout
8455  CD9B81  		call	linin
8458  DAE382  		jc	nmerr9
845B  79      		mov	a,c
845C  B7      		ora	a
845D  28DA    		jrz	getxit
			; no error checking left?
845F  E1      		pop	h
8460  D1      		pop	d
			; TODO: are we guaranteed 'inbuf' is terminated?
8461  11EF85  		lxi	d,inbuf
8464  1A      		ldax	d
8465  FE1B    		cpi	ESC	; delete setting
8467  2809    		jrz	getstx
8469  1A      	getst2:	ldax	d
846A  B7      		ora	a
846B  2809    		jrz	getst1
846D  77      		mov	m,a
846E  23      		inx	h
846F  13      		inx	d
8470  18F7    		jr	getst2
8472  36FF    	getstx:	mvi	m,0ffh
8474  18C6    		jr	getstre
8476  3600    	getst1:	mvi	m,0
8478  3E01    		mvi	a,1
847A  32EC85  		sta	dirty
847D  C9      		ret
		
847E  6F6E6669	signon:	db	'onfig setup v'
      67207365
      74757020
      76
848B  302E32  		db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
848E  0D0A00  		db	CR,LF,0
		
8491  53657475	csbad:	db	'Setup bank checksum error. Clear setup data (',0
      70206261
      6E6B2063
      6865636B
      73756D20
      6572726F
      722E2043
      6C656172
      20736574
      75702064
      61746120
      2800
84BF  53657475	nochg:	db	'Setup not changed',CR,LF,0
      70206E6F
      74206368
      616E6765
      640D0A00
84D3  53617665	dochg:	db	'Save changes (',0
      20636861
      6E676573
      202800
84E2  53657475	saved:	db	'Setup data saved',CR,LF,0
      70206461
      74612073
      61766564
      0D0A00
84F5  53657475	failed:	db	'Setup flash failed, checksum error',CR,LF,0
      7020666C
      61736820
      6661696C
      65642C20
      63686563
      6B73756D
      20657272
      6F720D0A
      00
		
851A  293A2000	gpunn:	db	'): ',0
851E  5072696D	gpdev:	db	'Primary/Default boot device (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20646576
      69636520
      2800
853C  5072696D	gpuni:	db	'Primary/Default boot unit (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20756E69
      74202800
8558  5072696D	gpstr:	db	'Primary/Default boot string (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20737472
      696E6720
      2800
8576  5365636F	gsdev:	db	'Secondary boot device (',0
      6E646172
      7920626F
      6F742064
      65766963
      65202800
858E  5365636F	gsuni:	db	'Secondary boot unit (',0
      6E646172
      7920626F
      6F742075
      6E697420
      2800
85A4  5365636F	gsstr:	db	'Secondary boot string (',0
      6E646172
      7920626F
      6F742073
      7472696E
      67202800
85BC  48382D35	g512k:	db	'H8-512K RAM installed (',0
      31324B20
      52414D20
      696E7374
      616C6C65
      64202800
85D4  485F3720	dport:	db	'H_7 Port (FF=use SW1) (',0
      506F7274
      20284646
      3D757365
      20535731
      29202800
		
85EC  00      	dirty:	db	0
85ED  0000    	curmsg:	dw	0
		
85EF          	inbuf:	ds	128	; input entry buffer
		
866F          		ds	128
		stack:	ds	0
		
86EF  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FF
		
8700          	last:	end



Statistics:

     4	passes
     0	jr promotions
   181	symbols
  1536	bytes

   218	macro calls
  3984	macro bytes
     0	invented symbols
