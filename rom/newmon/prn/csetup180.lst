		; Command module for SETUP
0002          	VERN	equ	02h
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
FFFF          	z180	equ	true
0000          	nofp	equ	false
		
			maclib	ram
**** ram.lib ****
**** csetup180.asm ****
			maclib	setup
**** setup.lib ****
**** csetup180.asm ****
FFFF          	if z180
			maclib	z180
**** z180.lib ****
**** csetup180.asm ****
		else
		endif
		
000D          	CR	equ	13
000A          	LF	equ	10
0008          	BS	equ	8
0003          	CTLC	equ	3
0007          	BEL	equ	7
001B          	ESC	equ	27
		
FFFF          	if z180
0038          	mmu$cbr	equ	38h
0039          	mmu$bbr	equ	39h
003A          	mmu$cbar equ	3ah
		endif
		
8000          		org	8000h	; out of reach of ROM overlay...
8000  08      	first:	db	HIGH (last-first)	; +0: num pages
8001  80      		db	HIGH first		; +1: ORG page
8002  FF00    		db	255,0	; +2,+3: phy drv base, num
		
8004  C31D80  		jmp	init	; +4: init entry
8007  C31F80  		jmp	exec	; +7: action entry
		
800A  43      		db	'C'	; +10: Command letter
800B  FF      		db	-1	; +11: front panel key
800C  00      		db	0	; +12: port, 0 if variable
800D  FFFFFF  		db	11111111b,11111111b,11111111b	; +13: FP display
8010  436F6E66		db	'Config Setup',0	; +16: mnemonic string
      69672053
      65747570
      00
		
801D          	init:
801D  AF      		xra	a	; NC
801E  C9      		ret
		
801F          	exec:
801F  113185  		lxi	d,signon
8022  CD1D82  		call	msgout
8025  CD2A81  		call	get$su	; get a copy of setup data
8028  DCD782  		cc	cserr	; offer to clear if checksum error
			; Primary/Default boot options
802B  11D185  		lxi	d,gpdev
802E  210488  		lxi	h,last+dpdev
8031  CD6983  		call	getlet
8034  11EF85  		lxi	d,gpuni
8037  210588  		lxi	h,last+dpuni
803A  CD2284  		call	getnum
803D  110B86  		lxi	d,gpstr
8040  210688  		lxi	h,last+dpstr
8043  CD6C84  		call	getstr
FFFF          	if not nofp
			; Secondary boot options
8046  112986  		lxi	d,gsdev
8049  218688  		lxi	h,last+dsdev
804C  CD6983  		call	getlet
804F  114186  		lxi	d,gsuni
8052  218788  		lxi	h,last+dsuni
8055  CD2284  		call	getnum
8058  115786  		lxi	d,gsstr
805B  218888  		lxi	h,last+dsstr
805E  CD6C84  		call	getstr
		endif
			; Add-ons Installed
0000          	if not z180
		endif
		
8061  3E36    		mvi	a,'6'
8063  327086  		sta	dport+1
8066  116F86  		lxi	d,dport
8069  210B89  		lxi	h,last+h67pt
806C  CDDF83  		call	gethex
		
806F  3E34    		mvi	a,'4'
8071  327086  		sta	dport+1
8074  116F86  		lxi	d,dport
8077  210C89  		lxi	h,last+h47pt
807A  CDDF83  		call	gethex
		
807D  3E33    		mvi	a,'3'
807F  327086  		sta	dport+1
8082  116F86  		lxi	d,dport
8085  210D89  		lxi	h,last+h37pt
8088  CDDF83  		call	gethex
		
0000          	if 0	; H17 is not configurable?
		endif
FFFF          	if z180
808B  118786  		lxi	d,gwait
808E  210F89  		lxi	h,last+waits
8091  CDB384  		call	getwt
		endif
		
			; TODO: more setup?
8094  3A9F86  		lda	dirty
8097  B7      		ora	a
8098  C2A280  		jnz	mkchg
809B  117285  	xxchg:	lxi	d,nochg
809E  CD1D82  		call	msgout
80A1  C9      		ret
		
80A2  118685  	mkchg:	lxi	d,dochg
80A5  21A286  		lxi	h,inbuf
80A8  36FF    		mvi	m,0ffh
80AA  CD0A83  		call	getyn
80AD  3AA286  		lda	inbuf
80B0  B7      		ora	a
80B1  20E8    		jrnz	xxchg
80B3  110088  		lxi	d,last
80B6  01FE07  		lxi	b,sulen
80B9  CD8681  		call	schksm
80BC  2AA981  		lhld	sum
80BF  22AB81  		shld	ssum
80C2  F3      		di
FFFF          	if z180
80C3  ED383A  		in0	a,mmu$cbar	; preserve monitor CBAR
80C6  F5      		push	psw
80C7  3A3620  		lda	ctl$F2
80CA  F5      		push	psw
80CB  0680    		mvi	b,1000$0000b
80CD  ED013A  		out0	b,mmu$cbar
80D0  0600    		mvi	b,0
80D2  ED0138  		out0	b,mmu$cbr
80D5  06F8    		mvi	b,0f8h
80D7  ED0139  		out0	b,mmu$bbr
80DA  F6A0    		ori	10100000b	; WE, no legacy ROM
80DC  D3F2    		out	0f2h
		else
		endif
80DE  210088  		lxi	h,last
80E1  110010  		lxi	d,suadr
80E4  012000  		lxi	b,susize/64
80E7  CDB082  		call	flash
			;jrc	error	; never returned, actually
80EA  F1      		pop	psw
80EB  F5      		push	psw
80EC  E67F    		ani	01111111b	; WE off
80EE  D3F2    		out	0f2h
80F0  110010  		lxi	d,suadr
80F3  01FE07  		lxi	b,sulen
80F6  CD6781  		call	vchksm
80F9  2AA981  		lhld	sum
80FC  EB      		xchg
80FD  2AAB81  		lhld	ssum
8100  B7      		ora	a
8101  ED52    		dsbc	d
8103  201D    		jrnz	error
8105  F1      		pop	psw
8106  D3F2    		out	0f2h
FFFF          	if z180
8108  AF      		xra	a
8109  D339    		out	mmu$bbr
810B  F1      		pop	psw
810C  ED393A  		out0	a,mmu$cbar
		endif
810F  FB      		ei
8110  119585  		lxi	d,saved
8113  CD1D82  		call	msgout
			; Update monitor copy
8116  210088  		lxi	h,last
8119  1100F8  		lxi	d,susave
811C  011001  		lxi	b,sumax
811F  EDB0    		ldir
8121  C9      		ret
		
		; PSW is on stack...
8122  F1      	error:	pop	psw
8123  11A885  		lxi	d,failed
8126  CD1D82  		call	msgout
8129  C9      		ret	; what else can we do?
		
812A  F3      	get$su:	di
FFFF          	if z180
812B  ED383A  		in0	a,mmu$cbar	; preserve monitor CBAR
812E  F5      		push	psw
812F  3A3620  		lda	ctl$F2
8132  F5      		push	psw
8133  0680    		mvi	b,1000$0000b
8135  ED013A  		out0	b,mmu$cbar
8138  0600    		mvi	b,0
813A  ED0138  		out0	b,mmu$cbr
813D  06F8    		mvi	b,0f8h
813F  ED0139  		out0	b,mmu$bbr
8142  F6A0    		ori	10100000b	; WE, no legacy ROM
8144  D3F2    		out	0f2h
8146  210010  		lxi	h,suadr
8149  110088  		lxi	d,last
814C  010008  		lxi	b,susize
814F  EDB0    		ldir
8151  F1      		pop	psw
8152  D3F2    		out	0f2h
8154  AF      		xra	a
8155  ED3939  		out0	a,mmu$bbr
8158  F1      		pop	psw
8159  ED393A  		out0	a,mmu$cbar
		else
		endif
815C  FB      		ei
815D  110088  		lxi	d,last
8160  01FE07  		lxi	b,sulen
8163  CD6781  		call	vchksm
8166  C9      		ret	; CY=checksum error
		
		; DE=code start, BC=length
		; Returns CY on error
8167  210000  	vchksm:	lxi	h,0
816A  22A981  		shld	sum
816D  1A      	vchk0:	ldax	d
816E  CDA081  		call	sum1
8171  13      		inx	d
8172  0B      		dcx	b
8173  78      		mov	a,b
8174  B1      		ora	c
8175  20F6    		jrnz	vchk0
8177  21A981  		lxi	h,sum
817A  0602    		mvi	b,2
817C  1A      	vchk2:	ldax	d
817D  BE      		cmp	m
817E  37      		stc
817F  C0      		rnz
8180  13      		inx	d
8181  23      		inx	h
8182  10F8    		djnz	vchk2
8184  AF      		xra	a	; NC
8185  C9      		ret
		
		; DE=code start, BC=length
		; Sets checksum after code
8186  210000  	schksm:	lxi	h,0
8189  22A981  		shld	sum
818C  1A      	schk0:	ldax	d
818D  CDA081  		call	sum1
8190  13      		inx	d
8191  0B      		dcx	b
8192  78      		mov	a,b
8193  B1      		ora	c
8194  20F6    		jrnz	schk0
8196  21A981  		lxi	h,sum
8199  7E      		mov	a,m
819A  12      		stax	d
819B  23      		inx	h
819C  13      		inx	d
819D  7E      		mov	a,m
819E  12      		stax	d
819F  C9      		ret
		
81A0  21A981  	sum1:	lxi	h,sum
81A3  86      		add	m
81A4  77      		mov	m,a
81A5  D0      		rnc
81A6  23      		inx	h
81A7  34      		inr	m
81A8  C9      		ret
		
81A9  0000    	sum:	dw	0
81AB  0000    	ssum:	dw	0
		
81AD  3E1B    	liniz:	mvi	a,ESC
81AF  32A286  		sta	inbuf
81B2  0E01    		mvi	c,1
81B4  C3CD82  		jmp	crlf
81B7  3600    	linix:	mvi	m,0	; terminate buffer
81B9  C3CD82  		jmp	crlf
		
		; input a filename from console, allow backspace
		; returns C=num chars
81BC          	linin:
81BC  21A286  		lxi	h,inbuf
81BF  0E00    		mvi	c,0	; count chars
81C1  CD1282  	lini0	call	conin
81C4  FE0D    		cpi	CR
81C6  28EF    		jrz	linix
81C8  FE1B    		cpi	ESC
81CA  28E1    		jrz	liniz
81CC  FE03    		cpi	CTLC	; cancel
81CE  37      		stc
81CF  C8      		rz
81D0  FE08    		cpi	BS
81D2  281C    		jrz	backup
81D4  FE20    		cpi	' '
81D6  3811    		jrc	chrnak
81D8  FE7F    		cpi	'~'+1
81DA  300D    		jrnc	chrnak
81DC  77      	chrok:	mov	m,a
81DD  23      		inx	h
81DE  0C      		inr	c
81DF  FAE781  		jm	chrovf	; 128 chars max
81E2  CD0782  		call	conout
			; TODO: detect overflow...
81E5  18DA    		jr	lini0
81E7  2B      	chrovf:	dcx	h
81E8  0D      		dcr	c
81E9  3E07    	chrnak:	mvi	a,BEL
81EB  CD0782  		call	conout
81EE  18D1    		jr	lini0
81F0          	backup:
81F0  79      		mov	a,c
81F1  B7      		ora	a
81F2  28CD    		jrz	lini0
81F4  0D      		dcr	c
81F5  2B      		dcx	h
81F6  3E08    		mvi	a,BS
81F8  CD0782  		call	conout
81FB  3E20    		mvi	a,' '
81FD  CD0782  		call	conout
8200  3E08    		mvi	a,BS
8202  CD0782  		call	conout
8205  18BA    		jr	lini0
		
8207          	chrout:
8207  F5      	conout:	push	psw
8208  DBED    	cono0:	in	0edh
820A  E620    		ani	00100000b
820C  28FA    		jrz	cono0
820E  F1      		pop	psw
820F  D3E8    		out	0e8h
8211  C9      		ret
		
8212  DBED    	conin:	in	0edh
8214  E601    		ani	00000001b
8216  28FA    		jrz	conin
8218  DBE8    		in	0e8h
821A  E67F    		ani	01111111b
821C  C9      		ret
		
821D  1A      	msgout:	ldax	d
821E  B7      		ora	a
821F  C8      		rz
8220  CD0782  		call	conout
8223  13      		inx	d
8224  18F7    		jr	msgout
		
		; A=number to print
		; leading zeroes blanked - must preserve B
8226          	decout:
8226  C5      		push	b
8227  0E00    		mvi	c,0
8229  1664    		mvi	d,100
822B  CD4E82  		call	divide
822E  160A    		mvi	d,10
8230  CD4E82  		call	divide
8233  C630    		adi	'0'
8235  CD0782  		call	chrout
8238  C1      		pop	b
8239  C9      		ret
		
823A          	hexout:
823A  F5      		push	psw
823B  07      		rlc
823C  07      		rlc
823D  07      		rlc
823E  07      		rlc
823F  CD4382  		call	hexdig
8242  F1      		pop	psw
8243  E60F    	hexdig:	ani	0fh
8245  C690    		adi	90h
8247  27      		daa
8248  CE40    		aci	40h
824A  27      		daa
824B  C30782  		jmp	chrout
		
824E  1E00    	divide:	mvi	e,0
8250  92      	div0:	sub	d
8251  1C      		inr	e
8252  30FC    		jrnc	div0
8254  82      		add	d
8255  1D      		dcr	e
8256  2005    		jrnz	div1
8258  CB41    		bit	0,c
825A  2001    		jrnz	div1
825C  C9      		ret
825D  CBC1    	div1:	setb	0,c
825F  F5      		push	psw	; remainder
8260  3E30    		mvi	a,'0'
8262  83      		add	e
8263  CD0782  		call	chrout
8266  F1      		pop	psw	; remainder
8267  C9      		ret
		
8268          	parshx:
8268  1600    		mvi	d,0
826A  7E      	px0:	mov	a,m
826B  B7      		ora	a
826C  C8      		rz
826D  D630    		sui	'0'
826F  D8      		rc
8270  FE0A    		cpi	'9'-'0'+1
8272  380A    		jrc	px3
8274  D611    		sui	'A'-'0'
8276  E6DF    		ani	11011111b	; toupper
8278  FE06    		cpi	'F'-'A'+1
827A  3F      		cmc
827B  D8      		rc
827C  C60A    		adi	10
827E  5F      	px3:	mov	e,a
827F  7A      		mov	a,d
8280  87      		add	a
8281  D8      		rc
8282  87      		add	a
8283  D8      		rc
8284  87      		add	a
8285  D8      		rc
8286  87      		add	a
8287  D8      		rc
8288  83      		add	e	; no CY possible
8289  57      		mov	d,a
828A  23      		inx	h
828B  10DD    		djnz	px0
828D  B7      		ora	a
828E  C9      		ret
		
		; Parse a 8-bit (max) decimal number
		; HL=string, B=count
		; Returns D=number, CY=error
828F          	parsnm:
828F  110000  		lxi	d,0
8292  7E      	pd0:	mov	a,m
8293  B7      		ora	a
8294  C8      		rz
8295  FE30    		cpi	'0'
8297  D8      		rc
8298  FE3A    		cpi	'9'+1
829A  3F      		cmc
829B  D8      		rc
829C  E60F    		ani	0fh
829E  5F      		mov	e,a
829F  7A      		mov	a,d
82A0  87      		add	a	; *2
82A1  D8      		rc
82A2  87      		add	a	; *4
82A3  D8      		rc
82A4  82      		add	d	; *5
82A5  D8      		rc
82A6  87      		add	a	; *10
82A7  D8      		rc
82A8  83      		add	e	;
82A9  D8      		rc
82AA  57      		mov	d,a
82AB  23      		inx	h
82AC  10E4    		djnz	pd0
82AE  B7      		ora	a	; NC
82AF  C9      		ret
		
		; flash ROM from HL to DE, 64 bytes at a time.
		; DE must be on a 64-byte boundary.
		; BC=num pages to flash
		; returns CY on error, else HL,DE at next 64 bytes
		; caller must set WE... and MEM1 as needed.
82B0          	flash:
82B0  C5      		push	b
82B1  014000  		lxi	b,64
82B4  EDB0    		ldir
			; -----
82B6  2B      		dcx	h
82B7  1B      		dcx	d	; last addr written...
			; wait for write cycle to begin...
			; TODO: timeout this loop?
82B8  1A      	flash2:	ldax	d
82B9  AE      		xra	m
82BA  E680    		ani	10000000b	; bit7 is inverted when busy...
82BC  28FA    		jrz	flash2
			; wait for write cycle to end...
			; TODO: timeout this loop?
82BE  1A      	flash0:	ldax	d
82BF  AE      		xra	m
82C0  E680    		ani	10000000b	; bit7 is inverted when busy...
82C2  20FA    		jrnz	flash0
82C4  23      		inx	h
82C5  13      		inx	d
			; done with page...
			;call	progress	; TODO: progress needed?
82C6  C1      		pop	b
82C7  0B      		dcx	b
82C8  78      		mov	a,b
82C9  B1      		ora	c
82CA  20E4    		jrnz	flash
			;xra	a	; NC already
82CC  C9      		ret
		
82CD  3E0D    	crlf:	mvi	a,CR
82CF  CD0782  		call	conout
82D2  3E0A    		mvi	a,LF
82D4  C30782  		jmp	conout
		
82D7  114485  	cserr:	lxi	d,csbad
82DA  CD1D82  		call	msgout
82DD  21A286  		lxi	h,inbuf
82E0  36FF    		mvi	m,0ffh
82E2  CD0A83  		call	getyn
82E5  3AA286  		lda	inbuf
82E8  B7      		ora	a	; NZ=no
82E9  201B    		jrnz	cserr9
82EB  210088  		lxi	h,last
82EE  54      		mov	d,h
82EF  5D      		mov	e,l
82F0  36FF    		mvi	m,0ffh
82F2  13      		inx	d
82F3  01FF07  		lxi	b,susize-1
82F6  EDB0    		ldir
82F8  210000  		lxi	h,0
82FB  220288  		shld	last+subase
82FE  3E01    		mvi	a,1
8300  329F86  		sta	dirty
8303  C9      		ret
		
		; CY preserved if set...
8304  E1      	nmerr9:	pop	h	; discard saved HL
8305  D1      		pop	d	; discard saved DE
8306  E1      	cserr9:	pop	h	; discard our ret adr
8307  C39B80  		jmp	xxchg	; return to monitor
		
		; DE=prompt prefix, HL=value location
		; get a Y/N, Wait for CR, allow BS.
		; Stores 0ffh for "no", 000h for "yes"
830A          	getyn:
830A  CD1D82  		call	msgout
830D  7E      		mov	a,m
830E  B7      		ora	a
830F  3E4E    		mvi	a,'N'
8311  2002    		jrnz	getyn1
8313  3E59    		mvi	a,'Y'
8315  CD0782  	getyn1:	call	conout
8318  11CD85  		lxi	d,gpunn
831B  CD1D82  		call	msgout
831E  CD1282  	getyn2:	call	conin
8321  FE0D    		cpi	CR
8323  CAC283  		jz	getlt1	; same processing
8326  E65F    		ani	01011111b	; toupper
8328  FE59    		cpi	'Y'
832A  280B    		jrz	getyn0
832C  FE4E    		cpi	'N'
832E  2807    		jrz	getyn0
8330  3E07    		mvi	a,BEL
8332  CD0782  		call	conout
8335  18E7    		jr	getyn2
8337  CD0782  	getyn0:	call	conout
833A  D64E    		sui	'N'	;  0='N',  X='Y'
833C  D601    		sui	1	; CY='N', NC='Y'
833E  9F      		sbb	a	; FF='N', 00='Y'
833F  4F      		mov	c,a
8340  CD1282  	getyn5:	call	conin
8343  FE0D    		cpi	CR
8345  2875    		jrz	getlt3	; same processing
8347  FE08    		cpi	BS
8349  2807    		jrz	getyn4
834B  3E07    		mvi	a,BEL
834D  CD0782  		call	conout
8350  18EE    		jr	getyn5
8352  CD0782  	getyn4:	call	conout
8355  3E20    		mvi	a,' '
8357  CD0782  		call	conout
835A  3E08    		mvi	a,BS
835C  CD0782  		call	conout
835F  18BD    		jr	getyn2
		
		; DE=prompt prefix, HL=value location
		; get a single letter, toupper. Wait for CR, allow BS
		; TODO: allow value meaning "not defined"?
8361          	getlete:
8361  3E07    		mvi	a,BEL
8363  CD0782  		call	conout
8366  CDCD82  		call	crlf
8369          	getlet:
8369  ED53A086		sded	curmsg
836D  CD1D82  		call	msgout
8370  7E      		mov	a,m
8371  FEFF    		cpi	0ffh
8373  2803    		jrz	getlt6
8375  CD0782  		call	conout
8378  11CD85  	getlt6:	lxi	d,gpunn
837B  CD1D82  		call	msgout
837E  CD1282  	getlt2:	call	conin
8381  FE0D    		cpi	CR
8383  283D    		jrz	getlt1
8385  FE1B    		cpi	ESC
8387  2844    		jrz	getltx
8389  E65F    		ani	01011111b	; toupper
838B  FE42    		cpi	'B'	; 'A' means default, makes no sense here
838D  3837    		jrc	getlt0
838F  FE5B    		cpi	'Z'+1
8391  3033    		jrnc	getlt0
			; wait for CR, honor BS
8393  4F      		mov	c,a
8394  CD0782  		call	conout
8397  CD1282  	getlt5:	call	conin
839A  FE0D    		cpi	CR
839C  281E    		jrz	getlt3
839E  FE08    		cpi	BS
83A0  280B    		jrz	getlt4
83A2  FE1B    		cpi	ESC
83A4  2827    		jrz	getltx
83A6  3E07    		mvi	a,BEL
83A8  CD0782  		call	conout
83AB  18EA    		jr	getlt5
83AD  CD0782  	getlt4:	call	conout
83B0  3E20    		mvi	a,' '
83B2  CD0782  		call	conout
83B5  3E08    		mvi	a,BS
83B7  CD0782  		call	conout
83BA  18C2    		jr	getlt2
83BC  71      	getlt3:	mov	m,c
83BD  3E01    		mvi	a,1
83BF  329F86  		sta	dirty
83C2  CDCD82  	getlt1:	call	crlf
83C5  C9      		ret
83C6  3E07    	getlt0:	mvi	a,BEL
83C8  CD0782  		call	conout
83CB  18B1    		jr	getlt2
		
		; delete setting, re-prompt
83CD  36FF    	getltx:	mvi	m,0ffh
83CF  3E01    		mvi	a,1
83D1  329F86  		sta	dirty
83D4  ED5BA086		lded	curmsg
83D8  1887    		jr	getlete
		
		; DE=prompt prefix, HL=value location
83DA          	gethexe:
83DA  3E07    		mvi	a,BEL
83DC  CD0782  		call	conout
83DF          	gethex:
83DF  D5      		push	d
83E0  E5      		push	h
83E1  CD1D82  		call	msgout
83E4  7E      		mov	a,m
83E5  CD3A82  		call	hexout
83E8  11CD85  		lxi	d,gpunn
83EB  CD1D82  		call	msgout
83EE  CDBC81  		call	linin
83F1  DA0483  		jc	nmerr9
83F4  79      		mov	a,c
83F5  B7      		ora	a
83F6  286C    		jrz	getxit
83F8  3AA286  		lda	inbuf
83FB  FE1B    		cpi	ESC	; delete setting
83FD  2813    		jrz	gethxx
83FF  41      		mov	b,c
8400  21A286  		lxi	h,inbuf
8403  CD6882  		call	parshx
8406  7A      		mov	a,d
8407  E1      		pop	h
8408  D1      		pop	d
8409  38CF    		jrc	gethexe
840B  77      		mov	m,a
840C  3E01    		mvi	a,1
840E  329F86  		sta	dirty
8411  C9      		ret
		
		; delete setting, re-prompt
8412  E1      	gethxx:	pop	h
8413  36FF    		mvi	m,0ffh
8415  3E01    		mvi	a,1
8417  329F86  		sta	dirty
841A  D1      		pop	d
841B  18BD    		jr	gethexe
		
		; DE=prompt prefix, HL=value location
841D          	getnume:
841D  3E07    		mvi	a,BEL
841F  CD0782  		call	conout
8422          	getnum:
8422  D5      		push	d
8423  E5      		push	h
8424  CD1D82  		call	msgout
8427  7E      		mov	a,m
8428  FEFF    		cpi	0ffh
842A  2803    		jrz	getnm0
842C  CD2682  		call	decout
842F  11CD85  	getnm0:	lxi	d,gpunn
8432  CD1D82  		call	msgout
8435  CDBC81  		call	linin
8438  DA0483  		jc	nmerr9
843B  79      		mov	a,c
843C  B7      		ora	a
843D  2825    		jrz	getxit
843F  3AA286  		lda	inbuf
8442  FE1B    		cpi	ESC	; delete setting
8444  2813    		jrz	getnmx
8446  41      		mov	b,c
8447  21A286  		lxi	h,inbuf
844A  CD8F82  		call	parsnm
844D  7A      		mov	a,d
844E  E1      		pop	h
844F  D1      		pop	d
8450  38CB    		jrc	getnume
8452  77      		mov	m,a
8453  3E01    		mvi	a,1
8455  329F86  		sta	dirty
8458  C9      		ret
		
		; delete setting, re-prompt
8459  E1      	getnmx:	pop	h
845A  36FF    		mvi	m,0ffh
845C  3E01    		mvi	a,1
845E  329F86  		sta	dirty
8461  D1      		pop	d
8462  18B9    		jr	getnume
		
8464  E1      	getxit:	pop	h
8465  D1      		pop	d
8466  C9      		ret
		
		; DE=prompt prefix, HL=value location
8467          	getstre:
8467  3E07    		mvi	a,BEL
8469  CD0782  		call	conout
846C          	getstr:
846C  D5      		push	d
846D  E5      		push	h
846E  CD1D82  		call	msgout
8471  7E      		mov	a,m
8472  FEFF    		cpi	0ffh
8474  2804    		jrz	getst0
8476  EB      		xchg
8477  CD1D82  		call	msgout
847A  11CD85  	getst0:	lxi	d,gpunn
847D  CD1D82  		call	msgout
8480  CDBC81  		call	linin
8483  DA0483  		jc	nmerr9
8486  79      		mov	a,c
8487  B7      		ora	a
8488  28DA    		jrz	getxit
			; no error checking left?
848A  E1      		pop	h
848B  D1      		pop	d
			; TODO: are we guaranteed 'inbuf' is terminated?
848C  11A286  		lxi	d,inbuf
848F  1A      		ldax	d
8490  FE1B    		cpi	ESC	; delete setting
8492  2809    		jrz	getstx
8494  1A      	getst2:	ldax	d
8495  B7      		ora	a
8496  280E    		jrz	getst1
8498  77      		mov	m,a
8499  23      		inx	h
849A  13      		inx	d
849B  18F7    		jr	getst2
849D  36FF    	getstx:	mvi	m,0ffh
849F  3E01    		mvi	a,1
84A1  329F86  		sta	dirty
84A4  18C1    		jr	getstre
84A6  3600    	getst1:	mvi	m,0
84A8  3E01    		mvi	a,1
84AA  329F86  		sta	dirty
84AD  C9      		ret
		
FFFF          	if z180
84AE  3E07    	getwte:	mvi	a,BEL
84B0  CD0782  		call	conout
84B3          	getwt:
84B3  D5      		push	d
84B4  E5      		push	h
84B5  CD1D82  		call	msgout
84B8  7E      		mov	a,m
84B9  CDF084  		call	wtout
84BC  11CD85  		lxi	d,gpunn
84BF  CD1D82  		call	msgout
84C2  CDBC81  		call	linin
84C5  DA0483  		jc	nmerr9
84C8  79      		mov	a,c
84C9  B7      		ora	a
84CA  2898    		jrz	getxit
84CC  3AA286  		lda	inbuf
84CF  FE1B    		cpi	ESC	; delete setting
84D1  2812    		jrz	getwtx
84D3  41      		mov	b,c
84D4  21A286  		lxi	h,inbuf
84D7  CD0A85  		call	parwt
84DA  E1      		pop	h
84DB  D1      		pop	d
84DC  38D0    		jrc	getwte
84DE  77      		mov	m,a
84DF  3E01    		mvi	a,1
84E1  329F86  		sta	dirty
84E4  C9      		ret
		
84E5  E1      	getwtx:	pop	h
84E6  36FF    		mvi	m,0ffh
84E8  3E01    		mvi	a,1
84EA  329F86  		sta	dirty
84ED  D1      		pop	d
84EE  18BE    		jr	getwte
		
84F0  FEFF    	wtout:	cpi	0ffh
84F2  C8      		rz
84F3  F5      		push	psw
84F4  07      		rlc
84F5  07      		rlc
84F6  CD0385  		call	wtout1
84F9  3E2C    		mvi	a,','
84FB  CD0782  		call	conout
84FE  F1      		pop	psw
84FF  0F      		rrc
8500  0F      		rrc
8501  0F      		rrc
8502  0F      		rrc
8503  E603    	wtout1:	ani	3
8505  C630    		adi	'0'
8507  C30782  		jmp	conout
		
850A  CD2985  	parwt:	call	parwt1
850D  D8      		rc
850E  0F      		rrc
850F  0F      		rrc
8510  57      		mov	d,a
8511  23      		inx	h
8512  7E      		mov	a,m
8513  FE2C    		cpi	','
8515  37      		stc
8516  C0      		rnz
8517  23      		inx	h
8518  CD2985  		call	parwt1
851B  D8      		rc
851C  07      		rlc
851D  07      		rlc
851E  07      		rlc
851F  07      		rlc
8520  B2      		ora	d
8521  57      		mov	d,a
8522  23      		inx	h
8523  7E      		mov	a,m
8524  D601    		sui	1	; CY only if was 00
8526  3F      		cmc
8527  7A      		mov	a,d
8528  C9      		ret
		
8529          	parwt1:
8529  7E      		mov	a,m
852A  D630    		sui	'0'
852C  D8      		rc
852D  FE04    		cpi	'3'-'0'+1
852F  3F      		cmc
8530  C9      		ret
		endif
		
8531  6F6E6669	signon:	db	'onfig setup v'
      67207365
      74757020
      76
853E  302E32  		db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
8541  0D0A00  		db	CR,LF,0
		
8544  53657475	csbad:	db	'Setup bank checksum error. Clear setup data (',0
      70206261
      6E6B2063
      6865636B
      73756D20
      6572726F
      722E2043
      6C656172
      20736574
      75702064
      61746120
      2800
8572  53657475	nochg:	db	'Setup not changed',CR,LF,0
      70206E6F
      74206368
      616E6765
      640D0A00
8586  53617665	dochg:	db	'Save changes (',0
      20636861
      6E676573
      202800
8595  53657475	saved:	db	'Setup data saved',CR,LF,0
      70206461
      74612073
      61766564
      0D0A00
85A8  53657475	failed:	db	'Setup flash failed, checksum error',CR,LF,0
      7020666C
      61736820
      6661696C
      65642C20
      63686563
      6B73756D
      20657272
      6F720D0A
      00
		
85CD  293A2000	gpunn:	db	'): ',0
85D1  5072696D	gpdev:	db	'Primary/Default boot device (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20646576
      69636520
      2800
85EF  5072696D	gpuni:	db	'Primary/Default boot unit (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20756E69
      74202800
860B  5072696D	gpstr:	db	'Primary/Default boot string (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20737472
      696E6720
      2800
FFFF          	if not nofp
8629  5365636F	gsdev:	db	'Secondary boot device (',0
      6E646172
      7920626F
      6F742064
      65766963
      65202800
8641  5365636F	gsuni:	db	'Secondary boot unit (',0
      6E646172
      7920626F
      6F742075
      6E697420
      2800
8657  5365636F	gsstr:	db	'Secondary boot string (',0
      6E646172
      7920626F
      6F742073
      7472696E
      67202800
		endif
0000          	if not z180
		endif
866F  485F3720	dport:	db	'H_7 Port (FF=use SW1) (',0
      506F7274
      20284646
      3D757365
      20535731
      29202800
FFFF          	if z180
8687  57414954	gwait:	db	'WAIT states (MEM,I/O) (',0
      20737461
      74657320
      284D454D
      2C492F4F
      29202800
		endif
		
869F  00      	dirty:	db	0
86A0  0000    	curmsg:	dw	0
		
86A2          	inbuf:	ds	128	; input entry buffer
		
8722          		ds	128
		stack:	ds	0
		
87A2  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFF
		
8800          	last:	end



Statistics:

     4	passes
     0	jr promotions
   191	symbols
  1792	bytes

   312	macro calls
  3984	macro bytes
     0	invented symbols
