		; Command module for SETUP
0002          	VERN	equ	02h
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
FFFF          	z180	equ	true
0000          	nofp	equ	false
		
			maclib	ram
**** ram.lib ****
**** csetup180.asm ****
			maclib	setup
**** setup.lib ****
**** csetup180.asm ****
FFFF          	 if z180
			maclib	z180
**** z180.lib ****
**** csetup180.asm ****
		 else
		 endif
		
000D          	CR	equ	13
000A          	LF	equ	10
0008          	BS	equ	8
0003          	CTLC	equ	3
0007          	BEL	equ	7
001B          	ESC	equ	27
		
FFFF          	 if z180
0038          	mmu$cbr	equ	38h
0039          	mmu$bbr	equ	39h
003A          	mmu$cbar equ	3ah
		 endif
		
8000          		org	8000h	; out of reach of ROM overlay...
8000  08      	first:	db	HIGH (last-first)	; +0: num pages
8001  80      		db	HIGH first		; +1: ORG page
8002  FF00    		db	255,0	; +2,+3: phy drv base, num
		
8004  C31D80  		jmp	init	; +4: init entry
8007  C31F80  		jmp	exec	; +7: action entry
		
800A  43      		db	'C'	; +10: Command letter
800B  FF      		db	-1	; +11: front panel key
800C  00      		db	0	; +12: port, 0 if variable
800D  FFFFFF  		db	11111111b,11111111b,11111111b	; +13: FP display
8010  436F6E66		db	'Config Setup',0	; +16: mnemonic string
      69672053
      65747570
      00
		
801D          	init:
801D  AF      		xra	a	; NC
801E  C9      		ret
		
801F          	exec:
801F  113A85  		lxi	d,signon
8022  CD2682  		call	msgout
8025  CD3381  		call	get$su	; get a copy of setup data
8028  DCE082  		cc	cserr	; offer to clear if checksum error
			; Primary/Default boot options
802B  11DA85  		lxi	d,gpdev
802E  210488  		lxi	h,last+dpdev
8031  CD7283  		call	getlet
8034  11F885  		lxi	d,gpuni
8037  210588  		lxi	h,last+dpuni
803A  CD2B84  		call	getnum
803D  111486  		lxi	d,gpstr
8040  210688  		lxi	h,last+dpstr
8043  CD7584  		call	getstr
FFFF          	 if not nofp
			; Secondary boot options
8046  113286  		lxi	d,gsdev
8049  218688  		lxi	h,last+dsdev
804C  CD7283  		call	getlet
804F  114A86  		lxi	d,gsuni
8052  218788  		lxi	h,last+dsuni
8055  CD2B84  		call	getnum
8058  116086  		lxi	d,gsstr
805B  218888  		lxi	h,last+dsstr
805E  CD7584  		call	getstr
		 endif
			; Add-ons Installed
0000          	 if not z180
		 endif
		
8061  3E36    		mvi	a,'6'
8063  327986  		sta	dport+1
8066  117886  		lxi	d,dport
8069  210B89  		lxi	h,last+h67pt
806C  CDE883  		call	gethex
		
806F  3E34    		mvi	a,'4'
8071  327986  		sta	dport+1
8074  117886  		lxi	d,dport
8077  210C89  		lxi	h,last+h47pt
807A  CDE883  		call	gethex
		
807D  3E33    		mvi	a,'3'
807F  327986  		sta	dport+1
8082  117886  		lxi	d,dport
8085  210D89  		lxi	h,last+h37pt
8088  CDE883  		call	gethex
		
0000          	 if 0	; H17 is not configurable?
		 endif
808B  119086  		lxi	d,vport
808E  211089  		lxi	h,last+vdipt
8091  CDE883  		call	gethex
FFFF          	 if z180
8094  11A786  		lxi	d,gwait
8097  210F89  		lxi	h,last+waits
809A  CDBC84  		call	getwt
		 endif
		
			; TODO: more setup?
809D  3ABF86  		lda	dirty
80A0  B7      		ora	a
80A1  C2AB80  		jnz	mkchg
80A4  117B85  	xxchg:	lxi	d,nochg
80A7  CD2682  		call	msgout
80AA  C9      		ret
		
80AB  118F85  	mkchg:	lxi	d,dochg
80AE  21C286  		lxi	h,inbuf
80B1  36FF    		mvi	m,0ffh
80B3  CD1383  		call	getyn
80B6  3AC286  		lda	inbuf
80B9  B7      		ora	a
80BA  20E8    		jrnz	xxchg
80BC  110088  		lxi	d,last
80BF  01FE07  		lxi	b,sulen
80C2  CD8F81  		call	schksm
80C5  2AB281  		lhld	sum
80C8  22B481  		shld	ssum
80CB  F3      		di
FFFF          	 if z180
80CC  ED383A  		in0	a,mmu$cbar	; preserve monitor CBAR
80CF  F5      		push	psw
80D0  3A3620  		lda	ctl$F2
80D3  F5      		push	psw
80D4  0680    		mvi	b,1000$0000b
80D6  ED013A  		out0	b,mmu$cbar
80D9  0600    		mvi	b,0
80DB  ED0138  		out0	b,mmu$cbr
80DE  06F8    		mvi	b,0f8h
80E0  ED0139  		out0	b,mmu$bbr
80E3  F6A0    		ori	10100000b	; WE, no legacy ROM
80E5  D3F2    		out	0f2h
		 else
		 endif
80E7  210088  		lxi	h,last
80EA  110010  		lxi	d,suadr
80ED  012000  		lxi	b,susize/64
80F0  CDB982  		call	flash
			;jrc	error	; never returned, actually
80F3  F1      		pop	psw
80F4  F5      		push	psw
80F5  E67F    		ani	01111111b	; WE off
80F7  D3F2    		out	0f2h
80F9  110010  		lxi	d,suadr
80FC  01FE07  		lxi	b,sulen
80FF  CD7081  		call	vchksm
8102  2AB281  		lhld	sum
8105  EB      		xchg
8106  2AB481  		lhld	ssum
8109  B7      		ora	a
810A  ED52    		dsbc	d
810C  201D    		jrnz	error
810E  F1      		pop	psw
810F  D3F2    		out	0f2h
FFFF          	 if z180
8111  AF      		xra	a
8112  D339    		out	mmu$bbr
8114  F1      		pop	psw
8115  ED393A  		out0	a,mmu$cbar
		 endif
8118  FB      		ei
8119  119E85  		lxi	d,saved
811C  CD2682  		call	msgout
			; Update monitor copy
811F  210088  		lxi	h,last
8122  1100F8  		lxi	d,susave
8125  011101  		lxi	b,sumax
8128  EDB0    		ldir
812A  C9      		ret
		
		; PSW is on stack...
812B  F1      	error:	pop	psw
812C  11B185  		lxi	d,failed
812F  CD2682  		call	msgout
8132  C9      		ret	; what else can we do?
		
8133  F3      	get$su:	di
FFFF          	 if z180
8134  ED383A  		in0	a,mmu$cbar	; preserve monitor CBAR
8137  F5      		push	psw
8138  3A3620  		lda	ctl$F2
813B  F5      		push	psw
813C  0680    		mvi	b,1000$0000b
813E  ED013A  		out0	b,mmu$cbar
8141  0600    		mvi	b,0
8143  ED0138  		out0	b,mmu$cbr
8146  06F8    		mvi	b,0f8h
8148  ED0139  		out0	b,mmu$bbr
814B  F6A0    		ori	10100000b	; WE, no legacy ROM
814D  D3F2    		out	0f2h
814F  210010  		lxi	h,suadr
8152  110088  		lxi	d,last
8155  010008  		lxi	b,susize
8158  EDB0    		ldir
815A  F1      		pop	psw
815B  D3F2    		out	0f2h
815D  AF      		xra	a
815E  ED3939  		out0	a,mmu$bbr
8161  F1      		pop	psw
8162  ED393A  		out0	a,mmu$cbar
		 else
		 endif
8165  FB      		ei
8166  110088  		lxi	d,last
8169  01FE07  		lxi	b,sulen
816C  CD7081  		call	vchksm
816F  C9      		ret	; CY=checksum error
		
		; DE=code start, BC=length
		; Returns CY on error
8170  210000  	vchksm:	lxi	h,0
8173  22B281  		shld	sum
8176  1A      	vchk0:	ldax	d
8177  CDA981  		call	sum1
817A  13      		inx	d
817B  0B      		dcx	b
817C  78      		mov	a,b
817D  B1      		ora	c
817E  20F6    		jrnz	vchk0
8180  21B281  		lxi	h,sum
8183  0602    		mvi	b,2
8185  1A      	vchk2:	ldax	d
8186  BE      		cmp	m
8187  37      		stc
8188  C0      		rnz
8189  13      		inx	d
818A  23      		inx	h
818B  10F8    		djnz	vchk2
818D  AF      		xra	a	; NC
818E  C9      		ret
		
		; DE=code start, BC=length
		; Sets checksum after code
818F  210000  	schksm:	lxi	h,0
8192  22B281  		shld	sum
8195  1A      	schk0:	ldax	d
8196  CDA981  		call	sum1
8199  13      		inx	d
819A  0B      		dcx	b
819B  78      		mov	a,b
819C  B1      		ora	c
819D  20F6    		jrnz	schk0
819F  21B281  		lxi	h,sum
81A2  7E      		mov	a,m
81A3  12      		stax	d
81A4  23      		inx	h
81A5  13      		inx	d
81A6  7E      		mov	a,m
81A7  12      		stax	d
81A8  C9      		ret
		
81A9  21B281  	sum1:	lxi	h,sum
81AC  86      		add	m
81AD  77      		mov	m,a
81AE  D0      		rnc
81AF  23      		inx	h
81B0  34      		inr	m
81B1  C9      		ret
		
81B2  0000    	sum:	dw	0
81B4  0000    	ssum:	dw	0
		
81B6  3E1B    	liniz:	mvi	a,ESC
81B8  32C286  		sta	inbuf
81BB  0E01    		mvi	c,1
81BD  C3D682  		jmp	crlf
81C0  3600    	linix:	mvi	m,0	; terminate buffer
81C2  C3D682  		jmp	crlf
		
		; input a filename from console, allow backspace
		; returns C=num chars
81C5          	linin:
81C5  21C286  		lxi	h,inbuf
81C8  0E00    		mvi	c,0	; count chars
81CA  CD1B82  	lini0	call	conin
81CD  FE0D    		cpi	CR
81CF  28EF    		jrz	linix
81D1  FE1B    		cpi	ESC
81D3  28E1    		jrz	liniz
81D5  FE03    		cpi	CTLC	; cancel
81D7  37      		stc
81D8  C8      		rz
81D9  FE08    		cpi	BS
81DB  281C    		jrz	backup
81DD  FE20    		cpi	' '
81DF  3811    		jrc	chrnak
81E1  FE7F    		cpi	'~'+1
81E3  300D    		jrnc	chrnak
81E5  77      	chrok:	mov	m,a
81E6  23      		inx	h
81E7  0C      		inr	c
81E8  FAF081  		jm	chrovf	; 128 chars max
81EB  CD1082  		call	conout
			; TODO: detect overflow...
81EE  18DA    		jr	lini0
81F0  2B      	chrovf:	dcx	h
81F1  0D      		dcr	c
81F2  3E07    	chrnak:	mvi	a,BEL
81F4  CD1082  		call	conout
81F7  18D1    		jr	lini0
81F9          	backup:
81F9  79      		mov	a,c
81FA  B7      		ora	a
81FB  28CD    		jrz	lini0
81FD  0D      		dcr	c
81FE  2B      		dcx	h
81FF  3E08    		mvi	a,BS
8201  CD1082  		call	conout
8204  3E20    		mvi	a,' '
8206  CD1082  		call	conout
8209  3E08    		mvi	a,BS
820B  CD1082  		call	conout
820E  18BA    		jr	lini0
		
8210          	chrout:
8210  F5      	conout:	push	psw
8211  DBED    	cono0:	in	0edh
8213  E620    		ani	00100000b
8215  28FA    		jrz	cono0
8217  F1      		pop	psw
8218  D3E8    		out	0e8h
821A  C9      		ret
		
821B  DBED    	conin:	in	0edh
821D  E601    		ani	00000001b
821F  28FA    		jrz	conin
8221  DBE8    		in	0e8h
8223  E67F    		ani	01111111b
8225  C9      		ret
		
8226  1A      	msgout:	ldax	d
8227  B7      		ora	a
8228  C8      		rz
8229  CD1082  		call	conout
822C  13      		inx	d
822D  18F7    		jr	msgout
		
		; A=number to print
		; leading zeroes blanked - must preserve B
822F          	decout:
822F  C5      		push	b
8230  0E00    		mvi	c,0
8232  1664    		mvi	d,100
8234  CD5782  		call	divide
8237  160A    		mvi	d,10
8239  CD5782  		call	divide
823C  C630    		adi	'0'
823E  CD1082  		call	chrout
8241  C1      		pop	b
8242  C9      		ret
		
8243          	hexout:
8243  F5      		push	psw
8244  07      		rlc
8245  07      		rlc
8246  07      		rlc
8247  07      		rlc
8248  CD4C82  		call	hexdig
824B  F1      		pop	psw
824C  E60F    	hexdig:	ani	0fh
824E  C690    		adi	90h
8250  27      		daa
8251  CE40    		aci	40h
8253  27      		daa
8254  C31082  		jmp	chrout
		
8257  1E00    	divide:	mvi	e,0
8259  92      	div0:	sub	d
825A  1C      		inr	e
825B  30FC    		jrnc	div0
825D  82      		add	d
825E  1D      		dcr	e
825F  2005    		jrnz	div1
8261  CB41    		bit	0,c
8263  2001    		jrnz	div1
8265  C9      		ret
8266  CBC1    	div1:	setb	0,c
8268  F5      		push	psw	; remainder
8269  3E30    		mvi	a,'0'
826B  83      		add	e
826C  CD1082  		call	chrout
826F  F1      		pop	psw	; remainder
8270  C9      		ret
		
8271          	parshx:
8271  1600    		mvi	d,0
8273  7E      	px0:	mov	a,m
8274  B7      		ora	a
8275  C8      		rz
8276  D630    		sui	'0'
8278  D8      		rc
8279  FE0A    		cpi	'9'-'0'+1
827B  380A    		jrc	px3
827D  D611    		sui	'A'-'0'
827F  E6DF    		ani	11011111b	; toupper
8281  FE06    		cpi	'F'-'A'+1
8283  3F      		cmc
8284  D8      		rc
8285  C60A    		adi	10
8287  5F      	px3:	mov	e,a
8288  7A      		mov	a,d
8289  87      		add	a
828A  D8      		rc
828B  87      		add	a
828C  D8      		rc
828D  87      		add	a
828E  D8      		rc
828F  87      		add	a
8290  D8      		rc
8291  83      		add	e	; no CY possible
8292  57      		mov	d,a
8293  23      		inx	h
8294  10DD    		djnz	px0
8296  B7      		ora	a
8297  C9      		ret
		
		; Parse a 8-bit (max) decimal number
		; HL=string, B=count
		; Returns D=number, CY=error
8298          	parsnm:
8298  110000  		lxi	d,0
829B  7E      	pd0:	mov	a,m
829C  B7      		ora	a
829D  C8      		rz
829E  FE30    		cpi	'0'
82A0  D8      		rc
82A1  FE3A    		cpi	'9'+1
82A3  3F      		cmc
82A4  D8      		rc
82A5  E60F    		ani	0fh
82A7  5F      		mov	e,a
82A8  7A      		mov	a,d
82A9  87      		add	a	; *2
82AA  D8      		rc
82AB  87      		add	a	; *4
82AC  D8      		rc
82AD  82      		add	d	; *5
82AE  D8      		rc
82AF  87      		add	a	; *10
82B0  D8      		rc
82B1  83      		add	e	;
82B2  D8      		rc
82B3  57      		mov	d,a
82B4  23      		inx	h
82B5  10E4    		djnz	pd0
82B7  B7      		ora	a	; NC
82B8  C9      		ret
		
		; flash ROM from HL to DE, 64 bytes at a time.
		; DE must be on a 64-byte boundary.
		; BC=num pages to flash
		; returns CY on error, else HL,DE at next 64 bytes
		; caller must set WE... and MEM1 as needed.
82B9          	flash:
82B9  C5      		push	b
82BA  014000  		lxi	b,64
82BD  EDB0    		ldir
			; -----
82BF  2B      		dcx	h
82C0  1B      		dcx	d	; last addr written...
			; wait for write cycle to begin...
			; TODO: timeout this loop?
82C1  1A      	flash2:	ldax	d
82C2  AE      		xra	m
82C3  E680    		ani	10000000b	; bit7 is inverted when busy...
82C5  28FA    		jrz	flash2
			; wait for write cycle to end...
			; TODO: timeout this loop?
82C7  1A      	flash0:	ldax	d
82C8  AE      		xra	m
82C9  E680    		ani	10000000b	; bit7 is inverted when busy...
82CB  20FA    		jrnz	flash0
82CD  23      		inx	h
82CE  13      		inx	d
			; done with page...
			;call	progress	; TODO: progress needed?
82CF  C1      		pop	b
82D0  0B      		dcx	b
82D1  78      		mov	a,b
82D2  B1      		ora	c
82D3  20E4    		jrnz	flash
			;xra	a	; NC already
82D5  C9      		ret
		
82D6  3E0D    	crlf:	mvi	a,CR
82D8  CD1082  		call	conout
82DB  3E0A    		mvi	a,LF
82DD  C31082  		jmp	conout
		
82E0  114D85  	cserr:	lxi	d,csbad
82E3  CD2682  		call	msgout
82E6  21C286  		lxi	h,inbuf
82E9  36FF    		mvi	m,0ffh
82EB  CD1383  		call	getyn
82EE  3AC286  		lda	inbuf
82F1  B7      		ora	a	; NZ=no
82F2  201B    		jrnz	cserr9
82F4  210088  		lxi	h,last
82F7  54      		mov	d,h
82F8  5D      		mov	e,l
82F9  36FF    		mvi	m,0ffh
82FB  13      		inx	d
82FC  01FF07  		lxi	b,susize-1
82FF  EDB0    		ldir
8301  210000  		lxi	h,0
8304  220288  		shld	last+subase
8307  3E01    		mvi	a,1
8309  32BF86  		sta	dirty
830C  C9      		ret
		
		; CY preserved if set...
830D  E1      	nmerr9:	pop	h	; discard saved HL
830E  D1      		pop	d	; discard saved DE
830F  E1      	cserr9:	pop	h	; discard our ret adr
8310  C3A480  		jmp	xxchg	; return to monitor
		
		; DE=prompt prefix, HL=value location
		; get a Y/N, Wait for CR, allow BS.
		; Stores 0ffh for "no", 000h for "yes"
8313          	getyn:
8313  CD2682  		call	msgout
8316  7E      		mov	a,m
8317  B7      		ora	a
8318  3E4E    		mvi	a,'N'
831A  2002    		jrnz	getyn1
831C  3E59    		mvi	a,'Y'
831E  CD1082  	getyn1:	call	conout
8321  11D685  		lxi	d,gpunn
8324  CD2682  		call	msgout
8327  CD1B82  	getyn2:	call	conin
832A  FE0D    		cpi	CR
832C  CACB83  		jz	getlt1	; same processing
832F  E65F    		ani	01011111b	; toupper
8331  FE59    		cpi	'Y'
8333  280B    		jrz	getyn0
8335  FE4E    		cpi	'N'
8337  2807    		jrz	getyn0
8339  3E07    		mvi	a,BEL
833B  CD1082  		call	conout
833E  18E7    		jr	getyn2
8340  CD1082  	getyn0:	call	conout
8343  D64E    		sui	'N'	;  0='N',  X='Y'
8345  D601    		sui	1	; CY='N', NC='Y'
8347  9F      		sbb	a	; FF='N', 00='Y'
8348  4F      		mov	c,a
8349  CD1B82  	getyn5:	call	conin
834C  FE0D    		cpi	CR
834E  2875    		jrz	getlt3	; same processing
8350  FE08    		cpi	BS
8352  2807    		jrz	getyn4
8354  3E07    		mvi	a,BEL
8356  CD1082  		call	conout
8359  18EE    		jr	getyn5
835B  CD1082  	getyn4:	call	conout
835E  3E20    		mvi	a,' '
8360  CD1082  		call	conout
8363  3E08    		mvi	a,BS
8365  CD1082  		call	conout
8368  18BD    		jr	getyn2
		
		; DE=prompt prefix, HL=value location
		; get a single letter, toupper. Wait for CR, allow BS
		; TODO: allow value meaning "not defined"?
836A          	getlete:
836A  3E07    		mvi	a,BEL
836C  CD1082  		call	conout
836F  CDD682  		call	crlf
8372          	getlet:
8372  ED53C086		sded	curmsg
8376  CD2682  		call	msgout
8379  7E      		mov	a,m
837A  FEFF    		cpi	0ffh
837C  2803    		jrz	getlt6
837E  CD1082  		call	conout
8381  11D685  	getlt6:	lxi	d,gpunn
8384  CD2682  		call	msgout
8387  CD1B82  	getlt2:	call	conin
838A  FE0D    		cpi	CR
838C  283D    		jrz	getlt1
838E  FE1B    		cpi	ESC
8390  2844    		jrz	getltx
8392  E65F    		ani	01011111b	; toupper
8394  FE42    		cpi	'B'	; 'A' means default, makes no sense here
8396  3837    		jrc	getlt0
8398  FE5B    		cpi	'Z'+1
839A  3033    		jrnc	getlt0
			; wait for CR, honor BS
839C  4F      		mov	c,a
839D  CD1082  		call	conout
83A0  CD1B82  	getlt5:	call	conin
83A3  FE0D    		cpi	CR
83A5  281E    		jrz	getlt3
83A7  FE08    		cpi	BS
83A9  280B    		jrz	getlt4
83AB  FE1B    		cpi	ESC
83AD  2827    		jrz	getltx
83AF  3E07    		mvi	a,BEL
83B1  CD1082  		call	conout
83B4  18EA    		jr	getlt5
83B6  CD1082  	getlt4:	call	conout
83B9  3E20    		mvi	a,' '
83BB  CD1082  		call	conout
83BE  3E08    		mvi	a,BS
83C0  CD1082  		call	conout
83C3  18C2    		jr	getlt2
83C5  71      	getlt3:	mov	m,c
83C6  3E01    		mvi	a,1
83C8  32BF86  		sta	dirty
83CB  CDD682  	getlt1:	call	crlf
83CE  C9      		ret
83CF  3E07    	getlt0:	mvi	a,BEL
83D1  CD1082  		call	conout
83D4  18B1    		jr	getlt2
		
		; delete setting, re-prompt
83D6  36FF    	getltx:	mvi	m,0ffh
83D8  3E01    		mvi	a,1
83DA  32BF86  		sta	dirty
83DD  ED5BC086		lded	curmsg
83E1  1887    		jr	getlete
		
		; DE=prompt prefix, HL=value location
83E3          	gethexe:
83E3  3E07    		mvi	a,BEL
83E5  CD1082  		call	conout
83E8          	gethex:
83E8  D5      		push	d
83E9  E5      		push	h
83EA  CD2682  		call	msgout
83ED  7E      		mov	a,m
83EE  CD4382  		call	hexout
83F1  11D685  		lxi	d,gpunn
83F4  CD2682  		call	msgout
83F7  CDC581  		call	linin
83FA  DA0D83  		jc	nmerr9
83FD  79      		mov	a,c
83FE  B7      		ora	a
83FF  286C    		jrz	getxit
8401  3AC286  		lda	inbuf
8404  FE1B    		cpi	ESC	; delete setting
8406  2813    		jrz	gethxx
8408  41      		mov	b,c
8409  21C286  		lxi	h,inbuf
840C  CD7182  		call	parshx
840F  7A      		mov	a,d
8410  E1      		pop	h
8411  D1      		pop	d
8412  38CF    		jrc	gethexe
8414  77      		mov	m,a
8415  3E01    		mvi	a,1
8417  32BF86  		sta	dirty
841A  C9      		ret
		
		; delete setting, re-prompt
841B  E1      	gethxx:	pop	h
841C  36FF    		mvi	m,0ffh
841E  3E01    		mvi	a,1
8420  32BF86  		sta	dirty
8423  D1      		pop	d
8424  18BD    		jr	gethexe
		
		; DE=prompt prefix, HL=value location
8426          	getnume:
8426  3E07    		mvi	a,BEL
8428  CD1082  		call	conout
842B          	getnum:
842B  D5      		push	d
842C  E5      		push	h
842D  CD2682  		call	msgout
8430  7E      		mov	a,m
8431  FEFF    		cpi	0ffh
8433  2803    		jrz	getnm0
8435  CD2F82  		call	decout
8438  11D685  	getnm0:	lxi	d,gpunn
843B  CD2682  		call	msgout
843E  CDC581  		call	linin
8441  DA0D83  		jc	nmerr9
8444  79      		mov	a,c
8445  B7      		ora	a
8446  2825    		jrz	getxit
8448  3AC286  		lda	inbuf
844B  FE1B    		cpi	ESC	; delete setting
844D  2813    		jrz	getnmx
844F  41      		mov	b,c
8450  21C286  		lxi	h,inbuf
8453  CD9882  		call	parsnm
8456  7A      		mov	a,d
8457  E1      		pop	h
8458  D1      		pop	d
8459  38CB    		jrc	getnume
845B  77      		mov	m,a
845C  3E01    		mvi	a,1
845E  32BF86  		sta	dirty
8461  C9      		ret
		
		; delete setting, re-prompt
8462  E1      	getnmx:	pop	h
8463  36FF    		mvi	m,0ffh
8465  3E01    		mvi	a,1
8467  32BF86  		sta	dirty
846A  D1      		pop	d
846B  18B9    		jr	getnume
		
846D  E1      	getxit:	pop	h
846E  D1      		pop	d
846F  C9      		ret
		
		; DE=prompt prefix, HL=value location
8470          	getstre:
8470  3E07    		mvi	a,BEL
8472  CD1082  		call	conout
8475          	getstr:
8475  D5      		push	d
8476  E5      		push	h
8477  CD2682  		call	msgout
847A  7E      		mov	a,m
847B  FEFF    		cpi	0ffh
847D  2804    		jrz	getst0
847F  EB      		xchg
8480  CD2682  		call	msgout
8483  11D685  	getst0:	lxi	d,gpunn
8486  CD2682  		call	msgout
8489  CDC581  		call	linin
848C  DA0D83  		jc	nmerr9
848F  79      		mov	a,c
8490  B7      		ora	a
8491  28DA    		jrz	getxit
			; no error checking left?
8493  E1      		pop	h
8494  D1      		pop	d
			; TODO: are we guaranteed 'inbuf' is terminated?
8495  11C286  		lxi	d,inbuf
8498  1A      		ldax	d
8499  FE1B    		cpi	ESC	; delete setting
849B  2809    		jrz	getstx
849D  1A      	getst2:	ldax	d
849E  B7      		ora	a
849F  280E    		jrz	getst1
84A1  77      		mov	m,a
84A2  23      		inx	h
84A3  13      		inx	d
84A4  18F7    		jr	getst2
84A6  36FF    	getstx:	mvi	m,0ffh
84A8  3E01    		mvi	a,1
84AA  32BF86  		sta	dirty
84AD  18C1    		jr	getstre
84AF  3600    	getst1:	mvi	m,0
84B1  3E01    		mvi	a,1
84B3  32BF86  		sta	dirty
84B6  C9      		ret
		
FFFF          	 if z180
84B7  3E07    	getwte:	mvi	a,BEL
84B9  CD1082  		call	conout
84BC          	getwt:
84BC  D5      		push	d
84BD  E5      		push	h
84BE  CD2682  		call	msgout
84C1  7E      		mov	a,m
84C2  CDF984  		call	wtout
84C5  11D685  		lxi	d,gpunn
84C8  CD2682  		call	msgout
84CB  CDC581  		call	linin
84CE  DA0D83  		jc	nmerr9
84D1  79      		mov	a,c
84D2  B7      		ora	a
84D3  2898    		jrz	getxit
84D5  3AC286  		lda	inbuf
84D8  FE1B    		cpi	ESC	; delete setting
84DA  2812    		jrz	getwtx
84DC  41      		mov	b,c
84DD  21C286  		lxi	h,inbuf
84E0  CD1385  		call	parwt
84E3  E1      		pop	h
84E4  D1      		pop	d
84E5  38D0    		jrc	getwte
84E7  77      		mov	m,a
84E8  3E01    		mvi	a,1
84EA  32BF86  		sta	dirty
84ED  C9      		ret
		
84EE  E1      	getwtx:	pop	h
84EF  36FF    		mvi	m,0ffh
84F1  3E01    		mvi	a,1
84F3  32BF86  		sta	dirty
84F6  D1      		pop	d
84F7  18BE    		jr	getwte
		
84F9  FEFF    	wtout:	cpi	0ffh
84FB  C8      		rz
84FC  F5      		push	psw
84FD  07      		rlc
84FE  07      		rlc
84FF  CD0C85  		call	wtout1
8502  3E2C    		mvi	a,','
8504  CD1082  		call	conout
8507  F1      		pop	psw
8508  0F      		rrc
8509  0F      		rrc
850A  0F      		rrc
850B  0F      		rrc
850C  E603    	wtout1:	ani	3
850E  C630    		adi	'0'
8510  C31082  		jmp	conout
		
8513  CD3285  	parwt:	call	parwt1
8516  D8      		rc
8517  0F      		rrc
8518  0F      		rrc
8519  57      		mov	d,a
851A  23      		inx	h
851B  7E      		mov	a,m
851C  FE2C    		cpi	','
851E  37      		stc
851F  C0      		rnz
8520  23      		inx	h
8521  CD3285  		call	parwt1
8524  D8      		rc
8525  07      		rlc
8526  07      		rlc
8527  07      		rlc
8528  07      		rlc
8529  B2      		ora	d
852A  57      		mov	d,a
852B  23      		inx	h
852C  7E      		mov	a,m
852D  D601    		sui	1	; CY only if was 00
852F  3F      		cmc
8530  7A      		mov	a,d
8531  C9      		ret
		
8532          	parwt1:
8532  7E      		mov	a,m
8533  D630    		sui	'0'
8535  D8      		rc
8536  FE04    		cpi	'3'-'0'+1
8538  3F      		cmc
8539  C9      		ret
		 endif
		
853A  6F6E6669	signon:	db	'onfig setup v'
      67207365
      74757020
      76
8547  302E32  		db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
854A  0D0A00  		db	CR,LF,0
		
854D  53657475	csbad:	db	'Setup bank checksum error. Clear setup data (',0
      70206261
      6E6B2063
      6865636B
      73756D20
      6572726F
      722E2043
      6C656172
      20736574
      75702064
      61746120
      2800
857B  53657475	nochg:	db	'Setup not changed',CR,LF,0
      70206E6F
      74206368
      616E6765
      640D0A00
858F  53617665	dochg:	db	'Save changes (',0
      20636861
      6E676573
      202800
859E  53657475	saved:	db	'Setup data saved',CR,LF,0
      70206461
      74612073
      61766564
      0D0A00
85B1  53657475	failed:	db	'Setup flash failed, checksum error',CR,LF,0
      7020666C
      61736820
      6661696C
      65642C20
      63686563
      6B73756D
      20657272
      6F720D0A
      00
		
85D6  293A2000	gpunn:	db	'): ',0
85DA  5072696D	gpdev:	db	'Primary/Default boot device (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20646576
      69636520
      2800
85F8  5072696D	gpuni:	db	'Primary/Default boot unit (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20756E69
      74202800
8614  5072696D	gpstr:	db	'Primary/Default boot string (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20737472
      696E6720
      2800
FFFF          	 if not nofp
8632  5365636F	gsdev:	db	'Secondary boot device (',0
      6E646172
      7920626F
      6F742064
      65766963
      65202800
864A  5365636F	gsuni:	db	'Secondary boot unit (',0
      6E646172
      7920626F
      6F742075
      6E697420
      2800
8660  5365636F	gsstr:	db	'Secondary boot string (',0
      6E646172
      7920626F
      6F742073
      7472696E
      67202800
		 endif
0000          	 if not z180
		 endif
8678  485F3720	dport:	db	'H_7 Port (FF=use SW1) (',0
      506F7274
      20284646
      3D757365
      20535731
      29202800
8690  56444950	vport:	db	'VDIP1 Port (FF=(D8)) (',0
      3120506F
      72742028
      46463D28
      44382929
      202800
FFFF          	 if z180
86A7  57414954	gwait:	db	'WAIT states (MEM,I/O) (',0
      20737461
      74657320
      284D454D
      2C492F4F
      29202800
		 endif
		
86BF  00      	dirty:	db	0
86C0  0000    	curmsg:	dw	0
		
86C2          	inbuf:	ds	128	; input entry buffer
		
8742          		ds	128
		stack:	ds	0
		
87C2  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFF
		
8800          	last:	end



Statistics:

     4	passes
     0	jr promotions
   193	symbols
  1792	bytes

   280	macro calls
  3984	macro bytes
     0	invented symbols
