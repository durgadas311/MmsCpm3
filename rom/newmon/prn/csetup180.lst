		; Command module for SETUP
0002          	VERN	equ	02h
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
FFFF          	z180	equ	true
0000          	nofp	equ	false
		
			maclib	ram
**** ram.lib ****
**** csetup180.asm ****
			maclib	setup
**** setup.lib ****
**** csetup180.asm ****
FFFF          	if z180
			maclib	z180
**** z180.lib ****
**** csetup180.asm ****
		else
		endif
		
000D          	CR	equ	13
000A          	LF	equ	10
0008          	BS	equ	8
0003          	CTLC	equ	3
0007          	BEL	equ	7
001B          	ESC	equ	27
		
FFFF          	if z180
0038          	mmu$cbr	equ	38h
0039          	mmu$bbr	equ	39h
003A          	mmu$cbar equ	3ah
		endif
		
8000          		org	8000h	; out of reach of ROM overlay...
8000  07      	first:	db	HIGH (last-first)	; +0: num pages
8001  80      		db	HIGH first		; +1: ORG page
8002  FF00    		db	255,0	; +2,+3: phy drv base, num
		
8004  C31680  		jmp	init	; +4: init entry
8007  C31880  		jmp	exec	; +7: action entry
		
800A  43      		db	'C'	; +10: Command letter
800B  FF      		db	-1	; +11: front panel key
800C  00      		db	0	; +12: port, 0 if variable
800D  FFFFFF  		db	11111111b,11111111b,11111111b	; +13: FP display
8010  53657475		db	'Setup',0	; +16: mnemonic string
      7000
		
8016          	init:
8016  AF      		xra	a	; NC
8017  C9      		ret
		
8018          	exec:
8018  118F84  		lxi	d,signon
801B  CD0D82  		call	msgout
801E  CD1A81  		call	get$su	; get a copy of setup data
8021  DCC782  		cc	cserr	; offer to clear if checksum error
			; Primary/Default boot options
8024  112F85  		lxi	d,gpdev
8027  210487  		lxi	h,last+dpdev
802A  CD5983  		call	getlet
802D  114D85  		lxi	d,gpuni
8030  210587  		lxi	h,last+dpuni
8033  CD0D84  		call	getnum
8036  116985  		lxi	d,gpstr
8039  210687  		lxi	h,last+dpstr
803C  CD5284  		call	getstr
FFFF          	if not nofp
			; Secondary boot options
803F  118785  		lxi	d,gsdev
8042  218687  		lxi	h,last+dsdev
8045  CD5983  		call	getlet
8048  119F85  		lxi	d,gsuni
804B  218787  		lxi	h,last+dsuni
804E  CD0D84  		call	getnum
8051  11B585  		lxi	d,gsstr
8054  218887  		lxi	h,last+dsstr
8057  CD5284  		call	getstr
		endif
			; Add-ons Installed
0000          	if not z180
		endif
		
805A  3E36    		mvi	a,'6'
805C  32CE85  		sta	dport+1
805F  11CD85  		lxi	d,dport
8062  210B88  		lxi	h,last+h67pt
8065  CDCF83  		call	gethex
		
8068  3E34    		mvi	a,'4'
806A  32CE85  		sta	dport+1
806D  11CD85  		lxi	d,dport
8070  210C88  		lxi	h,last+h47pt
8073  CDCF83  		call	gethex
		
8076  3E33    		mvi	a,'3'
8078  32CE85  		sta	dport+1
807B  11CD85  		lxi	d,dport
807E  210D88  		lxi	h,last+h37pt
8081  CDCF83  		call	gethex
		
0000          	if 0	; H17 is not configurable?
		endif
		
			; TODO: more setup?
8084  3AE585  		lda	dirty
8087  B7      		ora	a
8088  C29280  		jnz	mkchg
808B  11D084  	xxchg:	lxi	d,nochg
808E  CD0D82  		call	msgout
8091  C9      		ret
		
8092  11E484  	mkchg:	lxi	d,dochg
8095  21E885  		lxi	h,inbuf
8098  36FF    		mvi	m,0ffh
809A  CDFA82  		call	getyn
809D  3AE885  		lda	inbuf
80A0  B7      		ora	a
80A1  20E8    		jrnz	xxchg
80A3  110087  		lxi	d,last
80A6  01FE07  		lxi	b,sulen
80A9  CD7681  		call	schksm
80AC  2A9981  		lhld	sum
80AF  229B81  		shld	ssum
80B2  F3      		di
FFFF          	if z180
80B3  ED383A  		in0	a,mmu$cbar	; preserve monitor CBAR
80B6  F5      		push	psw
80B7  3A3620  		lda	ctl$F2
80BA  F5      		push	psw
80BB  0680    		mvi	b,1000$0000b
80BD  ED013A  		out0	b,mmu$cbar
80C0  0600    		mvi	b,0
80C2  ED0138  		out0	b,mmu$cbr
80C5  06F8    		mvi	b,0f8h
80C7  ED0139  		out0	b,mmu$bbr
80CA  F6A0    		ori	10100000b	; WE, no legacy ROM
80CC  D3F2    		out	0f2h
		else
		endif
80CE  210087  		lxi	h,last
80D1  110010  		lxi	d,suadr
80D4  012000  		lxi	b,susize/64
80D7  CDA082  		call	flash
			;jrc	error	; never returned, actually
80DA  F1      		pop	psw
80DB  F5      		push	psw
80DC  E67F    		ani	01111111b	; WE off
80DE  D3F2    		out	0f2h
80E0  110010  		lxi	d,suadr
80E3  01FE07  		lxi	b,sulen
80E6  CD5781  		call	vchksm
80E9  2A9981  		lhld	sum
80EC  EB      		xchg
80ED  2A9B81  		lhld	ssum
80F0  B7      		ora	a
80F1  ED52    		dsbc	d
80F3  201D    		jrnz	error
80F5  F1      		pop	psw
80F6  D3F2    		out	0f2h
FFFF          	if z180
80F8  AF      		xra	a
80F9  D339    		out	mmu$bbr
80FB  F1      		pop	psw
80FC  ED393A  		out0	a,mmu$cbar
		endif
80FF  FB      		ei
8100  11F384  		lxi	d,saved
8103  CD0D82  		call	msgout
			; Update monitor copy
8106  210087  		lxi	h,last
8109  1100F8  		lxi	d,susave
810C  010F01  		lxi	b,sumax
810F  EDB0    		ldir
8111  C9      		ret
		
		; PSW is on stack...
8112  F1      	error:	pop	psw
8113  110685  		lxi	d,failed
8116  CD0D82  		call	msgout
8119  C9      		ret	; what else can we do?
		
811A  F3      	get$su:	di
FFFF          	if z180
811B  ED383A  		in0	a,mmu$cbar	; preserve monitor CBAR
811E  F5      		push	psw
811F  3A3620  		lda	ctl$F2
8122  F5      		push	psw
8123  0680    		mvi	b,1000$0000b
8125  ED013A  		out0	b,mmu$cbar
8128  0600    		mvi	b,0
812A  ED0138  		out0	b,mmu$cbr
812D  06F8    		mvi	b,0f8h
812F  ED0139  		out0	b,mmu$bbr
8132  F6A0    		ori	10100000b	; WE, no legacy ROM
8134  D3F2    		out	0f2h
8136  210010  		lxi	h,suadr
8139  110087  		lxi	d,last
813C  010008  		lxi	b,susize
813F  EDB0    		ldir
8141  F1      		pop	psw
8142  D3F2    		out	0f2h
8144  AF      		xra	a
8145  ED3939  		out0	a,mmu$bbr
8148  F1      		pop	psw
8149  ED393A  		out0	a,mmu$cbar
		else
		endif
814C  FB      		ei
814D  110087  		lxi	d,last
8150  01FE07  		lxi	b,sulen
8153  CD5781  		call	vchksm
8156  C9      		ret	; CY=checksum error
		
		; DE=code start, BC=length
		; Returns CY on error
8157  210000  	vchksm:	lxi	h,0
815A  229981  		shld	sum
815D  1A      	vchk0:	ldax	d
815E  CD9081  		call	sum1
8161  13      		inx	d
8162  0B      		dcx	b
8163  78      		mov	a,b
8164  B1      		ora	c
8165  20F6    		jrnz	vchk0
8167  219981  		lxi	h,sum
816A  0602    		mvi	b,2
816C  1A      	vchk2:	ldax	d
816D  BE      		cmp	m
816E  37      		stc
816F  C0      		rnz
8170  13      		inx	d
8171  23      		inx	h
8172  10F8    		djnz	vchk2
8174  AF      		xra	a	; NC
8175  C9      		ret
		
		; DE=code start, BC=length
		; Sets checksum after code
8176  210000  	schksm:	lxi	h,0
8179  229981  		shld	sum
817C  1A      	schk0:	ldax	d
817D  CD9081  		call	sum1
8180  13      		inx	d
8181  0B      		dcx	b
8182  78      		mov	a,b
8183  B1      		ora	c
8184  20F6    		jrnz	schk0
8186  219981  		lxi	h,sum
8189  7E      		mov	a,m
818A  12      		stax	d
818B  23      		inx	h
818C  13      		inx	d
818D  7E      		mov	a,m
818E  12      		stax	d
818F  C9      		ret
		
8190  219981  	sum1:	lxi	h,sum
8193  86      		add	m
8194  77      		mov	m,a
8195  D0      		rnc
8196  23      		inx	h
8197  34      		inr	m
8198  C9      		ret
		
8199  0000    	sum:	dw	0
819B  0000    	ssum:	dw	0
		
819D  3E1B    	liniz:	mvi	a,ESC
819F  32E885  		sta	inbuf
81A2  0E01    		mvi	c,1
81A4  C3BD82  		jmp	crlf
81A7  3600    	linix:	mvi	m,0	; terminate buffer
81A9  C3BD82  		jmp	crlf
		
		; input a filename from console, allow backspace
		; returns C=num chars
81AC          	linin:
81AC  21E885  		lxi	h,inbuf
81AF  0E00    		mvi	c,0	; count chars
81B1  CD0282  	lini0	call	conin
81B4  FE0D    		cpi	CR
81B6  28EF    		jrz	linix
81B8  FE1B    		cpi	ESC
81BA  28E1    		jrz	liniz
81BC  FE03    		cpi	CTLC	; cancel
81BE  37      		stc
81BF  C8      		rz
81C0  FE08    		cpi	BS
81C2  281C    		jrz	backup
81C4  FE20    		cpi	' '
81C6  3811    		jrc	chrnak
81C8  FE7F    		cpi	'~'+1
81CA  300D    		jrnc	chrnak
81CC  77      	chrok:	mov	m,a
81CD  23      		inx	h
81CE  0C      		inr	c
81CF  FAD781  		jm	chrovf	; 128 chars max
81D2  CDF781  		call	conout
			; TODO: detect overflow...
81D5  18DA    		jr	lini0
81D7  2B      	chrovf:	dcx	h
81D8  0D      		dcr	c
81D9  3E07    	chrnak:	mvi	a,BEL
81DB  CDF781  		call	conout
81DE  18D1    		jr	lini0
81E0          	backup:
81E0  79      		mov	a,c
81E1  B7      		ora	a
81E2  28CD    		jrz	lini0
81E4  0D      		dcr	c
81E5  2B      		dcx	h
81E6  3E08    		mvi	a,BS
81E8  CDF781  		call	conout
81EB  3E20    		mvi	a,' '
81ED  CDF781  		call	conout
81F0  3E08    		mvi	a,BS
81F2  CDF781  		call	conout
81F5  18BA    		jr	lini0
		
81F7          	chrout:
81F7  F5      	conout:	push	psw
81F8  DBED    	cono0:	in	0edh
81FA  E620    		ani	00100000b
81FC  28FA    		jrz	cono0
81FE  F1      		pop	psw
81FF  D3E8    		out	0e8h
8201  C9      		ret
		
8202  DBED    	conin:	in	0edh
8204  E601    		ani	00000001b
8206  28FA    		jrz	conin
8208  DBE8    		in	0e8h
820A  E67F    		ani	01111111b
820C  C9      		ret
		
820D  1A      	msgout:	ldax	d
820E  B7      		ora	a
820F  C8      		rz
8210  CDF781  		call	conout
8213  13      		inx	d
8214  18F7    		jr	msgout
		
		; A=number to print
		; leading zeroes blanked - must preserve B
8216          	decout:
8216  C5      		push	b
8217  0E00    		mvi	c,0
8219  1664    		mvi	d,100
821B  CD3E82  		call	divide
821E  160A    		mvi	d,10
8220  CD3E82  		call	divide
8223  C630    		adi	'0'
8225  CDF781  		call	chrout
8228  C1      		pop	b
8229  C9      		ret
		
822A          	hexout:
822A  F5      		push	psw
822B  07      		rlc
822C  07      		rlc
822D  07      		rlc
822E  07      		rlc
822F  CD3382  		call	hexdig
8232  F1      		pop	psw
8233  E60F    	hexdig:	ani	0fh
8235  C690    		adi	90h
8237  27      		daa
8238  CE40    		aci	40h
823A  27      		daa
823B  C3F781  		jmp	chrout
		
823E  1E00    	divide:	mvi	e,0
8240  92      	div0:	sub	d
8241  1C      		inr	e
8242  30FC    		jrnc	div0
8244  82      		add	d
8245  1D      		dcr	e
8246  2005    		jrnz	div1
8248  CB41    		bit	0,c
824A  2001    		jrnz	div1
824C  C9      		ret
824D  CBC1    	div1:	setb	0,c
824F  F5      		push	psw	; remainder
8250  3E30    		mvi	a,'0'
8252  83      		add	e
8253  CDF781  		call	chrout
8256  F1      		pop	psw	; remainder
8257  C9      		ret
		
8258          	parshx:
8258  1600    		mvi	d,0
825A  7E      	px0:	mov	a,m
825B  B7      		ora	a
825C  C8      		rz
825D  D630    		sui	'0'
825F  D8      		rc
8260  FE0A    		cpi	'9'-'0'+1
8262  380A    		jrc	px3
8264  D611    		sui	'A'-'0'
8266  E6DF    		ani	11011111b	; toupper
8268  FE06    		cpi	'F'-'A'+1
826A  3F      		cmc
826B  D8      		rc
826C  C60A    		adi	10
826E  5F      	px3:	mov	e,a
826F  7A      		mov	a,d
8270  87      		add	a
8271  D8      		rc
8272  87      		add	a
8273  D8      		rc
8274  87      		add	a
8275  D8      		rc
8276  87      		add	a
8277  D8      		rc
8278  83      		add	e	; no CY possible
8279  57      		mov	d,a
827A  23      		inx	h
827B  10DD    		djnz	px0
827D  B7      		ora	a
827E  C9      		ret
		
		; Parse a 8-bit (max) decimal number
		; HL=string, B=count
		; Returns D=number, CY=error
827F          	parsnm:
827F  110000  		lxi	d,0
8282  7E      	pd0:	mov	a,m
8283  B7      		ora	a
8284  C8      		rz
8285  FE30    		cpi	'0'
8287  D8      		rc
8288  FE3A    		cpi	'9'+1
828A  3F      		cmc
828B  D8      		rc
828C  E60F    		ani	0fh
828E  5F      		mov	e,a
828F  7A      		mov	a,d
8290  87      		add	a	; *2
8291  D8      		rc	
8292  87      		add	a	; *4
8293  D8      		rc	
8294  82      		add	d	; *5
8295  D8      		rc	
8296  87      		add	a	; *10
8297  D8      		rc	
8298  83      		add	e	;
8299  D8      		rc
829A  57      		mov	d,a
829B  23      		inx	h
829C  10E4    		djnz	pd0
829E  B7      		ora	a	; NC
829F  C9      		ret
		
		; flash ROM from HL to DE, 64 bytes at a time.
		; DE must be on a 64-byte boundary.
		; BC=num pages to flash
		; returns CY on error, else HL,DE at next 64 bytes
		; caller must set WE... and MEM1 as needed.
82A0          	flash:
82A0  C5      		push	b
82A1  014000  		lxi	b,64
82A4  EDB0    		ldir
			; -----
82A6  2B      		dcx	h
82A7  1B      		dcx	d	; last addr written...
			; wait for write cycle to begin...
			; TODO: timeout this loop?
82A8  1A      	flash2:	ldax	d
82A9  AE      		xra	m
82AA  E680    		ani	10000000b	; bit7 is inverted when busy...
82AC  28FA    		jrz	flash2
			; wait for write cycle to end...
			; TODO: timeout this loop?
82AE  1A      	flash0:	ldax	d
82AF  AE      		xra	m
82B0  E680    		ani	10000000b	; bit7 is inverted when busy...
82B2  20FA    		jrnz	flash0
82B4  23      		inx	h
82B5  13      		inx	d
			; done with page...
			;call	progress	; TODO: progress needed?
82B6  C1      		pop	b
82B7  0B      		dcx	b
82B8  78      		mov	a,b
82B9  B1      		ora	c
82BA  20E4    		jrnz	flash
			;xra	a	; NC already
82BC  C9      		ret
		
82BD  3E0D    	crlf:	mvi	a,CR
82BF  CDF781  		call	conout
82C2  3E0A    		mvi	a,LF
82C4  C3F781  		jmp	conout
		
82C7  11A284  	cserr:	lxi	d,csbad
82CA  CD0D82  		call	msgout
82CD  21E885  		lxi	h,inbuf
82D0  36FF    		mvi	m,0ffh
82D2  CDFA82  		call	getyn
82D5  3AE885  		lda	inbuf
82D8  B7      		ora	a	; NZ=no
82D9  201B    		jrnz	cserr9
82DB  210087  		lxi	h,last
82DE  54      		mov	d,h
82DF  5D      		mov	e,l
82E0  36FF    		mvi	m,0ffh
82E2  13      		inx	d
82E3  01FF07  		lxi	b,susize-1
82E6  EDB0    		ldir
82E8  210000  		lxi	h,0
82EB  220287  		shld	last+subase
82EE  3E01    		mvi	a,1
82F0  32E585  		sta	dirty
82F3  C9      		ret
		
		; CY preserved if set...
82F4  E1      	nmerr9:	pop	h	; discard saved HL
82F5  D1      		pop	d	; discard saved DE
82F6  E1      	cserr9:	pop	h	; discard our ret adr
82F7  C38B80  		jmp	xxchg	; return to monitor
		
		; DE=prompt prefix, HL=value location
		; get a Y/N, Wait for CR, allow BS.
		; Stores 0ffh for "no", 000h for "yes"
82FA          	getyn:
82FA  CD0D82  		call	msgout
82FD  7E      		mov	a,m
82FE  B7      		ora	a
82FF  3E4E    		mvi	a,'N'
8301  2002    		jrnz	getyn1
8303  3E59    		mvi	a,'Y'
8305  CDF781  	getyn1:	call	conout
8308  112B85  		lxi	d,gpunn
830B  CD0D82  		call	msgout
830E  CD0282  	getyn2:	call	conin
8311  FE0D    		cpi	CR
8313  CAB283  		jz	getlt1	; same processing
8316  E65F    		ani	01011111b	; toupper
8318  FE59    		cpi	'Y'
831A  280B    		jrz	getyn0
831C  FE4E    		cpi	'N'
831E  2807    		jrz	getyn0
8320  3E07    		mvi	a,BEL
8322  CDF781  		call	conout
8325  18E7    		jr	getyn2
8327  CDF781  	getyn0:	call	conout
832A  D64E    		sui	'N'	;  0='N',  X='Y'
832C  D601    		sui	1	; CY='N', NC='Y'
832E  9F      		sbb	a	; FF='N', 00='Y'
832F  4F      		mov	c,a
8330  CD0282  	getyn5:	call	conin
8333  FE0D    		cpi	CR
8335  2875    		jrz	getlt3	; same processing
8337  FE08    		cpi	BS
8339  2807    		jrz	getyn4
833B  3E07    		mvi	a,BEL
833D  CDF781  		call	conout
8340  18EE    		jr	getyn5
8342  CDF781  	getyn4:	call	conout
8345  3E20    		mvi	a,' '
8347  CDF781  		call	conout
834A  3E08    		mvi	a,BS
834C  CDF781  		call	conout
834F  18BD    		jr	getyn2
		
		; DE=prompt prefix, HL=value location
		; get a single letter, toupper. Wait for CR, allow BS
		; TODO: allow value meaning "not defined"?
8351          	getlete:
8351  3E07    		mvi	a,BEL
8353  CDF781  		call	conout
8356  CDBD82  		call	crlf
8359          	getlet:
8359  ED53E685		sded	curmsg
835D  CD0D82  		call	msgout
8360  7E      		mov	a,m
8361  FEFF    		cpi	0ffh
8363  2803    		jrz	getlt6
8365  CDF781  		call	conout
8368  112B85  	getlt6:	lxi	d,gpunn
836B  CD0D82  		call	msgout
836E  CD0282  	getlt2:	call	conin
8371  FE0D    		cpi	CR
8373  283D    		jrz	getlt1
8375  FE1B    		cpi	ESC
8377  2844    		jrz	getltx
8379  E65F    		ani	01011111b	; toupper
837B  FE42    		cpi	'B'	; 'A' means default, makes no sense here
837D  3837    		jrc	getlt0
837F  FE5B    		cpi	'Z'+1
8381  3033    		jrnc	getlt0
			; wait for CR, honor BS
8383  4F      		mov	c,a
8384  CDF781  		call	conout
8387  CD0282  	getlt5:	call	conin
838A  FE0D    		cpi	CR
838C  281E    		jrz	getlt3
838E  FE08    		cpi	BS
8390  280B    		jrz	getlt4
8392  FE1B    		cpi	ESC
8394  2827    		jrz	getltx
8396  3E07    		mvi	a,BEL
8398  CDF781  		call	conout
839B  18EA    		jr	getlt5
839D  CDF781  	getlt4:	call	conout
83A0  3E20    		mvi	a,' '
83A2  CDF781  		call	conout
83A5  3E08    		mvi	a,BS
83A7  CDF781  		call	conout
83AA  18C2    		jr	getlt2
83AC  71      	getlt3:	mov	m,c
83AD  3E01    		mvi	a,1
83AF  32E585  		sta	dirty
83B2  CDBD82  	getlt1:	call	crlf
83B5  C9      		ret
83B6  3E07    	getlt0:	mvi	a,BEL
83B8  CDF781  		call	conout
83BB  18B1    		jr	getlt2
		
		; delete setting, re-prompt
83BD  36FF    	getltx:	mvi	m,0ffh
83BF  3E01    		mvi	a,1
83C1  32E585  		sta	dirty
83C4  ED5BE685		lded	curmsg
83C8  1887    		jr	getlete
		
		; DE=prompt prefix, HL=value location
83CA          	gethexe:
83CA  3E07    		mvi	a,BEL
83CC  CDF781  		call	conout
83CF          	gethex:
83CF  D5      		push	d
83D0  E5      		push	h
83D1  CD0D82  		call	msgout
83D4  7E      		mov	a,m
83D5  CD2A82  		call	hexout
83D8  112B85  		lxi	d,gpunn
83DB  CD0D82  		call	msgout
83DE  CDAC81  		call	linin
83E1  DAF482  		jc	nmerr9
83E4  79      		mov	a,c
83E5  B7      		ora	a
83E6  2862    		jrz	getxit
83E8  3AE885  		lda	inbuf
83EB  FE1B    		cpi	ESC	; delete setting
83ED  2813    		jrz	gethxx
83EF  41      		mov	b,c
83F0  21E885  		lxi	h,inbuf
83F3  CD5882  		call	parshx
83F6  7A      		mov	a,d
83F7  E1      		pop	h
83F8  D1      		pop	d
83F9  38CF    		jrc	gethexe
83FB  77      		mov	m,a
83FC  3E01    		mvi	a,1
83FE  32E585  		sta	dirty
8401  C9      		ret
		
		; delete setting, re-prompt
8402  E1      	gethxx:	pop	h
8403  36FF    		mvi	m,0ffh
8405  D1      		pop	d
8406  18C2    		jr	gethexe
		
		; DE=prompt prefix, HL=value location
8408          	getnume:
8408  3E07    		mvi	a,BEL
840A  CDF781  		call	conout
840D          	getnum:
840D  D5      		push	d
840E  E5      		push	h
840F  CD0D82  		call	msgout
8412  7E      		mov	a,m
8413  FEFF    		cpi	0ffh
8415  2803    		jrz	getnm0
8417  CD1682  		call	decout
841A  112B85  	getnm0:	lxi	d,gpunn
841D  CD0D82  		call	msgout
8420  CDAC81  		call	linin
8423  DAF482  		jc	nmerr9
8426  79      		mov	a,c
8427  B7      		ora	a
8428  2820    		jrz	getxit
842A  3AE885  		lda	inbuf
842D  FE1B    		cpi	ESC	; delete setting
842F  2813    		jrz	getnmx
8431  41      		mov	b,c
8432  21E885  		lxi	h,inbuf
8435  CD7F82  		call	parsnm
8438  7A      		mov	a,d
8439  E1      		pop	h
843A  D1      		pop	d
843B  38CB    		jrc	getnume
843D  77      		mov	m,a
843E  3E01    		mvi	a,1
8440  32E585  		sta	dirty
8443  C9      		ret
		
		; delete setting, re-prompt
8444  E1      	getnmx:	pop	h
8445  36FF    		mvi	m,0ffh
8447  D1      		pop	d
8448  18BE    		jr	getnume
		
844A  E1      	getxit:	pop	h
844B  D1      		pop	d
844C  C9      		ret
		
		; DE=prompt prefix, HL=value location
844D          	getstre:
844D  3E07    		mvi	a,BEL
844F  CDF781  		call	conout
8452          	getstr:
8452  D5      		push	d
8453  E5      		push	h
8454  CD0D82  		call	msgout
8457  7E      		mov	a,m
8458  FEFF    		cpi	0ffh
845A  2804    		jrz	getst0
845C  EB      		xchg
845D  CD0D82  		call	msgout
8460  112B85  	getst0:	lxi	d,gpunn
8463  CD0D82  		call	msgout
8466  CDAC81  		call	linin
8469  DAF482  		jc	nmerr9
846C  79      		mov	a,c
846D  B7      		ora	a
846E  28DA    		jrz	getxit
			; no error checking left?
8470  E1      		pop	h
8471  D1      		pop	d
			; TODO: are we guaranteed 'inbuf' is terminated?
8472  11E885  		lxi	d,inbuf
8475  1A      		ldax	d
8476  FE1B    		cpi	ESC	; delete setting
8478  2809    		jrz	getstx
847A  1A      	getst2:	ldax	d
847B  B7      		ora	a
847C  2809    		jrz	getst1
847E  77      		mov	m,a
847F  23      		inx	h
8480  13      		inx	d
8481  18F7    		jr	getst2
8483  36FF    	getstx:	mvi	m,0ffh
8485  18C6    		jr	getstre
8487  3600    	getst1:	mvi	m,0
8489  3E01    		mvi	a,1
848B  32E585  		sta	dirty
848E  C9      		ret
		
848F  6F6E6669	signon:	db	'onfig setup v'
      67207365
      74757020
      76
849C  302E32  		db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
849F  0D0A00  		db	CR,LF,0
		
84A2  53657475	csbad:	db	'Setup bank checksum error. Clear setup data (',0
      70206261
      6E6B2063
      6865636B
      73756D20
      6572726F
      722E2043
      6C656172
      20736574
      75702064
      61746120
      2800
84D0  53657475	nochg:	db	'Setup not changed',CR,LF,0
      70206E6F
      74206368
      616E6765
      640D0A00
84E4  53617665	dochg:	db	'Save changes (',0
      20636861
      6E676573
      202800
84F3  53657475	saved:	db	'Setup data saved',CR,LF,0
      70206461
      74612073
      61766564
      0D0A00
8506  53657475	failed:	db	'Setup flash failed, checksum error',CR,LF,0
      7020666C
      61736820
      6661696C
      65642C20
      63686563
      6B73756D
      20657272
      6F720D0A
      00
		
852B  293A2000	gpunn:	db	'): ',0
852F  5072696D	gpdev:	db	'Primary/Default boot device (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20646576
      69636520
      2800
854D  5072696D	gpuni:	db	'Primary/Default boot unit (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20756E69
      74202800
8569  5072696D	gpstr:	db	'Primary/Default boot string (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20737472
      696E6720
      2800
FFFF          	if not nofp
8587  5365636F	gsdev:	db	'Secondary boot device (',0
      6E646172
      7920626F
      6F742064
      65766963
      65202800
859F  5365636F	gsuni:	db	'Secondary boot unit (',0
      6E646172
      7920626F
      6F742075
      6E697420
      2800
85B5  5365636F	gsstr:	db	'Secondary boot string (',0
      6E646172
      7920626F
      6F742073
      7472696E
      67202800
		endif
0000          	if not z180
		endif
85CD  485F3720	dport:	db	'H_7 Port (FF=use SW1) (',0
      506F7274
      20284646
      3D757365
      20535731
      29202800
		
85E5  00      	dirty:	db	0
85E6  0000    	curmsg:	dw	0
		
85E8          	inbuf:	ds	128	; input entry buffer
		
8668          		ds	128
		stack:	ds	0
		
86E8  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
		
8700          	last:	end



Statistics:

     4	passes
     0	jr promotions
   181	symbols
  1536	bytes

   230	macro calls
  3984	macro bytes
     0	invented symbols
