		; Command module for SETUP
0002          	VERN	equ	02h
		
0000          	false	equ	0
FFFF          	true	equ	not false
		
FFFF          	z180	equ	true
0000          	nofp	equ	false
		
			maclib	ram
**** ram.lib ****
**** csetup180.asm ****
			maclib	setup
**** setup.lib ****
**** csetup180.asm ****
FFFF          	if z180
			maclib	z180
**** z180.lib ****
**** csetup180.asm ****
		else
		endif
		
000D          	CR	equ	13
000A          	LF	equ	10
0008          	BS	equ	8
0003          	CTLC	equ	3
0007          	BEL	equ	7
001B          	ESC	equ	27
		
FFFF          	if z180
0038          	mmu$cbr	equ	38h
0039          	mmu$bbr	equ	39h
003A          	mmu$cbar equ	3ah
		endif
		
8000          		org	8000h	; out of reach of ROM overlay...
8000  07      	first:	db	HIGH (last-first)	; +0: num pages
8001  80      		db	HIGH first		; +1: ORG page
8002  FF00    		db	255,0	; +2,+3: phy drv base, num
		
8004  C31D80  		jmp	init	; +4: init entry
8007  C31F80  		jmp	exec	; +7: action entry
		
800A  43      		db	'C'	; +10: Command letter
800B  FF      		db	-1	; +11: front panel key
800C  00      		db	0	; +12: port, 0 if variable
800D  FFFFFF  		db	11111111b,11111111b,11111111b	; +13: FP display
8010  436F6E66		db	'Config Setup',0	; +16: mnemonic string
      69672053
      65747570
      00
		
801D          	init:
801D  AF      		xra	a	; NC
801E  C9      		ret
		
801F          	exec:
801F  119684  		lxi	d,signon
8022  CD1482  		call	msgout
8025  CD2181  		call	get$su	; get a copy of setup data
8028  DCCE82  		cc	cserr	; offer to clear if checksum error
			; Primary/Default boot options
802B  113685  		lxi	d,gpdev
802E  210487  		lxi	h,last+dpdev
8031  CD6083  		call	getlet
8034  115485  		lxi	d,gpuni
8037  210587  		lxi	h,last+dpuni
803A  CD1484  		call	getnum
803D  117085  		lxi	d,gpstr
8040  210687  		lxi	h,last+dpstr
8043  CD5984  		call	getstr
FFFF          	if not nofp
			; Secondary boot options
8046  118E85  		lxi	d,gsdev
8049  218687  		lxi	h,last+dsdev
804C  CD6083  		call	getlet
804F  11A685  		lxi	d,gsuni
8052  218787  		lxi	h,last+dsuni
8055  CD1484  		call	getnum
8058  11BC85  		lxi	d,gsstr
805B  218887  		lxi	h,last+dsstr
805E  CD5984  		call	getstr
		endif
			; Add-ons Installed
0000          	if not z180
		endif
		
8061  3E36    		mvi	a,'6'
8063  32D585  		sta	dport+1
8066  11D485  		lxi	d,dport
8069  210B88  		lxi	h,last+h67pt
806C  CDD683  		call	gethex
		
806F  3E34    		mvi	a,'4'
8071  32D585  		sta	dport+1
8074  11D485  		lxi	d,dport
8077  210C88  		lxi	h,last+h47pt
807A  CDD683  		call	gethex
		
807D  3E33    		mvi	a,'3'
807F  32D585  		sta	dport+1
8082  11D485  		lxi	d,dport
8085  210D88  		lxi	h,last+h37pt
8088  CDD683  		call	gethex
		
0000          	if 0	; H17 is not configurable?
		endif
		
			; TODO: more setup?
808B  3AEC85  		lda	dirty
808E  B7      		ora	a
808F  C29980  		jnz	mkchg
8092  11D784  	xxchg:	lxi	d,nochg
8095  CD1482  		call	msgout
8098  C9      		ret
		
8099  11EB84  	mkchg:	lxi	d,dochg
809C  21EF85  		lxi	h,inbuf
809F  36FF    		mvi	m,0ffh
80A1  CD0183  		call	getyn
80A4  3AEF85  		lda	inbuf
80A7  B7      		ora	a
80A8  20E8    		jrnz	xxchg
80AA  110087  		lxi	d,last
80AD  01FE07  		lxi	b,sulen
80B0  CD7D81  		call	schksm
80B3  2AA081  		lhld	sum
80B6  22A281  		shld	ssum
80B9  F3      		di
FFFF          	if z180
80BA  ED383A  		in0	a,mmu$cbar	; preserve monitor CBAR
80BD  F5      		push	psw
80BE  3A3620  		lda	ctl$F2
80C1  F5      		push	psw
80C2  0680    		mvi	b,1000$0000b
80C4  ED013A  		out0	b,mmu$cbar
80C7  0600    		mvi	b,0
80C9  ED0138  		out0	b,mmu$cbr
80CC  06F8    		mvi	b,0f8h
80CE  ED0139  		out0	b,mmu$bbr
80D1  F6A0    		ori	10100000b	; WE, no legacy ROM
80D3  D3F2    		out	0f2h
		else
		endif
80D5  210087  		lxi	h,last
80D8  110010  		lxi	d,suadr
80DB  012000  		lxi	b,susize/64
80DE  CDA782  		call	flash
			;jrc	error	; never returned, actually
80E1  F1      		pop	psw
80E2  F5      		push	psw
80E3  E67F    		ani	01111111b	; WE off
80E5  D3F2    		out	0f2h
80E7  110010  		lxi	d,suadr
80EA  01FE07  		lxi	b,sulen
80ED  CD5E81  		call	vchksm
80F0  2AA081  		lhld	sum
80F3  EB      		xchg
80F4  2AA281  		lhld	ssum
80F7  B7      		ora	a
80F8  ED52    		dsbc	d
80FA  201D    		jrnz	error
80FC  F1      		pop	psw
80FD  D3F2    		out	0f2h
FFFF          	if z180
80FF  AF      		xra	a
8100  D339    		out	mmu$bbr
8102  F1      		pop	psw
8103  ED393A  		out0	a,mmu$cbar
		endif
8106  FB      		ei
8107  11FA84  		lxi	d,saved
810A  CD1482  		call	msgout
			; Update monitor copy
810D  210087  		lxi	h,last
8110  1100F8  		lxi	d,susave
8113  010F01  		lxi	b,sumax
8116  EDB0    		ldir
8118  C9      		ret
		
		; PSW is on stack...
8119  F1      	error:	pop	psw
811A  110D85  		lxi	d,failed
811D  CD1482  		call	msgout
8120  C9      		ret	; what else can we do?
		
8121  F3      	get$su:	di
FFFF          	if z180
8122  ED383A  		in0	a,mmu$cbar	; preserve monitor CBAR
8125  F5      		push	psw
8126  3A3620  		lda	ctl$F2
8129  F5      		push	psw
812A  0680    		mvi	b,1000$0000b
812C  ED013A  		out0	b,mmu$cbar
812F  0600    		mvi	b,0
8131  ED0138  		out0	b,mmu$cbr
8134  06F8    		mvi	b,0f8h
8136  ED0139  		out0	b,mmu$bbr
8139  F6A0    		ori	10100000b	; WE, no legacy ROM
813B  D3F2    		out	0f2h
813D  210010  		lxi	h,suadr
8140  110087  		lxi	d,last
8143  010008  		lxi	b,susize
8146  EDB0    		ldir
8148  F1      		pop	psw
8149  D3F2    		out	0f2h
814B  AF      		xra	a
814C  ED3939  		out0	a,mmu$bbr
814F  F1      		pop	psw
8150  ED393A  		out0	a,mmu$cbar
		else
		endif
8153  FB      		ei
8154  110087  		lxi	d,last
8157  01FE07  		lxi	b,sulen
815A  CD5E81  		call	vchksm
815D  C9      		ret	; CY=checksum error
		
		; DE=code start, BC=length
		; Returns CY on error
815E  210000  	vchksm:	lxi	h,0
8161  22A081  		shld	sum
8164  1A      	vchk0:	ldax	d
8165  CD9781  		call	sum1
8168  13      		inx	d
8169  0B      		dcx	b
816A  78      		mov	a,b
816B  B1      		ora	c
816C  20F6    		jrnz	vchk0
816E  21A081  		lxi	h,sum
8171  0602    		mvi	b,2
8173  1A      	vchk2:	ldax	d
8174  BE      		cmp	m
8175  37      		stc
8176  C0      		rnz
8177  13      		inx	d
8178  23      		inx	h
8179  10F8    		djnz	vchk2
817B  AF      		xra	a	; NC
817C  C9      		ret
		
		; DE=code start, BC=length
		; Sets checksum after code
817D  210000  	schksm:	lxi	h,0
8180  22A081  		shld	sum
8183  1A      	schk0:	ldax	d
8184  CD9781  		call	sum1
8187  13      		inx	d
8188  0B      		dcx	b
8189  78      		mov	a,b
818A  B1      		ora	c
818B  20F6    		jrnz	schk0
818D  21A081  		lxi	h,sum
8190  7E      		mov	a,m
8191  12      		stax	d
8192  23      		inx	h
8193  13      		inx	d
8194  7E      		mov	a,m
8195  12      		stax	d
8196  C9      		ret
		
8197  21A081  	sum1:	lxi	h,sum
819A  86      		add	m
819B  77      		mov	m,a
819C  D0      		rnc
819D  23      		inx	h
819E  34      		inr	m
819F  C9      		ret
		
81A0  0000    	sum:	dw	0
81A2  0000    	ssum:	dw	0
		
81A4  3E1B    	liniz:	mvi	a,ESC
81A6  32EF85  		sta	inbuf
81A9  0E01    		mvi	c,1
81AB  C3C482  		jmp	crlf
81AE  3600    	linix:	mvi	m,0	; terminate buffer
81B0  C3C482  		jmp	crlf
		
		; input a filename from console, allow backspace
		; returns C=num chars
81B3          	linin:
81B3  21EF85  		lxi	h,inbuf
81B6  0E00    		mvi	c,0	; count chars
81B8  CD0982  	lini0	call	conin
81BB  FE0D    		cpi	CR
81BD  28EF    		jrz	linix
81BF  FE1B    		cpi	ESC
81C1  28E1    		jrz	liniz
81C3  FE03    		cpi	CTLC	; cancel
81C5  37      		stc
81C6  C8      		rz
81C7  FE08    		cpi	BS
81C9  281C    		jrz	backup
81CB  FE20    		cpi	' '
81CD  3811    		jrc	chrnak
81CF  FE7F    		cpi	'~'+1
81D1  300D    		jrnc	chrnak
81D3  77      	chrok:	mov	m,a
81D4  23      		inx	h
81D5  0C      		inr	c
81D6  FADE81  		jm	chrovf	; 128 chars max
81D9  CDFE81  		call	conout
			; TODO: detect overflow...
81DC  18DA    		jr	lini0
81DE  2B      	chrovf:	dcx	h
81DF  0D      		dcr	c
81E0  3E07    	chrnak:	mvi	a,BEL
81E2  CDFE81  		call	conout
81E5  18D1    		jr	lini0
81E7          	backup:
81E7  79      		mov	a,c
81E8  B7      		ora	a
81E9  28CD    		jrz	lini0
81EB  0D      		dcr	c
81EC  2B      		dcx	h
81ED  3E08    		mvi	a,BS
81EF  CDFE81  		call	conout
81F2  3E20    		mvi	a,' '
81F4  CDFE81  		call	conout
81F7  3E08    		mvi	a,BS
81F9  CDFE81  		call	conout
81FC  18BA    		jr	lini0
		
81FE          	chrout:
81FE  F5      	conout:	push	psw
81FF  DBED    	cono0:	in	0edh
8201  E620    		ani	00100000b
8203  28FA    		jrz	cono0
8205  F1      		pop	psw
8206  D3E8    		out	0e8h
8208  C9      		ret
		
8209  DBED    	conin:	in	0edh
820B  E601    		ani	00000001b
820D  28FA    		jrz	conin
820F  DBE8    		in	0e8h
8211  E67F    		ani	01111111b
8213  C9      		ret
		
8214  1A      	msgout:	ldax	d
8215  B7      		ora	a
8216  C8      		rz
8217  CDFE81  		call	conout
821A  13      		inx	d
821B  18F7    		jr	msgout
		
		; A=number to print
		; leading zeroes blanked - must preserve B
821D          	decout:
821D  C5      		push	b
821E  0E00    		mvi	c,0
8220  1664    		mvi	d,100
8222  CD4582  		call	divide
8225  160A    		mvi	d,10
8227  CD4582  		call	divide
822A  C630    		adi	'0'
822C  CDFE81  		call	chrout
822F  C1      		pop	b
8230  C9      		ret
		
8231          	hexout:
8231  F5      		push	psw
8232  07      		rlc
8233  07      		rlc
8234  07      		rlc
8235  07      		rlc
8236  CD3A82  		call	hexdig
8239  F1      		pop	psw
823A  E60F    	hexdig:	ani	0fh
823C  C690    		adi	90h
823E  27      		daa
823F  CE40    		aci	40h
8241  27      		daa
8242  C3FE81  		jmp	chrout
		
8245  1E00    	divide:	mvi	e,0
8247  92      	div0:	sub	d
8248  1C      		inr	e
8249  30FC    		jrnc	div0
824B  82      		add	d
824C  1D      		dcr	e
824D  2005    		jrnz	div1
824F  CB41    		bit	0,c
8251  2001    		jrnz	div1
8253  C9      		ret
8254  CBC1    	div1:	setb	0,c
8256  F5      		push	psw	; remainder
8257  3E30    		mvi	a,'0'
8259  83      		add	e
825A  CDFE81  		call	chrout
825D  F1      		pop	psw	; remainder
825E  C9      		ret
		
825F          	parshx:
825F  1600    		mvi	d,0
8261  7E      	px0:	mov	a,m
8262  B7      		ora	a
8263  C8      		rz
8264  D630    		sui	'0'
8266  D8      		rc
8267  FE0A    		cpi	'9'-'0'+1
8269  380A    		jrc	px3
826B  D611    		sui	'A'-'0'
826D  E6DF    		ani	11011111b	; toupper
826F  FE06    		cpi	'F'-'A'+1
8271  3F      		cmc
8272  D8      		rc
8273  C60A    		adi	10
8275  5F      	px3:	mov	e,a
8276  7A      		mov	a,d
8277  87      		add	a
8278  D8      		rc
8279  87      		add	a
827A  D8      		rc
827B  87      		add	a
827C  D8      		rc
827D  87      		add	a
827E  D8      		rc
827F  83      		add	e	; no CY possible
8280  57      		mov	d,a
8281  23      		inx	h
8282  10DD    		djnz	px0
8284  B7      		ora	a
8285  C9      		ret
		
		; Parse a 8-bit (max) decimal number
		; HL=string, B=count
		; Returns D=number, CY=error
8286          	parsnm:
8286  110000  		lxi	d,0
8289  7E      	pd0:	mov	a,m
828A  B7      		ora	a
828B  C8      		rz
828C  FE30    		cpi	'0'
828E  D8      		rc
828F  FE3A    		cpi	'9'+1
8291  3F      		cmc
8292  D8      		rc
8293  E60F    		ani	0fh
8295  5F      		mov	e,a
8296  7A      		mov	a,d
8297  87      		add	a	; *2
8298  D8      		rc	
8299  87      		add	a	; *4
829A  D8      		rc	
829B  82      		add	d	; *5
829C  D8      		rc	
829D  87      		add	a	; *10
829E  D8      		rc	
829F  83      		add	e	;
82A0  D8      		rc
82A1  57      		mov	d,a
82A2  23      		inx	h
82A3  10E4    		djnz	pd0
82A5  B7      		ora	a	; NC
82A6  C9      		ret
		
		; flash ROM from HL to DE, 64 bytes at a time.
		; DE must be on a 64-byte boundary.
		; BC=num pages to flash
		; returns CY on error, else HL,DE at next 64 bytes
		; caller must set WE... and MEM1 as needed.
82A7          	flash:
82A7  C5      		push	b
82A8  014000  		lxi	b,64
82AB  EDB0    		ldir
			; -----
82AD  2B      		dcx	h
82AE  1B      		dcx	d	; last addr written...
			; wait for write cycle to begin...
			; TODO: timeout this loop?
82AF  1A      	flash2:	ldax	d
82B0  AE      		xra	m
82B1  E680    		ani	10000000b	; bit7 is inverted when busy...
82B3  28FA    		jrz	flash2
			; wait for write cycle to end...
			; TODO: timeout this loop?
82B5  1A      	flash0:	ldax	d
82B6  AE      		xra	m
82B7  E680    		ani	10000000b	; bit7 is inverted when busy...
82B9  20FA    		jrnz	flash0
82BB  23      		inx	h
82BC  13      		inx	d
			; done with page...
			;call	progress	; TODO: progress needed?
82BD  C1      		pop	b
82BE  0B      		dcx	b
82BF  78      		mov	a,b
82C0  B1      		ora	c
82C1  20E4    		jrnz	flash
			;xra	a	; NC already
82C3  C9      		ret
		
82C4  3E0D    	crlf:	mvi	a,CR
82C6  CDFE81  		call	conout
82C9  3E0A    		mvi	a,LF
82CB  C3FE81  		jmp	conout
		
82CE  11A984  	cserr:	lxi	d,csbad
82D1  CD1482  		call	msgout
82D4  21EF85  		lxi	h,inbuf
82D7  36FF    		mvi	m,0ffh
82D9  CD0183  		call	getyn
82DC  3AEF85  		lda	inbuf
82DF  B7      		ora	a	; NZ=no
82E0  201B    		jrnz	cserr9
82E2  210087  		lxi	h,last
82E5  54      		mov	d,h
82E6  5D      		mov	e,l
82E7  36FF    		mvi	m,0ffh
82E9  13      		inx	d
82EA  01FF07  		lxi	b,susize-1
82ED  EDB0    		ldir
82EF  210000  		lxi	h,0
82F2  220287  		shld	last+subase
82F5  3E01    		mvi	a,1
82F7  32EC85  		sta	dirty
82FA  C9      		ret
		
		; CY preserved if set...
82FB  E1      	nmerr9:	pop	h	; discard saved HL
82FC  D1      		pop	d	; discard saved DE
82FD  E1      	cserr9:	pop	h	; discard our ret adr
82FE  C39280  		jmp	xxchg	; return to monitor
		
		; DE=prompt prefix, HL=value location
		; get a Y/N, Wait for CR, allow BS.
		; Stores 0ffh for "no", 000h for "yes"
8301          	getyn:
8301  CD1482  		call	msgout
8304  7E      		mov	a,m
8305  B7      		ora	a
8306  3E4E    		mvi	a,'N'
8308  2002    		jrnz	getyn1
830A  3E59    		mvi	a,'Y'
830C  CDFE81  	getyn1:	call	conout
830F  113285  		lxi	d,gpunn
8312  CD1482  		call	msgout
8315  CD0982  	getyn2:	call	conin
8318  FE0D    		cpi	CR
831A  CAB983  		jz	getlt1	; same processing
831D  E65F    		ani	01011111b	; toupper
831F  FE59    		cpi	'Y'
8321  280B    		jrz	getyn0
8323  FE4E    		cpi	'N'
8325  2807    		jrz	getyn0
8327  3E07    		mvi	a,BEL
8329  CDFE81  		call	conout
832C  18E7    		jr	getyn2
832E  CDFE81  	getyn0:	call	conout
8331  D64E    		sui	'N'	;  0='N',  X='Y'
8333  D601    		sui	1	; CY='N', NC='Y'
8335  9F      		sbb	a	; FF='N', 00='Y'
8336  4F      		mov	c,a
8337  CD0982  	getyn5:	call	conin
833A  FE0D    		cpi	CR
833C  2875    		jrz	getlt3	; same processing
833E  FE08    		cpi	BS
8340  2807    		jrz	getyn4
8342  3E07    		mvi	a,BEL
8344  CDFE81  		call	conout
8347  18EE    		jr	getyn5
8349  CDFE81  	getyn4:	call	conout
834C  3E20    		mvi	a,' '
834E  CDFE81  		call	conout
8351  3E08    		mvi	a,BS
8353  CDFE81  		call	conout
8356  18BD    		jr	getyn2
		
		; DE=prompt prefix, HL=value location
		; get a single letter, toupper. Wait for CR, allow BS
		; TODO: allow value meaning "not defined"?
8358          	getlete:
8358  3E07    		mvi	a,BEL
835A  CDFE81  		call	conout
835D  CDC482  		call	crlf
8360          	getlet:
8360  ED53ED85		sded	curmsg
8364  CD1482  		call	msgout
8367  7E      		mov	a,m
8368  FEFF    		cpi	0ffh
836A  2803    		jrz	getlt6
836C  CDFE81  		call	conout
836F  113285  	getlt6:	lxi	d,gpunn
8372  CD1482  		call	msgout
8375  CD0982  	getlt2:	call	conin
8378  FE0D    		cpi	CR
837A  283D    		jrz	getlt1
837C  FE1B    		cpi	ESC
837E  2844    		jrz	getltx
8380  E65F    		ani	01011111b	; toupper
8382  FE42    		cpi	'B'	; 'A' means default, makes no sense here
8384  3837    		jrc	getlt0
8386  FE5B    		cpi	'Z'+1
8388  3033    		jrnc	getlt0
			; wait for CR, honor BS
838A  4F      		mov	c,a
838B  CDFE81  		call	conout
838E  CD0982  	getlt5:	call	conin
8391  FE0D    		cpi	CR
8393  281E    		jrz	getlt3
8395  FE08    		cpi	BS
8397  280B    		jrz	getlt4
8399  FE1B    		cpi	ESC
839B  2827    		jrz	getltx
839D  3E07    		mvi	a,BEL
839F  CDFE81  		call	conout
83A2  18EA    		jr	getlt5
83A4  CDFE81  	getlt4:	call	conout
83A7  3E20    		mvi	a,' '
83A9  CDFE81  		call	conout
83AC  3E08    		mvi	a,BS
83AE  CDFE81  		call	conout
83B1  18C2    		jr	getlt2
83B3  71      	getlt3:	mov	m,c
83B4  3E01    		mvi	a,1
83B6  32EC85  		sta	dirty
83B9  CDC482  	getlt1:	call	crlf
83BC  C9      		ret
83BD  3E07    	getlt0:	mvi	a,BEL
83BF  CDFE81  		call	conout
83C2  18B1    		jr	getlt2
		
		; delete setting, re-prompt
83C4  36FF    	getltx:	mvi	m,0ffh
83C6  3E01    		mvi	a,1
83C8  32EC85  		sta	dirty
83CB  ED5BED85		lded	curmsg
83CF  1887    		jr	getlete
		
		; DE=prompt prefix, HL=value location
83D1          	gethexe:
83D1  3E07    		mvi	a,BEL
83D3  CDFE81  		call	conout
83D6          	gethex:
83D6  D5      		push	d
83D7  E5      		push	h
83D8  CD1482  		call	msgout
83DB  7E      		mov	a,m
83DC  CD3182  		call	hexout
83DF  113285  		lxi	d,gpunn
83E2  CD1482  		call	msgout
83E5  CDB381  		call	linin
83E8  DAFB82  		jc	nmerr9
83EB  79      		mov	a,c
83EC  B7      		ora	a
83ED  2862    		jrz	getxit
83EF  3AEF85  		lda	inbuf
83F2  FE1B    		cpi	ESC	; delete setting
83F4  2813    		jrz	gethxx
83F6  41      		mov	b,c
83F7  21EF85  		lxi	h,inbuf
83FA  CD5F82  		call	parshx
83FD  7A      		mov	a,d
83FE  E1      		pop	h
83FF  D1      		pop	d
8400  38CF    		jrc	gethexe
8402  77      		mov	m,a
8403  3E01    		mvi	a,1
8405  32EC85  		sta	dirty
8408  C9      		ret
		
		; delete setting, re-prompt
8409  E1      	gethxx:	pop	h
840A  36FF    		mvi	m,0ffh
840C  D1      		pop	d
840D  18C2    		jr	gethexe
		
		; DE=prompt prefix, HL=value location
840F          	getnume:
840F  3E07    		mvi	a,BEL
8411  CDFE81  		call	conout
8414          	getnum:
8414  D5      		push	d
8415  E5      		push	h
8416  CD1482  		call	msgout
8419  7E      		mov	a,m
841A  FEFF    		cpi	0ffh
841C  2803    		jrz	getnm0
841E  CD1D82  		call	decout
8421  113285  	getnm0:	lxi	d,gpunn
8424  CD1482  		call	msgout
8427  CDB381  		call	linin
842A  DAFB82  		jc	nmerr9
842D  79      		mov	a,c
842E  B7      		ora	a
842F  2820    		jrz	getxit
8431  3AEF85  		lda	inbuf
8434  FE1B    		cpi	ESC	; delete setting
8436  2813    		jrz	getnmx
8438  41      		mov	b,c
8439  21EF85  		lxi	h,inbuf
843C  CD8682  		call	parsnm
843F  7A      		mov	a,d
8440  E1      		pop	h
8441  D1      		pop	d
8442  38CB    		jrc	getnume
8444  77      		mov	m,a
8445  3E01    		mvi	a,1
8447  32EC85  		sta	dirty
844A  C9      		ret
		
		; delete setting, re-prompt
844B  E1      	getnmx:	pop	h
844C  36FF    		mvi	m,0ffh
844E  D1      		pop	d
844F  18BE    		jr	getnume
		
8451  E1      	getxit:	pop	h
8452  D1      		pop	d
8453  C9      		ret
		
		; DE=prompt prefix, HL=value location
8454          	getstre:
8454  3E07    		mvi	a,BEL
8456  CDFE81  		call	conout
8459          	getstr:
8459  D5      		push	d
845A  E5      		push	h
845B  CD1482  		call	msgout
845E  7E      		mov	a,m
845F  FEFF    		cpi	0ffh
8461  2804    		jrz	getst0
8463  EB      		xchg
8464  CD1482  		call	msgout
8467  113285  	getst0:	lxi	d,gpunn
846A  CD1482  		call	msgout
846D  CDB381  		call	linin
8470  DAFB82  		jc	nmerr9
8473  79      		mov	a,c
8474  B7      		ora	a
8475  28DA    		jrz	getxit
			; no error checking left?
8477  E1      		pop	h
8478  D1      		pop	d
			; TODO: are we guaranteed 'inbuf' is terminated?
8479  11EF85  		lxi	d,inbuf
847C  1A      		ldax	d
847D  FE1B    		cpi	ESC	; delete setting
847F  2809    		jrz	getstx
8481  1A      	getst2:	ldax	d
8482  B7      		ora	a
8483  2809    		jrz	getst1
8485  77      		mov	m,a
8486  23      		inx	h
8487  13      		inx	d
8488  18F7    		jr	getst2
848A  36FF    	getstx:	mvi	m,0ffh
848C  18C6    		jr	getstre
848E  3600    	getst1:	mvi	m,0
8490  3E01    		mvi	a,1
8492  32EC85  		sta	dirty
8495  C9      		ret
		
8496  6F6E6669	signon:	db	'onfig setup v'
      67207365
      74757020
      76
84A3  302E32  		db	(VERN SHR 4)+'0','.',(VERN AND 0fh)+'0'
84A6  0D0A00  		db	CR,LF,0
		
84A9  53657475	csbad:	db	'Setup bank checksum error. Clear setup data (',0
      70206261
      6E6B2063
      6865636B
      73756D20
      6572726F
      722E2043
      6C656172
      20736574
      75702064
      61746120
      2800
84D7  53657475	nochg:	db	'Setup not changed',CR,LF,0
      70206E6F
      74206368
      616E6765
      640D0A00
84EB  53617665	dochg:	db	'Save changes (',0
      20636861
      6E676573
      202800
84FA  53657475	saved:	db	'Setup data saved',CR,LF,0
      70206461
      74612073
      61766564
      0D0A00
850D  53657475	failed:	db	'Setup flash failed, checksum error',CR,LF,0
      7020666C
      61736820
      6661696C
      65642C20
      63686563
      6B73756D
      20657272
      6F720D0A
      00
		
8532  293A2000	gpunn:	db	'): ',0
8536  5072696D	gpdev:	db	'Primary/Default boot device (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20646576
      69636520
      2800
8554  5072696D	gpuni:	db	'Primary/Default boot unit (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20756E69
      74202800
8570  5072696D	gpstr:	db	'Primary/Default boot string (',0
      6172792F
      44656661
      756C7420
      626F6F74
      20737472
      696E6720
      2800
FFFF          	if not nofp
858E  5365636F	gsdev:	db	'Secondary boot device (',0
      6E646172
      7920626F
      6F742064
      65766963
      65202800
85A6  5365636F	gsuni:	db	'Secondary boot unit (',0
      6E646172
      7920626F
      6F742075
      6E697420
      2800
85BC  5365636F	gsstr:	db	'Secondary boot string (',0
      6E646172
      7920626F
      6F742073
      7472696E
      67202800
		endif
0000          	if not z180
		endif
85D4  485F3720	dport:	db	'H_7 Port (FF=use SW1) (',0
      506F7274
      20284646
      3D757365
      20535731
      29202800
		
85EC  00      	dirty:	db	0
85ED  0000    	curmsg:	dw	0
		
85EF          	inbuf:	ds	128	; input entry buffer
		
866F          		ds	128
		stack:	ds	0
		
86EF  FFFFFFFF		rept	(($+0ffh) and 0ff00h)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FF
		
8700          	last:	end



Statistics:

     4	passes
     0	jr promotions
   182	symbols
  1536	bytes

   223	macro calls
  3984	macro bytes
     0	invented symbols
