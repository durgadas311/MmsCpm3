PL/M-80 COMPILER    SDIR 8080 - MAIN MODULE                                                                               PAGE   1


ISIS-II PL/M-80 V3.0 COMPILATION OF MODULE SDIR
OBJECT MODULE PLACED IN MAIN80
COMPILER INVOKED BY:  :F1:PLM80 MAIN80.PLM DEBUG PAGEWIDTH(130) OPTIMIZE OBJECT(MAIN80)



              $title ('SDIR 8080 - Main Module')
   1          sdir:                               /* SDIR FOR 8080 */
              do;

              $include(copyrt.lit)
          =
          =   /*
          =     Copyright (C) 1982
          =     Digital Research
          =     P.O. Box 579
          =     Pacific Grove, CA 93950
          =   */
          =

   2   1      declare plm label public;

              $include(main.plm)
          =    
          =     /* C P / M - M P / M    D I R E C T O R Y   C O M M O N   (SDIR)  */
          =
          =      /* B E G I N N I N G   O F    C O M M O N   M A I N   M O D U L E */
          =
          =
          =          /* This module is included in main80.plm or main86.plm. */
          =          /* The differences between 8080 and 8086 versions are   */
          =          /* contained in the modules main80.plm, main86.plm and  */
          =          /* dpb80.plm, dpb86.plm and the submit files showing    */
          =          /* the different link and location addresses.           */
          =
          =
          =   $include (comlit.lit)
          =1
   3   1  =1  declare
          =1          lit                literally          'literally',
          =1          dcl                lit                'declare',
          =1          true               lit                '0ffh',
          =1          false              lit                '0',
          =1          boolean            lit                'byte',
          =1          forever            lit                'while true',
          =1          cr                 lit                '13',
          =1          lf                 lit                '10',
          =1          tab                lit                '9',
          =1          ctrlc              lit                '3',
          =1          ff                 lit                '12',
          =1          page$len$offset    lit                '1ch',
          =1          nopage$mode$offset lit                '2Ch',
          =1          sectorlen          lit                '128';
          =   $include (mon.plm)
          =1
          =1                  /* definitions for assembly interface module        */
   4   1  =1  declare
PL/M-80 COMPILER    SDIR 8080 - MAIN MODULE                                                                               PAGE   2


          =1      fcb (33) byte external,        /* default file control block    */
          =1      maxb address external,         /* top of memory                 */
          =1      buff(128)byte external;        /* default buffer                */
          =1
   5   1  =1  mon1: procedure(f,a) external;
   6   2  =1      declare f byte, a address;
   7   2  =1      end mon1;
          =1
   8   1  =1  mon2: procedure(f,a) byte external;
   9   2  =1      declare f byte, a address;
  10   2  =1      end mon2;
          =1
  11   1  =1  mon3: procedure(f,a) address external;
  12   2  =1      declare f byte, a address;
  13   2  =1      end mon3;
          =1
          =
          =
  14   1  =   dcl patch (128) address;
          =
          =   /* Scanner Entry Points in scan.plm */
          =
  15   1  =   scan: procedure(pcb$adr) external;
  16   2  =       declare pcb$adr address;
  17   2  =   end scan;
          =
  18   1  =   scan$init: procedure(pcb$adr) external;
  19   2  =       declare pcb$adr address;
  20   2  =   end scan$init;
          =
          =   /* -------- Routines in other modules -------- */
          =
  21   1  =   search$init: procedure external;   /* initialization of search.plm */
  22   2  =   end search$init;
          =
  23   1  =   get$files: procedure external;     /* entry to search.plm */
  24   2  =   end get$files;
          =
  25   1  =   sort: procedure external;          /* entry to sort.plm */
  26   2  =   end sort;
          =
  27   1  =   mult23: procedure (num) address external;    /* in sort.plm */
  28   2  =   dcl num address;
  29   2  =   end mult23;
          =
  30   1  =   display$files: procedure external;    /* entry to disp.plm */
  31   2  =   end display$files;
          =
          =   /* -------- Routines in util.plm -------- */
          =
  32   1  =   printb: procedure external;
  33   2  =   end printb;
          =
  34   1  =   print$char: procedure(c) external;
  35   2  =   dcl c byte;
  36   2  =   end print$char;
          =
PL/M-80 COMPILER    SDIR 8080 - MAIN MODULE                                                                               PAGE   3


  37   1  =   print: procedure(string$adr) external;
  38   2  =   dcl string$adr address;
  39   2  =   end print;
          =
  40   1  =   crlf: procedure external;
  41   2  =   end crlf;
          =
  42   1  =   p$decimal: procedure(value,fieldsize,zsup) external;
  43   2  =       dcl value address,
          =           fieldsize address,
          =           zsup boolean;
  44   2  =   end p$decimal;
          =
          =
          =   /* ------------------------------------- */
          =
  45   1  =   dcl debug boolean public initial (false);
          =
          =   /* -------- version information -------- */
          =
  46   1  =   dcl (os,bdos) byte public;
          =   $include (vers.lit)
  47   1  =1  declare
          =1     bdos20  lit  '20h',
          =1     bdos30  lit  '30h',
          =1     mpm     lit  '01h',
          =1     mpm86   lit  '11h';
          =
          =   $include (fcb.lit)
          =1
  48   1  =1  declare
          =1      f$drvusr          lit '0',        /* drive/user byte               */
          =1      f$name            lit '1',        /* file name                     */
          =1      f$namelen         lit '8',        /* file name length              */
          =1      f$type            lit '9',        /* file type field               */
          =1      f$typelen         lit '3',        /* type length                   */
          =1      f$rw              lit '9',        /* high bit is R/W attribute     */
          =1      f$dirsys          lit '10',       /* high bit is dir/sys attribute */
          =1      f$arc             lit '11',       /* high bit is archive attribute */
          =1      f$ex              lit '12',       /* extent                        */
          =1      f$s1              lit '13',       /* module byte                   */
          =1      f$rc              lit '15',       /* record count                  */
          =1      f$diskmap         lit '16',       /* file disk map                 */
          =1      diskmaplen        lit '16',       /* disk map length               */
          =1      f$drvusr2         lit '16',       /* fcb2                          */
          =1      f$name2           lit '17',
          =1      f$type2           lit '25',
          =1      f$rrec            lit '33',       /* random record                 */
          =1      f$rreco           lit '35';       /*   "      "    overflow        */
          =1
          =
          =   $include(search.lit)
          =1
  49   1  =1  declare                       /* what kind of file user wants to find       */
          =1      find$structure lit 'structure (
          =1      dir byte,
          =1      sys byte,
PL/M-80 COMPILER    SDIR 8080 - MAIN MODULE                                                                               PAGE   4


          =1      ro  byte,
          =1      rw  byte,
          =1      pass byte,
          =1      xfcb byte,
          =1      nonxfcb byte,
          =1      exclude byte)';
          =1
  50   1  =1  declare
          =1      max$search$files literally '10';
          =1
  51   1  =1  declare
          =1      search$structure lit 'structure(
          =1      drv byte,
          =1      name(8) byte,
          =1      type(3) byte,
          =1      anyfile boolean)';        /* match on any drive if true */
          =1
          =
  52   1  =   dcl find find$structure public initial
          =       (false,false,false,false,  false,false,false,false);
          =
  53   1  =   dcl
          =       num$search$files byte public initial(0),
          =       no$page$mode byte public initial(0),
          =       search (max$search$files) search$structure public;
          =
  54   1  =   dcl first$f$i$adr address external;
  55   1  =   dcl get$all$dir$entries boolean public;
  56   1  =   dcl first$pass boolean public;
          =
  57   1  =   dcl usr$vector address public initial(0),   /* bits for user #s to scan */
          =       active$usr$vector address public,       /* active users on curdrv   */
          =       drv$vector address initial (0);         /* bits for drives to scan  */
          =
          =   $include (format.lit)
          =1
  58   1  =1  dcl form$short lit '0',       /* format values for SDIR */
          =1      form$size lit '1',
          =1      form$full lit '2';
          =1
          =
  59   1  =   dcl format byte public initial (form$full),
          =       page$len address public initial (0ffffh),
          =        /* lines on a page before printing new headers, 0 forces initial hdrs  */
          =       message boolean public initial(false),/* show titles when no files found*/
          =       formfeeds boolean public initial(false),/* use form feeds               */
          =       date$opt boolean public initial(false), /* dates display */
          =       display$attributes boolean public initial(false); /* attributes display */
          =
  60   1  =   dcl file$displayed boolean external;
          =                            /* true if 1 or more files displayed by dsh.plm    */
          =
  61   1  =   dcl sort$op boolean initial (true);             /* default is to do sorting */
  62   1  =   dcl sorted boolean external;                    /* if successful sort       */
          =
          =
  63   1  =   dcl cur$usr byte public,        /* current user being searched              */
PL/M-80 COMPILER    SDIR 8080 - MAIN MODULE                                                                               PAGE   5


          =       cur$drv byte public;        /* current drive   "     "                  */
          =
          =   /* -------- BDOS calls --------- */
          =
  64   1  =   get$version: procedure address; /* returns current version information      */
  65   2  =       return mon2(12,0);
  66   2  =   end get$version;
          =
  67   1  =   select$drive: procedure(d);
  68   2  =       declare d byte;
  69   2  =       call mon1(14,d);
  70   2  =   end select$drive;
          =
  71   1  =   search$first: procedure(d) byte external;
  72   2  =   dcl d address;
  73   2  =   end search$first;
          =
  74   1  =   search$next: procedure byte external;
  75   2  =   end search$next;
          =
  76   1  =   get$cur$drv: procedure byte;        /* return current drive number          */
  77   2  =       return mon2(25,0);
  78   2  =   end get$cur$drv;
          =
  79   1  =   getlogin: procedure address;        /* get the login vector                 */
  80   2  =       return mon3(24,0);
  81   2  =   end getlogin;
          =
  82   1  =   getusr: procedure byte;             /* return current user number           */
  83   2  =       return mon2(32,0ffh);
  84   2  =   end getusr;
          =
  85   1  =   getscbbyte: procedure (offset) byte;
  86   2  =     declare offset byte;
  87   2  =     declare scbpb structure
          =       (offset byte,
          =        set    byte,
          =        value  address);
  88   2  =     scbpb.offset = offset;
  89   2  =     scbpb.set = 0;
  90   2  =     return mon2(49,.scbpb);
  91   2  =   end getscbbyte;
          =
  92   1  =   set$console$mode: procedure;
          =     /* set console mode to control-c only */
  93   2  =     call mon1(109,1);
  94   2  =   end set$console$mode;
          =
  95   1  =   terminate: procedure public;
  96   2  =       call mon1 (0,0);
  97   2  =   end terminate;
          =
          =
          =   /* -------- Utility routines -------- */
          =
  98   1  =   number: procedure (char) boolean;
  99   2  =       dcl char byte;
PL/M-80 COMPILER    SDIR 8080 - MAIN MODULE                                                                               PAGE   6


 100   2  =       return(char >= '0' and char <= '9');
 101   2  =   end number;
          =
 102   1  =   make$numeric: procedure(char$adr,len,val$adr) boolean;
 103   2  =       dcl (char$adr, val$adr, place) address,
          =           chars based char$adr (1) byte,
          =           value based val$adr address,
          =           (i,len) byte;
          =
 104   2  =       value = 0;
 105   2  =       place = 1;
 106   2  =       do i = 1 to len;
 107   3  =           if not number(chars(len - i)) then
 108   3  =               return(false);
 109   3  =           value = value + (chars(len - i) - '0') * place;
 110   3  =           place = place * 10;
 111   3  =      end;
 112   2  =      return(true); 
 113   2  =   end make$numeric;
          =
 114   1  =   set$vec: procedure(v$adr,num) public;
 115   2  =       dcl v$adr address,               /* set bit number given by num */
          =           vector based v$adr address,  /* 0 <= num <= 15              */
          =           num byte;
 116   2  =       if num = 0 then
 117   2  =          vector = vector or 1;
          =       else
 118   2  =          vector = vector or shl(double(1),num);
 119   2  =   end set$vec;
          =
 120   1  =   bit$loc: procedure(vector) byte;
          =                                /* return location of right most on bit vector */
 121   2  =       dcl vector address,      /* 0 - 15                                      */
          =           i byte;
 122   2  =       i = 0;
 123   2  =       do while i < 16 and (vector and double(1)) = 0;
 124   3  =           vector = shr(vector,1);
 125   3  =           i = i + 1;
 126   3  =       end;
 127   2  =       return(i);
 128   2  =   end bit$loc;
          =
 129   1  =   get$nxt: procedure(vector$adr) byte;
 130   2  =       dcl i byte,
          =           (vector$adr,mask) address,
          =           vector based vector$adr address;
          =   /*
          =          if debug then
          =           do;  call print(.(cr,lf,'getnxt: vector = $'));
          =           call pdecimal(vector,10000,false);
          =           end;
          =   */
 131   2  =       if (i := bit$loc(vector)) > 15 then
 132   2  =           return(0ffh);
 133   2  =       mask = 1;
 134   2  =       if i > 0 then
 135   2  =           mask = shl(mask,i);
PL/M-80 COMPILER    SDIR 8080 - MAIN MODULE                                                                               PAGE   7


 136   2  =       vector = vector xor mask;                /* turn off bit        */
          =   /*
          =          if debug then
          =           do;  call print(.(cr,lf,'getnxt: vector, i, mask $'));
          =           call pdecimal(vector,10000,false);
          =           call printb;
          =           call pdecimal(i,10000,false); 
          =           call printb;
          =           call pdecimal(mask,10000,false);
          =           end; 
          =   */
 137   2  =       return(i);
 138   2  =   end get$nxt;               /* too bad plm rotates only work on byte values */
          =
          =   /* help: procedure;       COMMENTED OUT - HELP PROGRAM REPLACE DISPLAY
          =
          =   call print(.(cr,lf,
          =   tab,tab,tab,'DIR EXAMPLES',cr,lf,lf,
          =   'dir file.one',tab,tab,tab,
          =   '(find a file on current user and default drive)',cr,lf,
          =   'dir *.com d:*.pli',tab,tab,'(find matching files on default and d: drive)',
          =   cr,lf,
          =   'dir [rw]',tab,tab,tab,'(find files that are read/write)',cr,lf,
          =   'dir [ro dir sys]',tab,tab,'(same for read/only, directory, system)',cr,lf,
          =   'dir [xfcb]',tab,tab,tab,'(find files with XFCB''s)',cr,lf,
          =   'dir [nonxfcb]',tab,tab,tab,'(find files without XFCB''s)',cr,lf,
          =   'dir [exclude] *.com',tab,tab,'(find files that don''t end in ''com'')',cr,lf,
          =   'dir [nosort]',tab,tab,tab,'(don''t sort the files)',cr,lf,
          =   'dir [full]',tab,tab,tab,'(show all file information)',cr,lf,
          =   'dir [size]',tab,tab,tab,'(show name and size in kilobytes)',cr,lf,
          =   'dir [short]',tab,tab,tab,'(show just the file names)',cr,lf,
          =   'dir [drive = all]',tab,tab,'(search all logged in drives)',cr,lf,
          =   'dir [drive = (a,b,p)]',tab,tab,
          =   '(search specified drives, ''disk'' is synonym)',cr,lf,
          =   'dir [user = all]',tab,tab,'(find files with any user number)',cr,lf,
          =   'dir [user = (0,1,15), G12]',tab,'(find files with specified user number)',
          =   cr,lf,
          =   'dir [length = n]',tab,tab,'(print headers every n lines)',cr,lf,
          =   'dir [ff]',tab,tab,tab,'(print form feeds between headers)',cr,lf,
          =   'dir [message user=all]',tab,tab,'(show user/drive areas with no files)',
          =   cr,lf,
          =   'dir [help]',tab,tab,tab,'(show this message)',cr,lf,
          =   'dir [dir sys rw ro sort xfcb nonxfcb full] d:*.*',tab,'(defaults)$'));
          =
          =   call terminate;
          =   end help; */
          =
          =
          =   /* -------- Scanner Info -------- */
          =
          =   $include (scan.lit)
          =1
 139   1  =1  declare
          =1      pcb$structure literally 'structure (
          =1              state address,
          =1              scan$adr address,
          =1              token$adr address,
PL/M-80 COMPILER    SDIR 8080 - MAIN MODULE                                                                               PAGE   8


          =1              tok$typ byte,
          =1              token$len byte,
          =1              p$level byte,
          =1              nxt$token byte)';
          =1
 140   1  =1  declare
          =1      t$null lit '0',
          =1      t$param  lit '1',
          =1      t$op lit '2',
          =1      t$mod lit '4',
          =1      t$identifier lit '8',
          =1      t$string lit '16',
          =1      t$numeric lit '32',
          =1      t$filespec lit '64',
          =1      t$error lit '128';
          =1
          =
 141   1  =   dcl pcb pcb$structure
          =        initial (0,.buff(0),.fcb,0,0,0,0) ;
          =
 142   1  =   dcl token based pcb.token$adr (12) byte;
 143   1  =   dcl got$options boolean;
          =
 144   1  =   get$options: procedure;
 145   2  =       dcl temp byte;
          =
 146   2  =       do while pcb.scan$adr <> 0ffffh and ((pcb.tok$typ and t$op) <> 0);
          =
 147   3  =         if pcb.nxt$token <> t$mod then do;
          =                                            /* options with no modifiers */
 149   4  =           if token(1) = 'A' then
 150   4  =               display$attributes = true;
          =
 151   4  =           else if token(1) = 'D' and token(2) = 'I' then
 152   4  =               find.dir = true;
          =
 153   4  =           else if token(1) = 'D' and token(2) = 'A' then do;
 155   5  =               format = form$full;
 156   5  =               date$opt = true;
 157   5  =             end;
          =   /*
          =              else if token(1) = 'D' and token(2) = 'E' then
          =               debug = true; 
          =   */
 158   4  =           else if token(1) = 'E' then
 159   4  =               find.exclude = true;
          =
 160   4  =           else if token(1) = 'F'then do;
 162   5  =               if token(2) = 'F' then
 163   5  =                   formfeeds = true;
 164   5  =               else if token(2) = 'U' then
 165   5  =                   format = form$full;
 166   5  =               else goto op$err;
 167   5  =           end;
          =
 168   4  =           else if token(1) = 'G' then
 169   4  =           do;
PL/M-80 COMPILER    SDIR 8080 - MAIN MODULE                                                                               PAGE   9


 170   5  =               if pcb.token$len < 3 then
 171   5  =                   temp = token(2) - '0';
          =               else
 172   5  =                   temp = (token(2) - '0') * 10 + (token(3) - '0');
 173   5  =               if temp >= 0 and temp <= 15 then
 174   5  =                   call set$vec(.usr$vector,temp);
 175   5  =               else goto op$err;
 176   5  =           end;
          =
          =           /* else if token(1) = 'H' then
          =               call help; */
          =
 177   4  =           else if token(1) = 'M' then
 178   4  =               message = true;
          =
 179   4  =           else if token(1) = 'N' then
 180   4  =           do;
 181   5  =               if token(4) = 'X' then
 182   5  =                   find.nonxfcb = true;
 183   5  =               else if token(3) = 'P' then
 184   5  =                   no$page$mode = 0FFh;
 185   5  =               else if token(3) = 'S' then
 186   5  =                   sort$op = false;
 187   5  =               else goto op$err;
 188   5  =           end;
          =
          =           /* else if token(1) = 'P' then
          =               find.pass = true; */
          =
 189   4  =           else if token(1) = 'R' and token(2) = 'O' then
 190   4  =               find.ro = true;
          =
 191   4  =           else if token(1) = 'R' and token(2) = 'W' then
 192   4  =               find.rw = true;
          =
 193   4  =           else if token(1) = 'S' then do;
 195   5  =               if token(2) = 'Y' then
 196   5  =                   find.sys = true;
 197   5  =               else if token(2) = 'I' then
 198   5  =                   format = form$size;
 199   5  =               else if token(2) = 'O' then
 200   5  =                   sort$op = true;
 201   5  =               else goto op$err;
 202   5  =           end;
          =
 203   4  =           else if token(1) = 'X' then
 204   4  =               find.xfcb = true;
          =
 205   4  =           else goto op$err; 
          =
 206   4  =           call scan(.pcb);
 207   4  =         end;
          =
          =         else
 208   3  =         do;                                 /* options with modifiers */
 209   4  =           if token(1) = 'L' then
 210   4  =           do;
PL/M-80 COMPILER    SDIR 8080 - MAIN MODULE                                                                               PAGE  10


 211   5  =               call scan(.pcb);
 212   5  =               if (pcb.tok$typ and t$numeric) <> 0 then
 213   5  =                   if make$numeric(.token(1),pcb.token$len,.page$len) then
 214   5  =                        if page$len < 5 then
 215   5  =                            goto op$err;
 216   5  =                        else call scan(.pcb);
 217   5  =                   else goto op$err;
 218   5  =               else goto op$err;
 219   5  =           end;
          =
 220   4  =           else if token(1) = 'U' then
 221   4  =           do;
          =   /*
          =                if debug then
          =                 call print(.(cr,lf,'In User option$')); 
          =   */
 222   5  =             call scan(.pcb); 
 223   5  =             if (((pcb.tok$typ and t$mod) = 0) or (bdos < bdos20)) then
 224   5  =                 goto op$err;
 225   5  =             do while (pcb.tok$typ and t$mod) <> 0 and
          =               pcb.scan$adr <> 0ffffh;
 226   6  =               if token(1) = 'A' and token(2) = 'L' then
 227   6  =                   usr$vector = 0ffffh;
 228   6  =               else if (pcb.tok$typ and t$numeric) <> 0 and pcb.token$len < 3 then
 229   6  =                   do;
 230   7  =                   if pcb.token$len = 1 then
 231   7  =                       temp = token(1) - '0';
          =                   else
 232   7  =                       temp = (token(1) - '0') * 10 + (token(2) - '0');
 233   7  =                   if temp >= 0 and temp <= 15 then
 234   7  =                       call set$vec(.usr$vector,temp);
 235   7  =                   else goto op$err;
 236   7  =                   end;
 237   6  =               else goto op$err;
 238   6  =               call scan(.pcb);
 239   6  =             end;
 240   5  =           end;         /* User option */
          =
 241   4  =           else if token(1) = 'D' and (token(2) = 'R' or token(2) = 'I') then
 242   4  =           do;                         /* allow DRIVE or DISK */
 243   5  =             call scan(.pcb); 
 244   5  =             if (pcb.tok$typ and t$mod) = 0  then
 245   5  =                 goto op$err;
 246   5  =             do while (pcb.tok$typ and t$mod ) <> 0 and
          =               pcb.scan$adr <> 0ffffh;
 247   6  =               if token(1) = 'A' and token(2) = 'L' then
 248   6  =               do;
 249   7  =                   drv$vector = 0ffffh;
 250   7  =                   drv$vector = drv$vector and get$login;
 251   7  =               end;
 252   6  =               else if token(1) >= 'A' and token(1) <= 'P' then
 253   6  =                   call set$vec(.drv$vector,token(1) - 'A');
 254   6  =               else goto op$err;
 255   6  =               call scan(.pcb);
 256   6  =             end;
 257   5  =           end;                 /* drive option */
          =
PL/M-80 COMPILER    SDIR 8080 - MAIN MODULE                                                                               PAGE  11


 258   4  =         else goto op$err;
          =
 259   4  =         end;                  /* options with modifiers */
          =
 260   3  =       end;     /* do while */
          =
 261   2  =       got$options = true;
 262   2  =       return;
          =
 263   2  =       op$err:
          =           call print(.('ERROR: Illegal Option or Modifier.',
          =                        cr,lf,'$'));
 264   2  =           call terminate;
 265   2  =   end get$options;
          =
 266   1  =   get$file$spec: procedure;
 267   2  =       dcl i byte;
 268   2  =       if num$search$files < max$search$files then
 269   2  =       do;
 270   3  =           call move(f$namelen + f$typelen,.token(1),
          =              .search(num$search$files).name(0));
          =           
 271   3  =           if search(num$search$files).name(f$name - 1) = ' ' and
          =              search(num$search$files).name(f$type - 1) = ' ' then
 272   3  =              search(num$search$files).anyfile = true;   /* match on any file */
 273   3  =           else search(num$search$files).anyfile = false;/* speedier compare  */
          =
 274   3  =           if token(0) = 0 then
 275   3  =               search(num$search$files).drv = 0ffh;  /* no drive letter with   */
          =           else                                      /* file spec              */
 276   3  =               search(num$search$files).drv = token(0) - 1;
          =           /* 0ffh in drv field indicates to look on all drives that will be   */
          =           /* scanned as set by the "drive =" option, see "match:" proc in     */
          =           /* search.plm module         */
          =
 277   3  =           num$search$files = num$search$files + 1;
 278   3  =       end;                              
          =       else
 279   2  =       do; call print(.('File Spec Limit is $'));
 281   3  =           call p$decimal(max$search$files,100,true);
 282   3  =           call crlf;
 283   3  =       end;
 284   2  =       call scan(.pcb);                  
 285   2  =   end get$file$spec;
          =
 286   1  =   set$defaults: procedure;            
          =       /* set defaults if not explicitly set by user */ 
 287   2  =       if not (find.dir or find.sys) then
 288   2  =           find.dir, find.sys = true;
 289   2  =       if not(find.ro or find.rw) then
 290   2  =           find.rw, find.ro = true;
          =
 291   2  =       if find.xfcb or find.nonxfcb then
 292   2  =          do; if format = form$short then
 294   3  =               format = form$full;
 295   3  =          end;
          =       else            /* both xfcb and nonxfcb are off */
PL/M-80 COMPILER    SDIR 8080 - MAIN MODULE                                                                               PAGE  12


 296   2  =          find.nonxfcb, find.xfcb = true;
          =
 297   2  =       if num$search$files = 0 then
 298   2  =       do;
 299   3  =           search(num$search$files).anyfile = true;
 300   3  =           search(num$search$files).drv = 0ffh;
 301   3  =           num$search$files = 1;
 302   3  =       end;
          =
 303   2  =       if drv$vector = 0 then
 304   2  =           do i = 0 to num$search$files - 1;
 305   3  =               if search(i).drv = 0ffh then search(i).drv = cur$drv;
 307   3  =               call set$vec(.drv$vector,search(i).drv);
 308   3  =           end;
          =       else                            /* a "[drive =" option was found */
 309   2  =           do i = 0 to num$search$files - 1;
 310   3  =               if search(i).drv <> 0ffh and search(i).drv <> cur$drv then
 311   3  =               do; call print(.('ERROR: Illegal Global/Local ',
          =                                'Drive Spec Mixing.',cr,lf,'$'));
 313   4  =                   call terminate;
 314   4  =               end;
 315   3  =           end;
 316   2  =       if usr$vector = 0 then
 317   2  =          call set$vec(.usr$vector,get$usr);
          =
          =       /* set up default page size for display */
 318   2  =       if bdos > bdos30 then do;
 320   3  =         if not formfeeds then do;
 322   4  =           if page$len = 0ffffh then do;
 324   5  =             page$len = getscbbyte(page$len$offset);
 325   5  =           if page$len < 5 then
 326   5  =             page$len = 24;
 327   5  =         end;
 328   4  =       end;
 329   3  =     end;
 330   2  =   end set$defaults;
          =
 331   1  =   dcl (save$uvec,temp) address;
 332   1  =   dcl i byte;
 333   1  =   declare last$dseg$byte byte
          =     initial (0);
          =
 334   1  =   plm:
          =     do;
 335   2  =       os = high(get$version);
 336   2  =       bdos = low(get$version); 
          =
 337   2  =       if bdos < bdos30 or os = mpm then do;
 339   3  =         call print(.('Requires CP/M 3',cr,lf,'$'));
 340   3  =         call terminate;   /* check to make sure function call is valid */
 341   3  =         end;
          =       else
 342   2  =         call set$console$mode;
          =       
          =       /* note - initialized declarations set defaults */
 343   2  =       cur$drv = get$cur$drv;
 344   2  =       call scan$init(.pcb);
PL/M-80 COMPILER    SDIR 8080 - MAIN MODULE                                                                               PAGE  13


 345   2  =       call scan(.pcb);
 346   2  =       no$page$mode = getscbbyte(nopage$mode$offset);
 347   2  =       got$options = false;
 348   2  =       do while pcb.scan$adr <> 0ffffh;
 349   3  =           if (pcb.tok$typ and t$op) <> 0 then
 350   3  =               if got$options = false then
 351   3  =                   call get$options;
          =               else
 352   3  =               do;
 353   4  =                   call print(.('ERROR: Options not grouped together.',
          =                                cr,lf,'$'));
 354   4  =                   call terminate;
 355   4  =               end;
 356   3  =           else if (pcb.tok$typ and t$filespec) <> 0 then
 357   3  =               call get$file$spec;
          =           else
 358   3  =           do;
 359   4  =               call print(.('ERROR: Illegal command tail.',cr,lf,'$'));
 360   4  =               call terminate;
 361   4  =           end;
 362   3  =       end;
          =
 363   2  =       call set$defaults;
          =       
          =       /* main control loop */
          =
 364   2  =       call search$init;    /* set up memory pointers for subsequent storage */
          =
 365   2  =       do while (cur$drv := get$nxt(.drv$vector)) <> 0ffh;
 366   3  =           call select$drive(cur$drv);
 367   3  =           save$uvec = usr$vector;      /* user numbers to search on each drive */
 368   3  =           active$usr$vector = 0;           /* users active on cur$drv      */
 369   3  =           cur$usr = get$nxt(.usr$vector);  /* get first user num and mask  */ 
 370   3  =           get$all$dir$entries = false;     /* off it off                   */
 371   3  =           if usr$vector <> 0 and format <> form$short then
          =                                            /* find high water mark if      */
 372   3  =           do;                              /* more than one user requested */
 373   4  =               fcb(f$drvusr) = '?';
 374   4  =               i = search$first(.fcb);      /* get first directory entry    */
 375   4  =               temp = 0;
 376   4  =               do while i <> 255;
 377   5  =                   temp = temp + 1;
 378   5  =                   i = search$next;
 379   5  =               end;                         /* is there enough space in the */
          =                                            /* worst case ?                 */
 380   4  =               if maxb > mult23(temp) + shl(temp,1) then
 381   4  =                   get$all$dir$entries = true;  /* location of last possible   */
 382   4  =           end;                                 /* file info record and add    */
 383   3  =           first$pass = true;                   /* room for sort indices       */
 384   3  =           active$usr$vector = 0ffffh;
 385   3  =           do while cur$usr <> 0ffh;
          =   /*
          =                  if debug then
          =                   call print(.(cr,lf,'in user loop $')); 
          =   */
 386   4  =               call set$vec(.temp,cur$usr);
 387   4  =               if (temp and active$usr$vector) <> 0 then
PL/M-80 COMPILER    SDIR 8080 - MAIN MODULE                                                                               PAGE  14


 388   4  =               do;
 389   5  =                   if format <> form$short and
          =                       (first$pass or not get$all$dir$entries)  then
 390   5  =                   do;
 391   6  =                       call get$files;     /* collect files in memory and  */
 392   6  =                       first$pass = false; /* build the active usr vector  */
 393   6  =                       sorted = false;     /* sort module will set sorted  */
 394   6  =                       if sort$op then     /* to true, if successful sort  */
 395   6  =                           call sort;
 396   6  =                   end;
 397   5  =                   call display$files;
 398   5  =               end;
 399   4  =               cur$usr = get$nxt(.usr$vector);
 400   4  =           end;
 401   3  =           usr$vector = save$uvec;             /* restore user vector for nxt  */
 402   3  =       end; /* do while drv$usr                   drive scan                   */
          =
          =
 403   2  =       if  not file$displayed and not message then
 404   2  =           call print(.('No File',cr,lf,'$'));
 405   2  =       call terminate;
          =
 406   2  =     end;
 407   1  =   end sdir;




MODULE INFORMATION:

     CODE AREA SIZE     = 0B45H   2885D
     VARIABLE AREA SIZE = 01CEH    462D
     MAXIMUM STACK SIZE = 0008H      8D
     760 LINES READ
     0 PROGRAM ERROR(S)

END OF PL/M-80 COMPILATION
