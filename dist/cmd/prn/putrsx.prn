CP/M RMAC ASSEM 1.1	#001	PUT.RSX 3.0 - CP/M 3.0 OUTPUT REDIRECTION - AUGUST 1982

                title	'PUT.RSX 3.0 - CP/M 3.0 Output Redirection - August 1982'
                ;******************************************************************
                ;
                ;	PUT  'Output Redirection Facility'  version 3.0
                ;
                ; 	11/30/82 - Doug Huskey
                ;	This RSX redirects console or list output to a file.
                ;******************************************************************
                ;
                ;
                ;	generation procedure
                ;
                ;	rmac putrsx
                ;	xref putrsx
                ;	link putrsx[op]
                ;	ERA put.RSX
                ;	REN put.RSX=putRSX.PRL
                ;	GENCOM put.com put.rsx
                ;
                ;	initialization procedure
                ;
                ;	PUTF makes a RSX function 60 call with a sub-function of
                ;	128.  PUTRSX returns the address of a data table containing:
                ;
                ;	init$table:
                ;		dw	kill		;remove PUT at warmboot flg
                ;		dw	0		;reserved
                ;		dw	bios$output	;BIOS entry point into PUT
                ;		dw	putfcb		;FCB address
                ;
                ;	PUTF initializes the data are between movstart: and movend:
                ;	and moves it into PUT.RSX.  This means that data should not
                ;	be reordered without also changing PUTF.ASM.
                ;
                ;		
 FFFF =         true		equ	0ffffh
 0000 =         false		equ	00000h
                ;
 FFFF =         bios$functions	equ	true	;intercept BIOS console functions
 0000 =         remove$rsx	equ	false	;this RSX does its own removal
                ;
                ;	low memory locations
                ;
 0000 =         wboot	equ	0000h
 0001 =         wboota	equ	wboot+1
 0005 =         bdos	equ	0005h
 0006 =         bdosl	equ	bdos+1
 0080 =         buf	equ	0080h
                ;
                ;	equates for non graphic characters
                ;
 0003 =         ctlc	equ	03h	; control c
 0005 =         ctle	equ	05h	; physical eol
 0008 =         ctlh	equ	08h	; backspace
 0010 =         ctlp	equ	10h	; prnt toggle
 0012 =         ctlr	equ	12h	; repeat line
CP/M RMAC ASSEM 1.1	#002	PUT.RSX 3.0 - CP/M 3.0 OUTPUT REDIRECTION - AUGUST 1982

 0013 =         ctls	equ	13h	; stop/start screen
 0015 =         ctlu	equ	15h	; line delete
 0018 =         ctlx	equ	18h	; =ctl-u
 001A =         ctlz	equ	1ah	; end of file
 007F =         rubout	equ	7fh	; char delete
 0009 =         tab	equ	09h	; tab char
 000D =         cr	equ	0dh	; carriage return
 000A =         lf	equ	0ah	; line feed
 005E =         ctl	equ	5eh	; up arrow
                ;
                ;	BDOS function equates
                ;
 0001 =         cinf	equ	1	;read character
 0002 =         coutf	equ	2	;output character
 0006 =         crawf	equ	6	;raw console I/O
 000A =         creadf	equ	10	;read buffer
 000B =         cstatf	equ	11	;status
 0005 =         lchrf	equ	5	;print character
 0009 =         pbuff	equ	9	;print buffer
 000D =         resetf	equ	13	;reset drive
 000F =         openf	equ	15	;open file
 0010 =         closef	equ	16	;close file
 0013 =         delf	equ	19	;delete file
 0014 =         dreadf	equ	20	;disk read
 0015 =         writef	equ	21	;disk write
 001A =         dmaf	equ	26	;set dma function
 0020 =         userf	equ	32	;set/PUT user number
 0025 =         resdvf	equ	37	;reset drive function
 0030 =         flushf	equ	48	;flush buffers function
 0031 =         scbf	equ	49	;set/PUT system control block word
 003B =         loadf	equ	59	;Program load function
 003C =         rsxf	equ	60	;RSX function call
 0062 =         resalvf	equ	98	;reset allocation vector
 006F =         pblkf	equ	111	;print block to console
 0070 =         lblkf	equ	112	;print block to list device
 0080 =         ginitf	equ	128	;GET initialization sub-function no.
 0081 =         gkillf	equ	129	;GET delete sub-function no.
 0082 =         gfcbf	equ	130	;GET file display sub-function no.
 0084 =         pinitf	equ	132	;PUT initialization sub-function no.
 0085 =         pckillf	equ	133	;PUT console delete sub-function no.
 0089 =         plkillf	equ	137	;PUT list delete sub-function no.
 0086 =         pcfcbf	equ	134	;return PUT console fcb address
 008A =         plfcbf	equ	138	;return PUT list fcb address
 008C =         jinitf	equ	140	;JOURNAL initialization sub-function no.
 008D =         jkillf	equ	141	;JOURNAL delete sub-function no.
 008E =         jfcbf	equ	142	;return JOURNAL fcb address
                ;
                ;	System Control Block definitions
                ;
 003A =         scba	equ	03ah	;offset of scbadr from SCB base
 00B3 =         ccpflg	equ	0b3h	;offset of ccpflags word from page boundary
 0020 =         ccpres	equ	020h	;ccp resident flag = bit 5
 00FE =         bdosoff equ	0feh	;offset of BDOS address from page boundary
 00AA =         errflg	equ	0aah	;offset of error flag from page boundary
 00CF =         conmode	equ	0cfh	;offset of console mode word from pag. bound.
 00D3 =         outdel	equ	0d3h	;offset of print buffer delimiter
CP/M RMAC ASSEM 1.1	#003	PUT.RSX 3.0 - CP/M 3.0 OUTPUT REDIRECTION - AUGUST 1982

 00D4 =         listcp	equ	0d4h	;offset of ^P flag from page boundary
 00E0 =         usrcode	equ	0e0h	;offset of user number from pg bnd.
 00E1 =         dcnt	equ	0e1h	;offset of dcnt, searcha & searchl from pg bnd.
 006E =         constfx	equ	06eh	;offset of constat JMP from page boundary
 0074 =         coninfx	equ	074h	;offset of conin JMP from page boundary
                ;
                ;
                ;******************************************************************
                ;		RSX HEADER 
                ;******************************************************************
                
 0000 0000000000serial:	db	0,0,0,0,0,0
                
                trapjmp:
 0006 C33400    	jmp	trap		;trap read buff and DMA functions
 0009 C30000    next:	jmp	0		;go to BDOS
 000C 0500      prev:	dw	bdos
 000E FF        kill:	db	0FFh		;Remove at wstart if not zero
 000F 00        nbank:	db	0
 0010 5055542020rname:	db	'PUT     '	;RSX name
 0018 0000      space:	dw	0
 001A 00        patch:	db	0
                
                ;******************************************************************
                ;		START OF CODE
                ;******************************************************************
                ;
                ;	ABORT ROUTINE
                ;
                puteof:				;close output file and abort
 001B 3A1003    	lda	cbufp
 001E B7        	ora	a
 001F CA9C01    	jz	restor
 0022 1E1A      	mvi	e,ctlz
 0024 CD3401    	call	putc
 0027 C31B00    	jmp	puteof
                
                
                ;
                ;******************************************************************
                ;		BIOS TRAP ENTRY POINT
                ;******************************************************************
                ;
                ;
                ;	ARRIVE HERE ON EACH INTERCEPTED BIOS CALL
                ;
                ;
                bios$output:
                	;
                if bios$functions
                	;
                	;enter here from BIOS constat
 002A 59        	mov	e,c		;character in E
 002B 3AD602    	lda	bdosfunc	;BDOS function to use
 002E 4F        	mov	c,a
 002F 3E01      	mvi	a,1		;offset in exit table = 1
CP/M RMAC ASSEM 1.1	#004	PUT.RSX 3.0 - CP/M 3.0 OUTPUT REDIRECTION - AUGUST 1982

 0031 C33500    	jmp	bios$trap
                endif
                ;
                ;
                ;******************************************************************
                ;		BDOS TRAP ENTRY POINT 
                ;******************************************************************
                ;
                ;
                ;	ARRIVE HERE AT EACH BDOS CALL
                ;
                trap:
                	;
                if bios$functions
                	;
 0034 AF        	xra 	a
                biostrap:
                	;enter here on BIOS calls
 0035 32AC02    	sta	exit$off
                endif
 0038 E1        	pop	h		;return address
 0039 E5        	push	h		;back to stack
 003A 3A0800    	lda	trapjmp+2	;PUT.RSX page address
 003D BC        	cmp	h		;high byte of return address
 003E DA5B00    	jc	exit		;skip calls on bdos above here
 0041 79        	mov	a,c
 0042 FE3C      	cpi	rsxf
 0044 CA1502    	jz	rsxfunc		;check for initialize or abort
 0047 FE1A      	cpi	dmaf
 0049 CA0402    	jz	dmafunc		;save users DMA address
 004C FE0E      	cpi	14		;reset function + 1
 004E DA6A00    	jc	tbl$srch	;search if func < 14
 0051 FE62      	cpi	98
 0053 D26A00    	jnc	tbl$srch	;search if func >= 98
 0056 FE25      	cpi	resdvf
 0058 CA6A00    	jz	tbl$srch	;search if func = 37
                	;
                	;	EXIT - FUNCTION NOT MATCHED
                	;
                exit:
                
                if not bios$functions
                	;
                exit1:	jmp	next		;go to next RSX or BDOS
                
                else
 005B 3AAC02    	lda	exit$off	;PUT type of call:
 005E 219103    exit1:	lxi	h,exit$table	;0=BDOS call, 1=BIOS call
                endif
                
                tbl$jmp:
                
                	;  a = offset (rel 0) 
                	; hl = table address
 0061 87        	add	a		;double for 2 byte addresses
 0062 CDF601    	call	addhla		;HL = .(exit routine)
CP/M RMAC ASSEM 1.1	#005	PUT.RSX 3.0 - CP/M 3.0 OUTPUT REDIRECTION - AUGUST 1982

 0065 46        	mov	b,m		;get low byte from table
 0066 23        	inx	h
 0067 66        	mov	h,m
 0068 68        	mov	l,b		;HL = exit routine
 0069 E9        	pchl			;gone to BDOS or BIOS
                
                tbl$srch:
                
                	;
                	;CHECK IF THIS FUNCTION IS IN FUNCTION TABLE
                	;if matched b = offset in table (rel 0)
                	;FF terminates table
                	;FE is used to mark non-intercepted functions
                	;
 006A 21D802    	lxi	h,func$tbl	;list of intercepted functions
 006D 0600      	mvi	b,0		;start at beginning
                tbl$srch1:
 006F 7E        	mov	a,m		;get next table entry
 0070 B9        	cmp	c		;is it the same?
 0071 CA7D00    	jz	intercept	;we found a match, B = offset
 0074 04        	inr	b
 0075 23        	inx	h
 0076 3C        	inr	a		;0FFh terminates list 
 0077 C26F00    	jnz	tbl$srch1	;try next one
 007A C35B00    	jmp	exit		;end of table - not found
                
                ;
                ;
                ;******************************************************************
                ;		REDIRECTION PROCESSOR
                ;******************************************************************
                ;
                ;
                ;	INTERCEPTED BDOS FUNCTIONS ARRIVE HERE 
                ;
                ;	enter with 
                ;			 B = routine offset in table
                ;			 C = function number
                ;			DE = BDOS parameters
                
                intercept:
                
                	;switch to local stack
 007D 210000    	lxi	h,0
 0080 39        	dad	sp
 0081 223004    	shld	oldstack
 0084 313004    	lxi	sp,stack
                
                redirect:
                
 0087 D5        	push	d		;save info
 0088 C5        	push	b		;save function
 0089 2AC502    	lhld	scbadr
                	;
                	;are we active now?
                	;
CP/M RMAC ASSEM 1.1	#006	PUT.RSX 3.0 - CP/M 3.0 OUTPUT REDIRECTION - AUGUST 1982

 008C 3AED02    	lda	program
 008F B7        	ora	a		;program output only?
 0090 C4FB01    	cnz	ckccp		;if not, test if CCP is calling
 0093 CAA600    	jz	cklist		;jump if not CCP or program output
 0096 79        	mov	a,c
 0097 FE0A      	cpi	0ah		;is it function 10?
 0099 C21001    	jnz	skip		;skip if not
 009C 219903    	lxi	h,ccpcnt	;decrement once for each
 009F 35        	dcr	m		;CCP function 10
 00A0 FC1B00    	cm	puteof		;if 2nd appearance of CCP
 00A3 C31001    	jmp	skip		;if CCP is active
                	;
                	;check for list processing and ^P status
                	;
                cklist:
 00A6 3AE602    	lda	list
 00A9 B7        	ora	a		;list redirection?
 00AA CABA00    	jz	ckecho		;jump if not
 00AD 2ED4      	mvi	l,listcp	;HL = .^P flag
 00AF 7E        	mov	a,m
 00B0 B7        	ora	a		; ^P on?
 00B1 C2BD00    	jnz	setecho		;set echo on if so
 00B4 78        	mov	a,b
 00B5 FE02      	cpi	2		;console function?
 00B7 D21001    	jnc	skip		;skip if so
 00BA 3AE702    ckecho:	lda	echoflg		;echo parameter
                setecho:
 00BD 329803    	sta	echo
                	;
                	;go to function trap routine
                	;
                gofunct:
 00C0 210901    	lxi	h,retmon	;program return routine
 00C3 E5        	push	h		;push on stack 
 00C4 78        	mov	a,b		;offset
 00C5 21AD02    	lxi	h,trap$tbl
 00C8 C36100    	jmp	tbl$jmp		;go to table address
                ;
                ;
                rawio:
                	;direct console i/o - read if 0ffh
                	;returns to retmon
 00CB 7B        	mov 	a,e	
 00CC FEFD      	cpi	0fdh
 00CE DA1901    	jc	putchr
 00D1 FEFE      	cpi	0feh
 00D3 C8        	rz			;make the status call  (FE)
 00D4 DAE100    	jc	conin		;make the input call   (FD)
 00D7 CD0900    	call	next		;call for input/status (FF)
 00DA B7        	ora	a
 00DB CA0301    	jz	retmon1
 00DE C3E400    	jmp	conin1
                	;
                	;input function
                	;
                conin:
CP/M RMAC ASSEM 1.1	#007	PUT.RSX 3.0 - CP/M 3.0 OUTPUT REDIRECTION - AUGUST 1982

 00E1 CD5B00    	call	exit		;make the call
 00E4 5F        conin1:	mov	e,a		;put character in E
 00E5 F5        	push	psw		;save character
 00E6 CD1E01    	call	conout		;put character into file
 00E9 F1        	pop	psw		;character in A
                	;
                	;	RETURN FROM FUNCTION TRAP ROUTINE
                	;
 00EA FE0D      	cpi	cr
 00EC C20301    	jnz	retmon1
                
                retmon2:
                	;output linefeed before returning
 00EF F5        	push	psw		;save character
 00F0 3A9803    	lda	echo
 00F3 B7        	ora	a		;no echo mode
 00F4 1E0A      	mvi	e,lf
 00F6 0E02      	mvi	c,coutf
 00F8 CC0900    	cz	next		;output lf if so
 00FB 3AE502    	lda	input
 00FE B7        	ora	a
 00FF C41E01    	cnz	conout
 0102 F1        	pop	psw		;restore character
                
                retmon1:
                	;return to calling program
 0103 2A3004    	lhld	old$stack
 0106 F9        	sphl
 0107 6F        	mov	l,a
                retmon0:
 0108 C9        	ret			;to calling program
                	;
                retmon:
                	;echo before returning?
 0109 3A9803    	lda	echo
 010C B7        	ora	a
 010D CA0301    	jz	retmon1		;return to program if no echo
                	;otherwise continue 
                	;
                	;	PERFORM INTERCEPTED BDOS CALL
                	;
                skip:
                	;restore BDOS call and stack
 0110 C1        	pop	b		;restore BDOS function no.
 0111 D1        	pop	d		;restore BDOS parameter
 0112 2A3004    	lhld	old$stack
 0115 F9        	sphl
 0116 C35B00    	jmp	exit		;goto BDOS
                
                ;******************************************************************
                ;		BIOS FUNCTIONS (REDIRECTION ROUTINES)
                ;******************************************************************
                ;
                putchr:
                	;put out character in E unless putting input
 0119 3AE502B7C0	lda input! ora a! rnz  	;return (retmon) if input redirection
CP/M RMAC ASSEM 1.1	#008	PUT.RSX 3.0 - CP/M 3.0 OUTPUT REDIRECTION - AUGUST 1982

                listf:
                conout:
                conoutf:	
                ctlout:
                	;send E character with possible preceding up-arrow
 011E 7BFE1ACA2A	mov a,e! cpi ctlz! jz ctlout1 	;always convert ^Z
 0124 CD2F02    	call echoc 	;cy if not graphic (or special case)
 0127 D23401    	jnc putc 	;skip if graphic, tab, cr, lf, or ctlh
                
                	ctlout1:
                		;send preceding up arrow
 012A F51E5ECD34		push psw! mvi e,ctl! call putc ;up arrow
 0130 F1F640    		pop psw! ori 40h ;becomes graphic letter
 0133 5F        		mov e,a ;ready to print
                		;(drop through to PUTC)
                ;
                ;
                ;	put next character into file
                ;
                ;
                putc:	;write sector if full, close in each physical block
                	;abort PUT if any disk error occurs
                	;character in E
 0134 211003    	lxi	h,cbufp
 0137 7E        	mov	a,m		; A = cbufp
 0138 E5        	push 	h
 0139 23        	inx	h		;HL = .cbuf
 013A CDF601    	call	addhla		;HL = .char
 013D 73        	mov	m,e		;store character
 013E E1        	pop	h
 013F 34        	inr	m		;next chr position
 0140 F0        	rp			;minus flag set after 128 chars
                ;
                ;	WRITE NEXT RECORD
                ;
                write:
 0141 0E15      	mvi	c,writef
 0143 CD6101    	call	putdos
 0146 C49C01    	cnz	restor		;abort RSX if error
 0149 AF        	xra	a
 014A 321003    	sta	cbufp		;reset buffer position to 0
 014D 21EB02    	lxi	h,record
 0150 35        	dcr	m		;did we cross the block boundary?
 0151 F0        	rp			;return if not
 0152 CD5F01    	call	close		;close the file if so
 0155 C49C01    	cnz	restor		;abort RSX if error
 0158 21EC02    	lxi	h,blm		;HL = .blm
 015B 7E        	mov	a,m		
 015C 2B        	dcx	h
 015D 77        	mov	m,a		;set record = blm
 015E C9        	ret
                ;
                ;	CLOSE THE FILE
                ;
                close:
 015F 0E10      	mvi 	c,closef
CP/M RMAC ASSEM 1.1	#009	PUT.RSX 3.0 - CP/M 3.0 OUTPUT REDIRECTION - AUGUST 1982

                ;
                ;	PUT FILE OPERATION
                ;
                putdos:	
 0161 C5        	push	b		;function no. in C
 0162 111103    	lxi	d,cbuf
 0165 CDE101    	call	setdma		;set DMA to our buffer
 0168 C1        	pop	b		;function no. in C
 0169 2AC502    	lhld	scbadr
 016C E5        	push	h		;save for restore
 016D 119A03    	lxi	d,sav$area	;10 byte save area
 0170 D5        	push	d		;save for restore
 0171 CDEB01    	call	mov7		;save hash info in save area
 0174 2EE0      	mvi	l,usrcode	;HL = .BDOS user number in SCB
 0176 CDEB01    	call	mov7		;save user, dcnt, search addr, len &
 0179 2B        	dcx	h		; multi-sector count
 017A 3601      	mvi	m,1		;set multi-sector count=1
 017C 2EE0      	mvi	l,usrcode	;HL = .BDOS user number
 017E 11EE02    	lxi	d,putusr
 0181 1A        	ldax	d
 0182 77        	mov	m,a		;set BDOS user = putusr
 0183 13        	inx	d		;DE = .putfcb
 0184 CD0900    	call	next		;write next record or close file
 0187 E1        	pop	h		;HL = .sav$area
 0188 D1        	pop	d		;DE = .scb
 0189 F5        	push	psw		;save A (non-zero if error)
 018A CDEB01    	call	mov7		;restore hash info
 018D 1EE0      	mvi	e,usrcode	;DE = .user num in scb
 018F CDEB01    	call	mov7		;restore dcnt search addr & len
 0192 2A9503    	lhld	udma
 0195 EB        	xchg
 0196 CDE101    	call	setdma		;restore DMA to program's buffer
 0199 F1        	pop	psw
 019A B7        	ora	a
 019B C9        	ret			;zero flag set if successful
                ;
                ;	CLOSE FILE AND TERMINATE RSX
                ;
                restor:
 019C CD5F01    	call	close
 019F 11A803    	lxi	d,close$err
 01A2 C4E601    	cnz	msg		;print message if close error
 01A5 21FFFF    	lxi	h,0ffffh
 01A8 22E902    	shld	rsxfunctions	;set killf and fcbf to inactive
                	;
                	;set RSX aborted flag
                	;
 01AB 210E00    	lxi	h,kill		;0=active, 0ffh=aborted
 01AE 36FF      	mvi	m,0ffh		;set to 0ffh (in-active)
                	;are we the bottom RSX, if so remove ourselves immediately
                	;to save memory
 01B0 3A0700    	lda	bdosl+1		;get high byte of top of tpa
 01B3 BC        	CMP	H		;Does location 6 point to us
                
                if remove$rsx
                	jnz	bios$fixup	;done, if not
CP/M RMAC ASSEM 1.1	#010	PUT.RSX 3.0 - CP/M 3.0 OUTPUT REDIRECTION - AUGUST 1982

                	lhld	next+1
                	shld	bdosl
                	xchg
                	lhld	scbadr
                	mvi	l,bdosoff	;HL = "BDOS" address in SCB
                	mov	m,e		;put next address into SCB
                	inx	h
                	mov	m,d
                	xchg
                	mvi	l,0ch		;HL = .previous RSX field in next RSX
                	mvi	m,7
                	inx	h
                	mvi	m,0		;put previous into previous
                else
 01B4 0E3B      	mvi	c,loadf
 01B6 110000    	lxi	d,0
 01B9 CC0900    	cz	next		;fixup RSX chain, if this RSX on bottom
                endif
                
                if bios$functions
                
                bios$fixup:
                	;
                	;restore bios jumps
 01BC 3AD702    	lda	restore$mode		;may be FF, 7f or 0
 01BF 3C        	inr	a	
 01C0 C8        	rz				; FF = no bios interception
 01C1 2AD002    	lhld	wmsta			;real warm start routine
 01C4 EB        	xchg
 01C5 2AD202    	lhld	wmjmp			;wboot jump in bios
 01C8 73        	mov	m,e
 01C9 23        	inx	h
 01CA 72        	mov	m,d			;restore real routine in jump
 01CB 2AC902    	lhld	biosout			;conin,conout or list jmp
 01CE EB        	xchg
 01CF 2ACB02    	lhld	biosjmp			;address of real bios routine
 01D2 73        	mov	m,e
 01D3 23        	inx	h
 01D4 72        	mov	m,d
 01D5 F8        	rm				; 7f = RESBDOS jmps not changed
 01D6 2AD402    	lhld	wmfix
 01D9 36C3      	mvi	m,jmp			;replace jmp for warm start
 01DB 2ACD02    	lhld	biosfix
 01DE 36C3      	mvi	m,jmp			;replace jmp for other trapped jump
                endif
 01E0 C9        	ret				; 0  = everything done
                ;
                ;	set DMA address in DE
                ;
 01E1 0E1A      setdma:	mvi	c,dmaf
 01E3 C30900    	jmp	next
                ;
                ;	print message to console
                ;
 01E6 0E09      msg:	mvi	c,pbuff
 01E8 C30900    	jmp	next
CP/M RMAC ASSEM 1.1	#011	PUT.RSX 3.0 - CP/M 3.0 OUTPUT REDIRECTION - AUGUST 1982

                ;
                ;	move routine
                ;
 01EB 0607      mov7:	mvi	b,7
                	;			HL = source
                	;			DE = destination
                	;	 		B = count
 01ED 7E        move:	mov	a,m
 01EE 12        	stax	d
 01EF 23        	inx	h
 01F0 13        	inx	d
 01F1 05        	dcr	b
 01F2 C2ED01    	jnz	move
 01F5 C9        	ret
                ;
                ;	add a to hl
                ;
 01F6 85        addhla:	add	l
 01F7 6F        	mov	l,a
 01F8 D0        	rnc
 01F9 24        	inr	h
 01FA C9        	ret
                
                ;
                ;	check if CCP is calling
                ;
                ckccp:
                	;returns zero flag set if not CCP
 01FB 2AC502    	lhld	scbadr
 01FE 2EB4      	mvi	l,ccpflg+1	;HL = .ccp flag 2
 0200 7E        	mov	a,m
 0201 E620      	ani	ccpres		;is it the CCP?
 0203 C9        	ret
                ;
                ;******************************************************************
                ;		BDOS FUNCTION HANDLERS
                ;******************************************************************
                ;
                ;
                ;	FUNCTION 26 - SET DMA ADDRESS
                ;
                dmafunc:
 0204 EB        	xchg			;dma to hl
 0205 229503    	shld	udma		;save it
 0208 EB        	xchg
 0209 C30900    	jmp	next
                ;
                ;
                ;	BIOS WARM START TRAP FUNCTION
                ;
                warmtrap:
 020C 313004    	lxi	sp,stack
 020F CD5F01    	call	close		;close if wboot originated below RSX
 0212 C3CF02    	jmp	wstart
                ;
                ;	BDOS FUNCTION 60 - RSX FUNCTION CALL	
CP/M RMAC ASSEM 1.1	#012	PUT.RSX 3.0 - CP/M 3.0 OUTPUT REDIRECTION - AUGUST 1982

                ;
                rsxfunc:			;check for initialize or delete RSX functions
 0215 1A        	ldax	d		;get sub-function number
 0216 FE84      	cpi	pinitf		;is it a PUT initialization
 0218 21C502    	lxi	h,init$table
 021B C8        	rz			;return to caller if init call
                	;check for FCB display functions
 021C 47        	mov	b,a
 021D 3AEA02    	lda	fcbf		;is it a a PUT fcb request
 0220 B8        	cmp	b
 0221 21EF02    	lxi	h,putfcb
 0224 C8        	rz			;return if so
                	;check for kill function
 0225 3AE902    	lda	killf		;local kill (kill only this one)
 0228 B8        	cmp	b
 0229 CA1B00    	jz	puteof		;kill and return to caller
 022C C35B00    	jmp	exit		;abort any higher PUTs
                
                ;
                ;
                ;******************************************************************
                ;		BDOS OUTPUT ROUTINES
                ;******************************************************************
                ;
                ;
                ;       July 1982
                ;
                ;
                ;	Console handlers
                ;
                echoc:
                	;are we in cooked or raw mode?
 022F 3AE802B77B	lda cooked! ora a! mov a,e! rz ;return if raw
                	;echo character if graphic
                	;cr, lf, tab, or backspace
 0235 FE0DC8    	cpi cr! rz ;carriage return?
 0238 FE0AC8    	cpi lf! rz ;line feed?
 023B FE09C8    	cpi tab! rz ;tab?
 023E FE08C8    	cpi ctlh! rz ;backspace?
 0241 FE20C9    	cpi ' '! ret ;carry set if not graphic
                ;
                ;
                print:
                	;print message until M(DE) = '$'
 0244 2AC502    	lhld scbadr
 0247 2ED3      	mvi l,OUTDEL
 0249 1ABEC8    	ldax d! CMP M! rz ;stop on delimiter
                		;more to print
 024C 13D55F    		inx d! push d! mov e,a ;char to E
 024F CD1E01    		call conout ;another character printed
 0252 D1C34402  		pop d! jmp print
                ;
                ;
                read:	
                	;put prompt if in no echo mode
 0256 3A9803B7C2	lda echo! ora a! jnz read1
CP/M RMAC ASSEM 1.1	#013	PUT.RSX 3.0 - CP/M 3.0 OUTPUT REDIRECTION - AUGUST 1982

 025D D5        	push d			
 025E 11C303CDE6	lxi d,prompt! call msg		;output prompt
 0264 D10E0A    	pop d! mvi c,creadf		;set for read call
                read1:
                	;read console buffer
 0267 E1        	pop h				;throw away return address
 0268 D5                push d
 0269 CD0900    	call next			;make the call
 026C E1234604  	pop h! inx h! mov b,m! inr b	;get the buffer length
 0270 05CA8002  putnxt:		dcr b! jz read2
 0274 235EC5E5  		inx h! mov e,m! push b! push h
 0278 CD1E01E1C1		call conout! pop h! pop b	;put character
 027D C37002    		jmp putnxt
                
 0280 3AE502B7F5read2:	lda input! ora a! push psw
 0285 1E0DC41E01	mvi e,cr! cnz conout			;call if putting input
 028A F11E0AC41E	pop psw! mvi e,lf! cnz conout		;call if putting input
 0290 C30301    	jmp retmon1
                
                
                ;
 00E1 =         func1:	equ	conin
                ;
 011E =         func2:	equ	conout
                	;write console character 
                ;
 011E =         func5:	equ	listf
                	;write list character
                	;write to list device
                ;
 00CB =         func6:	equ	rawio
                ;
 0244 =         func9:	equ	print
                 	;write line until $ encountered
                ;
 0256 =         func10:	equ	read
                ;
 0108 =         func11:	equ	retmon0
                ;
 015F =         func13:	equ	close
                ;
 015F =         func37:	equ	close
                ;
 015F =         func98:	equ	close
                ;
                FUNC111:			;PRINT BLOCK TO CONSOLE
                FUNC112:			;LIST BLOCK
 0293 EB5E235623	XCHG! MOV E,M! INX H! MOV D,M! INX H
 0298 4E2346EB  	MOV C,M! INX H! MOV B,M! XCHG
                	;HL = ADDR OF STRING
                	;BC = LENGTH OF STRING
                BLK$OUT:
 029C 78B1C8    	MOV A,B! ORA C! RZ	;is length 0, return if so
 029F C5E5      	PUSH B! PUSH H
 02A1 5ECD1E01  	mov e,m! call conout	;put character
 02A5 E123C10B  	POP H! INX H! POP B! DCX B
CP/M RMAC ASSEM 1.1	#014	PUT.RSX 3.0 - CP/M 3.0 OUTPUT REDIRECTION - AUGUST 1982

 02A9 C39C02    	JMP BLK$OUT
                
                ;	end of BDOS Console module
                
                ;******************************************************************
                ;		DATA AREA
                ;******************************************************************
                
 02AC 00        exit$off	db	0	;offset in exit$table of destination
                
                trap$tbl:
                	;function dispatch table (must match func$tbl below)
                ;	db	lchrf, lblkf, coutf, cstatf, crawf
                ;	db	pbuff, cinf, creadf, resetf, resdvf
                ;	db	resalvf, pblkf, eot
                
 02AD 1E01      	dw	func5		;function 5   - list output
 02AF 9302      	dw	func112		;function 112 - list block
 02B1 1E01      	dw	func2		;function 2   - console output
 02B3 0801      	dw	func11		;function 11  - console status
 02B5 CB00      	dw	func6		;function 6   - raw console I/O
 02B7 4402      	dw	func9		;function 9   - print string
 02B9 E100      	dw	func1		;function 1   - console input
 02BB 5602      	dw	func10		;function 10  - read console buffer
 02BD 5F01      	dw	func13		;function 13  - disk reset (close first)
 02BF 5F01      	dw	func37		;function 37  - drive reset (close first)
 02C1 5F01      	dw	func98		;function 98  - reset allocation vector
 02C3 9302      	dw	func111		;function 111 - print block
                
                ;******************************************************************
                ;	Following variables and entry points are used by PUT.COM
                ;	Their order and contents must not be changed without also
                ;	changing PUT.COM.
                ;******************************************************************
                
                movstart:
                init$table:			;addresses used by PUT.COM for initial.
                scbadr:				;address of System Control Block
 02C5 0E00      	dw	kill		;kill flag for error on file make
                				;(passed to PUT.COM by RSX init function)
                	;
                	if bios$functions	;PUT.RSX initialization
                	;
 02C7 4B        gobios:	mov	c,e
 02C8 C3        	db	jmp
 02C9 2A00      biosout	dw	bios$output	;set to real BIOS routine
                				;(passed to PUT.COM by RSXFUNC)
                biosjmp
 02CB 0C02      	dw	warm$trap	;address of bios jmp initialized by COM
                biosfix
 02CD 0000      	dw	0		;address of jmp in resbdos to restore
                				;restore only if changed when removed.
 02CF C3        wstart:	db	jmp
 02D0 0000      wmsta:	dw	0		;address of real warm start routine
 02D2 0000      wmjmp:	dw	0		;address of jmp in bios to restore
 02D4 0000      wmfix:	dw	0		;address of jmp in resbdos to restore
CP/M RMAC ASSEM 1.1	#015	PUT.RSX 3.0 - CP/M 3.0 OUTPUT REDIRECTION - AUGUST 1982

                bdosfunc:
 02D6 02        	db	coutf
                restore$mode
 02D7 00        	db	0		;0FFh = no bios restore, 07fh = restore
                				;only bios jmp, 0 = restore bios jump and
                				;resbdos jmp when removed.
                	endif
                ;
                ;	equates function table
                ;
 00FF =         eot	equ	0ffh	; end of function table
 00FE =         skipf	equ	0feh	; skip this function
                ;
                ;
                func$tbl:		;no trapping until initialized by PUT.COM
 02D8 FF00000000	db	eot,0,0,0,0,0,0,0,0,0,0,0,0
                ;	db	lchrf, lblkf, coutf, cstatf, crawf
                ;	db	pbuff, cinf, creadf, resetf, resdvf
                ;	db	resalvf, pblkf, eot
                	;
 02E5 00        input	db	0		;put console input to a file
 02E6 00        list	db	0		;intercept list functions
                echoflg:
 02E7 01        	db	1		;echo output to device
                cooked:				;must be next after echo
 02E8 00        	db	0		;TRUE if ctrl chars (except ^Z) placed 
                				;in the output file
                rsxfunctions:
 02E9 FF        killf:	db	0ffh		;not used until PUT initialized
 02EA FF        fcbf:	db	0ffh		;not used until PUT initialized
 02EB 00        record:	db	0		;counts down records to block boundary
 02EC 00        blm:	db	0		;block mask = records per block (rel 0)
                program:			;this flag must be @ .PUTFCB-2
 02ED 00        	db	0		;true if put program output only
 02EE 00        putusr:	db	0		;user number for redirection file
 02EF FF        putfcb:	db	0ffh		;preset to 0ffh to indicate not active
 02F0 5359534F55	db	'SYSOUT  '
 02F8 242424    	db	'$$$'
 02FB 0000      	db	0,0
 02FD 00        putmod:	db	0
 02FE           putrc:	ds	1
 02FF           	ds	16		;map
 030F           putcr:	ds	1
                	;
 0310 00        cbufp	db	0		;current character position in cbuf
                movend:
                ;*******************************************************************
                
                cbuf:				;128 byte buffer (could be ds 128)
                
 0311 0303030303	db	3,3,3,3, 3,3,3,3, 3,3,3,3, 3,3,3,3
 0321 0303030303	db	3,3,3,3, 3,3,3,3, 3,3,3,3, 3,3,3,3
 0331 0303030303	db	3,3,3,3, 3,3,3,3, 3,3,3,3, 3,3,3,3
 0341 0303030303	db	3,3,3,3, 3,3,3,3, 3,3,3,3, 3,3,3,3
                
 0351 0303030303	db	3,3,3,3, 3,3,3,3, 3,3,3,3, 3,3,3,3
CP/M RMAC ASSEM 1.1	#016	PUT.RSX 3.0 - CP/M 3.0 OUTPUT REDIRECTION - AUGUST 1982

 0361 0303030303	db	3,3,3,3, 3,3,3,3, 3,3,3,3, 3,3,3,3
 0371 0303030303	db	3,3,3,3, 3,3,3,3, 3,3,3,3, 3,3,3,3
 0381 0303030303	db	3,3,3,3, 3,3,3,3, 3,3,3,3, 3,3,3,3
                
                	;
                	if bios$functions
                	;
                exit$table:			;addresses to go to on exit
 0391 0900      	dw	next		;BDOS
 0393 C702      	dw	gobios
                	endif
                	;
 0395 8000      udma:	dw	buf		;user dma
 0397 00        user:	db	0		;user user number
 0398 00        echo:	db	0		;echo output to console flag
 0399 01        ccpcnt:	db	1		;start at 1 (decremented each CCP)
                sav$area:			;14 byte save area
 039A 6868686868	db	68h,68h,68h,68h,68h, 68h,68h,68h,68h,68h
 03A4 68686868  	db	68h,68h,68h,68h
                close$err:	
 03A8 0D0A505554	db	cr,lf,'PUT ERROR: FILE ERASED',cr,lf,'$'
 03C3 0D0A505554prompt:	db	cr,lf,'PUT>$'
                	;
                patch$area:
 03CA           	ds	30h
                
                	maclib	makedate	;[JCE] move all dates to one file
 03FA 20        	db	' '
                	@BDATE
 03FB+3130313139	DB	'101198'
 0401 20        	db	' '
                	@SCOPY
 0402+2843292039	DB	'(C) 98 CALDERA'
                
 0410 6767676767	db	67h,67h,67h,67h, 67h,67h,67h,67h, 67h,67h,67h,67h
 041C 6767676767	db	67h,67h,67h,67h, 67h,67h,67h,67h, 67h,67h,67h,67h
 0428 6767676767	db	67h,67h,67h,67h, 67h,67h,67h,67h
                	;
                stack:				;16 level stack
                oldstack:
 0430 0000      	dw	0
 0432           	end
