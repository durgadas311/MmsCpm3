CP/M MACRO ASSEM 2.0	#001	CP/M 3 - HEXCOM - Oct 1982

                TITLE 	'CP/M 3 - HEXCOM - Oct 1982'
                ;
                
                ;  COPYRIGHT (C) 1982
                ;  DIGITAL RESEARCH
                ;  P.O. BOX 579
                ;  PACIFIC GROVE, CA 93950
                
                ;  REVISED:
                ;    22 OCT  82  BY PAUL LANCASTER
                ;    25 OCT  82  BY DOUG HUSKEY
                ;
                ;
                ;	**********  HEXCOM  **********
                ;
                
                ;PROGRAM TO CREATE A CP/M "COM" FILE FROM A "HEX" FILE.
                
                ;THIS PROGRAM IS VERY SIMILAR IN FUNCTION TO THE CP/M
                ;UTILITY CALLED "LOAD". IT IS OPTIMIZED WITH RESPECT TO
                ;EXECUTION SPEED AND MEMORY SPACE. IT RUNS ABOUT TWICE
                ;AS FAST AS THE CP/M COUNTERPART ON A LONG "HEX" FILE.
                ;IT IS ALSO ABOUT 700 BYTES SHORTER.
                
                ;ONE MINOR DIFFERENCE BETWEEN "HEXCOM" AND "LOAD" THAT MAY
                ;BE VISIBLE TO THE USER IS THAT VERY LARGE LOAD ADDRESS
                ;INVERSIONS ARE TOLERATED BY "HEXCOM", WHEREAS THE MAXIMUM
                ;ALLOWED INVERSION IN "LOAD" IS 80H. THE MAXIMUM IN "HEXCOM"
                ;IS A FUNCTION OF THE TPA SIZE.
                ;CAUTION SHOULD BE EXERCIZED WHEN USING AN INVERSION GREATER
                ;THAN 80H IN "HEXCOM" SINCE PART OF THE COMFILE MAY NOT
                ;GET CREATED IF THE FINAL LOAD ADDRESS IS INVERTED WITH
                ;RESPECT TO THE "LAST ADDRESS" IN THE "HEX" FILE.
                
                ;*******************************************************
                
                ;VERSION 1.00			6 MARCH 1979
                ;ORIGINAL VERSION.
                ;*******************************************************
                
                ;22 OCTOBER 1982 - CHANGED ASSUMED CCP LENGTH FOR CP/M-PLUS
                ;25 OCTOBER 1982 - CHANGED VERSION TO 3.0
                ;
                ;			EQUATES
                
 012C =         VERS		EQU	300		;VERSION TIMES 100
 000D =         CR		EQU	0DH
 000A =         LF		EQU	0AH
 0005 =         BDOS		EQU	5
 005C =         DEFAULT$FCB	EQU	5CH
                
                
 0100           		ORG	100H
                
                	;	INCLUDE FILE FOR USE WITH ASM PROGRAMS
                	;
CP/M MACRO ASSEM 2.0	#002	CP/M 3 - HEXCOM - Oct 1982

                	;*********************************************
                	;* STANDARD DIGITAL RESEARCH COM FILE HEADER *
                	;*********************************************
                	;
 0100 C38001    	JMP	BEGIN		;LABEL CAN BE CHANGED
                	;
                	;*********************************************
                	;* PATCH AREA, DATE, VERSION & SERIAL NUMBER *
                	;*********************************************
                	;
 0103 0000000000	DW	0,0,0,0,0,0
 010F 0000000000	DW	0,0,0,0,0,0,0,0
 011F 0000000000	DW	0,0,0,0,0,0,0,0
 012F 0000000000	DW	0,0,0,0,0,0,0,0
 013F 00        	DB	0
                
 0140 43502F4D20	DB	'CP/M Version 3.0'
 0150 434F505952	DB	'COPYRIGHT 1982, '
 0160 4449474954	DB	'DIGITAL RESEARCH'
 0170 3235313038	DB	'251082'	; VERSION DATE DAY-MONTH-YEAR
 0176 00000000  	DB	0,0,0,0		; PATCH BIT MAP
 017A 3635343332	DB	'654321'	; SERIAL NO.
                
                ;
                BEGIN:
                ;	CODE STARTS HERE
 0180 210000    	LXI	H,0
 0183 39        	DAD	SP		;GET CURRENT CCP STACK
 0184 226B05    	SHLD	STACK$SAVE	;SAVE IT
 0187 31B305    	LXI	SP,STACK	;INIT LOCAL STACK
 018A 114705    	LXI	D,SIGNON$MSG	;POINT SIGN-ON MESSAGE
 018D CD0D04    	CALL	PRINT$BUFFER	;SEND IT TO CONSOLE
 0190 115C00    	LXI	D,DEFAULT$FCB	;FILE NAME TO HEX FCB
 0193 216D05    	LXI	H,HEX$FCB
 0196 D5        	PUSH	D		;SAVE COM FCB ADDR
 0197 E5        	PUSH	H		;-AND HEX FCB ADDR
 0198 0E21      	MVI	C,33		;MOVE ENTIRE FCB
 019A 1A        MOVEFCB	LDAX	D		;GET BYTE FROM DFLT FCB
 019B 77        	MOV	M,A		;MOVE TO HEX FCB
 019C 13        	INX	D		;BUMP POINTERS
 019D 23        	INX	H
 019E 0D        	DCR	C		;HIT COUNTER
 019F C29A01    	JNZ	MOVEFCB		;LOOP TILL DONE
 01A2 217605    	LXI	H,HEX$FCB+9	;"HEX" TYPE NAME TO FCB
 01A5 3648      	MVI	M,'H'
 01A7 23        	INX	H
 01A8 3645      	MVI	M,'E'
 01AA 23        	INX	H
 01AB 3658      	MVI	M,'X'
 01AD 216500    	LXI	H,DEFAULT$FCB+9	;"COM" TYPE NAME TO FCB
 01B0 3643      	MVI	M,'C'
 01B2 23        	INX	H
 01B3 364F      	MVI	M,'O'
 01B5 23        	INX	H
 01B6 364D      	MVI	M,'M'
 01B8 D1        	POP	D		;HEX$FCB TO <DE>
CP/M MACRO ASSEM 2.0	#003	CP/M 3 - HEXCOM - Oct 1982

 01B9 0E0F      	MVI	C,15		;OPEN FILE
 01BB CD0500    	CALL	BDOS
 01BE 3C        	INR	A		;SEE IF -1 FOR ERROR
 01BF 110E05    	LXI	D,COSMSG
 01C2 CA1204    	JZ	ERROR$ABORT	;CANNOT OPEN SOURCE
 01C5 D1        	POP	D		;COM FCB ADDR
 01C6 D5        	PUSH	D		;KEEP COPY ON STACK
 01C7 0E13      	MVI	C,19		;DELETE FILE
 01C9 CD0500    	CALL	BDOS		;DELETE OLD "COM" FILE
 01CC D1        	POP	D		;GET COM FCB ADDR AGAIN
 01CD D5        	PUSH	D		;SAVE IT STILL
 01CE 0E16      	MVI	C,22		;MAKE FILE
 01D0 CD0500    	CALL	BDOS		;CREATE "COM" FILE
 01D3 3C        	INR	A		;SEE IF -1 FOR ERROR
 01D4 112605    	LXI	D,NMDSMSG
 01D7 CA1204    	JZ	ERROR$ABORT	;NO MORE DIR SPACE
                
                ;DEFINE AND CLEAR THE COMFILE BUFFER
                
 01DA 3A0700    	LDA	7		;GET BDOS PAGE ADDRESS
 01DD D610      	SUI	16		;ALLOW FOR UP TO 4K CCP
 01DF 67        	MOV	H,A		;HI BYTE OF COM BUFFER TOP
 01E0 2E00      	MVI	L,0		;END ON PAGE BOUNDARY
 01E2 228F05    	SHLD	CURR$COM$BUF$END
 01E5 D607      	SUI	(HIGH COMFILE$BUFFER)+1
 01E7 2E80      	MVI	L,80H		;START IN MIDDLE OF PAGE
 01E9 67        	MOV	H,A		;BUFFER LENGTH IN PAGES
 01EA 229105    	SHLD	CURR$COM$BUF$LEN
 01ED CD3F04    	CALL	CLEAR$COMBUFFER	;ZERO-OUT COM BUFFER
                
                ;	HEX RECORD LOOP
                
                SCAN$FOR$COLON:
 01F0 CD5303    	CALL	GET$HEXFILE$CHAR
 01F3 FE3A      	CPI	':'		;DO WE HAVE COLON YET?
 01F5 C2F001    	JNZ	SCAN$FOR$COLON
 01F8 CDCD02    	CALL	GET$BINARY$BYTE	;GOT COLON. GET LOAD COUNT
 01FB 328E05    	STA	LOAD$COUNT	;STORE COUNT FOR THIS RECORD
 01FE CA6E02    	JZ	FINISH$UP	;ZERO MEANS ALL DONE
                
                ;INCREMENT BYTES-READ COUNTER BY NUMBER OF BYTES TO BE
                ;LOADED IN THIS RECORD.
                
 0201 216005    	LXI	H,BYTES$READ$COUNT
 0204 86        	ADD	M	;ADD LO BYTE OF SUM
 0205 77        	MOV	M,A	;SAVE NEW LO BYTE
 0206 D20B02    	JNC	FORM$LOAD$ADDRESS
 0209 23        	INX	H	;POINT HI BYTE OF SUM
 020A 34        	INR	M	;BUMP HI BYTE
                
                ;NOW SET NEW LOAD ADDRESS FROM THE
                ;HEX FILE RECORD.
                
                FORM$LOAD$ADDRESS:
 020B CDCD02    	CALL	GET$BINARY$BYTE
 020E F5        	PUSH	PSW	
CP/M MACRO ASSEM 2.0	#004	CP/M 3 - HEXCOM - Oct 1982

 020F CDCD02    	CALL	GET$BINARY$BYTE
 0212 E1        	POP	H		;HI BYTE TO <H>
 0213 6F        	MOV	L,A		;AND LO BYTE TO <L>
 0214 226305    	SHLD	LOAD$ADDRESS	;SAVE NEW LOAD ADDRESS
 0217 EB        	XCHG			;PUT IN <DE>
 0218 2A6505    	LHLD	CURRENT$COM$BASE
                
                ;NEW LOAD ADDRESS MINUS THE CURRENT COMFILE BASE GIVES
                ;THE NEW COM BUFFER OFFSET.
                
 021B 7B        	MOV	A,E
 021C 95        	SUB	L
 021D 6F        	MOV	L,A
 021E 7A        	MOV	A,D
 021F 9C        	SBB	H
 0220 67        	MOV	H,A
 0221 226805    	SHLD	COM$BUF$OFFSET	;STORE NEW OFFSET
 0224 116A04    	LXI	D,ILAMSG	;POINT ERR MSG
 0227 DA1204    	JC	ERROR$ABORT	;FATAL INVERSION IF CY SET
                
                ;FIRST ADDRESS HAS ALREADY BEEN ESTABLISHED IF "FIRST$ADDRESS"
                ;IS NON-ZERO.
                
 022A 3A5D05    	LDA	FIRST$ADDRESS+1	;--ONLY PAGE NO. NEED BE
 022D B7        	ORA	A		;--CHECKED SINCE 1ST ADDR
 022E C24002    	JNZ	GET$ZERO$BYTE	;--CAN'T BE IN PAGE ZERO
 0231 11D004    	LXI	D,FAMSG		;POINT "1ST ADDR" MSG
 0234 CD0804    	CALL	MSG$ON$NEW$LINE	;ANNOUNCE FIRST ADDRESS
 0237 2A6305    	LHLD	LOAD$ADDRESS	;THIS IS FIRST ADDR
 023A 225C05    	SHLD	FIRST$ADDRESS	;SET FIRST ADDRESS
 023D CDE003    	CALL	WORD$OUT	;SEND IT TO CONSOLE
                
                ;SKIP OVER THE ZERO BYTE OF THE HEX RECORD. IT HAS NO
                ;SIGNIFICANCE TO THIS PROGRAM.
                
                GET$ZERO$BYTE:
 0240 CDCD02    	CALL	GET$BINARY$BYTE
                
                ;THIS LOOP LOADS THE COM FILE WITH THE BYTE VALUES IN THE
                ;CURRENT HEX RECORD.
                
                BYTE$LOAD$LOOP:
 0243 CDCD02    	CALL	GET$BINARY$BYTE	;GET BYTE TO LOAD
 0246 CD7903    	CALL	PUT$TO$COMFILE	;LOAD IT TO COM FILE
 0249 218E05    	LXI	H,LOAD$COUNT
 024C 35        	DCR	M		;HIT LOAD COUNT
 024D C24302    	JNZ	BYTE$LOAD$LOOP	;MORE LOADING IF NOT-ZERO
                
                ;UPDATE THE LAST ADDRESS IF CURRENT ABSOLUTE LOAD ADDRESS
                ;IS HIGHER THAN THE CURRENT VALUE OF "LAST$ADDRESS"
                
 0250 2A5E05    	LHLD	LAST$ADDRESS	;GET THE CURR VALUE
 0253 EB        	XCHG			;TO <DE>
 0254 CD4E04    	CALL	ABSOLUTE	;ABSOLUTE ADDR TO <HL>
 0257 7B        	MOV	A,E		;--SUBTRACT ABSOLUTE
 0258 95        	SUB	L		;--ADDRESS FROM CURRENT
CP/M MACRO ASSEM 2.0	#005	CP/M 3 - HEXCOM - Oct 1982

 0259 7A        	MOV	A,D		;--LAST ADDRESS
 025A 9C        	SBB	H
 025B D26202    	JNC	CHECK$CHECKSUM	;LAST ADDR LARGER IF NC
 025E 2B        	DCX	H		;DOWN 1 FOR LAST ACTUAL LOAD
 025F 225E05    	SHLD	LAST$ADDRESS	;UPDATE IT
                
                ;VERIFY THE CHECKSUM FOR THIS RECORD.
                
                CHECK$CHECKSUM:
 0262 CDCD02    	CALL	GET$BINARY$BYTE	;GET CHECKSUM BYTE
 0265 CAF001    	JZ	SCAN$FOR$COLON	;ZERO ON FOR CHECKSUM OK
 0268 11C004    	LXI	D,CSEMSG	;CHECKSUM ERROR
 026B C3F702    	JMP	HEXFILE$ERROR
                
                ;SEND PROCESSING SUMMARY TO THE CONSOLE AND FLUSH THE
                ;COM BUFFER OF ANY UNWRITTEN DATA.
                
                FINISH$UP:
 026E 11DF04    	LXI	D,LSTADDRMSG	;POINT "LAST ADDR" MSG
 0271 CD0804    	CALL	MSG$ON$NEW$LINE	;SEND IT OUT
 0274 2A5E05    	LHLD	LAST$ADDRESS	;GET THE LAST ADDRESS
 0277 CDE003    	CALL	WORD$OUT	;SEND IT TO CONSOLE
 027A 11EE04    	LXI	D,BRMESSAGE	;POINT "BYTES READ" MSG
 027D CD0804    	CALL	MSG$ON$NEW$LINE	;SEND IT OUT
 0280 2A6005    	LHLD	BYTES$READ$COUNT	;GET THE COUNT
 0283 CDE003    	CALL	WORD$OUT	;SEND IT OUT
                
                ;THE FOLLOWING CODE PREPARES FOR AND MAKES THE FINAL CALL
                ;TO THE "PUT" ROUTINE IN ORDER TO FLUSH THE "COM" BUFFER.
                ;IT HAS BEEN "KLUGED" IN ORDER TO WORK AROUND THE BOUNDARY
                ;CONDITION OF HAVING AN OFFSET OF <100H AT FLUSH TIME.
                ;WE FORCE THE OFFSET AND LENGTH TO BE NON-ZERO SO THE
                ;INITIAL COMPARE IN THE "PUT" ROUTINE WON'T GET SCREWED
                ;UP. THE BUFFER END ADDRESS IS NOT PLAYED WITH, HOWEVER.
                ;THIS IS TO INSURE THAT THE CORRECT NUMBER OF RECORDS GET
                ;WRITTEN.
                
 0286 2A6805    	LHLD	COM$BUF$OFFSET	;GET THE CURRENT OFFSET
 0289 E5        	PUSH	H		;SAVE OFFSET FOR LATER
 028A 118006    	LXI	D,COMFILE$BUFFER ;GET BUFFER ADDRESS
 028D 19        	DAD	D		;ADD TO OFFSET TO GET LEN
 028E 228F05    	SHLD	CURR$COM$BUF$END ;STORE NEW END ADDR
 0291 216A05    	LXI	H,CLEAR$FLAG	;POINT TO CLEAR FLAG
 0294 34        	INR	M		;DISABLE CLEAR WITH NON-ZERO
 0295 E1        	POP	H		;GET OFFSET BACK
 0296 2601      	MVI	H,1		;FORCE HI BYTE NON-ZERO
 0298 226805    	SHLD	COM$BUF$OFFSET	;FAKE OFFSET
 029B 229105    	SHLD	CURR$COM$BUF$LEN ;AND FAKE LENGTH
 029E CD7903    	CALL	PUT$TO$COMFILE	;FLUSH THE BUFFER
 02A1 11FD04    	LXI	D,RWMSG		;POINT "REC WRIT" MSG
 02A4 CD0804    	CALL	MSG$ON$NEW$LINE	;SEND IT OUT
 02A7 3A6205    	LDA	RECORDS$WRITTEN	;GET THE COUNT
 02AA CDE703    	CALL	BYTE$OUT	;SEND IT OUT
 02AD CDFE03    	CALL	CRLF		;SEND OUT CRLF
 02B0 D1        	POP	D		;COM FILE FCB ADDR
 02B1 0E10      	MVI	C,16		;CLOSE FILE
CP/M MACRO ASSEM 2.0	#006	CP/M 3 - HEXCOM - Oct 1982

 02B3 CD0500    	CALL	BDOS		;COM FILE CLOSE
 02B6 3C        	INR	A		;SEE IF -1 FOR ERROR
 02B7 113505    	LXI	D,CCFMSG	;CANNOT CLOSE FILE
 02BA CA1204    	JZ	ERROR$ABORT
                CRLF$AND$EXIT:
 02BD CDFE03    	CALL	CRLF
                EXIT:
 02C0 118000    	LXI	D,80H
 02C3 0E1A      	MVI	C,26		;RE-SET DMA TO 80H
 02C5 CD0500    	CALL	BDOS
 02C8 2A6B05    	LHLD	STACK$SAVE	;RECOVER CCP STACK POINTER
 02CB F9        	SPHL			;TO <SP>
 02CC C9        	RET			;RET TO CCP
                
                
                
                
                ;		SUBROUTINES
                
                
                
                ;THIS ROUTINE GETS TWO CHARACTERS FROM THE HEX FILE
                ;AND CONVERTS TO AN 8-BIT BINARY VALUE, RETURNED IN <A>.
                
                GET$BINARY$BYTE:
 02CD CDE202    	CALL	GET$HEX$DIGIT	;GET HI NYBBLE FIRST
 02D0 87        	ADD	A		;SHIFT UP 4 SLOTS
 02D1 87        	ADD	A
 02D2 87        	ADD	A
 02D3 87        	ADD	A
 02D4 F5        	PUSH	PSW		;SAVE HI NYBBLE
 02D5 CDE202    	CALL	GET$HEX$DIGIT	;NOW GET LO NYBBLE
 02D8 C1        	POP	B		;HI NYBBLE TO <B>
 02D9 B0        	ORA	B		;COMBINE NYBBLES TO FORM BYTE
 02DA 47        	MOV	B,A		;SAVE THE BYTE
 02DB 216705    	LXI	H,CHECKSUM
 02DE 86        	ADD	M		;UPDATE THE CHECKSUM
 02DF 77        	MOV	M,A		;AND STORE IT
 02E0 78        	MOV	A,B		;GET BYTE BACK
 02E1 C9        	RET			;ZERO SET MEANS CHECKSUM=0
                
                
                ;ROUTINE TO GET A HEX-ASCII CHARACTER FROM THE HEX FILE
                ;AND RETURN IT IN THE <A> REGISTER CONVERTED TO BINARY.
                ;A CHECK FOR LEGAL HEX VALUE IS MADE. PROGRAM ABORTS
                ;WITH APPROPRIATE MESSAGE IF ILLEGAL DIGIT ENCOUNTERED.
                
                GET$HEX$DIGIT:
 02E2 CD5303    	CALL	GET$HEXFILE$CHAR
 02E5 D630      	SUI	'0'		;REMOVE ASCII BIAS
 02E7 FE0A      	CPI	10		;DECIMAL DIGIT?
 02E9 D8        	RC
 02EA D607      	SUI	7		;STRIP ADDITIONAL BIAS
 02EC FE0A      	CPI	10		;MUST BE AT LEAST 10
 02EE DAF402    	JC	ILLHEX
 02F1 FE10      	CPI	16		;MUST BE 15 OR LESS
CP/M MACRO ASSEM 2.0	#007	CP/M 3 - HEXCOM - Oct 1982

 02F3 D8        	RC
 02F4 11AE04    ILLHEX	LXI	D,IHDMSG	;ILLEGAL HEX DIGIT
                
                ;ROUTINE TO INDICATE THAT AN ERROR HAS BEEN FOUND IN THE
                ;HEX FILE (EITHER CHECKSUM OR ILLEGAL HEX DIGIT).
                ;APPROPRIATE MESSAGES ARE PRINTED AND THE PROGRAM ABORTS.
                
                HEXFILE$ERROR:
 02F7 CD0804    	CALL	MSG$ON$NEW$LINE	;PRINT ERROR TYPE
 02FA 119004    	LXI	D,LAMESSAGE	;POINT "LOAD ADDR" MSG
 02FD CD0804    	CALL	MSG$ON$NEW$LINE	;SEND IT OUT
 0300 2A6305    	LHLD	LOAD$ADDRESS	;GET LOAD ADDR
 0303 CDE003    	CALL	WORD$OUT	;SEND IT OUT
 0306 119F04    	LXI	D,EAMSG		;POINT "ERR ADDR" MSG
 0309 CD0804    	CALL	MSG$ON$NEW$LINE	;SEND IT OUT
 030C CD4E04    	CALL	ABSOLUTE	;GET ABSOLUTE ADDR
 030F CDE003    	CALL	WORD$OUT	;THIS IS ERR ADDR
 0312 11EE04    	LXI	D,BRMESSAGE	;POINT "BYTES READ" MSG
 0315 CD0804    	CALL	MSG$ON$NEW$LINE	;SEND IT OUT
 0318 CD2C04    	CALL	PRINT$LOAD$ADDR	;SEND OUT CURR LOAD ADDR
                
                ;PRINT OUT ALL BYTES THAT WERE LOADED FROM THE CURRENT
                ;HEX RECORD UP TO THE POINT WHERE THE ERROR WAS DETECTED.
                
                ERR$OUT$LOOP:
 031B 2A6305    	LHLD	LOAD$ADDRESS	;POINT TO BYTE TO BE OUTPUT
 031E EB        	XCHG			;TO <DE>
 031F CD4E04    	CALL	ABSOLUTE	;GET ABSOLUTE ADDR
 0322 7B        	MOV	A,E		;--SEE IF "LOAD ADDR"
 0323 95        	SUB	L		;--HAS REACHED ABSO ADDR
 0324 7A        	MOV	A,D
 0325 9C        	SBB	H
 0326 D2BD02    	JNC	CRLF$AND$EXIT	;DONE IF THEY'RE EQUAL
 0329 7B        	MOV	A,E		;SEE IF MULTIPLE OF 16
 032A E60F      	ANI	0FH
 032C CC2C04    	CZ	PRINT$LOAD$ADDR	;IF MULTIPLE OF 16
 032F 2A6305    	LHLD	LOAD$ADDRESS	;GET LOAD ADDR AGAIN
 0332 EB        	XCHG			;TO <DE>
 0333 2A6505    	LHLD	CURRENT$COM$BASE
 0336 7B        	MOV	A,E		;--CALC OFFSET OF CURR
 0337 95        	SUB	L		;--BYTE TO GO OUT
 0338 6F        	MOV	L,A		;LO BYTE OF OFFSET
 0339 7A        	MOV	A,D		;HI BYTE OF LOAD ADDR
 033A 9C        	SBB	H
 033B 67        	MOV	H,A		;HI BYTE OF OFFSET
 033C 018006    	LXI	B,COMFILE$BUFFER
 033F 09        	DAD	B	;<HL> NOW POINTS TO BYTE TO GO
 0340 7E        	MOV	A,M		;GET THE BYTE FROM BUFFER
 0341 CDE703    	CALL	BYTE$OUT	;SEND IT OUT
 0344 2A6305    	LHLD	LOAD$ADDRESS	;BUMP LOAD ADDRESS
 0347 23        	INX	H
 0348 226305    	SHLD	LOAD$ADDRESS
 034B 3E20      	MVI	A,' '		;SEND A SPACE BETWEEN BYTES
 034D CDF803    	CALL	CHAR$TO$CONSOLE
 0350 C31B03    	JMP	ERR$OUT$LOOP	;BACK FOR MORE
                
CP/M MACRO ASSEM 2.0	#008	CP/M 3 - HEXCOM - Oct 1982

                
                
                ;ROUTINE TO GET A CHARACTER FROM THE HEX FILE BUFFER.
                ;CHAR IS RETURNED IN <A>.
                
                
                GET$HEXFILE$CHAR:
 0353 3A5B05    	LDA	HEX$BUFFER$OFFSET
 0356 3C        	INR	A		;BUMP HEX OFFSET
 0357 F27103    	JP	GETCHAR		;PLUS IF NOT 80H YET
 035A 110006    	LXI	D,HEX$BUFFER
 035D 0E1A      	MVI	C,26		;SET-DMA CODE
 035F CD0500    	CALL	BDOS		;SET DMA ADDR TO HEX BUFFER
 0362 116D05    	LXI	D,HEX$FCB	;POINT HEX FCB
 0365 0E14      	MVI	C,20		;READ-NEXT-RECORD CODE
 0367 CD0500    	CALL	BDOS		;GET NEXT HEXFILE RECORD
 036A B7        	ORA	A		;TEST FOR ERROR
 036B 116004    	LXI	D,DRMSG		;ASSUME ERROR FOR NOW
 036E C21204    	JNZ	ERROR$ABORT	;FATAL ERR IF NOT ZERO
                GETCHAR:
 0371 325B05    	STA	HEX$BUFFER$OFFSET
 0374 2606      	MVI	H,HIGH HEX$BUFFER
 0376 6F        	MOV	L,A		;POINT TO NEXT CHAR
 0377 7E        	MOV	A,M		;GET THE CHARACTER
 0378 C9        	RET
                
                
                ;
                ;THIS ROUTINE PUTS A DATA BYTE TO THE "COM" FILE.
                ;THE BYTE IS PASSED IN <A>.
                ;THE FIRST COMPARE IS DONE ON JUST THE HI BYTES FOR THE
                ;SAKE OF SPEED, SINCE WE ARE PROCESSING THE "HEX" FILE
                ;"ON THE FLY".
                
                PUT$TO$COMFILE:
 0379 F5        	PUSH	PSW		;SAVE BYTE TO LOAD
 037A 2A6805    	LHLD	COM$BUF$OFFSET	;GET CURRENT OFFSET
 037D EB        	XCHG			;TO <DE>
 037E 3A9205    PTC	LDA	CURR$COM$BUF$LEN+1 ;PAGE NO. OF BUFF TOP
 0381 3D        	DCR	A		;ONE LESS FOR COMPARE
 0382 BA        	CMP	D		;TOP < OFFSET?
 0383 D2D403    	JNC	STORE$BYTE	;STORE BYTE IF NOT
 0386 2A9105    	LHLD	CURR$COM$BUF$LEN
 0389 7B        	MOV	A,E		;SUBTRACT LEN FROM OFFSET--
 038A 95        	SUB	L		;--TO GET NEW OFFSET
 038B 4F        	MOV	C,A		;<C> HAS LO BYTE OF DIFF
 038C 7A        	MOV	A,D		;HI BYTE OF OFFSET
 038D 9C        	SBB	H		;MINUS HI BYTE OF BUFF LENGTH
 038E 47        	MOV	B,A		;<BC> HAS NEW OFFSET
 038F C5        	PUSH	B		;SAVE NEW OFFSET
 0390 EB        	XCHG			;BUFFER LENGTH TO <DE>
 0391 2A6505    	LHLD	CURRENT$COM$BASE ;COM BASE TO <HL>
 0394 19        	DAD	D		;INCREASE IT BY BUFFER LENGTH
 0395 226505    	SHLD	CURRENT$COM$BASE ;STORE NEW BASE
 0398 2A8F05    	LHLD	CURR$COM$BUF$END
 039B 118006    	LXI	D,COMFILE$BUFFER	;BUFFER ADDR TO <DE>
CP/M MACRO ASSEM 2.0	#009	CP/M 3 - HEXCOM - Oct 1982

                COMLOOP:
 039E 7B        	MOV	A,E		;SUBTRACT BUFF END FROM POINTER
 039F 95        	SUB	L
 03A0 7A        	MOV	A,D
 03A1 9C        	SBB	H		;WRITTEN TO END OF BUFFER YET?
 03A2 D2C903    	JNC	STORE		;CY OFF MEANS WE'RE DONE
 03A5 E5        	PUSH	H		;SAVE BUFFER END ADDRESS
 03A6 D5        	PUSH	D		;SAVE WRITE POINTER
 03A7 0E1A      	MVI	C,26		;SET DMA FUNCTION CODE
 03A9 CD0500    	CALL	BDOS		;SET NEW DMA ADDRESS
 03AC 0E15      	MVI	C,21		;WRITE-NEXT-RECORD CODE
 03AE 115C00    	LXI	D,DEFAULT$FCB	;POINT COM FILE FCB
 03B1 CD0500    	CALL	BDOS		;WRITE NEXT COM RECORD
 03B4 B7        	ORA	A		;TEST FOR ERROR ON WRITE
 03B5 118504    	LXI	D,DWMSG		;POINT WRITE ERROR MSG
 03B8 C21204    	JNZ	ERROR$ABORT	;BOMB IF WRITE ERROR
 03BB D1        	POP	D		;RESTORE WRITE POINTER
 03BC 218000    	LXI	H,128		;SECTOR SIZE
 03BF 19        	DAD	D		;BUMP POINTER BY 128
 03C0 EB        	XCHG			;NEW POINTER TO <DE>
 03C1 216205    	LXI	H,RECORDS$WRITTEN
 03C4 34        	INR	M
 03C5 E1        	POP	H		;RESTORE BUFFER END ADDR
 03C6 C39E03    	JMP	COMLOOP		;SEE IF END OF BUFFER YET
                STORE:
 03C9 3A6A05    	LDA	CLEAR$FLAG	;GET CLEAR-BUFFER FLAG
 03CC B7        	ORA	A		;SHALL WE CLEAR?
 03CD CC3F04    	CZ	CLEAR$COMBUFFER	;ZERO THE BUFFER
 03D0 D1        	POP	D		;GET BACK NEW OFFSET
 03D1 C37E03    	JMP	PTC		;SEE IF WE MUST FLUSH AGAIN
                STORE$BYTE:
 03D4 218006    	LXI	H,COMFILE$BUFFER	;BUFFER ADDR TO <HL>
 03D7 19        	DAD	D			;ADD TO CURRENT OFFSET
 03D8 F1        	POP	PSW		;RETRIEVE BYTE TO WRITE
 03D9 77        	MOV	M,A		;STUFF IT
 03DA 13        	INX	D		;BUMP OFFSET
 03DB EB        	XCHG			;TO <HL> FOR STORE
 03DC 226805    	SHLD	COM$BUF$OFFSET	;UPDATE OFFSET
 03DF C9        	RET			;ALL DONE
                
                
                ;
                ;ROUTINE TO CONVERT THE 2-BYTE VALUE IN <HL> TO
                ;TWO ASCII CHARACTERS AND SEND THEM TO THE CONSOLE.
                ;
                WORD$OUT:
 03E0 E5        	PUSH	H	;SAVE WORD
 03E1 7C        	MOV	A,H	;HI WORD GOES OUT 1ST
 03E2 CDE703    	CALL	BYTE$OUT
 03E5 E1        	POP	H	;RESTORE WORD
 03E6 7D        	MOV	A,L	;LO BYTE GOES NEXT
                BYTE$OUT:
 03E7 F5        	PUSH	PSW	;SAVE BYTE
 03E8 0F0F0F0F  	RRC! RRC! RRC! RRC	;HI NYBBLE COMES DOWN
 03EC CDF003    	CALL	NYBBLE$OUT
 03EF F1        	POP	PSW	;RESTORE VALUE
CP/M MACRO ASSEM 2.0	#010	CP/M 3 - HEXCOM - Oct 1982

                NYBBLE$OUT:
 03F0 E60F      	ANI	0FH
 03F2 C690      	ADI	90H
 03F4 27        	DAA
 03F5 CE40      	ACI	40H
 03F7 27        	DAA
                CHAR$TO$CONSOLE:
 03F8 5F        	MOV	E,A
 03F9 0E02      	MVI	C,2	;WRITE CONSOLE CHAR FUNC CODE
 03FB C30500    	JMP	BDOS
                ;
                ;ROUTINE TO OUTPUT A "CRLF".
                ;
                CRLF:
 03FE 3E0D      	MVI	A,CR
 0400 CDF803    	CALL	CHAR$TO$CONSOLE
 0403 3E0A      	MVI	A,LF
 0405 C3F803    	JMP	CHAR$TO$CONSOLE
                ;
                ;ROUTINE TO PRINT A BUFFER TO THE CONSOLE.
                ;<DE> POINTS TO THE MESSAGE ON ENTRY.
                ;EARLIEST ENTRY POINT STARTS MESSAGE ON A NEW LINE
                ;
                MSG$ON$NEW$LINE:
 0408 D5        	PUSH	D	;SAVE MESSAGE POINTER
 0409 CDFE03    	CALL	CRLF	;START NEW LINE
 040C D1        	POP	D	;RESTORE MESSAGE POINTER
                PRINT$BUFFER:
 040D 0E09      	MVI	C,9	;OUTPUT BUFFER TO CONSOLE
 040F C30500    	JMP	BDOS
                ;
                ;
                ;ERROR ABORT ROUTINE
                ;
                
                ERROR$ABORT:
 0412 D5        	PUSH	D		;SAVE MESSAGE POINTER
 0413 115804    	LXI	D,ERRMSG	;POINT "ERROR" MSG
 0416 CD0804    	CALL	MSG$ON$NEW$LINE	;SEND IT OUT
 0419 D1        	POP	D		;RESTORE MESSAGE POINTER
 041A CD0D04    	CALL	PRINT$BUFFER	;SEND OUT ERR TYPE
 041D 119004    	LXI	D,LAMESSAGE	;POINT "LOAD ADDR" MSG
 0420 CD0804    	CALL	MSG$ON$NEW$LINE	;SEND IT OUT
 0423 CD4E04    	CALL	ABSOLUTE	;GET ABSOLUTE ADDR
 0426 CDE003    	CALL	WORD$OUT	;SEND IT OUT
 0429 C3C002    	JMP	EXIT		;BAIL OUT
                
                ;THIS ROUTINE PRINTS THE LOAD ADDRESS OF THE CURRENT
                ;HEX RECORD ON A NEW LINE FOLLOWED BY A ':' AND SPACE.
                
                PRINT$LOAD$ADDR:
 042C CDFE03    	CALL	CRLF
 042F 2A6305    	LHLD	LOAD$ADDRESS
 0432 CDE003    	CALL	WORD$OUT
 0435 3E3A      	MVI	A,':'
 0437 CDF803    	CALL	CHAR$TO$CONSOLE
CP/M MACRO ASSEM 2.0	#011	CP/M 3 - HEXCOM - Oct 1982

 043A 3E20      	MVI	A,' '
 043C C3F803    	JMP	CHAR$TO$CONSOLE
                
                
                ;ROUTINE TO CLEAR THE COMFILE BUFFER.
                
                
                CLEAR$COMBUFFER:
 043F 218006    	LXI	H,COMFILE$BUFFER
 0442 3A9005    	LDA	CURR$COM$BUF$END+1	;PAGE NO. OF BUF END
 0445 0E00      	MVI	C,0			;GET ZERO
 0447 71        CLOOP	MOV	M,C			;ZERO TO BUFFER
 0448 23        	INX	H			;BUMP POINTER
 0449 BC        	CMP	H			;END OF BUFFER YET?
 044A C24704    	JNZ	CLOOP			;LOOP TILL DONE
 044D C9        	RET
                
                
                ;ROUTINE TO COMPUTE CURRENT ABSOLUTE LOAD ADDRESS
                ;AND RETURN IT IN <HL>
                
                
                ABSOLUTE:
 044E 2A6505    	LHLD	CURRENT$COM$BASE ;GET BASE OF COM BUFFER
 0451 44        	MOV	B,H		;MOVE IT TO <BC>
 0452 4D        	MOV	C,L
 0453 2A6805    	LHLD	COM$BUF$OFFSET	;GET THE CURRENT OFFSET
 0456 09        	DAD	B		;SUM IS THE ABSO ADDR
 0457 C9        	RET
                
                
                ;			MESSAGES
                
                
                ERRMSG:
 0458 4552524F52	DB	'ERROR: $'
                DRMSG:
 0460 4449534B20	DB	'DISK READ$'
                ILAMSG:
 046A 4C4F414420	DB	'LOAD ADDRESS LESS THAN 100$'
                DWMSG:
 0485 4449534B20	DB	'DISK WRITE$'
                LAMESSAGE:
 0490 4C4F414420	DB	'LOAD  ADDRESS $'
                EAMSG:
 049F 4552524F52	DB	'ERROR ADDRESS $'
                IHDMSG:
 04AE 494E56414C	DB	'INVALID HEX DIGIT$'
                CSEMSG:
 04C0 434845434B	DB	'CHECKSUM ERROR $'
                FAMSG:
 04D0 4649525354	DB	'FIRST ADDRESS $'
                LSTADDRMSG:
 04DF 4C41535420	DB	'LAST  ADDRESS $'
                BRMESSAGE:
 04EE 4259544553	DB	'BYTES READ    $'
CP/M MACRO ASSEM 2.0	#012	CP/M 3 - HEXCOM - Oct 1982

                RWMSG:
 04FD 5245434F52	DB	'RECORDS WRITTEN $'
                COSMSG:
 050E 43414E4E4F	DB	'CANNOT OPEN SOURCE FILE$'
                NMDSMSG:
 0526 4449524543	DB	'DIRECTORY FULL$'
                CCFMSG:
 0535 43414E4E4F	DB	'CANNOT CLOSE FILE$'
                SIGNON$MSG:
 0547 484558434F	DB	'HEXCOM	VERS: ',VERS/100+'0'
 0555 2E30      	DB	'.',VERS/10 MOD 10 +'0'
 0557 300D0A24  	DB	VERS MOD 10 + '0',CR,LF,'$'
                
                
                ;		DATA AREA
                
                
                
 055B 7F        HEX$BUFFER$OFFSET	DB	127
 055C 0000      FIRST$ADDRESS		DW	0
 055E 0000      LAST$ADDRESS		DW	0
 0560 0000      BYTES$READ$COUNT	DW	0
 0562 00        RECORDS$WRITTEN		DB	0
 0563 0001      LOAD$ADDRESS		DW	100H
 0565 0001      CURRENT$COM$BASE	DW	100H
 0567 00        CHECKSUM		DB	0
 0568 0000      COM$BUF$OFFSET		DW	0
 056A 00        CLEAR$FLAG		DB	0	;CLEAR-COM-BUF FLAG
                
                
                
                ;		STORAGE AREA
                
                
                
 056B           STACK$SAVE		DS	2
 056D           HEX$FCB			DS	33
 058E           LOAD$COUNT		DS	1
 058F           CURR$COM$BUF$END	DS	2	;COM BUFFER TOP
 0591           CURR$COM$BUF$LEN	DS	2	;COM BUFFER LENGTH
 0593           			DS	32	;STACK AREA
 05B3 =         STACK			EQU	$
 0600           		ORG	((HIGH $)+1)*256
 0600           HEX$BUFFER		DS	128
 0680 =         COMFILE$BUFFER		EQU	$
 0680           		END
