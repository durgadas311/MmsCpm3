 2033 =         VERS	EQU   '3 '  ; May 28, 2018 12:28 drm "ldr320.asm"
                ***************************************************
                ;	Loader disk I/O module for MMS CP/M 2.24
                ;	for the 77320 SASI bus interface 
                ;	Copyright (c) 1983 Magnolia Microsystems
                ***************************************************
                
                	MACLIB	Z80
                	$-MACRO
                
                	public	btend		;end of system (boot stops loading there)
                	extrn	BDOS,CBOOT,DSKSTA,TIMEOT,MIXER,DIRBUF,DLOG
                	extrn	NEWDSK,NEWTRK,NEWSEC,DMAA
                
                ***************************************************
                **  PORTS AND CONSTANTS
                ***************************************************
 00F2 =         GPIO	EQU	0F2H		; SWITCH 501
                
 0001 =         ACK	EQU	00000001B
 0002 =         INT	EQU	00000010B
 0004 =         PER	EQU	00000100B
 0008 =         BUSY	EQU	00001000B
 0010 =         CMND	EQU	00010000B
 0020 =         MSG	EQU	00100000B
 0040 =         POUT	EQU	01000000B
 0080 =         REQ	EQU	10000000B
                
 0000 =         RUN	EQU	00000000B
 0010 =         SWRS	EQU	00010000B
 0020 =         INTE	EQU	00100000B
 0040 =         SEL	EQU	01000000B
                
 0001 =         RECAL	EQU	1	; COMMAND OP CODES
 0008 =         RDBL	EQU	8
 000A =         WRBL	EQU	10
 000C =         INIT	EQU	12
                
 000A =         DPHDPB	EQU	10
 0010 =         DPHL	EQU	16
 0015 =         DPBL	EQU	21
 0004 =         DDEFL	EQU	4
 000D =         CSTRNG	EQU	13
 0013 =         NPART	EQU	19
 0004 =         CBYTE	EQU	4
 0005 =         DDATA	EQU	5
 0003 =         DCTYPE	EQU	3
 0014 =         SECTBL	EQU	20
 002F =         DDPB	EQU	47
                
 0000 =         WRALL	EQU	0	; WRITE TO ALLOCATED
 0001 =         WRDIR	EQU	1	; WRITE TO DIRECTORY
 0002 =         WRUNA	EQU	2	; WRITE TO UNALLOCATED
 0003 =         READOP	EQU	3	; READ OPERATION
                
 2034 =         BTDRV	EQU	2034H	; BOOT DRIVE SAVE BY PROM
 25F0 =         STRNG	EQU	25F0H	; ASCII PARTITION NUMBER SAVE BY BOOT LOADER
 2131 =         UNITNUM EQU	2131H	; LUN NUMBER SAVE BY EPROM
                
                ***************************************************
                ** START OF RELOCATABLE DISK I/O MODULE
                *************************************************** 
                
                	cseg   
                 
 0000 C31A02    	JMP	INIT$SASI
 0003 C3A001    	JMP	SEL$COMBO
 0006 C37E03    	JMP	READ$COMBO
                
 0009 0000      	dw	0
 000B 0000      	dw	0     
                
                ;	TEXT
 000D 3737333230	DB	'77320',0,'SASI system loader',0,'v3.00'
 002B 33202400  	DW	VERS,'$'
                
                
 002F 0000000000DPH0:	DW	0,0,0,0,DIRBUF,DPB0,CSV0,ALV0
 003F 0000000000DPH1:	DW	0,0,0,0,DIRBUF,DPB1,CSV0,ALV0
 004F 0000000000DPH2:	DW	0,0,0,0,DIRBUF,DPB2,CSV0,ALV0
 005F 0000000000DPH3:	DW	0,0,0,0,DIRBUF,DPB3,CSV0,ALV0
 006F 0000000000DPH4:	DW	0,0,0,0,DIRBUF,DPB4,CSV0,ALV0
 007F 0000000000DPH5:	DW	0,0,0,0,DIRBUF,DPB5,CSV0,ALV0
 008F 0000000000DPH6:	DW	0,0,0,0,DIRBUF,DPB6,CSV0,ALV0
 009F 0000000000DPH7:	DW	0,0,0,0,DIRBUF,DPB7,CSV0,ALV0
 00AF 0000000000DPH8:	DW	0,0,0,0,DIRBUF,DPB8,CSV0,ALV0
                
                
                ;	SECTOR DEFINITION/TRANSLATION TABLE
                ;		--ADDRESS--,   FLAG BYTE
 00BF 00000000  DDEFTBL:DB	0,   0,   0,   0
 00C3 00000000  	DB	0,   0,   0,   0
 00C7 00000000  	DB	0,   0,   0,   0
 00CB 00000000  	DB	0,   0,   0,   0
 00CF 00000000  	DB	0,   0,   0,   0
 00D3 00000000  	DB	0,   0,   0,   0
 00D7 00000000  	DB	0,   0,   0,   0
 00DB 00000000  	DB	0,   0,   0,   0
 00DF 00000000  	DB	0,   0,   0,   0
                
                ;
                ;
                ; DISK PARAMETER BLOCKS -- CONTAIN DUMMY DATA. REAL DATA IS OBTAINED FROM 
                ;			   MAGIC SECTOR ON INITIALIZATION OF PARTITION
                ;
 00E3 4000      DPB0:	DW	64		; SPT
 00E5 051F01    	DB	5,31,1		; BSH,BLM,EXM
 00E8 0300FF01  	DW	4-1,512-1	; DSM,DRM
 00EC F000      	DB	0F0H,0		; AL0,AL1
 00EE 00000200  	DW	0,2		; CKS,OFF
 00F2 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 00F5 FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 00F8 4000      DPB1:	DW	64		; SPT
 00FA 051F01    	DB	5,31,1		; BSH,BLM,EXM
 00FD 0300FF01  	DW	4-1,512-1	; DSM,DRM
 0101 F000      	DB	0F0H,0		; AL0,AL1
 0103 00000200  	DW	0,2		; CKS,OFF
 0107 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 010A FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 010D 4000      DPB2:	DW	64		; SPT
 010F 051F01    	DB	5,31,1		; BSH,BLM,EXM
 0112 0300FF01  	DW	4-1,512-1	; DSM,DRM
 0116 F000      	DB	0F0H,0		; AL0,AL1
 0118 00000200  	DW	0,2		; CKS,OFF
 011C 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 011F FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 0122 4000      DPB3:	DW	64		; SPT
 0124 051F01    	DB	5,31,1		; BSH,BLM,EXM
 0127 0300FF01  	DW	4-1,512-1	; DSM,DRM
 012B F000      	DB	0F0H,0		; AL0,AL1
 012D 00000200  	DW	0,2		; CKS,OFF
 0131 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 0134 FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 0137 4000      DPB4:	DW	64		; SPT
 0139 051F01    	DB	5,31,1		; BSH,BLM,EXM
 013C 0300FF01  	DW	4-1,512-1	; DSM,DRM
 0140 F000      	DB	0F0H,0		; AL0,AL1
 0142 00000200  	DW	0,2		; CKS,OFF
 0146 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 0149 FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 014C 4000      DPB5:	DW	64		; SPT
 014E 051F01    	DB	5,31,1		; BSH,BLM,EXM
 0151 0300FF01  	DW	4-1,512-1	; DSM,DRM
 0155 F000      	DB	0F0H,0		; AL0,AL1
 0157 00000200  	DW	0,2		; CKS,OFF
 015B 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 015E FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 0161 4000      DPB6:	DW	64		; SPT
 0163 051F01    	DB	5,31,1		; BSH,BLM,EXM
 0166 0300FF01  	DW	4-1,512-1	; DSM,DRM
 016A F000      	DB	0F0H,0		; AL0,AL1
 016C 00000200  	DW	0,2		; CKS,OFF
 0170 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 0173 FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 0176 4000      DPB7:	DW	64		; SPT
 0178 051F01    	DB	5,31,1		; BSH,BLM,EXM
 017B 0300FF01  	DW	4-1,512-1	; DSM,DRM
 017F F000      	DB	0F0H,0		; AL0,AL1
 0181 00000200  	DW	0,2		; CKS,OFF
 0185 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 0188 FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 018B 4000      DPB8:	DW	64		; SPT
 018D 051F01    	DB	5,31,1		; BSH,BLM,EXM
 0190 0300FF01  	DW	4-1,512-1	; DSM,DRM
 0194 F000      	DB	0F0H,0		; AL0,AL1
 0196 00000200  	DW	0,2		; CKS,OFF
 019A 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 019D FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                PAGE
                
                
                
                
                ;	SELECT DISK CODE
                ;
                SEL$COMBO:
 01A0 AF        	XRA	A
 01A1 320B06    	STA	SELERR		; NO SELECT ERRORS (YET)
 01A4 3A0E06    	LDA	DRIV0		; CALCULATE DRIVE NUMBER RELATIVE TO 0
 01A7 57        	MOV	D,A
 01A8 3A0000    	LDA	NEWDSK
 01AB 92        	SUB	D     
 01AC 322206    	STA	RELDSK
 01AF 21BF00    	LXI	H,DDEFTBL
 01B2 5F        	MOV	E,A		; NOW POINT TO THE CORRECT
 01B3 1600      	MVI	D,0		; ENTRY IN THE SECTOR
 01B5 19        	DAD	D		; OFFSET TABLE
 01B6 19        	DAD	D
 01B7 19        	DAD	D
 01B8 19        	DAD	D
 01B9 220706    	SHLD	SECPTR
 01BC 7E        	MOV	A,M
 01BD E6E0      	ANI	11100000B
 01BF 32F205    	STA	LUN		; SAVE LOGICAL UNIT NUMBER BITS
 01C2 43        	MOV	B,E
 01C3 04        	INR	B
 01C4 211F00    	LXI	H,DPH0-DPHL	; POINT TO DPH TABLE
 01C7 111000    	LXI	D,DPHL		; LENGTH OF DPH's
 01CA 19        SEL1:	DAD	D
 01CB           	DJNZ	SEL1		; CALCULATE POINTER TO REQUESTED DPH
 01CD 220906    	shld	curdph		
 01D0 110A00    	LXI	D,DPHDPB
 01D3 19        	DAD	D		; POINT TO ADDRESS OF DPB
 01D4 CDFF04    	CALL	HLIHL		; DPB ADDRESS IN HL
 01D7 222306    	SHLD	CURDPB		; SAVE IT
                
 01DA 21A205    	LXI	H,LUNDATA-16	; CALCULATE POINTER TO
 01DD 111000    	LXI	D,16		;  DATA FOR THIS LOGICAL UNIT
 01E0 3AF205    	LDA	LUN
 01E3 07        	RLC
 01E4 07        	RLC
 01E5 07        	RLC
 01E6 19        NXTLUN: DAD	D
 01E7 3D        	DCR	A
 01E8 F2E601    	JP	NXTLUN
 01EB 220506    	SHLD	DATAPTR
                
 01EE CD5F02    	CALL	CHK$INIT	; INITIALIZE DRIVE IF NECESSARY
 01F1 2A2306    	LHLD	CURDPB
 01F4 23        	INX	H
 01F5 23        	INX	H
 01F6 23        	INX	H
 01F7 7E        	MOV	A,M		; GET BLOCK MASK
 01F8 322506    	STA	BLKMSK		; USED FOR UNALLOCATED RECORD COUNT
 01FB 110A00    	LXI	D,10
 01FE 19        	DAD	D
 01FF 7E        	MOV	A,M		; GET TRACK OFFSET
 0200 322606    	STA	OFFSET
 0203 23        	INX	H
 0204 23        	INX	H		; POINT TO MODE BYTE 1
 0205 7E        	MOV	A,M
 0206 E603      	ANI	3		; ISOLATE SECTOR SIZE BITS
 0208 321C06    	STA	BLCODE		; SAVE AS DEBLOCKING CODE
 020B 3A2206    RETSEL: LDA	RELDSK
 020E 4F        	MOV	C,A
 020F 2A0906    	lhld	curdph
 0212 C9        	RET
                
 0213 3E01      ERREXT: MVI	A,1
 0215 320B06    	STA	SELERR
 0218           	JR	RETSEL
                
                
                ;
                ;	DRIVER INITIALIZATION CODE
                ;
                INIT$SASI:
 021A 3A3121    	LDA	UNITNUM 	;FROM BOOT PROM
 021D E603      	ANI	00000011B
 021F 0F        	RRC
 0220 0F        	RRC
 0221 0F        	RRC
 0222 21BF00    	LXI	H,DDEFTBL
 0225 110400    	LXI	D,4
 0228 0609      	MVI	B,9
 022A 77        SETLUN	MOV	M,A		;SET ALL LUN BITS IN TBL
 022B 19        	DAD	D
 022C           	DJNZ	SETLUN
 022E 3E32      	MVI	A,50
 0230 320E06    	STA	DRIV0
 0233 C609      	ADI	9
 0235 320F06    	STA	DRIV$LAST
 0238 3AF025    	LDA	STRNG		;FROM BOOT LOADER
 023B B7        	ORA	A
 023C CA4102    	JZ	DEFDRV
 023F D630      	SUI	'0'
 0241 C632      DEFDRV	ADI	50
 0243 320000    	STA	MIXER
                
 0246 067C      	MVI	B,7CH 
 0248 DBF2      	IN	GPIO		; READ SWITCH 501
 024A E603      	ANI	00000011B	; WHAT'S PORT 7C SET FOR ?
 024C FE02      	CPI	00000010B	;  IF Z67, THEN THIS IS IT
 024E           	JRZ	GOTPRT
 0250 0678      	MVI	B,78H
 0252 DBF2      	IN	GPIO		; READ SWITCH 501
 0254 E60C      	ANI	00001100B	; WHAT'S PORT 78 SET FOR ?
 0256 FE08      	CPI	00001000B	;  IF Z67, THEN THIS IS IT
 0258 C0        	RNZ
 0259 78        GOTPRT: MOV	A,B
 025A 320D06    	STA	BASE$PORT	; SAVE BASE PORT ADDRESS
 025D AF        	XRA	A
 025E C9        	RET
                
                CHK$INIT:
 025F CD7D02    	CALL	GETSTART
 0262 2A0706    	LHLD	SECPTR
 0265 23        	INX	H
 0266 23        	INX	H
 0267 23        	INX	H		; POINT TO FLAG BYTE
 0268 7E        	MOV	A,M
 0269 320C06    	STA	FLAGS		; SAVE FOR USE BY INIT$DRIVE
 026C           	BIT	7,M		; CHECK INITIALIZATION BIT
 026E CABE02    	JZ	INIT$HARD
 0271           	BIT	5,M		; IS IT REMOVABLE MEDIA ?
 0273 C2BE02    	JNZ	INIT$HARD	;  MUST INITIALIZE
 0276 CD6404    	CALL	INIT$DRIVE	; SEND DATA TO CONTROLLER ON LOGIN OF A L.U.N.
 0279 C27A03    	JNZ	INIT$ERR	
 027C C9        	RET
                
                GETSTART:
 027D           	LXIX	DDEFTBL
 0281 3A0E06    	LDA	DRIV0		; GET PHYSICAL DRIVE NUMBER
 0284 47        	MOV	B,A
 0285 3A0F06    	LDA	DRIV$LAST	; GET TOTAL NUMBER OF PARTITIONS
 0288 90        	SUB	B
 0289 67        	MOV	H,A
 028A 3AF205    	LDA	LUN		; PUT LUN IN L REG
 028D 6F        	MOV	L,A
 028E 110400    	LXI	D,4		; INCREMENT FOR DDEFTAB       
 0291           STLOOP	LDX	A,+0		; GET STARTING PHYSICAL DRIVE NUMBER
 0294 E6E0      	ANI	11100000B	; OF CURRENT LUN.
 0296 BD        	CMP	L
 0297           	JRZ	GOT$START
 0299           	DADX	D
 029B 04        	INR	B
 029C 25        	DCR	H
 029D C29102    	JNZ	STLOOP
 02A0 D1        	POP	D
 02A1 C37A03    	JMP	INIT$ERR
                GOT$START:
 02A4 78        	MOV	A,B
 02A5 321006    	STA	STRLUN
 02A8 0E00      	MVI	C,0		; GET NUMBER OF PARTITIONS IN LUN
                ENDLOOP:			
 02AA           	DADX	D
 02AC 0C        	INR	C
 02AD           	LDX	A,+0
 02B0 E6E0      	ANI	11100000B
 02B2 BD        	CMP	L
 02B3           	JRNZ	GOT$END 	; B = STARTING PHYSICAL DRIVE NUMBER OF LUN
 02B5 25        	DCR	H
 02B6 C2AA02    	JNZ	ENDLOOP 	; C = NUMBER OF PARTITION IN THE CURRENT LUN
                GOT$END:
 02B9 79        	MOV	A,C
 02BA 321106    	STA	PARTLUN 	; SAVE FOR INIT$HARD  AND LOGIN
 02BD C9        	RET
                
                INIT$HARD:
 02BE 3EFF      	MVI	A,0FFH		
 02C0 321406    	STA	HSTDSK		
 02C3 CD1005    	CALL	GETCON		; RESTORE THE HEADS
 02C6 21FF05    	LXI	H,RCMND
 02C9 AF        	XRA	A		; DEFAULT STEP RATE
 02CA 320406    	STA	RCMND+5
 02CD CC4305    	CZ	OUTCM0
 02D0 CC8F05    	CZ	CHK$STAT
 02D3 3E08      	MVI	A,RDBL		; OP CODE TO READ A SECTOR
 02D5 32F305    	STA	CMBFR
 02D8 AF        	XRA	A		; SECTOR 0
 02D9 32F405    	STA	CMBFR+1
 02DC 32F505    	STA	CMBFR+2
 02DF 32F605    	STA	CMBFR+3
 02E2 3C        	INR	A
 02E3 32F705    	STA	CMBFR+4 	; READ 1 SECTOR
 02E6 CD1005    	CALL	GETCON		; WAKE UP CONTROLLER
 02E9 CC4005    	CZ	OUTCOM		; OUTPUT READ COMMAND
 02EC CC7005    	CZ	SASIRW		; READ IN SECTOR
 02EF CC8F05    	CZ	CHK$STAT	; CHECK STATUS OF READ
 02F2 C27A03    	JNZ	INIT$ERR
                
 02F5 3A3A06    	LDA	HSTBUF+NPART	; COMPARE # OF PART. DRIVER & MAGIC SECTOR
 02F8 211106    	LXI	H,PARTLUN
 02FB BE        	CMP	M
 02FC D20003    	JNC	KEEPPAR 	; USE THE SMALLEST ONE
 02FF 77        	MOV	M,A
 0300 3A0E06    KEEPPAR:LDA	DRIV0
 0303 57        	MOV	D,A
 0304 3A1006    	LDA	STRLUN
 0307 92        	SUB	D
 0308 321006    	STA	STRLUN		; SAVE RELATIVE START OF LUN	  
                
 030B 47        	MOV	B,A		; SEE IF INITIALIZING A PART. THAT DOES EXIST
 030C 3A2206    	LDA	RELDSK
 030F 90        	SUB	B
 0310 BE        	CMP	M				      
 0311 D27A03    	JNC	INIT$ERR		 
                
 0314 04        	INR	B
 0315 21CE00    	LXI	H,DPB0-DPBL	; CALCULATE START OF DPB IN DRIVER
 0318 111500    	LXI	D,DPBL
 031B 19        NXTDPB	DAD	D
 031C           	DJNZ	NXTDPB
 031E E5        	PUSH	H
                
 031F 3A1106    	LDA	PARTLUN
 0322 47        	MOV	B,A
 0323 210000    	LXI	H,0		; CALCULATE TOTAL LENGTH OF DPB'S TO BE MOVED 
 0326 111500    	LXI	D,DPBL
 0329 19        NXTLEN	DAD	D
 032A           	DJNZ	NXTLEN
 032C 44        	MOV	B,H		; PUT LENGTH IN BC
 032D 4D        	MOV	C,L
 032E D1        	POP	D		; PUT TO ADDRESS IN DE
 032F 215606    	LXI	H,HSTBUF+DDPB	; PUT FROM ADDRESS IN HL
 0332           	LDIR
                	
 0334 21BF00    	LXI	H,DDEFTBL	; CALCULATE START IN DDEFTBL
 0337 3A1006    	LDA	STRLUN
 033A           	SLAR	A		; MULT BY 2
 033C           	SLAR	A		; MULT BY 4
 033E 5F        	MOV	E,A
 033F 1600      	MVI	D,0
 0341 19        	DAD	D
 0342 E5        	PUSH	H		; SAVE FOR SET INIT. BITS
 0343 EB        	XCHG			; TO ADDRES IN DE
 0344 213B06    	LXI	H,HSTBUF+SECTBL ; FROM ADDRESS
 0347 3A1106    	LDA	PARTLUN
 034A 47        	MOV	B,A		
 034B C5        NXTDEF	PUSH	B		; MOVE PARTITION ADDRESS TABLE INTO DRIVER
 034C 1A        	LDAX	D		; DE = DDEFTBL
 034D B6        	ORA	M		; HL = HSTBUF+SECTBL (MAGIC SECTOR)
 034E 77        	MOV	M,A
 034F 010300    	LXI	B,3
 0352           	LDIR
 0354 13        	INX	D		; DDEFTBL IS 4 BYTES WIDE
 0355 C1        	POP	B
 0356           	DJNZ	NXTDEF
                
 0358 212A06    	LXI	H,HSTBUF+DCTYPE ; GET L.U.N. SPECIFIC DATA FROM
 035B           	LDED	DATAPTR 	;  'MAGIC SECTOR'
 035F 011000    	LXI	B,16		;  PUT IT INTO SPACE RESERVED FOR THIS L.U.N.
 0362           	LDIR
                	
 0364 CD6404    	CALL	INIT$DRIVE
 0367           	JRNZ	INIT$ERR	; ERROR ON PHYSICAL INITIALIZATION
                
 0369 E1        	POP	H		; SET INITIALIZATION BITS
 036A 23        	INX	H
 036B 23        	INX	H
 036C 23        	INX	H
 036D 110400    	LXI	D,DDEFL  
 0370 3A1106    	LDA	PARTLUN
 0373 47        	MOV	B,A
 0374           NXTFLG	SETB	7,M
 0376 19        	DAD	D
 0377           	DJNZ	NXTFLG
 0379 C9        	RET
                
                INIT$ERR:
 037A D1        	POP	D		; CLEAR STACK
 037B C31302    	JMP	ERREXT
                
                PAGE
                
                
                READ$COMBO:
 037E 3E03      	MVI	A,READOP
 0380 321E06    	STA	WRTYPE
 0383 3A0B06    	LDA	SELERR
 0386 B7        	ORA	A
 0387 C0        	RNZ
 0388 3A0000    	LDA	NEWDSK
 038B 321806    	STA	REQDSK
 038E 2A0100    	LHLD	NEWSEC+1	; (HRDTRK)
 0391 221906    	SHLD	REQTRK
 0394 0E00      	MVI	C,0		; CALCULATE PHYSICAL SECTOR
 0396 3A1C06    	LDA	BLCODE		; PHYSICAL SECTOR SIZE CODE
 0399 B7        	ORA	A		; TEST FOR ZERO
 039A 47        	MOV	B,A
 039B 3A0000    	LDA	NEWSEC
 039E 321B06    	STA	REQSEC		; INITIAL GUESS IS 128 BYTE SECTORS
 03A1           	JRZ	DBLOK3		; 128 BYTE SECTORS ?
 03A3           DBLOK1: SRLR	A		; DIVIDE ACCUMULATOR BY 2
 03A5           	RARR	C		; SAVE OVERFLOW BITS
 03A7           	DJNZ	DBLOK1		; AND CONTINUE IF BLOCKING STILL <> 0
 03A9 321B06    	STA	REQSEC		; SAVE IT
 03AC 3A1C06    	LDA	BLCODE		; CALCULATE BLKSEC
 03AF 47        	MOV	B,A		; FOR LOOPING
 03B0           DBLOK2: RLCR	C		; NOE RESTORE THE OVERFLOW BY
 03B2           	DJNZ	DBLOK2		; ROTATING IT RIGHT
 03B4 79        DBLOK3: MOV	A,C
 03B5 321D06    	STA	BLKSEC		; STORE IT
 03B8 3EFF      	MVI	A,0FFH
 03BA 321306    	STA	RD$FLAG 	; FLAG A PRE-READ
 03BD 3A1E06    	LDA	WRTYPE
 03C0 1F        	RAR
 03C1           	JRC	ALLOC		; NO NEED TO CHECK FOR UNALLOCATED RECORDS
 03C3 1F        	RAR			; CARRY IS SET ON WRUNA
 03C4           	JRNC	CHKUNA
 03C6           	SDED	URECORD 	; SET UNALLOCATED RECORD #
 03CA 3D        	DCR	A
 03CB 321F06    	STA	UNALLOC 	; FLAG WRITING OF AN UNALLOCATED BLOCK
 03CE 3A1F06    CHKUNA: LDA	UNALLOC 	; ARE WE WRITING AN UNALLOCATED BLOCK ?
 03D1 B7        	ORA	A
 03D2           	JRZ	ALLOC
 03D4 2A2006    	LHLD	URECORD 	; IS REQUESTED RECORD SAME AS EXPECTED
 03D7           	DSBC	D		;  SAME AS EXPECTED UNALLOCATED RECORD ?
 03D9           	JRNZ	ALLOC		; IF NOT, THEN DONE WITH UNALLOCATED BLOCK
 03DB AF        	XRA	A		; CLEAR PRE-READ FLAG
 03DC 321306    	STA	RD$FLAG
 03DF 13        	INX	D		; INCREMENT TO NEXT EXPECTED UNALLOCATED RECORD
 03E0           	SDED	URECORD
 03E4 3A2506    	LDA	BLKMSK
 03E7 A3        	ANA	E		; IS IT THE START OF A NEW BLOCK ?
 03E8           	JRNZ	CHKSEC
 03EA AF        ALLOC:	XRA	A		; NO LONGER WRITING AN UNALLOCATED BLOCK
 03EB 321F06    	STA	UNALLOC
                
                ;*****************************************************************************
                ; CHKSEC: THIS SUBROUTINE COMPARES THE REQUESTED DISK TRACK AND SECTOR	     ;
                ;	  TO THE DISK,TRACK AND SECTOR CURRENTLY IN THE BUFFER. 	     ;
                ;	  OUTPUT: ZERO FLAG SET IF SAME, RESET IF DIFFERENT		     ;
                ;									     ;
 03EE A7        CHKSEC: ANA	A		; CLEAR CARRY FOR DSBC			     ;
 03EF 2A1906    	LHLD	REQTRK							     ;
 03F2           	LDED	OFFSET							     ;
 03F6           	DSBC	D							     ;
 03F8           	JRNZ	CHKBUF							     ;
 03FA 3A0000    	LDA	NEWSEC							     ;
 03FD B7        	ORA	A		; FIRST SECTOR OF DIRECTORY ?		     ;
 03FE           	JRZ	SET$PRE$RD						     ;
 0400 211806    CHKBUF: LXI	H,REQDSK						     ;
 0403 111406    	LXI	D,HSTDSK						     ;
 0406 0604      	MVI	B,4							     ;
 0408 1A        CHKBUF1:LDAX	D							     ;
 0409 BE        	CMP	M							     ;
 040A           	JRNZ	READIT							     ;
 040C 23        	INX	H							     ;
 040D 13        	INX	D							     ;
 040E           	DJNZ	CHKBUF1 						     ;
 0410           	JR	NOREAD		;  THEN NO NEED TO PRE-READ		     ;
                ;*****************************************************************************
                
                SET$PRE$RD:			; SET PRE READ FLAG FOR READING 
 0412 3EFF      	MVI	A,0FFH		; DIRECTORY SO A PHY READ IS DONE
 0414 321306    	STA	RD$FLAG
                
 0417 111406    READIT: LXI	D,HSTDSK	; SET UP NEW BUFFER PARAMETERS
 041A 211806    	LXI	H,REQDSK
 041D 010400    	LXI	B,4
 0420           	LDIR
 0422 3A1306    	LDA	RD$FLAG 	; DO WE NEED TO PRE-READ ?
 0425 B7        	ORA	A
 0426 C44104    	CNZ	RD$SEC		; READ THE SECTOR
 0429 212706    NOREAD: LXI	H,HSTBUF	; POINT TO START OF SECTOR BUFFER
 042C 018000    	LXI	B,128
 042F 3A1D06    	LDA	BLKSEC		; POINT TO LOCATION OF CORRECT LOGICAL SECTOR
 0432 3D        MOVIT1: DCR	A
 0433 FA3904    	JM	MOVIT2
 0436 09        	DAD	B
 0437           	JR	MOVIT1
 0439           MOVIT2: LDED	DMAA		; POINT TO DMA
 043D           	LDIR			; MOVE IT
 043F AF        	XRA	A		; FLAG NO ERROR
 0440 C9        	RET			; RETURN TO BDOS
                
 0441 CD4F04    RD$SEC: CALL	READ		; READ A PHYSICAL SECTOR
 0444 C8        	RZ			; RETURN IF SUCCESSFUL
 0445 3EFF      	MVI	A,0FFH		; FLAG BUFFER AS UNKNOWN
 0447 321406    	STA	HSTDSK
 044A D1        RWERR:	POP	D		; THROW AWAY TOP OF STACK
 044B 3E01      	MVI	A,1		; SIGNAL ERROR TO BDOS
 044D B7        	ORA	A
 044E C9        	RET			; RETURN TO BDOS
                
                ;
                ;	READ A PHYSICAL SECTOR CODE
                ;
                READ:
 044F 3E08      	MVI	A,RDBL		; READ COMMAND CODE
 0451 32F305    	STA	CMBFR		; COMMAND BUFFER OP CODE
 0454 CDB104    	CALL	SET$SEC 	; CALCULATE AND INSTALL ACTUAL SECTOR
 0457 CD0405    	CALL	WAKE$UP 	; SETUP CONTROLLER
 045A CC4005    	CZ	OUTCOM		; AND OUTPUT THE COMMAND
 045D CC7005    	CZ	SASIRW		; DO READ OR WRITE
 0460 CC8F05    	CZ	CHK$STAT	; CHECK THE BUS RESPONSE
 0463 C9        	RET
                
                INIT$DRIVE:
 0464 2A0506    	LHLD	DATAPTR 	; SEE IF IT'S XEBEC
 0467 7E        	MOV	A,M
 0468 E6E0      	ANI	11100000B
 046A           	JRNZ	NOTXBC		; SKIP IF NOT
 046C CD1005    	CALL	GETCON		; GET CONTROLLER'S ATTENTION
 046F 21F905    	LXI	H,ICMND 	; INITIALIZATION COMMAND STRING
 0472 CC4305    	CZ	OUTCM0		; OUTPUT COMMAND
 0475 C0        	RNZ
 0476 2A0506    	LHLD	DATAPTR 	; DRIVE CHARACTERISTIC DATA
 0479 23        	INX	H
 047A 23        	INX	H
 047B 0608      	MVI	B,8		; 8 BYTES LONG
 047D 1EC8      	MVI	E,(REQ OR POUT OR BUSY)
 047F CD5805    	CALL	OUTCM1		; OUTPUT THE DATA
 0482 CC8F05    	CZ	CHK$STAT	;  AND CHECK STATUS
 0485 C39A04    	JMP	RESDR		; mjm LETS NOT SEND ZEROS IF XEBEC
 0488 2A0506    NOTXBC: LHLD	DATAPTR
 048B 110A00    	LXI	D,10		; NOW DO "ASSIGN DRIVE TYPE" COMMAND
 048E 19        	DAD	D		;  ( FOR DATA PERIPHERALS DONTROLLERS )
 048F E5        	PUSH	H
 0490 CD1005    	CALL	GETCON		; GET CONTROLLER'S ATTENTION
 0493 E1        	POP	H
 0494 CC4305    	CZ	OUTCM0		; SEND THE COMMAND
 0497 CC8F05    	CZ	CHK$STAT
 049A CD1005    RESDR	CALL	GETCON		; RESTORE THE HEADS
 049D 21FF05    	LXI	H,RCMND
 04A0           	LIXD	DATAPTR 	; PUT CONTROL BYTE IN BUFFER
 04A4           	LDX	A,+1
 04A7 320406    	STA	RCMND+5
 04AA CC4305    	CZ	OUTCM0
 04AD CC8F05    	CZ	CHK$STAT
 04B0 C9        	RET
                
                
                ;	CALCULATE THE REQUESTED SECTOR
                ;
                SET$SEC:
 04B1 2A1506    	LHLD	HSTTRK		; GET REQUESTED TRACK
 04B4 29        	DAD	H		; *2
 04B5 29        	DAD	H		; *4
 04B6 29        	DAD	H		; *8
 04B7 29        	DAD	H		; *16
 04B8 29        	DAD	H		; *32
 04B9 29        	DAD	H		; *64 (64 SECTORS/TRACK)
 04BA E5        	PUSH	H
 04BB 2A0706    	LHLD	SECPTR
 04BE 4E        	MOV	C,M
 04BF 23        	INX	H
 04C0 56        	MOV	D,M
 04C1 23        	INX	H
 04C2 5E        	MOV	E,M
 04C3 E1        	POP	H
 04C4 19        	DAD	D		; ADD IN PARTITION OFFSET
 04C5           	JRNC	NOCAR0		; CARRY FROM DAD (IF ANY) GOES INTO
 04C7 0C        	INR	C		;  HIGH ORDER BYTE OF SECTOR NUMBER
 04C8 3A1C06    NOCAR0: LDA	BLCODE
 04CB 47        	MOV	B,A
 04CC B7        	ORA	A
 04CD 79        	MOV	A,C
 04CE           	JRZ	NODIV
 04D0 E61F      	ANI	00011111B	; ELIMINATE L.U.N. BITS FROM DIVISION
 04D2 4F        	MOV	C,A
 04D3           NXDIV:	SRAR	C
 04D5           	RARR	H
 04D7           	RARR	L
 04D9           	DJNZ	NXDIV
 04DB 3A1706    NODIV:	LDA	HSTSEC		; GET REQUESTED SECTOR
 04DE 5F        	MOV	E,A
 04DF 1600      	MVI	D,0
 04E1 19        	DAD	D		; ADD IT IN
 04E2           	JRNC	NOCAR1
 04E4 0C        	INR	C
 04E5 79        NOCAR1: MOV	A,C
 04E6 32F405    	STA	CMBFR+1 	; MOVE TO COMMAND BUFFER
 04E9 7C        	MOV	A,H
 04EA 32F505    	STA	CMBFR+2 	; MOVE REST OF SECTOR NUMBER TO COMMAND BUFFER
 04ED 7D        	MOV	A,L
 04EE 32F605    	STA	CMBFR+3
 04F1 3E01      	MVI	A,1		; TRANSFER 1 SECTOR
 04F3 32F705    	STA	CMBFR+4
 04F6 2A0506    	LHLD	DATAPTR 	; GET CONTROL BYTE
 04F9 23        	INX	H
 04FA 7E        	MOV	A,M
 04FB 32F805    	STA	CMBFR+5 	; PUT INTO COMMAND BUFFER
 04FE C9        	RET
                
 04FF 7E        HLIHL:	MOV	A,M
 0500 23        	INX	H
 0501 66        	MOV	H,M
 0502 6F        	MOV	L,A
 0503 C9        	RET
                
 0504 CD1005    WAKE$UP:CALL	GETCON
 0507 C8        	RZ
 0508 CD6404    	CALL	INIT$DRIVE
 050B C0        	RNZ
 050C CD1005    	CALL	GETCON
 050F C9        	RET
                
                
                ;
                ;	GET THE BUS' ATTENTION
                ;
                GETCON:
 0510 3A0D06    	LDA	BASE$PORT
 0513 4F        	MOV	C,A
 0514 0C        	INR	C		; CONTROL PORT ADDRESS TO REG. C
 0515 3E00      	MVI	A,RUN
 0517           	OUTP	A		; CLEAR SEL BIT
 0519 0600      	MVI	B,0		; TIMER COUNTER
 051B 0D        GETCN1: DCR	C
 051C AF        	XRA	A
 051D           	OUTP	A		; CLEAR DATA REGISTER
 051F 0C        	INR	C		; AND SEND IT TO THE CARD
 0520           	INP	A		; READ CONTROL PORT
 0522 E608      	ANI	BUSY
 0524           	JRZ	GETCN2
 0526           	DJNZ	GETCN1
 0528 05        	DCR	B		; RESET PSW/Z TO INDICATE ERROR
 0529 C9        	RET
                GETCN2: 
 052A 3E40      	MVI	A,SEL
 052C           	OUTP	A		; WAKE UP CONTROLER
 052E 0600      	MVI	B,0
                GETCN3:
 0530           	INP	A
 0532 E608      	ANI	BUSY
 0534           	JRNZ	GETCN4
 0536           	DJNZ	GETCN3
 0538 05        	DCR	B		; RESET PSW/Z TO INDICATE ERROR
 0539 C9        	RET
                GETCN4: 
 053A 3E00      	MVI	A,RUN
 053C           	OUTP	A
 053E AF        	XRA	A		; NO ERROR
 053F C9        	RET
                
                
                ;
                ; OUTCOM: OUTPUT A COMMAND TO THE DRIVE
                ;
 0540 21F305    OUTCOM: LXI	H,CMBFR
 0543 23        OUTCM0: INX	H
 0544 7E        	MOV	A,M		; CLEAR LUN BITS IN COMMAND BUFFER
 0545 E61F      	ANI	00011111B
 0547 77        	MOV	M,A
 0548 3AF205    	LDA	LUN		; OR L.U.N. BITS INTO COMMAND
 054B B6        	ORA	M
 054C 77        	MOV	M,A
 054D 2B        	DCX	H
 054E 0606      	MVI	B,6		; COMMAND IS 6 BYTES LONG
 0550 3A0D06    	LDA	BASE$PORT
 0553 4F        	MOV	C,A		; DATA PORT TO REG. C
 0554 3C        	INR	A
 0555 57        	MOV	D,A		; CONTROL PORT TO REG. D
 0556 1ED8      	MVI	E,(REQ OR CMND OR POUT OR BUSY)
 0558 C5        OUTCM1: PUSH	B
 0559 0600      	MVI	B,0		; SET LOOP COUNTER
 055B 4A        	MOV	C,D		; CONTROL PORT ADDRESS TO REG. C
 055C           OUTLOP: INP	A
 055E E6D8      	ANI	(REQ OR CMND OR POUT OR BUSY)
 0560 BB        	CMP	E
 0561           	JRZ	OUTOK
 0563           	DJNZ	OUTLOP
 0565 05        	DCR	B		; SET ERROR (NZ)
 0566 C1        	POP	B
 0567 C9        	RET
 0568 C1        OUTOK:	POP	B		; RETURNS DATA PORT ADDRESS TO REG. C
 0569           	OUTI			; OUTPUT COMMAND BYTE
 056B C25805    	JNZ	OUTCM1
 056E AF        	XRA	A		; SET SUCCESS (Z)
 056F C9        	RET
                ;
                ;	ACTUAL READ-WRITE OF DATA
                ;
                SASIRW: 			; THIS ROUTINE IS FOR READING AND WRITING
 0570 212706    	LXI	H,HSTBUF	; AND WRITING DATA
 0573 3A0D06    	LDA	BASE$PORT
 0576 4F        	MOV	C,A		; DATA PORT ADDRESS TO REG. C
 0577 0C        NXTSEC: INR	C		; INCREMENT TO CONTROL PORT
 0578           SASICK: INP	A		; FIRST CHECK FOR DRIVE READY
 057A 320000    	STA	DSKSTA	     ; STORE STATUS
 057D E6D8      	ANI	(CMND OR BUSY OR REQ OR POUT)
 057F FE98      	CPI	(CMND OR BUSY OR REQ)  ; IF POUT DROPS,
 0581 C8        	RZ			       ;  WE ARE INTO STATUS PHASE
 0582 E698      	ANI	(CMND OR BUSY OR REQ)
 0584 FE88      	CPI	(BUSY OR REQ)	; WHEN CMND DROPS, SEEK IS COMPLETE, AND WE ARE
 0586           	JRNZ	SASICK		;  READY FOR DATA TRANSFER
 0588 0D        	DCR	C		; DATA PORT ADDRESS TO REG. C
 0589 0680      	MVI	B,128
 058B           	INIR			; CHANGED TO OUTIR FOR WRITE
 058D           	JR	NXTSEC
                
                PAGE
                
                
                
                ;	CHECK STATUS OF READ OR WRITE
                ;
                CHK$STAT:			; THIS ROUTINE CHECKS WHAT'S UP
 058F 211206    	LXI	H,STAT		; STATUS BUFFER
 0592 3A0D06    	LDA	BASE$PORT
 0595 57        	MOV	D,A		; DATA PORT ADDRESS STORED IN REG. D
 0596 3C        	INR	A
 0597 5F        	MOV	E,A		; CONTROL PORT ADDRESS STORED IN REG. E
 0598           	JR	CHK01
 059A 4A        CHKNXT: MOV	C,D		; INPUT FROM DATA PORT
 059B           	INP	A
 059D 77        	MOV	M,A		; SAVE IN MEMORY
 059E 4B        CHK01:	MOV	C,E		; INPUT FROM CONTROL PORT
 059F           	INP	A
 05A1 E6F0      	ANI	(MSG OR REQ OR CMND OR POUT)
 05A3 FE90      	CPI	(REQ OR CMND)
 05A5           	JRZ	CHKNXT
 05A7 FEB0      	CPI	(MSG OR REQ OR CMND)
 05A9           	JRNZ	CHK01
 05AB 4A        	MOV	C,D		; INPUT FROM DATA PORT
 05AC           	INP	A		; GET FINAL BYTE
 05AE 7E        	MOV	A,M		; AND THROW IT AWAY, GET STATUS
 05AF E603      	ANI	03		; EITHER BIT SET IS AN ERROR
 05B1 C9        	RET
                
                ****************************************************************
                
                ;
                ;	DATA BUFFERS AND STORAGE
                ;
 05B2 0000000000LUNDATA:DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; 16 BYTES OF DATA FOR EACH
 05C2 0000000000	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; LOGICAL UNIT -- PULLED FROM
 05D2 0000000000	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; MAGIC SECTOR ON
 05E2 0000000000	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; INITIALIZATION
                				     ; BYTE 1 : DRIVE/CONTROLLER TYPE
                				     ; BYTE 2 : CONTROL BYTE
                				     ; BYTES 3 - 10 : DRIVE CHARACTERISTIC DATA
                				     ; BYTES 11 - 16 : ASSIGN DRIVE TYPE
                				     ;				     COMMAND
 05F2 00        LUN:	DB	0		; LOGICAL UNIT NUMBER
 05F3 0000000000CMBFR:	DB	0,0,0,0,0,0	; COMMAND BUFFER
 05F9 0C00000000ICMND:	DB	INIT,0,0,0,0,0	; INITIALIZE DRIVE CHARACTERISTICS COMMAND
                				;					 STRING
 05FF 0100000000RCMND:	DB	RECAL,0,0,0,0,0 ; RESTORE COMMAND
 0605 0000      DATAPTR:DW	0		; POINTER TO LUNDATA FOR THIS L.U.N.
 0607 0000      SECPTR	DW	0		; POINTER TO CURRENT SECTOR TABLE ENTRY
 0609 0000      CURDPH	DW	0		; current disk parameter header
 060B 00        SELERR	DB	0		; SELECT ERROR FLAG
 060C 00        FLAGS:	DB	0		; BIT 7 = INITIALIZATION FLAG,
                				; BIT 6 = FLOPPY DISK FLAG
                				; BIT 5 = REMOVABLE MEDIA FLAG
                				; BIT 4 (SPARE)
                				; BITS 0-3 = PARTITION NUMBER,
                BASE$PORT:
 060D 00        	DB	0		; BASE PORT ADDRESS
 060E 00        DRIV0	DB	0		; FIRST PHYSICAL DRIVE NUMBER
                DRIV$LAST:			; LAST PHYSICAL DRIVE NUMBER
 060F 00        	DB	0
 0610 00        STRLUN	DB	0		; RELATIVE PARTITION NUMBER OF CURRENT LUN
 0611 00        PARTLUN DB	0		; NUMBER OF PARTITIONS IN CURRENT LUN
 0612 00        STAT:	DB	0
                ;
                ; DEBLOCKING VARIABLES
                ;
 0613 00        RD$FLAG:DB	0		; FLAG FOR PRE-READ
 0614 FF        HSTDSK	DB	0FFH
 0615 0000      HSTTRK	DW	0
 0617 00        HSTSEC	DB	0
 0618 00        REQDSK	DB	0
 0619 0000      REQTRK	DW	0
 061B 00        REQSEC	DB	0
 061C 00        BLCODE: DB	0		; SECTOR SIZE CODE (0=128,1=256,2=512,3=1024)
 061D 00        BLKSEC: DB	0		; LOCATION OF LOGICAL SECTOR WITHIN PHYSICAL
 061E 00        WRTYPE	DB	0
 061F 00        UNALLOC DB	0
 0620 0000      URECORD DW	0
 0622 00        RELDSK	DB	0		; DISK NUMBER RELATIVE TO 0
 0623 0000      CURDPB	DW	0		; ADDRESS OF CURRENT DISK PARAMETER BLOCK
 0625 00        BLKMSK	DB	0		; BLOCK MASK
 0626 00        OFFSET	DB	0
                
 0627 =         btend	equ	$
                
                ********************************************************
                ** BUFFERS
                ********************************************************
                
 0627           HSTBUF: DS	512
 0827           CSV0:	DS	128
 08A7           ALV0:	DS	256
                
 09A7           	END
