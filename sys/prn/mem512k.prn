 2032 =         vers equ '2 ' ; Oct 29, 2018  18:13   drm "MEM512K.ASM"
                ;****************************************************************
                ; Banked Memory BIOS module for CP/M 3 (CP/M plus)		*
                ; Copyright (c) 1983 Magnolia Microsystems			*
                ;****************************************************************
                	maclib Z80
                
 FFFF =         true	equ -1
 0000 =         false	equ not true
                
 000D =         cr	equ 13
 000A =         lf	equ 10
 0007 =         bell	equ 7
                
 0000 =         mmu	equ	000h	; base port of RAM256K
                
 0000 =         rd	equ	0	; mmu offset for read
 0004 =         wr	equ	4	; mmu offset for write
 0080 =         map	equ	080h	; mmu flag to enable mapping...
                
                ;  SCB registers
                	extrn @bnkbf,@cbnk,@dtacb,@dircb,@heapt
                
                ;  Variables for use by other modules
                	public @nbnk,@compg,@mmerr,@memstr
                	public @m512k,@t512k	; used by RD512K'3
                
                ;  Routines for use by other modules
                	public ?bnksl,?bnkck,?xmove,?mvccp,?move
                
                	cseg		; GENCPM puts CSEG stuff in common memory
                
 0000 04        @nbnk:	db	4	; actually, 8 but we save 4 for ramdisk...
 0001 C0        @compg:	db	0c0h
 0002 0D0A074E6F@mmerr: db	cr,lf,bell,'No RAM512K$'
 0010 00        @m512k:	db	mmu
 0011 52414D3531@memstr: db	'RAM512K ',0,'H8 512K RAM with MMU ',0,'v3.10'
 0035 3220      	dw	vers
 0037 24        	db	'$'
                
                ; Uses XMOVE semantics
                ; C=source bank, B=dest bank, HL=address, A=num recs
                ?mvccp:
 0038 F5        	push	psw
 0039 E5        	push	h
 003A CDAC00    	call	?xmove
 003D E1        	pop	h
 003E F1        	pop	psw
 003F 47        	mov	b,a
 0040 0E00      	mvi	c,0
                	srlr	b
 0042+CB38      	DB	0CBH, 38H + B
                	rarr	c	; BC = A * 128
 0044+CB19      	DB	0CBH, 18H + C
 0046 5D        	mov	e,l
 0047 54        	mov	d,h	; same address, diff banks
 0048 CD9300    	call	?move
 004B C9        	ret
                
                xbnksl:	
 004C F3        	di	; might already be disabled??
 004D C5        	push	b
 004E E5        	push	h
 004F 2A9000    	lhld	xtable+2
 0052 E5        	push	h
 0053 2A8E00    	lhld	xtable
                	jr	bnksl0	; restores HL, BC...
 0056+180F      	DB	18H,BNKSL0-$-1
                ; TODO: avoid redundant selection...
                ; But must handle xmove also...
                ?bnksl:
 0058 320000    	sta	@cbnk		; remember current bank
 005B C5        	push	b		; save register b for temp
 005C E5        	push	h		;
 005D 217B00    	lxi	h,table 	;
 0060 87        	add	a
 0061 87        	add	a
 0062 4F        	mov	c,a		;
 0063 0600      	mvi	b,0		;
 0065 09        	dad	b		;
 0066 E5        	push	h	; same mapping for WR
                bnksl0:	; HL = RD table entry, TOS = WR table entry
 0067 0604      	mvi	b,4
 0069 0EFF      	mvi	c,mmu-1
                bnksl1:
 006B 0C        	inr	c
                	outi
 006C+EDA3      	DB	0EDH,0A3H
                	jrnz	bnksl1
 006E+20FB      	DB	20H,BNKSL1-$-1
 0070 E1        	pop	h
 0071 0604      	mvi	b,4
                bnksl2:
 0073 0C        	inr	c
                	outi
 0074+EDA3      	DB	0EDH,0A3H
                	jrnz	bnksl2
 0076+20FB      	DB	20H,BNKSL2-$-1
 0078 E1        	pop	h		;
 0079 C1        	pop	b		; restore register b
 007A C9        	ret
                
                ; Once memory is verified, these all have 'map' bit set.
                @t512k:
                table:
 007B 00010203  	db	 0, 1, 2,3	; Bank 0 map pattern
 007F 04050603  	db	 4, 5, 6,3	; Bank 1 map pattern
 0083 08090A03  	db	 8, 9,10,3	; Bank 2 map pattern
 0087 0C0D0E03  	db	12,13,14,3	; Bank 3 map pattern
 008B 00        	db	0	; safety stop for RD512K'3
 0011 =         tablez	equ	$-table
                
 008C 0000      xcache:	dw	0
 008E 7B007B00  xtable:	dw	table,table
 0092 00        xflag:	db	0
                
 0093 3A9200    ?move:	lda	xflag
 0096 B7        	ora	a
 0097 C44C00    	cnz	xbnksl	; disables interrupts
                xxm0:
 009A EB        	xchg		; we are passed source in DE and dest in HL
                	ldir		; use Z80 block move instruction
 009B+EDB0      	DB	0EDH,0B0H
 009D EB        	xchg		; need next addresses in same regs
 009E B7        	ora	a
 009F C8        	rz
 00A0 3A0000    	lda	@cbnk
 00A3 CD5800    	call	?bnksl
 00A6 AF        	xra	a
 00A7 329200    	sta	xflag
 00AA FB        	ei	; is this OK??
 00AB C9        	ret
                
                ?xmove:
 00AC E5        	push	h
                	; cache mappings...
 00AD 2A8C00    	lhld	xcache
 00B0 B7        	ora	a
                	dsbc	b
 00B1+ED42      	DB	0EDH,B*8+42H
                	jrz	xnomap
 00B3+281D      	DB	28H,XNOMAP-$-1
                xremap:
                	sbcd	xcache
 00B5+ED43      	DB	0EDH,43H
 00B7+8C00      	DW	XCACHE
 00B9 D5        	push	d
 00BA 117B00    	lxi	d,table
 00BD 78        	mov	a,b	; WR bank number
 00BE 87        	add	a
 00BF 87        	add	a
 00C0 6F        	mov	l,a
 00C1 2600      	mvi	h,0
 00C3 19        	dad	d
 00C4 229000    	shld	xtable+2
 00C7 79        	mov	a,c	; RD bank number
 00C8 87        	add	a
 00C9 87        	add	a
 00CA 6F        	mov	l,a
 00CB 2600      	mvi	h,0
 00CD 19        	dad	d	; RD bank in HL
 00CE 228E00    	shld	xtable
 00D1 D1        	pop	d
                xnomap:
 00D2 AF        	xra	a
 00D3 3D        	dcr	a
 00D4 329200    	sta	xflag	; return NZ status (required?)
 00D7 E1        	pop	h
 00D8 C9        	ret
                
                	dseg	; this part can be banked
                
 0000 AF        noram:	xra	a	; disable banked memory
 0001 D300      	out	mmu
 0003 C9        	ret		; A=0 no banked memory
                
                ?bnkck:
 0004 AF        	xra	a
 0005 CD5800    	call	?bnksl	; setup mapping without enabling
 0008 114000    	lxi	d,40h	; a likely addr in low 16K
 000B 3E84      	mvi	a,4+map		; bank 1 map code
 000D D304      	out	mmu+wr
 000F 3E01      	mvi	a,1
 0011 12        	stax	d	;put bank number in 40h of respective bank
 0012 3E88      	mvi	a,8+map		; bank 2 map code
 0014 D304      	out	mmu+wr
 0016 3E02      	mvi	a,2
 0018 12        	stax	d	;put bank number in 40h of respective bank
 0019 3E8C      	mvi	a,12+map	; bank 3 map code
 001B D304      	out	mmu+wr
 001D 3E03      	mvi	a,3
 001F 12        	stax	d	;put bank number in 40h of respective bank
 0020 3E84      	mvi	a,4+map		; bank 1 map code
 0022 D300      	out	mmu
 0024 1A        	ldax	d
 0025 FE01      	cpi	1
 0027 C20000    	jnz	noram
 002A 3E88      	mvi	a,8+map		; bank 2 map code
 002C D300      	out	mmu
 002E 1A        	ldax	d
 002F FE02      	cpi	2
 0031 C20000    	jnz	noram
 0034 3E8C      	mvi	a,12+map	; bank 3 map code
 0036 D300      	out	mmu
 0038 1A        	ldax	d
 0039 FE03      	cpi	3
 003B C20000    	jnz	noram
                	; Set the "map" enable bit on all mappings
 003E 217B00    	lxi	h,table
 0041 0611      	mvi	b,tablez
                in6:	setb	7,m	; (HL) |= map
 0043+CBFE      	DB	0CBH,7*8+M+0C0H
 0045 23        	inx	h
                	djnz	in6
 0046+10FB      	DB	10H,IN6-$-1
 0048 AF        	xra	a
 0049 CD5800    	call	?bnksl	; this enables mapping...
                	; Allocate some buffers below BNKBDOS
 004C 2A0000    	lhld	@heapt
 004F 1100FC    	lxi	d,-1024	; max sector size = 1024
 0052 19        	dad	d
 0053 229C00    	shld	dirbf1
 0056 19        	dad	d
 0057 22AB00    	shld	dirbf2
 005A 19        	dad	d
 005B 227E00    	shld	dtabf1
 005E 19        	dad	d
 005F 228D00    	shld	dtabf2
 0062 220000    	shld	@heapt
 0065 217400    	lxi	h,dtacb1
 0068 220000    	shld	@dtacb
 006B 219200    	lxi	h,dircb1
 006E 220000    	shld	@dircb
 0071 3EFF      	mvi	a,true
 0073 C9        	ret		; A<>0 banked memory available
                
 0074 FF        dtacb1: db 0ffh ;drive
 0075 0000000000	db 0,0,0,0,0
 007A 00000000  	dw 0,0
 007E 0000      dtabf1:	dw	0
 0080 00        	db 0
 0081 8300      	dw dtacb2
                
 0083 FF        dtacb2: db 0ffh ;drive
 0084 0000000000	db 0,0,0,0,0
 0089 00000000  	dw 0,0
 008D 0000      dtabf2:	dw	0
 008F 00        	db 0
 0090 0000      	dw 0000 ;end of data buffers
                
 0092 FF        dircb1: db 0ffh ;drive
 0093 0000000000	db 0,0,0,0,0
 0098 00000000  	dw 0,0
 009C 0000      dirbf1:	dw	0
 009E 00        	db 0
 009F A100      	dw dircb2
                
 00A1 FF        dircb2: db 0ffh ;drive
 00A2 0000000000	db 0,0,0,0,0
 00A7 00000000  	dw 0,0
 00AB 0000      dirbf2:	dw	0
 00AD 00        	db 0
 00AE 0000      	dw 0000 ;end of DIR buffers
                
 00B0           	end
