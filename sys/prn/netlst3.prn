 2033 =         VERS equ '3 ' ; October 5, 1983  15:37	mjm  "NETLST3.ASM"
                	maclib	Z80
                
                ;*****************************************************
                ;**** CP/M 3.1 LST: module for network		 *****
                ;****  Copyright (C) 1983 Magnolia microsystems  *****
                ;*****************************************************
                
 0000 =         false	equ	0
 FFFF =         true	equ	not false
                
 0000 =         cpm	equ	0
                
 000D =         cr	equ	13
 000A =         lf	equ	10
 0007 =         bell	equ	7
                
 00F2 =         port	equ	0f2h
                
                ; Relative positions of message elements
 0000 =         SEQ	equ	0
 0001 =         FMT	equ	1
 0002 =         DID	equ	2
 0003 =         SID	equ	3
 0004 =         FNC	equ	4
 0005 =         SIZ	equ	5
 0006 =         MSG	equ	6	;message starts at frame+6
                
                 extrn	bnkdos,wbtrap,@cbnk,?bnksl,?dvtbl
                
 00CC =         dev0	equ	204
 0001 =         ndev	equ	1
                
                	cseg
 0000 EB02      	dw	thread
 0002 CC01      	db	dev0,ndev
 0004 C31600    	jmp	init
 0007 C38300    	jmp	inst
 000A C38500    	jmp	input
 000D C38300    	jmp	outst
 0010 C38600    	jmp	output
 0013 1900      	dw	string
 0015 0E00      	dw	chrtbl
 0017 3C00      	dw	xmodes
                
 0019 4C53543A20string: db	'LST: ',0,'- on MMS-net ',0,'v3.10'
 0032 3320      	dw	VERS
 0034 24        	db	'$'
                
 0035 05        serverID: db	5
 0036 C36200    	jmp	sendmsg
 0039 C38D00    	jmp	netstat
                
 003C 020000    xmodes: db	00000010b,0,0	;xmodes disabled
 003F 00        porta:	db	0	;part of "xmodes"
                
 0040           	ds	32
 0060           netstk: ds	0
 0060           usrstk: ds	2
                
                sendmsg:
 0062 60        	mov	h,b
 0063 69        	mov	l,c
 0064 119E01    	lxi	d,msgbuf+FMT
 0067 010601    	lxi	b,MSG+257-FMT
                	ldir
 006A+EDB0      	DB	0EDH,0B0H
 006C 019E01    	lxi	b,msgbuf+FMT
 006F 217A01    	lxi	h,sendmsg0
                bnkcall:
                	sspd	usrstk
 0072+ED73      	DB	0EDH,73H
 0074+6000      	DW	USRSTK
 0076 316000    	lxi	sp,netstk
 0079 3E00      	mvi	a,0
 007B CD0000    	call	?bnksl
 007E CD9500    	call	icall
 0081 F5        	push	psw	;status of send
 0082 3E01      	mvi	a,1
 0084 CD0000    	call	?bnksl
 0087 F1        	pop	psw
                	lspd	usrstk
 0088+ED7B      	DB	0EDH,07BH
 008A+6000      	DW	USRSTK
 008C C9        	ret
                
                netstat:
 008D 21F701    	lxi	h,Netsta-cnfgsz ;must be first instruction in routine.
 0090 21A402    	lxi	h,netstat0
                	jr	bnkcall
 0093+18DD      	DB	18H,BNKCALL-$-1
                
 0095 E9        icall:	pchl
                
 0096           rcvmsg: ds	1	;SEQ
 0097           	ds	1	;FMT
 0098           	ds	1	;DID
 0099           	ds	1	;SID
 009A           	ds	1	;FNC
 009B           	ds	1	;SIZ
 009C           	ds	257	;actual message
                
 019D           msgbuf: ds	MSG+257
                
                Netsta: 		; ;normally appended to end of CNFGTB, but
 02A4 00        maddr:	  db	0	; ;we need to make the common segment small.
 02A5 00        nstat:	  db	0	; ;
 02A6 00        sndsts:   db	0	; ;
 02A7 00        srsts:	  db	0	; ; bit0=cpflag, bit1=mailflag, 2=sndsts, 3=netsts
 02A8 9600      rmsg:	  dw	rcvmsg	; ; address of buffer that contains the mail.
 02AA           Nettbl:   ds	65	; ;
                
 02EB =         thread	equ	$
                
                	dseg
                
 0000 0D0A07786Derrmsg: db	cr,lf,bell,'xmit error$'
                
 000E 4E45544C53chrtbl: db	'NETLST',0000$0010b,0	;can do output (no input).
                
 0016 DBF2      init:	in	port
 0018 0E7C      	mvi	c,07cH
 001A E603      	ani	11b
 001C FE03      	cpi	11b
                	jrz	re0
 001E+280C      	DB	28H,RE0-$-1
 0020 0E78      	mvi	c,078h
 0022 DBF2      	in	port
 0024 E60C      	ani	1100b
 0026 FE0C      	cpi	1100b
                	jrz	re0
 0028+2802      	DB	28H,RE0-$-1
 002A 0E40      	mvi	c,40h
 002C 79        re0:	mov	a,c
 002D 323F00    	sta	porta
 0030 AF        	xra	a
 0031 32A702    	sta	srsts
 0034 32A602    	sta	sndsts
 0037 CD4B03    	call	runout	;clear any characters stacked up in DMA buffer.
 003A 3A3500    	lda	serverID
 003D 321E05    	sta	lstID+1
 0040 210000    	lxi	h,bnkdos	;Patch BNKBDOS to give us access to
 0043 11B704    	lxi	d,04b7h 	; ctrl-P Off.
 0046 19        	dad	d
 0047 01ED00    	lxi	b,ctrlP
 004A 36C3      	mvi	m,(JMP)
 004C 23        	inx	h
 004D 71        	mov	m,c
 004E 23        	inx	h
 004F 70        	mov	m,b
 0050 2A0000    	lhld	wbtrap	;trap warm boots from BIOS
 0053 11FC00    	lxi	d,warm$boot
                	sded	wbtrap
 0056+ED53      	DB	0EDH,53H
 0058+0000      	DW	WBTRAP
 005A 7C        	mov	a,h
 005B B5        	ora	l	;anybody else before us?
                	jrz	ini0
 005C+2808      	DB	28H,INI0-$-1
 005E 223801    	shld	chain0+1
 0061 3EC3      	mvi	a,(JMP)
 0063 323701    	sta	chain0
 0066 CDA402    ini0:	call	nws
 0069 3AA402    	lda	maddr	;node address
 006C 32FA04    	sta	cnfgtb+1
 006F 322205    	sta	sid1
 0072 AF        	xra	a
 0073 320A02    	sta	bsyflg
 0076 21CAFF    	lxi	h,?dvtbl-36H	;move console jump vectors to local storage
 0079 119B02    	lxi	d,const
 007C 010900    	lxi	b,9
                	ldir
 007F+EDB0      	DB	0EDH,0B0H
                	jr	listoff
 0081+1851      	DB	18H,LISTOFF-$-1
                
                outst:
 0083 AF        inst:	xra	a	;LST: device always ready.
 0084 3D        	dcr	a
 0085 C9        input:	ret	 
                
                output:
 0086 3A1F05    	lda	lstmsg
 0089 FEFF      	cpi	255
                	jrnz	lo3
 008B+2004      	DB	20H,LO3-$-1
 008D AF        	xra	a
 008E 321F05    	sta	lstmsg
 0091 212605    lo3:	lxi	h,lstbuf
 0094 85        	add	l
 0095 6F        	mov	l,a
 0096 3E00      	mvi	a,0
 0098 8C        	adc	h
 0099 67        	mov	h,a
 009A 71        	mov	m,c
 009B 3A1F05    	lda	lstmsg
 009E 3C        	inr	a
 009F 322405    	sta	lstmsg+SIZ
 00A2 79        	mov	a,c
 00A3 FEFF      	cpi	255
                	jrz	lo4
 00A5+2809      	DB	28H,LO4-$-1
 00A7 3A1F05    	lda	lstmsg
 00AA 3C        	inr	a
 00AB FE80      	cpi	128
                	jrc	lo1
 00AD+383A      	DB	38H,LO1-$-1
 00AF AF        	xra	a
 00B0 321F05    lo4:	sta	lstmsg
 00B3 012005    	lxi	b,lstmsg+1
 00B6 3A3500    	lda	serverID
 00B9 321E05    	sta	lstID+1
 00BC 322105    	sta	lstmsg+DID
 00BF CD7A01    	call	sendmsg0
 00C2 B7        	ora	a
 00C3 CA4001    	jz	recvmsg ;wait for response from printer-server
                ntwkerr:
 00C6 110000    	lxi	d,errmsg
 00C9 CD8E02    	call	msgout
 00CC 3EFF      	mvi	a,true
 00CE 320B02    	sta	abtflg
 00D1 C30000    	jmp	cpm
                
                listoff:
 00D4 3A1F05    	lda	lstmsg	;should we flush the LST: buffer and detatch ?
 00D7 FEFF      	cpi	255
 00D9 C8        	rz
 00DA 3A0B02    	lda	abtflg
 00DD B7        	ora	a
                	jrnz	lo0
 00DE+2004      	DB	20H,LO0-$-1
 00E0 0EFF      	mvi	c,255
                	jr	output
 00E2+18A2      	DB	18H,OUTPUT-$-1
                
 00E4 210B02    lo0:	lxi	h,abtflg
 00E7 3600      	mvi	m,false
 00E9 321F05    lo1:	sta	lstmsg
 00EC C9        	ret
                
 00ED E601      ctrlP:	ani	1
 00EF 77        	mov	m,a
 00F0 C0        	rnz		;if we just turned ^P on, no need to detatch printer.
 00F1 E5        	push	h
 00F2 D5        	push	d
 00F3 C5        	push	b
 00F4 CDD400    	call	listoff
 00F7 C1        	pop	b
 00F8 D1        	pop	d
 00F9 E1        	pop	h
 00FA AF        	xra	a
 00FB C9        	ret
                
                warm$boot:
 00FC CDA402    	call	nws
 00FF 3AA402    	lda	maddr	;node address
 0102 32FA04    	sta	cnfgtb+1
 0105 322205    	sta	sid1
 0108 AF        	xra	a
 0109 320A02    	sta	bsyflg
 010C CDD400    	call	listoff
 010F 21A702    	lxi	h,srsts
                	bit	1,m
 0112+CB4E      	DB	0CBH,1*8+M+40H
                	jrz	chain0
 0114+2821      	DB	28H,CHAIN0-$-1
                	res	1,m
 0116+CB8E      	DB	0CBH,1*8+M+80H
 0118 3A9900    	lda	rcvmsg+SID
 011B CD7602    	call	decout
 011E 223C01    	shld	nnum0
 0121 113A01    	lxi	d,mlmsg
 0124 CD8E02    	call	msgout
 0127 3A9B00    	lda	rcvmsg+SIZ
 012A 6F        	mov	l,a
 012B 2600      	mvi	h,0
 012D 23        	inx	h
 012E 119C00    	lxi	d,rcvmsg+MSG
 0131 19        	dad	d
 0132 3624      	mvi	m,'$'
 0134 CD8E02    	call	msgout	;DE=message
 0137 C90000    chain0: ret ! nop ! nop ;space for "JMP nnnn"
                
 013A 0D0A      mlmsg:	db	cr,lf
 013C 78783E24  nnum0:	db	'xx>$'
                
                recvmsg:
 0140 3AA502    	lda	nstat
 0143 E610      	ani	00010000b
 0145 C8        	rz
                re$receive:
 0146 3E01      	mvi	a,0001b ;wait for cpnet message.
 0148 CDC402    	call	get$frames
 014B 3AB503    	lda	xbuf+SID
 014E FE40      	cpi	64
 0150 D27301    	jnc	rec1
 0153 4F        	mov	c,a
 0154 0600      	mvi	b,0
 0156 21B904    	lxi	h,SEQtbl
 0159 09        	dad	b
 015A 3AB203    	lda	xbuf+SEQ
                	bit	7,a
 015D+CB7F      	DB	0CBH,7*8+A+40H
 015F CA6B01    	jz	rec0
 0162 AE        	xra	m
 0163 E60F      	ani	00001111b
 0165 CA4601    	jz	re$receive
 0168 3AB203    	lda	xbuf+SEQ
 016B E60F      rec0:	ani	00001111b
 016D 47        	mov	b,a
 016E 7E        	mov	a,m
 016F E6F0      	ani	11110000b
 0171 B0        	ora	b
 0172 77        	mov	m,a
 0173 21A702    rec1:	lxi	h,srsts
                	res	0,m
 0176+CB86      	DB	0CBH,0*8+M+80H
 0178 AF        	xra	a
 0179 C9        	ret
                
                sendmsg0:
 017A 0B        	dcx	b	;add in SEQ byte
 017B 0A        	ldax	b	;save what was there,
 017C 320702    	sta	savseq
                	sbcd	savmsg
 017F+ED43      	DB	0EDH,43H
 0181+0802      	DW	SAVMSG
 0183 3E0A      sm0:	mvi	a,10
 0185 320602    	sta	retr
 0188 3AA502    	lda	nstat
 018B E610      	ani	00010000b
 018D C8        	rz
 018E 210500    	lxi	h,SIZ	;point to size field
 0191 09        	dad	b
 0192 6E        	mov	l,m
 0193 2600      	mvi	h,0
 0195 110700    	lxi	d,MSG+1 	;add 5 bytes for header, plus bias
 0198 19        	dad	d
 0199 22A503    	shld	leno
 019C E5        	push	h
 019D C5        	push	b
 019E 210100    	lxi	h,FMT
 01A1 09        	dad	b
 01A2 7E        	mov	a,m
 01A3 32A403    	sta	funco
 01A6 210200    	lxi	h,DID
 01A9 09        	dad	b
 01AA 7E        	mov	a,m
 01AB 32A803    	sta	xbo+1
 01AE FE40      	cpi	64
                	jrnc	retry$send
 01B0+3015      	DB	30H,RETRY$SEND-$-1
 01B2 21B904    	lxi	h,SEQtbl
 01B5 85        	add	l
 01B6 6F        	mov	l,a
 01B7 3E00      	mvi	a,0
 01B9 8C        	adc	h
 01BA 67        	mov	h,a
 01BB 7E        	mov	a,m
 01BC 07        	rlc
 01BD 07        	rlc
 01BE 07        	rlc
 01BF 07        	rlc
 01C0 E60F      	ani	00001111b
 01C2 02        	stax	b
 01C3 3E10      	mvi	a,00010000b
 01C5 86        	add	m
 01C6 77        	mov	m,a
                retry$send:
 01C7 CD2A03    	call	put	;send header
 01CA E1        	pop	h
 01CB D1        	pop	d
 01CC D5        	push	d
 01CD E5        	push	h
 01CE CD3003    	call	put422	;send data
 01D1 21A702    	lxi	h,srsts
                	res	2,m	;prevent false-triggering
 01D4+CB96      	DB	0CBH,2*8+M+80H
 01D6 3E04      	mvi	a,0100b ;wait for sndsts
 01D8 CDC402    	call	get$frames
 01DB E1        	pop	h
 01DC D1        	pop	d
                	setb	7,m
 01DD+CBFE      	DB	0CBH,7*8+M+0C0H
 01DF 3AA602    	lda	sndsts
 01E2 B7        	ora	a	;indicate that at least the message got to the 77422.
                	jrz	msgok
 01E3+2814      	DB	28H,MSGOK-$-1
 01E5 FA3102    	jm	prtbsy
 01E8 3A0602    	lda	retr
 01EB 3D        	dcr	a
 01EC 320602    	sta	retr
                	jrz	error
 01EF+2804      	DB	28H,ERROR-$-1
 01F1 D5        	push	d
 01F2 E5        	push	h
                	jr	retry$send
 01F3+18D2      	DB	18H,RETRY$SEND-$-1
 01F5 AF        error:	xra	a
 01F6 3D        	dcr	a
                	jr	me0
 01F7+1803      	DB	18H,ME0-$-1
                
 01F9 320A02    msgok:	sta	bsyflg	;A=0
 01FC F5        me0:	push	psw
 01FD 3A0702    	lda	savseq
 0200 2A0802    	lhld	savmsg
 0203 77        	mov	m,a	;restore what was at SEQ
 0204 F1        	pop	psw
 0205 C9        	ret
                
 0206 00        retr:	db	0
                
 0207 00        savseq: db	0
 0208 0000      savmsg: dw	0
                
 020A 00        bsyflg: db	0
 020B 00        abtflg: db	0
                
 020C 0D0A507269bsymsg: db	cr,lf,'Printer owned by node '
 0224 78782C2077nnum:	db	'xx, waiting.$'
                
 0231 3A0A02    prtbsy: lda	bsyflg
 0234 B7        	ora	a
                	jrnz	bsy0
 0235+201B      	DB	20H,BSY0-$-1
 0237 2F        	cma
 0238 320A02    	sta	bsyflg
 023B 3AA602    	lda	sndsts
 023E E63F      	ani	00111111b	;get node number that owns printer
 0240 21A402    	lxi	h,maddr
 0243 BE        	cmp	m	;do we own the printer?
                	jrz	bsy2	;then its just busy, don't display message.
 0244+2812      	DB	28H,BSY2-$-1
 0246 CD7602    	call	decout
 0249 222402    	shld	nnum
 024C 110C02    	lxi	d,bsymsg
 024F CD8E02    	call	msgout
 0252 CD9B02    bsy0:	call	const
 0255 B7        	ora	a
                	jrnz	abtbsy
 0256+200F      	DB	20H,ABTBSY-$-1
 0258 219821    bsy2:	lxi	h,8600	;wait awhile before trying again. (approx 100 mS)
 025B 2B        bsy1:	dcx	h
 025C 7C        	mov	a,h
 025D B5        	ora	l
                	jrnz	bsy1
 025E+20FB      	DB	20H,BSY1-$-1
                	lbcd	savmsg
 0260+ED4B      	DB	0EDH,4BH
 0262+0802      	DW	SAVMSG
 0264 C38301    	jmp	sm0
                
 0267 CD9E02    abtbsy: call	conin
 026A AF        	xra	a
 026B CDF901    	call	msgok
 026E 3EFF      	mvi	a,true
 0270 320B02    	sta	abtflg
 0273 C30000    	jmp	cpm
                
 0276 FE64      decout: cpi	100
                	jrc	do0
 0278+3802      	DB	38H,DO0-$-1
 027A 3E63      	mvi	a,99
 027C 0E00      do0:	mvi	c,0
 027E 0C        do1:	inr	c
 027F D60A      	sui	10
                	jrnc	do1
 0281+30FB      	DB	30H,DO1-$-1
 0283 C60A      	adi	10
 0285 0D        	dcr	c
 0286 C630      	adi	'0'
 0288 67        	mov	h,a
 0289 79        	mov	a,c
 028A C630      	adi	'0'
 028C 6F        	mov	l,a
 028D C9        	ret
                
 028E 1A        msgout: ldax	d
 028F FE24      	cpi	'$'
 0291 C8        	rz
 0292 13        	inx	d
 0293 D5        	push	d
 0294 4F        	mov	c,a
 0295 CDA102    	call	conout
 0298 D1        	pop	d
                	jr	msgout
 0299+18F3      	DB	18H,MSGOUT-$-1
                
                ;
                ; Copy of bios jump vectors to the console routines-filled in at initialization
                ;
                
 029B C30000    const:	jmp	0
 029E C30000    conin:	jmp	0
 02A1 C30000    conout: jmp	0
                
                netstat0:
 02A4 F5        nws:	push	psw
 02A5 3E30      	mvi	a,030h	;request network status
 02A7 32A403    	sta	funco
 02AA 3E09      	mvi	a,9	;code for "CP/M net"
 02AC 32A803    	sta	xbo+1
 02AF 210000    	lxi	h,0
 02B2 22A503    	shld	leno
 02B5 CD2A03    	call	put
 02B8 21A702    	lxi	h,srsts
                	res	3,m
 02BB+CB9E      	DB	0CBH,3*8+M+80H
 02BD 3E08      	mvi	a,1000b ;wait for netsts
 02BF CDC402    	call	get$frames	;get response
 02C2 F1        	pop	psw
 02C3 C9        	ret
                
                get$frames:
 02C4 21A702    	lxi	h,srsts
 02C7 47        	mov	b,a
 02C8 A6        	ana	m
 02C9 C0        	rnz		;quit if frame has been received
 02CA C5        	push	b	;POP PSW will put mask in A again.
 02CB CD6B03    	call	get
 02CE 3AAB03    	lda	func
 02D1 FE30      	cpi	030h	;status frame
                	jrz	nsts
 02D3+283E      	DB	28H,NSTS-$-1
 02D5 FE38      	cpi	038h	;send status frame
                	jrz	ssts
 02D7+282D      	DB	28H,SSTS-$-1
 02D9 FE02      	cpi	002h	;unsolicited message. (does not terminate routine)
                	jrz	mail
 02DB+2811      	DB	28H,MAIL-$-1
 02DD FE01      	cpi	001h	;CP/NET response
                	jrz	cpnet
 02DF+281E      	DB	28H,CPNET-$-1
                gf1:	lded	rBC
 02E1+ED5B      	DB	0EDH,5BH
 02E3+AC03      	DW	RBC
 02E5 21B203    	lxi	h,xbuf
 02E8 CD7103    	call	get422
 02EB F1        gf0:	pop	psw
                	jr	get$frames
 02EC+18D6      	DB	18H,GET$FRAMES-$-1
                
                mail:	lded	rBC
 02EE+ED5B      	DB	0EDH,5BH
 02F0+AC03      	DW	RBC
 02F2 219600    	lxi	h,rcvmsg
 02F5 CD7103    	call	get422
 02F8 21A702    	lxi	h,srsts
                	setb	1,m
 02FB+CBCE      	DB	0CBH,1*8+M+0C0H
                	jr	gf0
 02FD+18EC      	DB	18H,GF0-$-1
                
 02FF 21A702    cpnet:	lxi	h,srsts
                	setb	0,m
 0302+CBC6      	DB	0CBH,0*8+M+0C0H
                	jr	gf1
 0304+18DB      	DB	18H,GF1-$-1
                
 0306 21A702    ssts:	lxi	h,srsts
                	setb	2,m
 0309+CBD6      	DB	0CBH,2*8+M+0C0H
 030B 3AAE03    	lda	rDE
 030E 32A602    	sta	sndsts
                	jr	gf0
 0311+18D8      	DB	18H,GF0-$-1
                
 0313 2AAE03    nsts:	lhld	rDE
 0316 22A402    	shld	Netsta
 0319 21AA02    	lxi	h,nettbl
                	lded	rBC
 031C+ED5B      	DB	0EDH,5BH
 031E+AC03      	DW	RBC
 0320 CD7103    	call	get422
 0323 21A702    	lxi	h,srsts
                	setb	3,m
 0326+CBDE      	DB	0CBH,3*8+M+0C0H
                	jr	gf0
 0328+18C1      	DB	18H,GF0-$-1
                
 032A 21A403    put:	lxi	h,funco
 032D 110700    	lxi	d,7
                ; Byte count (DE) must be greater than 1.
 0330 7B        put422: mov	a,e	;must handle blocks larger than 256 bytes
 0331 B7        	ora	a	;(Z80 OUTIR/INIR cannot)
 0332 5A        	mov	e,d
                	jrz	pu3
 0333+2801      	DB	28H,PU3-$-1
 0335 1C        	inr	e
 0336 47        pu3:	mov	b,a
 0337 3A3F00    	lda	porta
 033A 4F        	mov	c,a
 033B 0C        pu1:	inr	c
                pu0:	inp	a
 033C+ED78      	DB	0EDH,A*8+40H
 033E E604      	ani	0100b	;check channel 2 for idle
                	jrz	pu0
 0340+28FA      	DB	28H,PU0-$-1
 0342 0D        	dcr	c
                	outi		;send first byte
 0343+EDA3      	DB	0EDH,0A3H
                	jrnz	pu1
 0345+20F4      	DB	20H,PU1-$-1
 0347 1D        	dcr	e
                	jrnz	pu1
 0348+20F1      	DB	20H,PU1-$-1
 034A C9        	ret
                
 034B 3A3F00    runout: lda	porta
 034E 4F        	mov	c,a
 034F 0C        ro0:	inr	c
                	inp	a	;
 0350+ED78      	DB	0EDH,A*8+40H
                	bit	1,a	;
 0352+CB4F      	DB	0CBH,1*8+A+40H
 0354 C26503    	jnz	dummyINT5
 0357 E608      	ani	1000b
 0359 C8        	rz		;no characters waiting
 035A 0D        	dcr	c
                	inp	a
 035B+ED78      	DB	0EDH,A*8+40H
                	jr	ro0
 035D+18F0      	DB	18H,RO0-$-1
                
                INT5:	outp	a	;this routine will usually terminate "get422".
 035F+ED79      	DB	0EDH,A*8+41H
 0361 0D        	dcr	c
                	ini		;get last byte of transfer.
 0362+EDA2      	DB	0EDH,0A2H
 0364 C9        	ret		;and return to caller.
                
                
                dummyINT5:
                	outp	a	;turn off interupt
 0365+ED79      	DB	0EDH,A*8+41H
 0367 0D        	dcr	c
                	inp	a	;possible last character (discard it)
 0368+ED78      	DB	0EDH,A*8+40H
 036A C9        	ret
                
 036B 21AB03    get:	lxi	h,func
 036E 110700    	lxi	d,7
                ; byte count (DE) must be greater than 1.
 0371 7A        get422: mov	a,d
 0372 B3        	ora	e
 0373 C8        	rz
 0374 7B        	mov	a,e	;must handle blocks larger than 256 bytes
 0375 B7        	ora	a	;(Z80 OUTIR/INIR cannot)
 0376 5A        	mov	e,d
                	jrz	ge6
 0377+2801      	DB	28H,GE6-$-1
 0379 1C        	inr	e
 037A 47        ge6:	mov	b,a
 037B 3A3F00    	lda	porta
 037E 4F        	mov	c,a
 037F 0C        ge1:	inr	c
                ge0:	inp	a
 0380+ED78      	DB	0EDH,A*8+40H
                	bit	1,a
 0382+CB4F      	DB	0CBH,1*8+A+40H
 0384 C25F03    	jnz	INT5
 0387 E608      	ani	1000b	;check channel 3 for idle
                	jrz	ge0
 0389+28F5      	DB	28H,GE0-$-1
 038B 0D        	dcr	c
                	ini		;get the characters.
 038C+EDA2      	DB	0EDH,0A2H
                	jrnz	ge1
 038E+20EF      	DB	20H,GE1-$-1
 0390 1D        	dcr	e
                	jrnz	ge1
 0391+20EC      	DB	20H,GE1-$-1
 0393 0C        ge2:	inr	c	;double check: is interupt set on 77422 ?
                ge3:	inp	a
 0394+ED78      	DB	0EDH,A*8+40H
                	bit	1,a	;
 0396+CB4F      	DB	0CBH,1*8+A+40H
 0398 C26503    	jnz	dummyINT5
 039B E608      	ani	1000b
                	jrz	ge3
 039D+28F5      	DB	28H,GE3-$-1
 039F 0D        	dcr	c	;
                ge5:	inp	a	;At this point we have all the characters we want but
 03A0+ED78      	DB	0EDH,A*8+40H
                	jr	ge2	;the 77422 still has more to send (or it would have
 03A2+18EF      	DB	18H,GE2-$-1
                			;interupted us before this point) so we must continue
                			;to take characters untill it interupts us.
                
                
                ;Network output header:
 03A4           funco:	ds	1	;
 03A5           leno:	ds	2	;
 03A7           xbo:	ds	2	;
 03A9           	ds	2	;
                
                ;Network input header:
 03AB           func:	ds	1	;function code
 03AC           rBC:	ds	2	;message size (bytes)
 03AE           rDE:	ds	2	;
 03B0           rHL:	ds	2	;
                
 03B2           xbuf:	ds	MSG+257
                
 04B9 0000000000SEQtbl: db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 04D9 0000000000	db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                
 04F9 00        cnfgtb: db	0	;network status
 04FA 00        	db	0	;node address
 04FB 0000      	db	0,0	;drives A:-P: network status
 04FD 0000      	db	0,0	;
 04FF 0000      	db	0,0	;
 0501 0000      	db	0,0	;
 0503 0000      	db	0,0	;
 0505 0000      	db	0,0	;
 0507 0000      	db	0,0	;
 0509 0000      	db	0,0	;
 050B 0000      	db	0,0	;
 050D 0000      	db	0,0	;
 050F 0000      	db	0,0	;
 0511 0000      	db	0,0	;
 0513 0000      	db	0,0	;
 0515 0000      	db	0,0	;
 0517 0000      	db	0,0	;
 0519 0000      	db	0,0	;
 051B 0000      	db	0,0	;CON: local
 051D 8000      lstid:	db	80h,0	;LST: networked
 051F FF        lstmsg: db	255	;LST: index
 0520 00        	db	00h	;FMT
 0521 00        	db	0	;DID
 0522 00        sid1:	db	0	;SID
 0523 05        	db	05h	;FNC
 0524 00        	db	0	;SIZ
 0525 00        	db	0	;device number
                lstbuf: 		;LST: buffer (128 bytes)
 0526 0000000000 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 0546 0000000000 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 0566 0000000000 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 0586 0000000000 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 00AD =         cnfgsz equ $-cnfgtb
                
 05A6           	end
