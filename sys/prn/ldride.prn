 2031 =         VERS	EQU   '1 '  ; June 27, 2019 05:36 drm "ldride.asm"
                ***************************************************
                ;	Loader disk I/O module for MMS CP/M 2.24
                ;	for the GIDE bus interface 
                ;	Copyright (c) 1983 Magnolia Microsystems
                ***************************************************
                
                	MACLIB	z80
                	$-MACRO
                
                	public	btend		;end of system (boot stops loading there)
                	extrn	BDOS,CBOOT,DSKSTA,TIMEOT,MIXER,DIRBUF,DLOG
                	extrn	NEWDSK,NEWTRK,NEWSEC,DMAA,phytrk
                
 0046 =         DRIV0	EQU	70		; FIRST PHYSICAL DRIVE NUMBER
 0009 =         NDRIV	EQU	9
                
                ***************************************************
                **  PORTS AND CONSTANTS
                ***************************************************
 00F2 =         GPIO	EQU	0F2H		; SWITCH 501
                
 0060 =         GIDE$DA	equ	060h	; GIDE data port
 0061 =         GIDE$EF	equ	061h	; GIDE feature/error register
 0062 =         GIDE$SC	equ	062h	; GIDE sector count
 0063 =         GIDE$SE	equ	063h	; GIDE sector number	(lba7:0)
 0064 =         GIDE$CL	equ	064h	; GIDE cylinder low	(lba15:8)
 0065 =         GIDE$CH	equ	065h	; GIDE cylinder high	(lba23:16)
 0066 =         GIDE$DH	equ	066h	; GIDE drive+head	(drive+lba27:24)
 0067 =         GIDE$CS	equ	067h	; GIDE command/status
                
 0001 =         ERR	equ	00000001b	; error bit in GIDE$CS
 0040 =         RDY	equ	01000000b	; ready bit in GIDE$CS
 0008 =         DRQ	equ	00001000b	; DRQ bit in GIDE$CS
 0080 =         BSY	equ	10000000b	; busy bit in GIDE$CS
                
 000A =         DPHDPB	EQU	10
 0010 =         DPHL	EQU	16
 0015 =         DPBL	EQU	21
 0004 =         DDEFL	EQU	4
 000D =         CSTRNG	EQU	13
 0013 =         NPART	EQU	19
 0004 =         CBYTE	EQU	4
 0005 =         DDATA	EQU	5
 0003 =         DCTYPE	EQU	3
 0014 =         SECTBL	EQU	20
 002F =         DDPB	EQU	47
                
 0000 =         WRALL	EQU	0	; WRITE TO ALLOCATED
 0001 =         WRDIR	EQU	1	; WRITE TO DIRECTORY
 0002 =         WRUNA	EQU	2	; WRITE TO UNALLOCATED
 0003 =         READOP	EQU	3	; READ OPERATION
                
 2034 =         BTDRV	EQU	2034H	; BOOT DRIVE SAVE BY PROM
 25F0 =         STRNG	EQU	25F0H	; ASCII SEGMENT NUMBER SAVE BY BOOT LOADER
 2131 =         UNITNUM EQU	2131H	; PARTITION NUMBER SAVE BY EPROM
 2156 =         SEGOFF	EQU	2156H	; segment offset setup by ROM
 004E =         nsegmt	equ	004eh	; where to pass segment to CP/M 3
                
                ***************************************************
                ** START OF RELOCATABLE DISK I/O MODULE
                *************************************************** 
                
                ; Assume SPT is always 64 (16x512):
                ; Init:
                ;	seg_off = (STRNG - 'A') << 19		[256M segments]
                ;	partn(UNITNUM) += seg_off
                ; each I/O:
                ;	LBA = partn(UNITNUM) + (NEWTRK << 4) + (NEWSEC - 1)
                
                	cseg   
                 
 0000 C3E201    	jmp	INIT$GIDE
 0003 C3A001    	jmp	SEL$GIDE
 0006 C37202    	jmp	READ$GIDE
                
 0009 0000      	dw	0
 000B 0000      	dw	0     
                
                ;	TEXT
 000D 4749444520	DB	'GIDE ',0,'ATA system loader ',0,'v3.00'
 002B 31202400  	DW	VERS,'$'
                
                
 002F 0000000000DPH0:	DW	0,0,0,0,DIRBUF,DPB0,CSV0,ALV0
 003F 0000000000DPH1:	DW	0,0,0,0,DIRBUF,DPB1,CSV0,ALV0
 004F 0000000000DPH2:	DW	0,0,0,0,DIRBUF,DPB2,CSV0,ALV0
 005F 0000000000DPH3:	DW	0,0,0,0,DIRBUF,DPB3,CSV0,ALV0
 006F 0000000000DPH4:	DW	0,0,0,0,DIRBUF,DPB4,CSV0,ALV0
 007F 0000000000DPH5:	DW	0,0,0,0,DIRBUF,DPB5,CSV0,ALV0
 008F 0000000000DPH6:	DW	0,0,0,0,DIRBUF,DPB6,CSV0,ALV0
 009F 0000000000DPH7:	DW	0,0,0,0,DIRBUF,DPB7,CSV0,ALV0
 00AF 0000000000DPH8:	DW	0,0,0,0,DIRBUF,DPB8,CSV0,ALV0
                
                
                ;	SECTOR DEFINITION/TRANSLATION TABLE
                ;	already converted to 512b sectors
                ;	i.e. base LBA 27:0
                ;		-----ADDRESS----
 00BF 00000000  DDEFTBL:DB	0,   0,   0,   0
 00C3 00000000  	DB	0,   0,   0,   0
 00C7 00000000  	DB	0,   0,   0,   0
 00CB 00000000  	DB	0,   0,   0,   0
 00CF 00000000  	DB	0,   0,   0,   0
 00D3 00000000  	DB	0,   0,   0,   0
 00D7 00000000  	DB	0,   0,   0,   0
 00DB 00000000  	DB	0,   0,   0,   0
 00DF 00000000  	DB	0,   0,   0,   0
                
                ;
                ;
                ; DISK PARAMETER BLOCKS -- CONTAIN DUMMY DATA. REAL DATA IS OBTAINED FROM 
                ;			   MAGIC SECTOR ON INITIALIZATION OF PARTITION
                ;
 00E3 4000      DPB0:	DW	64		; SPT
 00E5 051F01    	DB	5,31,1		; BSH,BLM,EXM
 00E8 0300FF01  	DW	4-1,512-1	; DSM,DRM
 00EC F000      	DB	0F0H,0		; AL0,AL1
 00EE 00000200  	DW	0,2		; CKS,OFF
 00F2 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 00F5 FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 00F8 4000      DPB1:	DW	64		; SPT
 00FA 051F01    	DB	5,31,1		; BSH,BLM,EXM
 00FD 0300FF01  	DW	4-1,512-1	; DSM,DRM
 0101 F000      	DB	0F0H,0		; AL0,AL1
 0103 00000200  	DW	0,2		; CKS,OFF
 0107 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 010A FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 010D 4000      DPB2:	DW	64		; SPT
 010F 051F01    	DB	5,31,1		; BSH,BLM,EXM
 0112 0300FF01  	DW	4-1,512-1	; DSM,DRM
 0116 F000      	DB	0F0H,0		; AL0,AL1
 0118 00000200  	DW	0,2		; CKS,OFF
 011C 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 011F FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 0122 4000      DPB3:	DW	64		; SPT
 0124 051F01    	DB	5,31,1		; BSH,BLM,EXM
 0127 0300FF01  	DW	4-1,512-1	; DSM,DRM
 012B F000      	DB	0F0H,0		; AL0,AL1
 012D 00000200  	DW	0,2		; CKS,OFF
 0131 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 0134 FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 0137 4000      DPB4:	DW	64		; SPT
 0139 051F01    	DB	5,31,1		; BSH,BLM,EXM
 013C 0300FF01  	DW	4-1,512-1	; DSM,DRM
 0140 F000      	DB	0F0H,0		; AL0,AL1
 0142 00000200  	DW	0,2		; CKS,OFF
 0146 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 0149 FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 014C 4000      DPB5:	DW	64		; SPT
 014E 051F01    	DB	5,31,1		; BSH,BLM,EXM
 0151 0300FF01  	DW	4-1,512-1	; DSM,DRM
 0155 F000      	DB	0F0H,0		; AL0,AL1
 0157 00000200  	DW	0,2		; CKS,OFF
 015B 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 015E FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 0161 4000      DPB6:	DW	64		; SPT
 0163 051F01    	DB	5,31,1		; BSH,BLM,EXM
 0166 0300FF01  	DW	4-1,512-1	; DSM,DRM
 016A F000      	DB	0F0H,0		; AL0,AL1
 016C 00000200  	DW	0,2		; CKS,OFF
 0170 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 0173 FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 0176 4000      DPB7:	DW	64		; SPT
 0178 051F01    	DB	5,31,1		; BSH,BLM,EXM
 017B 0300FF01  	DW	4-1,512-1	; DSM,DRM
 017F F000      	DB	0F0H,0		; AL0,AL1
 0181 00000200  	DW	0,2		; CKS,OFF
 0185 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 0188 FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
 018B 4000      DPB8:	DW	64		; SPT
 018D 051F01    	DB	5,31,1		; BSH,BLM,EXM
 0190 0300FF01  	DW	4-1,512-1	; DSM,DRM
 0194 F000      	DB	0F0H,0		; AL0,AL1
 0196 00000200  	DW	0,2		; CKS,OFF
 019A 028000    	DB	00000010B,10000000B,0  ; MODE BYTES
 019D FFFFFF    	DB	0FFH,0FFH,0FFH	; MODE MASKS
                
                ;	SELECT DISK CODE
                ;
                SEL$GIDE:
 01A0 AF        	xra	a
 01A1 325903    	sta	SELERR		; NO SELECT ERRORS (YET)
 01A4 3A5A03    	lda	PARTLUN
 01A7 47        	mov	b,a
 01A8 3A0000    	lda	NEWDSK
 01AB D646      	sui	DRIV0
 01AD B8        	cmp	b
 01AE D2D901    	jnc	ERREXT
 01B1 47        	mov	b,a
 01B2 11BF00    	lxi	d,DDEFTBL
 01B5 6F        	mov	l,a		; NOW POINT TO THE CORRECT
 01B6 2600      	mvi	h,0		; ENTRY IN THE SECTOR
 01B8 29        	dad	h		; OFFSET TABLE
 01B9 29        	dad	h		; *4
 01BA 19        	dad	d
 01BB 225503    	shld	SECPTR
 01BE 211F00    	lxi	h,DPH0-DPHL	; POINT TO DPH TABLE
 01C1 111000    	lxi	d,DPHL		; LENGTH OF DPH's
 01C4 04        	inr	b
 01C5 19        SEL1:	dad	d
 01C6           	djnz	SEL1		; CALCULATE POINTER TO REQUESTED DPH
 01C8 225703    	shld	curdph		
 01CB 110A00    	lxi	d,DPHDPB
 01CE 19        	dad	d		; POINT TO ADDRESS OF DPB
 01CF CD2103    	call	HLIHL		; DPB ADDRESS IN HL
 01D2 226003    	shld	CURDPB		; SAVE IT
 01D5 2A5703    	lhld	curdph
 01D8 C9        	ret
                
 01D9 3E01      ERREXT: mvi	a,1
 01DB 325903    	sta	SELERR
 01DE 210000    	lxi	h,0
 01E1 C9        	ret
                
                INIT$GIDE:
                	; gather info from bootloader
 01E2 3A3121    	lda	UNITNUM		;FROM BOOT LOADER
 01E5 C646      	adi	DRIV0
 01E7 320000    	sta	MIXER
 01EA 2A5621    	lhld	SEGOFF		;from ROM
 01ED 224E00    	shld	nsegmt		;hope it is safe here
                	; since we only have one disk, init partn table now.
                	; read "magic sector"
 01F0 226203    	shld	CURLBA+0
 01F3 210000    	lxi	h,0
 01F6 226403    	shld	CURLBA+2		; phy sec 0 = partition table
 01F9 CDBE02    	call	READ
 01FC C0        	rnz	; error
 01FD 3A7D03    	lda	HSTBUF+NPART	; num partns
 0200 325A03    	sta	PARTLUN		; use all partitons
                	; copy over all DPBs
 0203 3A5A03    	lda	PARTLUN		; compute length of DPB block
 0206 47        	mov	b,a
 0207 210000    	lxi	h,0		; CALCULATE TOTAL LENGTH OF DPB'S TO BE MOVED 
 020A 111500    	lxi	d,DPBL
 020D 19        NXTLEN:	dad	d
 020E           	djnz	NXTLEN
 0210 44        	mov	b,h		; PUT LENGTH IN BC
 0211 4D        	mov	c,l
 0212 11E300    	lxi	d,DPB0
 0215 219903    	lxi	h,HSTBUF+DDPB	; PUT FROM ADDRESS IN HL
 0218           	ldir
                	; copy over sector (partition) offsets,
                	; converting from LBA and 4-byte entries.
 021A           	lxix	DDEFTBL		; destination start
 021E 217E03    	lxi	h,HSTBUF+SECTBL	; source start
 0221 3A5A03    	lda	PARTLUN		; num entries
 0224 47        	mov	b,a
 0225 C5        nxtdef:	push	b
 0226 3A5621    	lda	SEGOFF+0; LBA27:24 is fixed
 0229           	stx	a,+0
 022C           	inxix
 022E 0603      	mvi	b,3
 0230 3A5721    	lda	SEGOFF+1; LBA23:19 is segment offset
 0233 57        	mov	d,a	; carry-in
 0234 7E        	mov	a,m
 0235 E61F      	ani	00011111b	; must clear LUN bits
 0237 77        	mov	m,a
                nxdef0:
 0238 1E00      	mvi	e,0
 023A 7E        	mov	a,m
 023B 23        	inx	h
 023C           	srlr	a
 023E           	rarr	e
 0240           	srlr	a
 0242           	rarr	e
 0244 B2        	ora	d	; carry-in from previous
 0245           	stx	a,+0
 0248           	inxix
 024A 53        	mov	d,e	; carry-out becomes next carry-in
 024B           	djnz	nxdef0
 024D C1        	pop	b
 024E           	djnz	nxtdef
                	; now add in segment offset
 0250 21BF00    	lxi	h,DDEFTBL
 0253 23        	inx	h	; LBA+1 is where segment goes
 0254 110400    	lxi	d,4	; length of table entries
 0257 3A5A03    	lda	PARTLUN	; num entries
 025A 47        	mov	b,a
 025B 3A5721    	lda	SEGOFF+1
 025E 4F        	mov	c,a
                nxdef1:
 025F 7E        	mov	a,m
 0260 B1        	ora	c	; bits don't conflict
 0261 77        	mov	m,a
 0262 19        	dad	d	; jump to next entry
 0263           	djnz	nxdef1
                	; anything else to do?
 0265 AF        	xra	a
 0266 C9        	ret
                
                ; HL, DE are LBA buffers to be compared
 0267 0604      cmplba:	mvi	b,4
                cmplba0:
 0269 1A        	ldax	d
 026A BE        	cmp	m
 026B C0        	rnz
 026C 23        	inx	h
 026D 13        	inx	d
 026E           	djnz	cmplba0
 0270 AF        	xra	a
 0271 C9        	ret
                
                READ$GIDE:
 0272 3A5903    	lda	SELERR
 0275 B7        	ora	a
 0276 C0        	rnz
 0277 2A0000    	lhld	phytrk
 027A 225C03    	shld	REQTRK
 027D 0E00      	mvi	c,0		; CALCULATE PHYSICAL SECTOR
 027F 3A0000    	lda	NEWSEC
 0282           	srlr	a		; DIVIDE ACCUMULATOR BY 2
 0284           	rarr	c		; SAVE OVERFLOW BIT
 0286           	srlr	a		; DIVIDE ACCUMULATOR BY 4
 0288           	rarr	c		; SAVE OVERFLOW BIT
 028A 325E03    	sta	REQSEC		; SAVE IT
 028D 79        	mov	a,c
 028E 07        	rlc
 028F 07        	rlc			; sub-sector index
 0290 325F03    	sta	BLKSEC		; STORE IT
 0293 CDD202    	call	SET$LBA		; setup CURLBA from REQTRK/SEC
                	; only one disk, each partn LBAs are unique
 0296 216603    	lxi	h,HSTLBA
 0299 116203    	lxi	d,CURLBA
 029C CD6702    	call	cmplba
 029F CAA602    	jz	NOREAD		; no pre-read required
                	; no flushing required - we never write
 02A2 CDBE02    	call	READ		; READ THE SECTOR
 02A5 C0        	rnz
 02A6 216A03    NOREAD: lxi	h,HSTBUF	; POINT TO START OF SECTOR BUFFER
 02A9 018000    	lxi	b,128
 02AC 3A5F03    	lda	BLKSEC		; POINT TO LOCATION OF CORRECT LOGICAL SECTOR
 02AF 3D        MOVIT1: dcr	a
 02B0 FAB602    	jm	MOVIT2
 02B3 09        	dad	b
 02B4           	jr	MOVIT1
 02B6           MOVIT2: lded	DMAA		; POINT TO DMA
 02BA           	ldir			; MOVE IT
 02BC AF        	xra	a		; FLAG NO ERROR
 02BD C9        	ret			; RETURN TO BDOS
                
                ;
                ;	READ A PHYSICAL SECTOR CODE
                ;
                READ:
 02BE CD0503    	call	SET$SEC 	; set ctrl regs from CURLBA
 02C1 CD2603    	call	GIDERD		; DO READ OR WRITE
 02C4 C0        	rnz
 02C5 216203    	lxi	h,CURLBA
 02C8 116603    	lxi	d,HSTLBA	; SET UP NEW BUFFER PARAMETERS
 02CB 010400    	lxi	b,4
 02CE           	ldir
 02D0 AF        	xra	a
 02D1 C9        	ret
                
                ;	ABSOLUTE SECTOR NUMBER
                ;
                ;	CALCULATE THE REQUESTED SECTOR
                ;
                SET$LBA:
                	; note: LBA is stored big-endian, LHLD/SHLD are little-endian
                	; so H,D are LSB and L,E are MSB.
 02D2 2A5C03    	lhld	REQTRK		; GET REQUESTED TRACK
 02D5 5D        	mov	e,l	;
 02D6 6C        	mov	l,h	;
 02D7 63        	mov	h,e	; bswap HL
 02D8 110000    	lxi	d,0
 02DB 0604      	mvi	b,4		; shift 4 bits left (16 psec/trk)
                stlba0:
 02DD           	slar	h
 02DF           	rarr	l
 02E1           	rarr	d	; can't carry out
 02E3           	djnz	stlba0
                	; sector can't carry - 0-15 into vacated bits
 02E5 3A5E03    	lda	REQSEC		; GET REQUESTED SECTOR
 02E8 B4        	ora	h
 02E9 67        	mov	h,a
 02EA 226403    	shld	CURLBA+2
 02ED EB        	xchg
 02EE 226203    	shld	CURLBA+0
                	; add 32-bit values LBA += *(SECPTR)
 02F1 216503    	lxi	h,CURLBA+3
 02F4           	lded	SECPTR	; adjusted by SEGOFF already
 02F8 13        	inx	d
 02F9 13        	inx	d
 02FA 13        	inx	d	; SECPTR+3
                	; CY is cleared above
 02FB 0604      	mvi	b,4
                stlba1:
 02FD 1A        	ldax	d
 02FE 8E        	adc	m
 02FF 77        	mov	m,a
 0300 2B        	dcx	h
 0301 1B        	dcx	d
 0302           	djnz	stlba1
 0304 C9        	ret
                
                SET$SEC:
 0305 216203    	lxi	h,CURLBA	; adjusted by SEGOFF already
 0308 7E        	mov	a,m
 0309 F6E0      	ori	11100000b	; LBA mode, etc
 030B D366      	out	GIDE$DH
 030D 23        	inx	h
 030E 7E        	mov	a,m
 030F D365      	out	GIDE$CH
 0311 23        	inx	h
 0312 7E        	mov	a,m
 0313 D364      	out	GIDE$CL
 0315 23        	inx	h
 0316 7E        	mov	a,m
 0317 D363      	out	GIDE$SE
 0319 3E01      	mvi	a,1
 031B D362      	out	GIDE$SC	; always 1 sector at a time
 031D AF        	xra	a
 031E D361      	out	GIDE$EF	; feature always zero?
 0320 C9        	ret
                
 0321 7E        HLIHL:	mov	a,m
 0322 23        	inx	h
 0323 66        	mov	h,m
 0324 6F        	mov	l,a
 0325 C9        	ret
                
                ;
                ;	ACTUAL READ OF DATA
                ;	controller registers already set
                ;
                GIDERD: 			; THIS ROUTINE IS FOR READING
 0326 3E20      	mvi	a,20h
 0328 D367      	out	GIDE$CS		; start command
 032A AF        	xra	a
 032B 320000    	sta	DSKSTA
 032E 216A03    	lxi	h,HSTBUF	; AND WRITING DATA
 0331 0E60      	mvi	c,GIDE$DA	; DATA PORT ADDRESS TO REG. C
 0333 0600      	mvi	b,0		; 256 bytes per INIR/OUTIR
 0335 DB67      GIDECK: in	GIDE$CS		; FIRST CHECK FOR DRIVE READY
 0337           	bit	7,a		; BSY
 0339           	jrnz	GIDECK
 033B           	bit	0,a		; ERR
 033D           	jrnz	rwerr0
 033F           	bit	6,a		; RDY
 0341           	jrz	rwerr
 0343           	bit	3,a		; DRQ
 0345           	jrz	GIDECK
 0347           	inir
 0349           	inir
 034B AF        	xra	a
 034C C9        	ret	; ZR = success
                rwerr0:
 034D DB61      	in	GIDE$EF
 034F 320000    	sta	DSKSTA		; STORE STATUS
                rwerr:
 0352 AF        	xra	a
 0353 3C        	inr	a
 0354 C9        	ret	; NZ = error
                
                ****************************************************************
                
                ;
                ;	DATA BUFFERS AND STORAGE
                ;
 0355 0000      SECPTR	DW	0		; POINTER TO CURRENT SECTOR TABLE ENTRY
 0357 0000      CURDPH	DW	0		; current disk parameter header
 0359 00        SELERR	DB	0		; SELECT ERROR FLAG
 035A 00        PARTLUN DB	0		; NUMBER OF PARTITIONS IN CURRENT LUN
 035B 00        DSKERR:	db	0
                ;
                ; DEBLOCKING VARIABLES
                ;
 035C 0000      REQTRK	DW	0
 035E 00        REQSEC	DB	0
 035F 00        BLKSEC: DB	0		; LOCATION OF LOGICAL SECTOR WITHIN PHYSICAL
 0360 0000      CURDPB	DW	0		; ADDRESS OF CURRENT DISK PARAMETER BLOCK
                
 0362 00000000  CURLBA:	db	0,0,0,0
 0366 FF000000  HSTLBA:	db	0ffh,0,0,0
                
 036A =         btend	equ	$
                
                ********************************************************
                ** BUFFERS
                ********************************************************
                
 036A           HSTBUF: DS	512
 056A           CSV0:	DS	128
 05EA           ALV0:	DS	256
                
 06EA           	END
