CP/M RMAC ASSEM 1.1	#001	GIDE- DRIVER FOR MMS CP/M 3 WITH ATA INTERFACE

 2032 =         VERS EQU '2 ' ; Apr 4, 2020 08:06 drm "GIDE'3.ASM"
                *************************************************************************
                
                	TITLE	'GIDE- DRIVER FOR MMS CP/M 3 WITH ATA INTERFACE'
                	MACLIB	Z80
                	$*MACRO
                
                	extrn	@dph,@rdrv,@side,@trk,@sect,@dma,@dbnk,@dstat,@intby
                	extrn	@dtacb,@dircb,@scrbf,@rcnfg,@cmode,@lptbl,@login
                	extrn	?bnksl,?halloc
                
 004E =         nsegmt	equ	004eh	; where to pass segment to CP/M 3
                
                **************************************************************************
                ; Configure the number of partitions (numparX) on each LUN in your system
                ;  and if the LUN is removable (true) or not (false).
                **************************************************************************
                
 0000 =         false	equ	0
 FFFF =         true	equ	not false
                
                ; Logical Unit 0 characteristics
                
 0008 =         numpar0 equ	8		; number of partitions on LUN
                
 0008 =         ndev	equ	numpar0
 0046 =         dev0	equ	70
                
                *************************************************************************
                **  PORTS AND CONSTANTS
                *************************************************************************
                
 00F2 =         GPIO	EQU	0F2H		; SWITCH 501
                
 0080 =         GIDE	equ	080h	; GIDE base port
 0088 =         GIDE$DA	equ	GIDE+8	; GIDE data port
 0089 =         GIDE$EF	equ	GIDE+9	; GIDE feature/error register
 008A =         GIDE$SC	equ	GIDE+10	; GIDE sector count
 008B =         GIDE$SE	equ	GIDE+11	; GIDE sector number	(lba7:0)
 008C =         GIDE$CL	equ	GIDE+12	; GIDE cylinder low	(lba15:8)
 008D =         GIDE$CH	equ	GIDE+13	; GIDE cylinder high	(lba23:16)
 008E =         GIDE$DH	equ	GIDE+14	; GIDE drive+head	(drive+lba27:24)
 008F =         GIDE$CS	equ	GIDE+15	; GIDE command/status
                
 0001 =         ERR	equ	00000001b	; error bit in GIDE$CS
 0040 =         RDY	equ	01000000b	; ready bit in GIDE$CS
 0008 =         DRQ	equ	00001000b	; DRQ bit in GIDE$CS
 0080 =         BSY	equ	10000000b	; busy bit in GIDE$CS
                
 0011 =         dpbl	equ	17	; length of CP/M 3.0 dpb
 0200 =         alvl	equ	512	; size of allocation vector
 0100 =         csvl	equ	256	; size of check sum vector
 0008 =         modlen	equ	8	; length of each mode byte table entry
 0013 =         datlen	equ	19	; length of each lun data entry
 0010 =         bcode	equ	16	; offset in lun data of the blk code
 0010 =         initflg equ	16	;    "   "   "   "   of lun initialization flag
CP/M RMAC ASSEM 1.1	#002	GIDE- DRIVER FOR MMS CP/M 3 WITH ATA INTERFACE

 0011 =         parstr	equ	17	;    "   "   "   "   of partition start of lun
 0012 =         numpar	equ	18	;    "   "   "   "   of the number of partitions
                
 000D =         CSTRNG	EQU	13	; Offsets of data in magic sector
 0013 =         NPART	EQU	19
 0004 =         CBYTE	EQU	4
 0005 =         DDATA	EQU	5
 0003 =         DCTYPE	EQU	3
 0014 =         SECTBL	EQU	20
 002F =         DDPB	EQU	47
                
 0000 =         WRALL	EQU	0	; WRITE TO ALLOCATED
 0001 =         WRDIR	EQU	1	; WRITE TO DIRECTORY
 0002 =         WRUNA	EQU	2	; WRITE TO UNALLOCATED
 0003 =         READOP	EQU	3	; READ OPERATION
                
                ***************************************************
                	cseg
                
 0000 2901      	dw	thread
 0002 4608      driv0	db	dev0,ndev
 0004 C3C810    	jmp	init$gide
 0007 C3D210    	jmp	login
 000A C37F11    	jmp	read$gide
 000D C3AC11    	jmp	write$gide
 0010 1600      	dw	string
 0012 00004300  	dw	dphtbl,modtbl
                
 0016 4749444520string: db	'GIDE ',0,'ATA Interface ('
 002B 38        	db	ndev+'0'
 002C 2070617274	db	' partitions) ',0,'v3.10'
 003F 32202400  	dw	VERS,'$'
                
                ; Mode byte table for GIDE driver
                
                modtbl:
 0000 #         drv	set	0
                	rept	numpar0
                	db	1000$0000b+drv,000$00000b,00000000b,00000000b
                	db	11111111b,11111111b,11111111b,11111111b
                drv	set	drv+1
                	endm
 0043+80000000
 0047+FFFFFFFF
 004B+81000000
 004F+FFFFFFFF
 0053+82000000
 0057+FFFFFFFF
 005B+83000000
 005F+FFFFFFFF
 0063+84000000
 0067+FFFFFFFF
 006B+85000000
 006F+FFFFFFFF
 0073+86000000
 0077+FFFFFFFF
CP/M RMAC ASSEM 1.1	#003	GIDE- DRIVER FOR MMS CP/M 3 WITH ATA INTERFACE

 007B+87000000
 007F+FFFFFFFF
                
                ; Disk parameter tables
                
                dpb:
                	rept	ndev
                	ds	dpbl
                	endm
 0083+
 0094+
 00A5+
 00B6+
 00C7+
 00D8+
 00E9+
 00FA+
                
                	$-MACRO
                ;
                ;	ACTUAL READ-WRITE OF DATA
                ;
                
                giderd:
 010B 3A0000    	lda	@dbnk
 010E CD0000    	call	?bnksl
 0111           	inir
 0113           	inir
 0115 AF        	xra	a
 0116 CD0000    	call	?bnksl		; re-select bank 0
 0119 C9        	ret
                
                gidewr:
 011A 3A0000    	lda	@dbnk
 011D CD0000    	call	?bnksl
 0120           	outir
 0122           	outir
 0124 AF        	xra	a
 0125 CD0000    	call	?bnksl		; re-select bank 0
 0128 C9        	ret
                
 0129 =         thread	equ	$
                
                	dseg
                	$*MACRO
                
                
                ; Disk parameter headers for the GIDE driver
                
 0000 #         ncsv	set	0
 0000 #         drv	set	0
                
                dphtbl:
                	rept	numpar0
                	dw	0,0,0,0,0,0,dpb+(drv*dpbl)
                	dw	0	; no CSV - DPB.CKS must be 8000h
CP/M RMAC ASSEM 1.1	#004	GIDE- DRIVER FOR MMS CP/M 3 WITH ATA INTERFACE

                	dw	alv+(drv*alvl),@dircb,@dtacb,0
                	db	0
                drv	set	drv+1
                	endm
 0000+0000000000
 000E+0000
 0010+C800000000
 0018+00
 0019+0000000000
 0027+0000
 0029+C802000000
 0031+00
 0032+0000000000
 0040+0000
 0042+C804000000
 004A+00
 004B+0000000000
 0059+0000
 005B+C806000000
 0063+00
 0064+0000000000
 0072+0000
 0074+C808000000
 007C+00
 007D+0000000000
 008B+0000
 008D+C80A000000
 0095+00
 0096+0000000000
 00A4+0000
 00A6+C80C000000
 00AE+00
 00AF+0000000000
 00BD+0000
 00BF+C80E000000
 00C7+00
                
                ; Allocation vectors
                
                alv:
                	rept	ndev
                	ds	alvl
                	endm
 00C8+
 02C8+
 04C8+
 06C8+
 08C8+
 0AC8+
 0CC8+
 0EC8+
                
                ; Check sum vectors for removable media (none)
                
                csv:
                	rept	ncsv
CP/M RMAC ASSEM 1.1	#005	GIDE- DRIVER FOR MMS CP/M 3 WITH ATA INTERFACE

                	ds	csvl
                	endm
                
                	$-MACRO
                
                ;
                ;	DRIVER INITIALIZATION CODE
                ;
                
                init$gide:
                	; anything to do? Leave reading of magic sector until
                	; first drive access?
 10C8 2A4E00    	lhld	nsegmt		;grab this before it's gone...
 10CB 223212    	shld	segoff
 10CE AF        	xra	a
 10CF D389      	out	GIDE$EF		; ensure this reg is sane
 10D1 C9        	ret
                
 10D2 3A5C12    login:	lda	init
 10D5 3C        	inr	a
 10D6           	jrnz	login0
 10D8 325C12    	sta	init
 10DB CD0511    	call	init$hard
                login0:
 10DE 3A1300    	lda	npart
 10E1 5F        	mov	e,a
 10E2 3A0000    	lda	@rdrv
 10E5 BB        	cmp	e	; See if loging in a drive that doesn't exist
 10E6 D2A911    	jnc	rwerr
                	; Note: computation not needed if already set.
                	; ?halloc takes are of that.
 10E9 2A0000    	lhld	@dph
 10EC 110C00    	lxi	d,12	; offset of DPH.DPB
 10EF 19        	dad	d
 10F0 5E        	mov	e,m
 10F1 23        	inx	h
 10F2 56        	mov	d,m
 10F3 210700    	lxi	h,7	; offset of DPB.DRM
 10F6 19        	dad	d
 10F7 7E        	mov	a,m
 10F8 23        	inx	h
 10F9 66        	mov	h,m
 10FA 6F        	mov	l,a	; HL=DRM
 10FB 23        	inx	h	; num DIR ents
                	; TODO: check overflow? must be < 8192
 10FC 29        	dad	h
 10FD 29        	dad	h	; HL*=4: HASH size
 10FE 4D        	mov	c,l
 10FF 44        	mov	b,h
 1100 CD0000    	call	?halloc
 1103 AF        	xra	a
 1104 C9        	ret
                
                init$hard:
                	; since we only have one disk, init partn table now.
                	; read "magic sector" - LBA 0 of chosen disk segment.
CP/M RMAC ASSEM 1.1	#006	GIDE- DRIVER FOR MMS CP/M 3 WITH ATA INTERFACE

 1105 210000    	lxi	h,@scrbf	; use bios scratch buffer for magic sector
 1108 220000    	shld	@dma	; is this safe now?
 110B AF        	xra	a
 110C 320000    	sta	@dbnk	; is this safe now?
 110F 2A3212    	lhld	segoff
 1112 223412    	shld	curlba+0
 1115 210000    	lxi	h,0
 1118 223612    	shld	curlba+2		; phy sec 0 = partition table
 111B CD1612    	call	stlba2
 111E CD8211    	call	read$raw
 1121 C0        	rnz	; error
 1122 3A1300    	lda	@scrbf+NPART
 1125 FE08      	cpi	numpar0
 1127           	jrc	ih3
 1129 3E08      	mvi	a,numpar0
 112B 321300    ih3:	sta	npart		; use all partitions (and no more)
                	; copy over all DPBs, add PSH,PSK
 112E 212F00    	lxi	h,@scrbf+DDPB	; CP/M 2.2 DPBs in magic sector
 1131 118300    	lxi	d,dpb		; Our CP/M 3 DPBs
                ih0:
 1134 F5        	push	psw		; num partitions
 1135 010F00    	lxi	b,15	; CP/M 2.2 DPB length
 1138           	ldir
 113A 3E02      	mvi	a,2	; 512 byte shift, from 128 byte
 113C 12        	stax	d
 113D 13        	inx	d
 113E 3E03      	mvi	a,3	; 512 byte mask, from 128 byte
 1140 12        	stax	d
 1141 13        	inx	d
 1142 010600    	lxi	b,6	; skip mode bytes
 1145 09        	dad	b
 1146 F1        	pop	psw
 1147 3D        	dcr	a
 1148           	jrnz	ih0
                	; copy over sector (partition) offsets,
                	; converting from LBA and 4-byte entries.
 114A 211400    	lxi	h,@scrbf+SECTBL
 114D           	lxix	partbl
 1151 3A1300    	lda	npart		; num entries
 1154 47        	mov	b,a
 1155 C5        ih1:	push	b
 1156           	lded	segoff+0; E = LBA27:24,DRV (future seg off)
                	;		; D = LBA23:19 is segment offset, carry-in
 115A           	stx	e,+0	; LBA27:24,DRV is fixed
 115D           	inxix
 115F 0603      	mvi	b,3
 1161 7E        	mov	a,m
 1162 E61F      	ani	00011111b	; must clear LUN bits
 1164 77        	mov	m,a
                ih2:
 1165 1E00      	mvi	e,0
 1167 7E        	mov	a,m
 1168 23        	inx	h
 1169           	srlr	a	; convert 128B-secnum to 512B-secnum
 116B           	rarr	e	;
 116D           	srlr	a	;
CP/M RMAC ASSEM 1.1	#007	GIDE- DRIVER FOR MMS CP/M 3 WITH ATA INTERFACE

 116F           	rarr	e	; E=carry-out
 1171 B2        	ora	d	; carry-in from previous
 1172           	stx	a,+0
 1175           	inxix
 1177 53        	mov	d,e	; carry-out becomes next carry-in
 1178           	djnz	ih2
 117A C1        	pop	b
 117B           	djnz	ih1
                	; anything else to do?
 117D AF        	xra	a
 117E C9        	ret
                
                ;	READ - WRITE ROUTINES
                ;
                ;	READ A PHYSICAL SECTOR CODE
                ;
                read$gide:
 117F CDDB11    	call	set$lba
                read$raw:
 1182 3E20      	mvi	a,20h
 1184 D38F      	out	GIDE$CS
 1186 DB8F      gider0: in	GIDE$CS		; FIRST CHECK FOR DRIVE READY
 1188           	bit	7,a		; BSY
 118A           	jrnz	gider0
 118C           	bit	0,a		; ERR
 118E           	jrnz	rwerr0
 1190           	bit	6,a		; RDY
 1192           	jrz	rwerr
 1194           	bit	3,a		; DRQ
 1196           	jrz	gider0
 1198 2A0000    	lhld	@dma		; data buffer address
 119B 0E88      	mvi	c,GIDE$DA
 119D 0600      	mvi	b,0
 119F CD0B01    	call	giderd
 11A2 AF        	xra	a
 11A3 C9        	ret
                
                rwerr0:
 11A4 DB89      	in	GIDE$EF
 11A6 325D12    	sta	dskerr
                rwerr:
 11A9 AF        	xra	a
 11AA 3C        	inr	a
 11AB C9        	ret
                
                ;
                ;	WRITE A PHYSICAL SECTOR CODE
                ;
                write$gide:
 11AC CDDB11    	call	set$lba
 11AF 3E30      	mvi	a,30h
 11B1 D38F      	out	GIDE$CS
 11B3 DB8F      gidew0: in	GIDE$CS		; FIRST CHECK FOR DRIVE READY
 11B5           	bit	7,a		; BSY
 11B7           	jrnz	gidew0
 11B9           	bit	6,a		; RDY
CP/M RMAC ASSEM 1.1	#008	GIDE- DRIVER FOR MMS CP/M 3 WITH ATA INTERFACE

 11BB           	jrz	rwerr
 11BD           	bit	0,a		; ERR
 11BF           	jrnz	rwerr0
 11C1           	bit	3,a		; DRQ
 11C3           	jrz	gidew0
 11C5 2A0000    	lhld	@dma		; data buffer address
 11C8 0E88      	mvi	c,GIDE$DA
 11CA 0600      	mvi	b,0
 11CC CD1A01    	call	gidewr
                gidew2:
 11CF DB8F      	in	GIDE$CS		; wait for not busy
 11D1           	bit	7,a		; BSY
 11D3           	jrnz	gidew2
 11D5           	bit	0,a		; ERR
 11D7           	jrnz	rwerr0
                	; TODO: confirm DRQ also off?
 11D9 AF        	xra	a
 11DA C9        	ret
                
                ;	CALCULATE THE REQUESTED SECTOR
                ;
                set$lba:
                	; note: LBA is stored big-endian, LHLD/SHLD are little-endian
                	; so H,D are LSB and L,E are MSB.
 11DB 2A0000    	lhld	@trk		; get requested track
 11DE 5D        	mov	e,l	;
 11DF 6C        	mov	l,h	;
 11E0 63        	mov	h,e	; bswap HL
 11E1 110000    	lxi	d,0
 11E4 0604      	mvi	b,4		; shift 4 bits left (16 psec/trk)
                stlba0:
 11E6           	slar	h
 11E8           	ralr	l
 11EA           	ralr	d	; can't carry out
 11EC           	djnz	stlba0
                	; sector can't carry - 0-15 into vacated bits
 11EE 3A0000    	lda	@sect		; get requested sector
 11F1 B4        	ora	h
 11F2 67        	mov	h,a
 11F3 223612    	shld	curlba+2
 11F6 EB        	xchg
 11F7 223412    	shld	curlba+0	; CURLBA = (@trk << 4) | @sec
                	; compute &partbl[@rdrv]+3.
                	; We'd like to only do this only if seldsk changes,
                	; but we have no callback for that.
 11FA 3A0000    	lda	@rdrv
 11FD 87        	add	a
 11FE 87        	add	a	; *4
 11FF C603      	adi	3	; can't carry
 1201 5F        	mov	e,a
 1202 1600      	mvi	d,0
 1204 213812    	lxi	h,partbl
 1207 19        	dad	d
 1208 EB        	xchg		; DE = &partbl[@rdrv]+3
                	; add 32-bit values CURLBA += PARTBL[@rdrv]
 1209 213712    	lxi	h,curlba+3
CP/M RMAC ASSEM 1.1	#009	GIDE- DRIVER FOR MMS CP/M 3 WITH ATA INTERFACE

 120C AF        	xra	a	; clear CY
 120D 0604      	mvi	b,4
                stlba1:
 120F 1A        	ldax	d
 1210 8E        	adc	m
 1211 77        	mov	m,a
 1212 2B        	dcx	h
 1213 1B        	dcx	d
 1214           	djnz	stlba1
                stlba2:	; setup controller regs from CURLBA
 1216 213412    	lxi	h,curlba
 1219 7E        	mov	a,m
 121A F6E0      	ori	11100000b	; LBA mode, etc
 121C D38E      	out	GIDE$DH
 121E 23        	inx	h
 121F 7E        	mov	a,m
 1220 D38D      	out	GIDE$CH
 1222 23        	inx	h
 1223 7E        	mov	a,m
 1224 D38C      	out	GIDE$CL
 1226 23        	inx	h
 1227 7E        	mov	a,m
 1228 D38B      	out	GIDE$SE
 122A 3E01      	mvi	a,1
 122C D38A      	out	GIDE$SC	; always 1 sector at a time
 122E AF        	xra	a
 122F D389      	out	GIDE$EF	; feature always zero?
 1231 C9        	ret
                
                ;
                ;	DATA BUFFERS AND STORAGE
                ;
                
 1232 0000      segoff:	dw	0	; orig from ROM, passed in nsegmt by CPM3LDR
 1234 00000000  curlba:	db	0,0,0,0
                
                ; Partition start LBAs for each partition.
                ; Loaded from the magic sector, converted to LBA.
                
                partbl:
 1238 00000000  	db	0,0,0,0
 123C 00000000  	db	0,0,0,0
 1240 00000000  	db	0,0,0,0
 1244 00000000  	db	0,0,0,0
 1248 00000000  	db	0,0,0,0
 124C 00000000  	db	0,0,0,0
 1250 00000000  	db	0,0,0,0
 1254 00000000  	db	0,0,0,0
 1258 00000000  	db	0,0,0,0
                
 125C FF        init:	db	0ffh	; one-time initialization
 125D 00        dskerr:	db	0
                
 125E           	END
