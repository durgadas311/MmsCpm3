 2032 =         vers equ '2 ' ; Oct 29, 2018  18:12   drm "MEMX2H8.ASM"
                ;****************************************************************
                ; Banked Memory BIOS module for CP/M 3 (CP/M plus), 		*
                ; Copyright (c) 1983 Magnolia Microsystems			*
                ;****************************************************************
                	maclib Z80
                
 FFFF =         true	equ -1
 0000 =         false	equ not true
                
 FFFF =         memtest	equ	true
                
 000D =         cr	equ 13
 000A =         lf	equ 10
 0007 =         bell	equ 7
                
 0000 =         mmu	equ	000h	; Trionyx X/2-H8 Bank Switch Board
                
                ;  SCB registers
                	extrn @bnkbf,@cbnk,@dtacb,@dircb,@heapt
                
                ;  Variables for use by other modules
                	public @nbnk,@compg,@mmerr,@memstr
                
                ;  Routines for use by other modules
                	public ?bnksl,?bnkck,?xmove,?mvccp,?move
                
                	cseg		; GENCPM puts CSEG stuff in common memory
                
 0000 04        @nbnk:	db	4
 0001 C0        @compg:	db	0c0h
 0002 0D0A074E6F@mmerr: db	cr,lf,bell,'No X/2-H8$'
 000F 582F322D48@memstr: db	'X/2-H8 ',0,'Tryonix 256K RAM and MMU ',0,'v3.10'
 0036 3220      	dw	vers
 0038 24        	db	'$'
                
                ; Uses XMOVE semantics...
                ; C=source bank, B=dest bank, HL=address, A=num recs
                ?mvccp: exaf	;save number of records
 0039+08        	DB	08H
 003A 79        	mov	a,c
 003B CD6000    	call	?bnksl	;select source bank
 003E C5        	push	b
 003F E5        	push	h
                	lded	@bnkbf
 0040+ED5B      	DB	0EDH,5BH
 0042+0000      	DW	@BNKBF
 0044 018000    	lxi	b,128
                	ldir
 0047+EDB0      	DB	0EDH,0B0H
 0049 E1        	pop	h
 004A C1        	pop	b
 004B 78        	mov	a,b
 004C CD6000    	call	?bnksl	;select destination bank
 004F C5        	push	b
 0050 EB        	xchg
 0051 2A0000    	lhld	@bnkbf
 0054 018000    	lxi	b,128
                	ldir
 0057+EDB0      	DB	0EDH,0B0H
 0059 EB        	xchg
 005A C1        	pop	b
                	exaf
 005B+08        	DB	08H
 005C 3D        	dcr	a
                	jrnz	?mvccp
 005D+20DA      	DB	20H,?MVCCP-$-1
 005F C9        	ret
                
                ?bnksl:
 0060 320000    	sta	@cbnk		; remember current bank
 0063 C5        	push	b		; save register b for temp
 0064 E5        	push	h		;
 0065 217E00    	lxi	h,table 	;
 0068 87        	add	a
 0069 87        	add	a
 006A 4F        	mov	c,a		;
 006B 0600      	mvi	b,0		;
 006D 09        	dad	b		;
 006E 0604      	mvi	b,4
 0070 0E00      	mvi	c,mmu
                	ldai	; P = EI state (IFF2)
 0072+ED57      	DB	0EDH,57H
 0074 F5        	push	psw
 0075 F3        	di
                	outir	; trashes P
 0076+EDB3      	DB	0EDH,0B3H
 0078 F1        	pop	psw	; restore IFF2 to P
 0079 E1        	pop	h		;
 007A C1        	pop	b		; restore register b
 007B E0        	rpo	; P=0, leave interrupts off
 007C FB        	ei
 007D C9        	ret
                
                table:
 007E 1F        	db	0$001$1111b	; Bank 0
 007F 2F        	db	0$010$1111b
 0080 3F        	db	0$011$1111b
 0081 00        	db	0$000$0000b
                	;
 0082 07        	db	0$000$0111b	; Bank 1
 0083 2F        	db	0$010$1111b
 0084 3F        	db	0$011$1111b
 0085 18        	db	0$001$1000b
                	;
 0086 07        	db	0$000$0111b	; Bank 2
 0087 1F        	db	0$001$1111b
 0088 3F        	db	0$011$1111b
 0089 28        	db	0$010$1000b
                	;
 008A 07        	db	0$000$0111b	; Bank 3
 008B 1F        	db	0$001$1111b
 008C 2F        	db	0$010$1111b
 008D 38        	db	0$011$1000b
                
 008E EB        ?move:	xchg		; we are passed source in DE and dest in HL
                	ldir		; use Z80 block move instruction
 008F+EDB0      	DB	0EDH,0B0H
 0091 EB        	xchg		; need next addresses in same regs
                ?xmove:
 0092 C9        	ret
                
                ; Data buffers must be in common memory
 0093           dtabf1: ds	1024
 0493           dtabf2: ds	1024-1
 0892 00        	db	0	;to force LINK to fill with "00"
                
                	dseg	; this part can be banked
                
                ; Verify that we have banked RAM...
                ; This code assumes the Bank Switch Board is set as for "bank 0" in 'table'
                ?bnkck:
                 if memtest
                	; setup pattern buffer
 0000 210041    	lxi	h,4100h
 0003 0688      	mvi	b,136
 0005 3E10      	mvi	a,10h
                bnkck1:
 0007 77        	mov	m,a
 0008 23        	inx	h
 0009 C601      	adi	1
 000B 27        	daa
                	djnz	bnkck1
 000C+10F9      	DB	10H,BNKCK1-$-1
                
                	; copy diff pattern to each bank
 000E 210041    	lxi	h,4100h
 0011 110001    	lxi	d,0100h
 0014 018000    	lxi	b,128
                	ldir
 0017+EDB0      	DB	0EDH,0B0H
 0019 3E01      	mvi	a,0$000$0001b
 001B D300      	out	mmu
 001D 3E1E      	mvi	a,0$001$1110b
 001F D300      	out	mmu
 0021 210141    	lxi	h,4101h
 0024 110001    	lxi	d,0100h
 0027 018000    	lxi	b,128
                	ldir
 002A+EDB0      	DB	0EDH,0B0H
 002C 3E1F      	mvi	a,0$001$1111b
 002E D300      	out	mmu
 0030 3E2E      	mvi	a,0$010$1110b
 0032 D300      	out	mmu
 0034 210241    	lxi	h,4102h
 0037 110001    	lxi	d,0100h
 003A 018000    	lxi	b,128
                	ldir
 003D+EDB0      	DB	0EDH,0B0H
 003F 3E2F      	mvi	a,0$010$1111b
 0041 D300      	out	mmu
 0043 3E3E      	mvi	a,0$011$1110b
 0045 D300      	out	mmu
 0047 210341    	lxi	h,4103h
 004A 110001    	lxi	d,0100h
 004D 018000    	lxi	b,128
                	ldir
 0050+EDB0      	DB	0EDH,0B0H
                	; check pattern in each bank
 0052 3E3F      	mvi	a,0$011$1111b
 0054 D300      	out	mmu
 0056 3E00      	mvi	a,0$000$0000b
 0058 D300      	out	mmu
 005A 210041    	lxi	h,4100h
 005D CDBB00    	call	bnkck9
                	jrnz	noram
 0060+2051      	DB	20H,NORAM-$-1
 0062 3E01      	mvi	a,0$000$0001b
 0064 D300      	out	mmu
 0066 3E1E      	mvi	a,0$001$1110b
 0068 D300      	out	mmu
 006A 210141    	lxi	h,4101h
 006D CDBB00    	call	bnkck9
                	jrnz	noram
 0070+2041      	DB	20H,NORAM-$-1
 0072 3E1F      	mvi	a,0$001$1111b
 0074 D300      	out	mmu
 0076 3E2E      	mvi	a,0$010$1110b
 0078 D300      	out	mmu
 007A 210241    	lxi	h,4102h
 007D CDBB00    	call	bnkck9
                	jrnz	noram
 0080+2031      	DB	20H,NORAM-$-1
 0082 3E2F      	mvi	a,0$010$1111b
 0084 D300      	out	mmu
 0086 3E3E      	mvi	a,0$011$1110b
 0088 D300      	out	mmu
 008A 210341    	lxi	h,4103h
 008D CDBB00    	call	bnkck9
                	jrnz	noram
 0090+2021      	DB	20H,NORAM-$-1
                 else
                	lxi	d,40h
                	mvi	a,0$000$0001b
                	out	mmu
                	mvi	a,0$001$1110b
                	out	mmu
                	mvi	a,1
                	stax	d	;put bank number in 40h of respective bank
                	mvi	a,0$001$1111b
                	out	mmu
                	mvi	a,0$010$1110b
                	out	mmu
                	mvi	a,2
                	stax	d	;put bank number in 40h of respective bank
                	mvi	a,0$010$1111b
                	out	mmu
                	mvi	a,0$011$1110b
                	out	mmu
                	mvi	a,3
                	stax	d	;put bank number in 40h of respective bank
                	mvi	a,0$011$1111b
                	out	mmu
                	mvi	a,0$001$1110b
                	out	mmu
                	ldax	d
                	cpi	1
                	jrnz	noram
                	mvi	a,0$001$1111b
                	out	mmu
                	mvi	a,0$010$1110b
                	out	mmu
                	ldax	d
                	cpi	2
                	jrnz	noram
                	mvi	a,0$010$1111b
                	out	mmu
                	mvi	a,0$011$1110b
                	out	mmu
                	ldax	d
                	cpi	3
                	jrnz	noram
                 endif
                	; Allocate some buffers below BNKBDOS
 0092 2A0000    	lhld	@heapt
 0095 1100FC    	lxi	d,-1024	; max sector size = 1024
 0098 19        	dad	d
 0099 22FD00    	shld	dirbf1
 009C 19        	dad	d
 009D 220C01    	shld	dirbf2
 00A0 220000    	shld	@heapt
 00A3 21D500    	lxi	h,dtacb1
 00A6 220000    	shld	@dtacb
 00A9 21F300    	lxi	h,dircb1
 00AC 220000    	shld	@dircb
 00AF 3EFF      	mvi	a,true
                	jr	bnkck0
 00B1+1801      	DB	18H,BNKCK0-$-1
 00B3 AF        noram:	xra	a
 00B4 F5        bnkck0:	push	psw
 00B5 AF        	xra	a
 00B6 CD6000    	call	?bnksl
 00B9 F1        	pop	psw
 00BA C9        	ret
                 if memtest
                bnkck9:
 00BB E5        	push	h	; pattern
 00BC 210001    	lxi	h,0100h
 00BF 110042    	lxi	d,4200h
 00C2 018000    	lxi	b,128
                	ldir
 00C5+EDB0      	DB	0EDH,0B0H
 00C7 E1        	pop	h	; pattern
 00C8 110042    	lxi	d,4200h
 00CB 0680      	mvi	b,128
                bnkck8:
 00CD 1A        	ldax	d
 00CE BE        	cmp	m
 00CF C0        	rnz
 00D0 23        	inx	h
 00D1 13        	inx	d
                	djnz	bnkck8
 00D2+10F9      	DB	10H,BNKCK8-$-1
 00D4 C9        	ret
                 endif
                
 00D5 FF        dtacb1: db 0ffh ;drive
 00D6 0000000000	db 0,0,0,0,0
 00DB 0000000093	dw 0,0,dtabf1
 00E1 00        	db 0
 00E2 E400      	dw dtacb2
                
 00E4 FF        dtacb2: db 0ffh ;drive
 00E5 0000000000	db 0,0,0,0,0
 00EA 0000000093	dw 0,0,dtabf2
 00F0 00        	db 0
 00F1 0000      	dw 0000 ;end of data buffers
                
 00F3 FF        dircb1: db 0ffh ;drive
 00F4 0000000000	db 0,0,0,0,0
 00F9 00000000  	dw 0,0
 00FD 0000      dirbf1:	dw	0
 00FF 00        	db 0
 0100 0201      	dw dircb2
                
 0102 FF        dircb2: db 0ffh ;drive
 0103 0000000000	db 0,0,0,0,0
 0108 00000000  	dw 0,0
 010C 0000      dirbf2:	dw	0
 010E 00        	db 0
 010F 0000      	dw 0000 ;end of DIR buffers
                
 0111           	end
