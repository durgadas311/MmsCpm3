		********** CP/M DISK I/O ROUTINES  **********
		**********			   **********
2035          	VERS	EQU	'5 '		; Oct 28,1983  7:58 mjm "M320.ASM"
		*********************************************
0000  0007000A		DW	MODLEN,BUFLEN
		
			TITLE	'SASI- DRIVER FOR MMS CP/M SASI BUS INTERFACE'
			MACLIB	Z80
**** Z80.lib ****
**** m320.asm ****
			$-MACRO
		
0000          	 ifdef BUMP
		 else
0000          	BASE	EQU	0000H	;ORG FOR RELOC
		 endif
		
		***** PHYSICAL DRIVES ARE ASSIGNED AS FOLLOWS  *****
		*****					       *****
		*****  50-58 RESERVED FOR SASI BUS DISKS       *****
		*****					       *****
		****************************************************
		
		
		
		***************************************************
		**  PORTS AND CONSTANTS
		***************************************************
00F2          	GPIO	EQU	0F2H		; SWITCH 501
		
0001          	ACK	EQU	00000001B
0002          	INT	EQU	00000010B
0004          	PER	EQU	00000100B
0008          	BUSY	EQU	00001000B
0010          	CMND	EQU	00010000B
0020          	MSG	EQU	00100000B
0040          	POUT	EQU	01000000B
0080          	REQ	EQU	10000000B
		
0000          	RUN	EQU	00000000B
0010          	SWRS	EQU	00010000B
0020          	INTE	EQU	00100000B
0040          	SEL	EQU	01000000B
		
0001          	RECAL	EQU	1	; COMMAND OP CODES
0008          	RDBL	EQU	8
000A          	WRBL	EQU	10
000C          	INIT	EQU	12
		
000A          	DPHDPB	EQU	10
0010          	DPHL	EQU	16
0015          	DPBL	EQU	21
0004          	DDEFL	EQU	4
000D          	CSTRNG	EQU	13
0013          	NPART	EQU	19
0004          	CBYTE	EQU	4
0005          	DDATA	EQU	5
0003          	DCTYPE	EQU	3
0014          	SECTBL	EQU	20
002F          	DDPB	EQU	47
		
0000          	WRALL	EQU	0	; WRITE TO ALLOCATED
0001          	WRDIR	EQU	1	; WRITE TO DIRECTORY
0002          	WRUNA	EQU	2	; WRITE TO UNALLOCATED
0003          	READOP	EQU	3	; READ OPERATION
		
		***************************************************
		** LINKS TO REST OF SYSTEM
		***************************************************
		
1600          	PATCH	EQU	BASE+1600H
0000          	MBASE	EQU	BASE		; MODULE BASE
C000          	COMBUF	EQU	BASE+0C000H	; COMMON BUFFER
F000          	BUFFER	EQU	BASE+0F000H	; MODULE BUFFER
		
		***************************************************
		** PAGE ZERO ASSIGNMENTS
		***************************************************
0000          		ORG	0
0000          	?CPM		DS	3
0003          	?DEV$STAT	DS	1
0004          	?LOGIN$DSK	DS	1
0005          	?BDOS		DS	3
0008          	?RST1		DS	3
000B          	?CLOCK		DS	2
000D          	?INT$BYTE	DS	1
000E          	?CTL$BYTE	DS	1
000F          			DS	77
005C          	?FCB		DS	36
0080          	?DMA		DS	128
		?TPA		DS	0
		***************************************************
		
		
		
		***************************************************
		** OVERLAY MODULE INFORMATION ON BIOS
		***************************************************
		
1600          		ORG	PATCH
1600          		DS	51		; BIOS JUMP TABLE
		
1633  00      	DISK$STAT	DB	0
		
1634          			DS	8
		
163C  32333435	MIXER:	DB	50,51,52,53,54,55,56,57
      36373839
1644          		DS	8		; LOGICAL-PHYSICAL DRIVE TABLE
		
164C          	DRIVE$BASE:
164C  323A    		DB	50,58		; DRIVE MODULE BASE TABLE
164E  0000    		DW	MBASE
1650          		DS	28
		
166C          	CBIOS:	DS	3
		
166F          	NEWBAS	DS	2
1671          	NEWDSK	DS	1
1672          	NEWTRK	DS	1
1673          	NEWSEC	DS	1
1674          	HRDTRK	DS	2
1676          	DMAA	DS	2
		
		***************************************************
		
		
		
		***************************************************
		** START OF RELOCATABLE DISK I/O MODULE
		*************************************************** 
		
0000          		ORG	MBASE		; START OF MODULE
		
0000  C3A801  		JMP	SEL$SASI
0003  C3D303  		JMP	READ$SASI
0006  C3DE03  		JMP	WRITE$SASI
		
		;	TEXT
0009  37373332		DB	'77320 SASI Interface (8 partitions) v2.24'
      30205341
      53492049
      6E746572
      66616365
      20283820
      70617274
      6974696F
      6E732920
      76322E32
      34
0032  35202400		DW	VERS,'$'
		
		
0036  00000000	DPH0:	DW	0,0,0,0,DIRBUF,DPB0,CSV0,ALV0
      00000000
      56C0EB00
      00F200F2
0046  00000000	DPH1:	DW	0,0,0,0,DIRBUF,DPB1,CSV1,ALV1
      00000000
      56C00001
      00F300F3
0056  00000000	DPH2:	DW	0,0,0,0,DIRBUF,DPB2,CSV2,ALV2
      00000000
      56C01501
      00F400F4
0066  00000000	DPH3:	DW	0,0,0,0,DIRBUF,DPB3,CSV3,ALV3
      00000000
      56C02A01
      00F500F5
0076  00000000	DPH4:	DW	0,0,0,0,DIRBUF,DPB4,CSV4,ALV4
      00000000
      56C03F01
      00F600F6
0086  00000000	DPH5:	DW	0,0,0,0,DIRBUF,DPB5,CSV5,ALV5
      00000000
      56C05401
      00F700F7
0096  00000000	DPH6:	DW	0,0,0,0,DIRBUF,DPB6,CSV6,ALV6
      00000000
      56C06901
      00F800F8
00A6  00000000	DPH7:	DW	0,0,0,0,DIRBUF,DPB7,CSV7,ALV7
      00000000
      56C07E01
      00F900F9
00B6  00000000	DPH8:	DW	0,0,0,0,DIRBUF,DPB8,CSV8,ALV8
      00000000
      56C09301
      00FA00FA
		
00C6  00      	CNUM:	DB	0		; CONTROLLER NUMBER 0
		
		;	SECTOR DEFINITION/TRANSLATION TABLE
		;		--ADDRESS--,   FLAG BYTE
00C7  00000000	DDEFTBL:DB	0,   0,   0,   0
00CB  00000000		DB	0,   0,   0,   0
00CF  00000000		DB	0,   0,   0,   0
00D3  00000000		DB	0,   0,   0,   0
00D7  00000000		DB	0,   0,   0,   0
00DB  00000000		DB	0,   0,   0,   0
00DF  00000000		DB	0,   0,   0,   0
00E3  00000000		DB	0,   0,   0,   0
00E7  00000000		DB	0,   0,   0,   0
		
		;
		;
		; DISK PARAMETER BLOCKS -- CONTAIN DUMMY DATA. REAL DATA IS OBTAINED FROM 
		;			   MAGIC SECTOR ON INITIALIZATION OF PARTITION
		;
00EB  4000    	DPB0:	DW	64		; SPT
00ED  051F01  		DB	5,31,1		; BSH,BLM,EXM
00F0  0300FF01		DW	4-1,512-1	; DSM,DRM
00F4  F000    		DB	0F0H,0		; AL0,AL1
00F6  00000200		DW	0,2		; CKS,OFF
00FA  028000  		DB	00000010B,10000000B,0  ; MODE BYTES
00FD  FFFFFF  		DB	0FFH,0FFH,0FFH	; MODE MASKS
		
0100  4000    	DPB1:	DW	64		; SPT
0102  051F01  		DB	5,31,1		; BSH,BLM,EXM
0105  0300FF01		DW	4-1,512-1	; DSM,DRM
0109  F000    		DB	0F0H,0		; AL0,AL1
010B  00000200		DW	0,2		; CKS,OFF
010F  028000  		DB	00000010B,10000000B,0  ; MODE BYTES
0112  FFFFFF  		DB	0FFH,0FFH,0FFH	; MODE MASKS
		
0115  4000    	DPB2:	DW	64		; SPT
0117  051F01  		DB	5,31,1		; BSH,BLM,EXM
011A  0300FF01		DW	4-1,512-1	; DSM,DRM
011E  F000    		DB	0F0H,0		; AL0,AL1
0120  00000200		DW	0,2		; CKS,OFF
0124  028000  		DB	00000010B,10000000B,0  ; MODE BYTES
0127  FFFFFF  		DB	0FFH,0FFH,0FFH	; MODE MASKS
		
012A  4000    	DPB3:	DW	64		; SPT
012C  051F01  		DB	5,31,1		; BSH,BLM,EXM
012F  0300FF01		DW	4-1,512-1	; DSM,DRM
0133  F000    		DB	0F0H,0		; AL0,AL1
0135  00000200		DW	0,2		; CKS,OFF
0139  028000  		DB	00000010B,10000000B,0  ; MODE BYTES
013C  FFFFFF  		DB	0FFH,0FFH,0FFH	; MODE MASKS
		
013F  4000    	DPB4:	DW	64		; SPT
0141  051F01  		DB	5,31,1		; BSH,BLM,EXM
0144  0300FF01		DW	4-1,512-1	; DSM,DRM
0148  F000    		DB	0F0H,0		; AL0,AL1
014A  00000200		DW	0,2		; CKS,OFF
014E  028000  		DB	00000010B,10000000B,0  ; MODE BYTES
0151  FFFFFF  		DB	0FFH,0FFH,0FFH	; MODE MASKS
		
0154  4000    	DPB5:	DW	64		; SPT
0156  051F01  		DB	5,31,1		; BSH,BLM,EXM
0159  0300FF01		DW	4-1,512-1	; DSM,DRM
015D  F000    		DB	0F0H,0		; AL0,AL1
015F  00000200		DW	0,2		; CKS,OFF
0163  028000  		DB	00000010B,10000000B,0  ; MODE BYTES
0166  FFFFFF  		DB	0FFH,0FFH,0FFH	; MODE MASKS
		
0169  4000    	DPB6:	DW	64		; SPT
016B  051F01  		DB	5,31,1		; BSH,BLM,EXM
016E  0300FF01		DW	4-1,512-1	; DSM,DRM
0172  F000    		DB	0F0H,0		; AL0,AL1
0174  00000200		DW	0,2		; CKS,OFF
0178  028000  		DB	00000010B,10000000B,0  ; MODE BYTES
017B  FFFFFF  		DB	0FFH,0FFH,0FFH	; MODE MASKS
		
017E  4000    	DPB7:	DW	64		; SPT
0180  051F01  		DB	5,31,1		; BSH,BLM,EXM
0183  0300FF01		DW	4-1,512-1	; DSM,DRM
0187  F000    		DB	0F0H,0		; AL0,AL1
0189  00000200		DW	0,2		; CKS,OFF
018D  028000  		DB	00000010B,10000000B,0  ; MODE BYTES
0190  FFFFFF  		DB	0FFH,0FFH,0FFH	; MODE MASKS
		
0193  4000    	DPB8:	DW	64		; SPT
0195  051F01  		DB	5,31,1		; BSH,BLM,EXM
0198  0300FF01		DW	4-1,512-1	; DSM,DRM
019C  F000    		DB	0F0H,0		; AL0,AL1
019E  00000200		DW	0,2		; CKS,OFF
01A2  028000  		DB	00000010B,10000000B,0  ; MODE BYTES
01A5  FFFFFF  		DB	0FFH,0FFH,0FFH	; MODE MASKS
		
		
		
		;	SELECT DISK CODE
		;
01A8          	SEL$SASI:
01A8  AF      		XRA	A
01A9  32AC06  		STA	SELERR		; NO SELECT ERRORS (YET)
01AC  CD2C02  		CALL	INIT$SASI
01AF  C22502  		JNZ	ERREXT
01B2  3AB706  		LDA	PNDWRT		; CLEAR ANY PENDING WRITE
01B5  B7      		ORA	A
01B6  C4BB04  		CNZ	WR$SEC
01B9  3AB006  		LDA	DRIV0		; CALCULATE DRIVE NUMBER RELATIVE TO 0
01BC  57      		MOV	D,A
01BD  3A7116  		LDA	NEWDSK
01C0  92      		SUB	D     
01C1  32C706  		STA	RELDSK
01C4  21C700  		LXI	H,DDEFTBL
01C7  5F      		MOV	E,A		; NOW POINT TO THE CORRECT
01C8  1600    		MVI	D,0		; ENTRY IN THE SECTOR
01CA  19      		DAD	D		; OFFSET TABLE
01CB  19      		DAD	D
01CC  19      		DAD	D
01CD  19      		DAD	D
01CE  22AA06  		SHLD	SECPTR
01D1  7E      		MOV	A,M
01D2  E6E0    		ANI	11100000B
01D4  329506  		STA	LUN		; SAVE LOGICAL UNIT NUMBER BITS
01D7  43      		MOV	B,E
01D8  04      		INR	B
01D9  212600  		LXI	H,DPH0-DPHL	; POINT TO DPH TABLE
01DC  111000  		LXI	D,DPHL		; LENGTH OF DPH's
01DF  19      	SEL1:	DAD	D
01E0  10FD    		DJNZ	SEL1		; CALCULATE POINTER TO REQUESTED DPH
01E2  110A00  		LXI	D,DPHDPB
01E5  19      		DAD	D		; POINT TO ADDRESS OF DPB
01E6  CD8D05  		CALL	HLIHL		; DPB ADDRESS IN HL
01E9  22C806  		SHLD	CURDPB		; SAVE IT
		
01EC  214506  		LXI	H,LUNDATA-16	; CALCULATE POINTER TO
01EF  111000  		LXI	D,16		;  DATA FOR THIS LOGICAL UNIT
01F2  3A9506  		LDA	LUN
01F5  07      		RLC
01F6  07      		RLC
01F7  07      		RLC
01F8  19      	NXTLUN: DAD	D
01F9  3D      		DCR	A
01FA  F2F801  		JP	NXTLUN
01FD  22A806  		SHLD	DATAPTR
		
0200  CD7C02  		CALL	CHK$INIT	; INITIALIZE DRIVE IF NECESSARY
0203  2AC806  		LHLD	CURDPB
0206  23      		INX	H
0207  23      		INX	H
0208  23      		INX	H
0209  7E      		MOV	A,M		; GET BLOCK MASK
020A  32CA06  		STA	BLKMSK		; USED FOR UNALLOCATED RECORD COUNT
020D  110A00  		LXI	D,10
0210  19      		DAD	D
0211  7E      		MOV	A,M		; GET TRACK OFFSET
0212  32CB06  		STA	OFFSET
0215  23      		INX	H
0216  23      		INX	H		; POINT TO MODE BYTE 1
0217  7E      		MOV	A,M
0218  E603    		ANI	3		; ISOLATE SECTOR SIZE BITS
021A  32C106  		STA	BLCODE		; SAVE AS DEBLOCKING CODE
021D  3AC706  	RETSEL: LDA	RELDSK
0220  4F      		MOV	C,A
0221  113600  		LXI	D,DPH0
0224  C9      		RET
		
0225  3E01    	ERREXT: MVI	A,1
0227  32AC06  		STA	SELERR
022A  18F1    		JR	RETSEL
		
		
		;
		;	DRIVER INITIALIZATION CODE
		;
022C          	INIT$SASI:
022C  3AAF06  		LDA	INIT$FLAG	; NEED TO INITIALIZE ?
022F  B7      		ORA	A
0230  C8      		RZ
0231  214C16  		LXI	H,DRIVE$BASE	; SEARCH DRIVE$BASE FOR FIRST
0234  3A7116  		LDA	NEWDSK		; AND LAST PHYSICAL DRIVE NUMBERS
0237  BE      	LPDSK	CMP	M
0238  23      		INX	H
0239  3803    		JRC	NXTDSK
023B  BE      		CMP	M
023C  3806    		JRC	GOTDSK
023E  23      	NXTDSK	INX	H
023F  23      		INX	H
0240  23      		INX	H
0241  C33702  		JMP	LPDSK
0244  7E      	GOTDSK	MOV	A,M
0245  32B106  		STA	DRIV$LAST
0248  2B      		DCX	H
0249  7E      		MOV	A,M
024A  32B006  		STA	DRIV0	 
									   
024D  210016  		LXI	H,PATCH 	; GET LOGIN VECTOR ADDRESS FROM BIOS
0250  11890D  		LXI	D,0D89H
0253  B7      		ORA	A
0254  ED52    		DSBC	D
0256  CD8D05  		CALL	HLIHL
0259  23      		INX	H
025A  CD8D05  		CALL	HLIHL		
025D  22B406  		SHLD	LVECADD
		
0260  067C    		MVI	B,7CH 
0262  DBF2    		IN	GPIO		; READ SWITCH 501
0264  E603    		ANI	00000011B	; WHAT'S PORT 7C SET FOR ?
0266  FE02    		CPI	00000010B	;  IF Z67, THEN THIS IS IT
0268  2809    		JRZ	GOTPRT
026A  0678    		MVI	B,78H
026C  DBF2    		IN	GPIO		; READ SWITCH 501
026E  E60C    		ANI	00001100B	; WHAT'S PORT 78 SET FOR ?
0270  FE08    		CPI	00001000B	;  IF Z67, THEN THIS IS IT
0272  C0      		RNZ
0273  78      	GOTPRT: MOV	A,B
0274  32AE06  		STA	BASE$PORT	; SAVE BASE PORT ADDRESS
0277  AF      		XRA	A
0278  32AF06  		STA	INIT$FLAG	; FLAG DRIVER AS INITIALIZED
027B  C9      		RET
		
027C          	CHK$INIT:
027C  CD9E02  		CALL	GETSTART
027F  2AAA06  		LHLD	SECPTR
0282  23      		INX	H
0283  23      		INX	H
0284  23      		INX	H		; POINT TO FLAG BYTE
0285  7E      		MOV	A,M
0286  32AD06  		STA	FLAGS		; SAVE FOR USE BY INIT$DRIVE
0289  CB76    		BIT	6,M		; IS IT A FLOPPY DISK ?
028B  37      		STC
028C  C0      		RNZ			;  THEN DON'T INITIALIZE
028D  CB7E    		BIT	7,M		; CHECK INITIALIZATION BIT
028F  CA1303  		JZ	INIT$HARD
0292  E5      		PUSH	H		; SAVE FLAG BYTE
0293  CDE502  		CALL	LOGIN		; HAS THE ANY OF THE PARTITIONS ON THE	
0296  E1      		POP	H		;  THE CURRENT L.U.N BEEN LOGGED IN ?
0297  C0      		RNZ			; THEN DON'T INITIALIZE.
0298  CB6E    		BIT	5,M		; IS IT REMOVABLE MEDIA ?
029A  C21303  		JNZ	INIT$HARD	;  MUST INITIALIZE
029D  C9      		RET
		
029E          	GETSTART:
029E  DDE5    		PUSHIX
02A0  DD21C700		LXIX	DDEFTBL
02A4  3AB006  		LDA	DRIV0		; GET PHYSICAL DRIVE NUMBER
02A7  47      		MOV	B,A
02A8  3AB106  		LDA	DRIV$LAST	; GET TOTAL NUMBER OF PARTITIONS
02AB  90      		SUB	B
02AC  67      		MOV	H,A
02AD  3A9506  		LDA	LUN		; PUT LUN IN L REG
02B0  6F      		MOV	L,A
02B1  110400  		LXI	D,4		; INCREMENT FOR DDEFTAB       
02B4  DD7E00  	STLOOP	LDX	A,+0		; GET STARTING PHYSICAL DRIVE NUMBER
02B7  E6E0    		ANI	11100000B	; OF CURRENT LUN.
02B9  BD      		CMP	L
02BA  280D    		JRZ	GOT$START
02BC  DD19    		DADX	D
02BE  04      		INR	B
02BF  25      		DCR	H
02C0  C2B402  		JNZ	STLOOP
02C3  DDE1    		POPIX
02C5  D1      		POP	D
02C6  C3CF03  		JMP	INIT$ERR
02C9          	GOT$START:
02C9  78      		MOV	A,B
02CA  32B206  		STA	STRLUN
02CD  0E00    		MVI	C,0		; GET NUMBER OF PARTITIONS IN LUN
02CF          	ENDLOOP:			
02CF  DD19    		DADX	D
02D1  0C      		INR	C
02D2  DD7E00  		LDX	A,+0
02D5  E6E0    		ANI	11100000B
02D7  BD      		CMP	L
02D8  2004    		JRNZ	GOT$END 	; B = STARTING PHYSICAL DRIVE NUMBER OF LUN
02DA  25      		DCR	H
02DB  C2CF02  		JNZ	ENDLOOP 	; C = NUMBER OF PARTITION IN THE CURRENT LUN
02DE          	GOT$END:
02DE  79      		MOV	A,C
02DF  32B306  		STA	PARTLUN 	; SAVE FOR INIT$HARD  AND LOGIN
02E2  DDE1    		POPIX
02E4  C9      		RET
		
		
02E5  DDE5    	LOGIN:	PUSHIX
02E7  3AB306  		LDA	PARTLUN
02EA  4F      		MOV	C,A
02EB  3AB206  		LDA	STRLUN
02EE  47      		MOV	B,A
02EF  210000  		LXI	H,0		; SEARCH MIXER TABLE FOR ANY
02F2  1E10    		MVI	E,16		; LOGGED IN PARTITIONS FOR THE CURRENT LUN.
02F4  DD214B16		LXIX	MIXER+15
02F8  DD7E00  	MLOOP	LDX	A,+0
02FB  90      		SUB	B
02FC  B9      		CMP	C		; SET CY IF IN RANGE  (C>x>B)
02FD  ED6A    		DADC	H
02FF  DD2B    		DCXIX	
0301  1D      		DCR	E
0302  20F4    		JRNZ	MLOOP
0304  EB      		XCHG			; PUT LOGIN MASK IN DE
0305  2AB406  		LHLD	LVECADD 	; GET LOGIN VECTOR'S ADDRESS
0308  7E      		MOV	A,M		; COMPARE LSB FIRST
0309  A3      		ANA	E
030A  C21003  		JNZ	EXITLOG 	; RETURN IF ONE OR MORE PARTITIONS ARE LOGIN.
030D  23      		INX	H
030E  7E      		MOV	A,M		; THEN COMPARE MSB
030F  A2      		ANA	D
0310          	EXITLOG:
0310  DDE1    		POPIX
0312  C9      		RET
		
0313          	INIT$HARD:
0313  3EFF    		MVI	A,0FFH		
0315  32B906  		STA	HSTDSK		
0318  CD9E05  		CALL	GETCON		; RESTORE THE HEADS
031B  21A206  		LXI	H,RCMND
031E  AF      		XRA	A		; DEFAULT STEP RATE
031F  32A706  		STA	RCMND+5
0322  CCD805  		CZ	OUTCM0
0325  CC3206  		CZ	CHK$STAT
0328  3E08    		MVI	A,RDBL		; OP CODE TO READ A SECTOR
032A  329606  		STA	CMBFR
032D  AF      		XRA	A		; SECTOR 0
032E  329706  		STA	CMBFR+1
0331  329806  		STA	CMBFR+2
0334  329906  		STA	CMBFR+3
0337  3C      		INR	A
0338  329A06  		STA	CMBFR+4 	; READ 1 SECTOR
033B  CD9E05  		CALL	GETCON		; WAKE UP CONTROLLER
033E  CCD505  		CZ	OUTCOM		; OUTPUT READ COMMAND
0341  CC0506  		CZ	SASIRW		; READ IN SECTOR
0344  CC3206  		CZ	CHK$STAT	; CHECK STATUS OF READ
0347  C2CF03  		JNZ	INIT$ERR
		
034A  3A13F0  		LDA	HSTBUF+NPART	; COMPARE # OF PART. DRIVER & MAGIC SECTOR
034D  21B306  		LXI	H,PARTLUN
0350  BE      		CMP	M
0351  D25503  		JNC	KEEPPAR 	; USE THE SMALLEST ONE
0354  77      		MOV	M,A
0355  3AB006  	KEEPPAR:LDA	DRIV0
0358  57      		MOV	D,A
0359  3AB206  		LDA	STRLUN
035C  92      		SUB	D
035D  32B206  		STA	STRLUN		; SAVE RELATIVE START OF LUN	  
		
0360  47      		MOV	B,A		; SEE IF INITIALIZING A PART. THAT DOES EXIST
0361  3AC706  		LDA	RELDSK
0364  90      		SUB	B
0365  BE      		CMP	M				      
0366  D2CF03  		JNC	INIT$ERR		 
		
0369  04      		INR	B
036A  21D600  		LXI	H,DPB0-DPBL	; CALCULATE START OF DPB IN DRIVER
036D  111500  		LXI	D,DPBL
0370  19      	NXTDPB	DAD	D
0371  10FD    		DJNZ	NXTDPB
0373  E5      		PUSH	H
		
0374  3AB306  		LDA	PARTLUN
0377  47      		MOV	B,A
0378  210000  		LXI	H,0		; CALCULATE TOTAL LENGTH OF DPB'S TO BE MOVED 
037B  111500  		LXI	D,DPBL
037E  19      	NXTLEN	DAD	D
037F  10FD    		DJNZ	NXTLEN
0381  44      		MOV	B,H		; PUT LENGTH IN BC
0382  4D      		MOV	C,L
0383  D1      		POP	D		; PUT TO ADDRESS IN DE
0384  212FF0  		LXI	H,HSTBUF+DDPB	; PUT FROM ADDRESS IN HL
0387  EDB0    		LDIR
			
0389  21C700  		LXI	H,DDEFTBL	; CALCULATE START IN DDEFTBL
038C  3AB206  		LDA	STRLUN
038F  CB27    		SLAR	A		; MULT BY 2
0391  CB27    		SLAR	A		; MULT BY 4
0393  5F      		MOV	E,A
0394  1600    		MVI	D,0
0396  19      		DAD	D
0397  E5      		PUSH	H		; SAVE FOR SET INIT. BITS
0398  EB      		XCHG			; TO ADDRES IN DE
0399  2114F0  		LXI	H,HSTBUF+SECTBL ; FROM ADDRESS
039C  3AB306  		LDA	PARTLUN
039F  47      		MOV	B,A		
03A0  C5      	NXTDEF	PUSH	B		; MOVE PARTITION ADDRESS TABLE INTO DRIVER
03A1  1A      		LDAX	D		; DE = DDEFTBL
03A2  B6      		ORA	M		; HL = HSTBUF+SECTBL (MAGIC SECTOR)
03A3  77      		MOV	M,A
03A4  010300  		LXI	B,3
03A7  EDB0    		LDIR
03A9  13      		INX	D		; DDEFTBL IS 4 BYTES WIDE
03AA  C1      		POP	B
03AB  10F3    		DJNZ	NXTDEF
		
03AD  2103F0  		LXI	H,HSTBUF+DCTYPE ; GET L.U.N. SPECIFIC DATA FROM
03B0  ED5BA806		LDED	DATAPTR 	;  'MAGIC SECTOR'
03B4  011000  		LXI	B,16		;  PUT IT INTO SPACE RESERVED FOR THIS L.U.N.
03B7  EDB0    		LDIR
			
03B9  CDF304  		CALL	INIT$DRIVE
03BC  2011    		JRNZ	INIT$ERR	; ERROR ON PHYSICAL INITIALIZATION
		
03BE  E1      		POP	H		; SET INITIALIZATION BITS
03BF  23      		INX	H
03C0  23      		INX	H
03C1  23      		INX	H
03C2  110400  		LXI	D,DDEFL  
03C5  3AB306  		LDA	PARTLUN
03C8  47      		MOV	B,A
03C9  CBFE    	NXTFLG	SETB	7,M
03CB  19      		DAD	D
03CC  10FB    		DJNZ	NXTFLG
03CE  C9      		RET
		
03CF          	INIT$ERR:
03CF  D1      		POP	D		; CLEAR STACK
03D0  C32502  		JMP	ERREXT
		
		
03D3          	READ$SASI:
03D3  3AB706  		LDA	PNDWRT		; SECTOR WAITING TO BE WRITTEN ?
03D6  B7      		ORA	A
03D7  C4BB04  		CNZ	WR$SEC
03DA  3E03    		MVI	A,READOP	; FLAG A READ OPERATION
03DC  1801    		JR	RWOPER
		
03DE          	WRITE$SASI:
03DE  79      		MOV	A,C
		
03DF  32C306  	RWOPER: STA	WRTYPE		; SAVE WRITE TYPE
03E2  3AAC06  		LDA	SELERR
03E5  B7      		ORA	A
03E6  C0      		RNZ
03E7  3A7116  		LDA	NEWDSK
03EA  32BD06  		STA	REQDSK
03ED  2A7416  		LHLD	HRDTRK
03F0  22BE06  		SHLD	REQTRK
03F3  0E00    		MVI	C,0		; CALCULATE PHYSICAL SECTOR
03F5  3AC106  		LDA	BLCODE		; PHYSICAL SECTOR SIZE CODE
03F8  B7      		ORA	A		; TEST FOR ZERO
03F9  47      		MOV	B,A
03FA  3A7316  		LDA	NEWSEC
03FD  32C006  		STA	REQSEC		; INITIAL GUESS IS 128 BYTE SECTORS
0400  2811    		JRZ	DBLOK3		; 128 BYTE SECTORS ?
0402  CB3F    	DBLOK1: SRLR	A		; DIVIDE ACCUMULATOR BY 2
0404  CB19    		RARR	C		; SAVE OVERFLOW BITS
0406  10FA    		DJNZ	DBLOK1		; AND CONTINUE IF BLOCKING STILL <> 0
0408  32C006  		STA	REQSEC		; SAVE IT
040B  3AC106  		LDA	BLCODE		; CALCULATE BLKSEC
040E  47      		MOV	B,A		; FOR LOOPING
040F  CB01    	DBLOK2: RLCR	C		; NOE RESTORE THE OVERFLOW BY
0411  10FC    		DJNZ	DBLOK2		; ROTATING IT RIGHT
0413  79      	DBLOK3: MOV	A,C
0414  32C206  		STA	BLKSEC		; STORE IT
0417  3EFF    		MVI	A,0FFH
0419  32B806  		STA	RD$FLAG 	; FLAG A PRE-READ
041C  3AC306  		LDA	WRTYPE
041F  1F      		RAR			; CARRY IS SET ON WRDIR AND READOP
0420  3827    		JRC	ALLOC		; NO NEED TO CHECK FOR UNALLOCATED RECORDS
0422  1F      		RAR			; CARRY IS SET ON WRUNA
0423  3008    		JRNC	CHKUNA
0425  ED53C506		SDED	URECORD 	; SET UNALLOCATED RECORD #
0429  3D      		DCR	A
042A  32C406  		STA	UNALLOC 	; FLAG WRITING OF AN UNALLOCATED BLOCK
042D  3AC406  	CHKUNA: LDA	UNALLOC 	; ARE WE WRITING AN UNALLOCATED BLOCK ?
0430  B7      		ORA	A
0431  2816    		JRZ	ALLOC
0433  2AC506  		LHLD	URECORD 	; IS REQUESTED RECORD SAME AS EXPECTED
0436  ED52    		DSBC	D		;  SAME AS EXPECTED UNALLOCATED RECORD ?
0438  200F    		JRNZ	ALLOC		; IF NOT, THEN DONE WITH UNALLOCATED BLOCK
043A  AF      		XRA	A		; CLEAR PRE-READ FLAG
043B  32B806  		STA	RD$FLAG
043E  13      		INX	D		; INCREMENT TO NEXT EXPECTED UNALLOCATED RECORD
043F  ED53C506		SDED	URECORD
0443  3ACA06  		LDA	BLKMSK
0446  A3      		ANA	E		; IS IT THE START OF A NEW BLOCK ?
0447  2004    		JRNZ	CHKSEC
0449  AF      	ALLOC:	XRA	A		; NO LONGER WRITING AN UNALLOCATED BLOCK
044A  32C406  		STA	UNALLOC
		
		;*****************************************************************************
		; CHKSEC: THIS SUBROUTINE COMPARES THE REQUESTED DISK TRACK AND SECTOR	     ;
		;	  TO THE DISK,TRACK AND SECTOR CURRENTLY IN THE BUFFER. 	     ;
		;	  OUTPUT: ZERO FLAG SET IF SAME, RESET IF DIFFERENT		     ;
		;									     ;
044D  A7      	CHKSEC: ANA	A		; CLEAR CARRY FOR DSBC			     ;
044E  2ABE06  		LHLD	REQTRK							     ;
0451  ED5BCB06		LDED	OFFSET							     ;
0455  ED52    		DSBC	D							     ;
0457  2006    		JRNZ	CHKBUF							     ;
0459  3A7316  		LDA	NEWSEC							     ;
045C  B7      		ORA	A		; FIRST SECTOR OF DIRECTORY ?		     ;
045D  2812    		JRZ	SET$PRE$RD						     ;
045F  21BD06  	CHKBUF: LXI	H,REQDSK						     ;
0462  11B906  		LXI	D,HSTDSK						     ;
0465  0604    		MVI	B,4							     ;
0467  1A      	CHKBUF1:LDAX	D							     ;
0468  BE      		CMP	M							     ;
0469  200B    		JRNZ	READIT							     ;
046B  23      		INX	H							     ;
046C  13      		INX	D							     ;
046D  10F8    		DJNZ	CHKBUF1 						     ;
046F  181E    		JR	NOREAD		;  THEN NO NEED TO PRE-READ		     ;
		;*****************************************************************************
		
0471          	SET$PRE$RD:			; SET PRE READ FLAG FOR READING 
0471  3EFF    		MVI	A,0FFH		; DIRECTORY SO A PHY READ IS DONE
0473  32B806  		STA	RD$FLAG
		
0476  3AB706  	READIT: LDA	PNDWRT		; IS THERE A SECTOR THAT NEEDS TO BE WRITTEN ?
0479  B7      		ORA	A
047A  C4BB04  		CNZ	WR$SEC		; WRITE IT
047D  11B906  		LXI	D,HSTDSK	; SET UP NEW BUFFER PARAMETERS
0480  21BD06  		LXI	H,REQDSK
0483  010400  		LXI	B,4
0486  EDB0    		LDIR
0488  3AB806  		LDA	RD$FLAG 	; DO WE NEED TO PRE-READ ?
048B  B7      		ORA	A
048C  C4CC04  		CNZ	RD$SEC		; READ THE SECTOR
048F  2100F0  	NOREAD: LXI	H,HSTBUF	; POINT TO START OF SECTOR BUFFER
0492  018000  		LXI	B,128
0495  3AC206  		LDA	BLKSEC		; POINT TO LOCATION OF CORRECT LOGICAL SECTOR
0498  3D      	MOVIT1: DCR	A
0499  FA9F04  		JM	MOVIT2
049C  09      		DAD	B
049D  18F9    		JR	MOVIT1
049F  ED5B7616	MOVIT2: LDED	DMAA		; POINT TO DMA
04A3  3AC306  		LDA	WRTYPE		; IS IT A READ OR A WRITE
04A6  FE03    		CPI	READOP
04A8  2806    		JRZ	MOVIT3
04AA  EB      		XCHG			; SWITCH DIRECTION OF MOVE FOR WRITE
04AB  3E01    		MVI	A,1		; FLAG A PENDING WRITE
04AD  32B706  		STA	PNDWRT
04B0  EDB0    	MOVIT3: LDIR			; MOVE IT
04B2  3AC306  		LDA	WRTYPE		; CHECK FOR DIRECTORY WRITE
04B5  3D      		DCR	A
04B6  CCBB04  		CZ	WR$SEC		; WRITE THE SECTOR IF IT IS
04B9  AF      		XRA	A		; FLAG NO ERROR
04BA  C9      		RET			; RETURN TO BDOS
		
04BB  CDDE04  	WR$SEC: CALL	WRITE		; WRITE A PHYSICAL SECTOR
04BE  3E00    		MVI	A,0
04C0  32B706  		STA	PNDWRT		; FLAG NO PENDING WRITE
04C3  C8      		RZ			; RETURN IF WRITE WAS SUCCESSFUL
04C4  3AC306  		LDA	WRTYPE
04C7  FE03    		CPI	READOP		; IGNORE ERROR IF THIS IS A READ OPERATION
04C9  C8      		RZ
04CA  1809    		JR	RWERR
		
04CC  CDDA04  	RD$SEC: CALL	READ		; READ A PHYSICAL SECTOR
04CF  C8      		RZ			; RETURN IF SUCCESSFUL
04D0  3EFF    		MVI	A,0FFH		; FLAG BUFFER AS UNKNOWN
04D2  32B906  		STA	HSTDSK
04D5  D1      	RWERR:	POP	D		; THROW AWAY TOP OF STACK
04D6  3E01    		MVI	A,1		; SIGNAL ERROR TO BDOS
04D8  B7      		ORA	A
04D9  C9      		RET			; RETURN TO BDOS
		
		
		
		;
		;	READ - WRITE ROUTINES
		;
		;	READ A PHYSICAL SECTOR CODE
		;
04DA          	READ:
04DA  3E08    		MVI	A,RDBL		; READ COMMAND CODE
04DC  1802    		JR	DO$RW		; COMMON READ-WRITE ROUTINE
		;
		;	WRITE A PHYSICAL SECTOR CODE
		;
04DE          	WRITE:
04DE  3E0A    		MVI	A,WRBL		; WRITE COMMAND CODE
		;
		;	COMMON READ-WRITE CODE
		;
04E0  329606  	DO$RW:	STA	CMBFR		; COMMAND BUFFER OP CODE
04E3  CD3F05  		CALL	SET$SEC 	; CALCULATE AND INSTALL ACTUAL SECTOR
04E6  CD9205  		CALL	WAKE$UP 	; SETUP CONTROLLER
04E9  CCD505  		CZ	OUTCOM		; AND OUTPUT THE COMMAND
04EC  CC0506  		CZ	SASIRW		; DO READ OR WRITE
04EF  CC3206  		CZ	CHK$STAT	; CHECK THE BUS RESPONSE
04F2  C9      		RET
		
04F3          	INIT$DRIVE:
04F3  2AA806  		LHLD	DATAPTR 	; SEE IF IT'S XEBEC
04F6  7E      		MOV	A,M
04F7  E6E0    		ANI	11100000B
04F9  201C    		JRNZ	NOTXBC		; SKIP IF NOT
04FB  CD9E05  		CALL	GETCON		; GET CONTROLLER'S ATTENTION
04FE  219C06  		LXI	H,ICMND 	; INITIALIZATION COMMAND STRING
0501  CCD805  		CZ	OUTCM0		; OUTPUT COMMAND
0504  C0      		RNZ
0505  2AA806  		LHLD	DATAPTR 	; DRIVE CHARACTERISTIC DATA
0508  23      		INX	H
0509  23      		INX	H
050A  0608    		MVI	B,8		; 8 BYTES LONG
050C  1EC8    		MVI	E,(REQ OR POUT OR BUSY)
050E  CDED05  		CALL	OUTCM1		; OUTPUT THE DATA
0511  CC3206  		CZ	CHK$STAT	;  AND CHECK STATUS
0514  C32905  		JMP	RESDR		; mjm LETS NOT SEND ZEROS IF XEBEC
0517  2AA806  	NOTXBC: LHLD	DATAPTR
051A  110A00  		LXI	D,10		; NOW DO "ASSIGN DRIVE TYPE" COMMAND
051D  19      		DAD	D		;  ( FOR DATA PERIPHERALS DONTROLLERS )
051E  E5      		PUSH	H
051F  CD9E05  		CALL	GETCON		; GET CONTROLLER'S ATTENTION
0522  E1      		POP	H
0523  CCD805  		CZ	OUTCM0		; SEND THE COMMAND
0526  CC3206  		CZ	CHK$STAT
0529  CD9E05  	RESDR:	CALL	GETCON		; RESTORE THE HEADS
052C  21A206  		LXI	H,RCMND
052F  ED5BA806		LDED	DATAPTR 	; PUT CONTROL BYTE IN BUFFER
0533  13      		INX	D
0534  1A      		LDAX	D
0535  32A706  		STA	RCMND+5
0538  CCD805  		CZ	OUTCM0
053B  CC3206  		CZ	CHK$STAT
053E  C9      		RET
		
		
		;	CALCULATE THE REQUESTED SECTOR
		;
053F          	SET$SEC:
053F  2ABA06  		LHLD	HSTTRK		; GET REQUESTED TRACK
0542  29      		DAD	H		; *2
0543  29      		DAD	H		; *4
0544  29      		DAD	H		; *8
0545  29      		DAD	H		; *16
0546  29      		DAD	H		; *32
0547  29      		DAD	H		; *64 (64 SECTORS/TRACK)
0548  E5      		PUSH	H
0549  2AAA06  		LHLD	SECPTR
054C  4E      		MOV	C,M
054D  23      		INX	H
054E  56      		MOV	D,M
054F  23      		INX	H
0550  5E      		MOV	E,M
0551  E1      		POP	H
0552  19      		DAD	D		; ADD IN PARTITION OFFSET
0553  3001    		JRNC	NOCAR0		; CARRY FROM DAD (IF ANY) GOES INTO
0555  0C      		INR	C		;  HIGH ORDER BYTE OF SECTOR NUMBER
0556  3AC106  	NOCAR0: LDA	BLCODE
0559  47      		MOV	B,A
055A  B7      		ORA	A
055B  79      		MOV	A,C
055C  280B    		JRZ	NODIV
055E  E61F    		ANI	00011111B	; ELIMINATE L.U.N. BITS FROM DIVISION
0560  4F      		MOV	C,A
0561  CB29    	NXDIV:	SRAR	C
0563  CB1C    		RARR	H
0565  CB1D    		RARR	L
0567  10F8    		DJNZ	NXDIV
0569  3ABC06  	NODIV:	LDA	HSTSEC		; GET REQUESTED SECTOR
056C  5F      		MOV	E,A
056D  1600    		MVI	D,0
056F  19      		DAD	D		; ADD IT IN
0570  3001    		JRNC	NOCAR1
0572  0C      		INR	C
0573  79      	NOCAR1: MOV	A,C
0574  329706  		STA	CMBFR+1 	; MOVE TO COMMAND BUFFER
0577  7C      		MOV	A,H
0578  329806  		STA	CMBFR+2 	; MOVE REST OF SECTOR NUMBER TO COMMAND BUFFER
057B  7D      		MOV	A,L
057C  329906  		STA	CMBFR+3
057F  3E01    		MVI	A,1		; TRANSFER 1 SECTOR
0581  329A06  		STA	CMBFR+4
0584  2AA806  		LHLD	DATAPTR 	; GET CONTROL BYTE
0587  23      		INX	H
0588  7E      		MOV	A,M
0589  329B06  		STA	CMBFR+5 	; PUT INTO COMMAND BUFFER
058C  C9      		RET
		
058D  7E      	HLIHL:	MOV	A,M
058E  23      		INX	H
058F  66      		MOV	H,M
0590  6F      		MOV	L,A
0591  C9      		RET
		
0592  CD9E05  	WAKE$UP:CALL	GETCON
0595  C8      		RZ
0596  CDF304  		CALL	INIT$DRIVE
0599  C0      		RNZ
059A  CD9E05  		CALL	GETCON
059D  C9      		RET
		
		
		;
		;	GET THE BUS' ATTENTION
		;
059E          	GETCON:
059E  3AAE06  		LDA	BASE$PORT
05A1  4F      		MOV	C,A
05A2  0C      		INR	C		; CONTROL PORT ADDRESS TO REG. C
05A3  3E00    		MVI	A,RUN
05A5  ED79    		OUTP	A		; CLEAR SEL BIT
05A7  0600    		MVI	B,0		; TIMER COUNTER
05A9  0D      	GETCN1: DCR	C
05AA  AF      		XRA	A
05AB  ED79    		OUTP	A		; CLEAR DATA REGISTER
05AD  3AC600  		LDA	CNUM		; GET CONTROLLER NUMBER
05B0  0C      		INR	C		; AND SEND IT TO THE CARD
05B1  0C      		INR	C		; -SENC- PORT
05B2  ED79    		OUTP	A
05B4  0D      		DCR	C		; CONTROL PORT
05B5  ED78    		INP	A		; READ CONTROL PORT
05B7  E608    		ANI	BUSY
05B9  2804    		JRZ	GETCN2
05BB  10EC    		DJNZ	GETCN1
05BD  05      		DCR	B		; RESET PSW/Z TO INDICATE ERROR
05BE  C9      		RET
05BF          	GETCN2: 
05BF  3E40    		MVI	A,SEL
05C1  ED79    		OUTP	A		; WAKE UP CONTROLER
05C3  0600    		MVI	B,0
05C5          	GETCN3:
05C5  ED78    		INP	A
05C7  E608    		ANI	BUSY
05C9  2004    		JRNZ	GETCN4
05CB  10F8    		DJNZ	GETCN3
05CD  05      		DCR	B		; RESET PSW/Z TO INDICATE ERROR
05CE  C9      		RET
05CF          	GETCN4: 
05CF  3E00    		MVI	A,RUN
05D1  ED79    		OUTP	A
05D3  AF      		XRA	A		; NO ERROR
05D4  C9      		RET
		
		
		
		
		;
		; OUTCOM: OUTPUT A COMMAND TO THE DRIVE
		;
05D5  219606  	OUTCOM: LXI	H,CMBFR
05D8  23      	OUTCM0: INX	H
05D9  7E      		MOV	A,M		; CLEAR LUN BITS IN COMMAND BUFFER
05DA  E61F    		ANI	00011111B
05DC  77      		MOV	M,A
05DD  3A9506  		LDA	LUN		; OR L.U.N. BITS INTO COMMAND
05E0  B6      		ORA	M
05E1  77      		MOV	M,A
05E2  2B      		DCX	H
05E3  0606    		MVI	B,6		; COMMAND IS 6 BYTES LONG
05E5  3AAE06  		LDA	BASE$PORT
05E8  4F      		MOV	C,A		; DATA PORT TO REG. C
05E9  3C      		INR	A
05EA  57      		MOV	D,A		; CONTROL PORT TO REG. D
05EB  1ED8    		MVI	E,(REQ OR CMND OR POUT OR BUSY)
05ED  C5      	OUTCM1: PUSH	B
05EE  0610    		MVI	B,16		; SET LOOP COUNTER
05F0  4A      		MOV	C,D		; CONTROL PORT ADDRESS TO REG. C
05F1  ED78    	OUTLOP: INP	A
05F3  E6D8    		ANI	(REQ OR CMND OR POUT OR BUSY)
05F5  BB      		CMP	E
05F6  2805    		JRZ	OUTOK
05F8  10F7    		DJNZ	OUTLOP
05FA  05      		DCR	B
05FB  C1      		POP	B
05FC  C9      		RET
05FD  C1      	OUTOK:	POP	B		; RETURNS DATA PORT ADDRESS TO REG. C
05FE  EDA3    		OUTI			; OUTPUT COMMAND BYTE
0600  C2ED05  		JNZ	OUTCM1
0603  AF      		XRA	A
0604  C9      		RET
		;
		;	ACTUAL READ-WRITE OF DATA
		;
0605          	SASIRW: 			; THIS ROUTINE IS FOR READING AND WRITING
0605  3A9606  		LDA	CMBFR
0608  D608    		SUI	RDBL		; IS COMMAND A READ ?
060A  3EB2    		MVI	A,0B2H		; INIR FOR READS
060C  2802    		JRZ	NREAD
060E  3EB3    		MVI	A,0B3H		; OUTIR FOR WRITES
0610  322F06  	NREAD:	STA	HERE+1
0613  2100F0  		LXI	H,HSTBUF	; AND WRITING DATA
0616  3AAE06  		LDA	BASE$PORT
0619  4F      		MOV	C,A		; DATA PORT ADDRESS TO REG. C
061A  0C      	NXTSEC: INR	C		; INCREMENT TO CONTROL PORT
061B  ED78    	SASICK: INP	A		; FIRST CHECK FOR DRIVE READY
061D  323316  		STA	DISK$STAT	; STORE STATUS
0620  E6D8    		ANI	(CMND OR BUSY OR REQ OR POUT)
0622  FE98    		CPI	(CMND OR BUSY OR REQ)  ; IF POUT DROPS,
0624  C8      		RZ			       ;  WE ARE INTO STATUS PHASE
0625  E698    		ANI	(CMND OR BUSY OR REQ)
0627  FE88    		CPI	(BUSY OR REQ)	; WHEN CMND DROPS, SEEK IS COMPLETE, AND WE ARE
0629  20F0    		JRNZ	SASICK		;  READY FOR DATA TRANSFER
062B  0D      		DCR	C		; DATA PORT ADDRESS TO REG. C
062C  0680    		MVI	B,128
062E  EDB2    	HERE:	INIR			; CHANGED TO OUTIR FOR WRITE
0630  18E8    		JR	NXTSEC
		
		
		
		
		;	CHECK STATUS OF READ OR WRITE
		;
0632          	CHK$STAT:			; THIS ROUTINE CHECKS WHAT'S UP
0632  21B606  		LXI	H,STAT		; STATUS BUFFER
0635  3AAE06  		LDA	BASE$PORT
0638  57      		MOV	D,A		; DATA PORT ADDRESS STORED IN REG. D
0639  3C      		INR	A
063A  5F      		MOV	E,A		; CONTROL PORT ADDRESS STORED IN REG. E
063B  1804    		JR	CHK01
063D  4A      	CHKNXT: MOV	C,D		; INPUT FROM DATA PORT
063E  ED78    		INP	A
0640  77      		MOV	M,A		; SAVE IN MEMORY
0641  4B      	CHK01:	MOV	C,E		; INPUT FROM CONTROL PORT
0642  ED78    		INP	A
0644  E6F0    		ANI	(MSG OR REQ OR CMND OR POUT)
0646  FE90    		CPI	(REQ OR CMND)
0648  28F3    		JRZ	CHKNXT
064A  FEB0    		CPI	(MSG OR REQ OR CMND)
064C  20F3    		JRNZ	CHK01
064E  4A      		MOV	C,D		; INPUT FROM DATA PORT
064F  ED78    		INP	A		; GET FINAL BYTE
0651  7E      		MOV	A,M		; AND THROW IT AWAY, GET STATUS
0652  E603    		ANI	03		; EITHER BIT SET IS AN ERROR
0654  C9      		RET
		
		****************************************************************
		
		;
		;	DATA BUFFERS AND STORAGE
		;
0655  00000000	LUNDATA:DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; 16 BYTES OF DATA FOR EACH
      00000000
      00000000
      00000000
0665  00000000		DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; LOGICAL UNIT -- PULLED FROM
      00000000
      00000000
      00000000
0675  00000000		DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; MAGIC SECTOR ON
      00000000
      00000000
      00000000
0685  00000000		DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; INITIALIZATION
      00000000
      00000000
      00000000
						     ; BYTE 1 : DRIVE/CONTROLLER TYPE
						     ; BYTE 2 : CONTROL BYTE
						     ; BYTES 3 - 10 : DRIVE CHARACTERISTIC DATA
						     ; BYTES 11 - 16 : ASSIGN DRIVE TYPE
						     ;				     COMMAND
0695  00      	LUN:	DB	0		; LOGICAL UNIT NUMBER
0696  00000000	CMBFR:	DB	0,0,0,0,0,0	; COMMAND BUFFER
      0000
069C  0C000000	ICMND:	DB	INIT,0,0,0,0,0	; INITIALIZE DRIVE CHARACTERISTICS COMMAND
      0000
						;					 STRING
06A2  01000000	RCMND:	DB	RECAL,0,0,0,0,0 ; RESTORE COMMAND
      0000
06A8  0000    	DATAPTR:DW	0		; POINTER TO LUNDATA FOR THIS L.U.N.
06AA  0000    	SECPTR	DW	0		; POINTER TO CURRENT SECTOR TABLE ENTRY
06AC  00      	SELERR	DB	0		; SELECT ERROR FLAG
06AD  00      	FLAGS:	DB	0		; BIT 7 = INITIALIZATION FLAG,
						; BIT 6 = FLOPPY DISK FLAG
						; BIT 5 = REMOVABLE MEDIA FLAG
						; BIT 4 (SPARE)
						; BITS 0-3 = PARTITION NUMBER,
06AE          	BASE$PORT:
06AE  00      		DB	0		; BASE PORT ADDRESS
06AF          	INIT$FLAG:
06AF  01      		DB	1		; INITIALIZATION FLAG
06B0  00      	DRIV0	DB	0		; FIRST PHYSICAL DRIVE NUMBER
06B1          	DRIV$LAST:			; LAST PHYSICAL DRIVE NUMBER
06B1  00      		DB	0
06B2  00      	STRLUN	DB	0		; RELATIVE PARTITION NUMBER OF CURRENT LUN
06B3  00      	PARTLUN DB	0		; NUMBER OF PARTITIONS IN CURRENT LUN
06B4  0000    	LVECADD DW	0		; ADDRESS OF LOGIN VECTOR (WHEN INITIALIZED)
06B6  00      	STAT:	DB	0
		;
		; DEBLOCKING VARIABLES
		;
06B7  00      	PNDWRT	DB	0		; PENDING WRITE FLAG
06B8  00      	RD$FLAG:DB	0		; FLAG FOR PRE-READ
06B9  FF      	HSTDSK	DB	0FFH
06BA  0000    	HSTTRK	DW	0
06BC  00      	HSTSEC	DB	0
06BD  00      	REQDSK	DB	0
06BE  0000    	REQTRK	DW	0
06C0  00      	REQSEC	DB	0
06C1  00      	BLCODE: DB	0		; SECTOR SIZE CODE (0=128,1=256,2=512,3=1024)
06C2  00      	BLKSEC: DB	0		; LOCATION OF LOGICAL SECTOR WITHIN PHYSICAL
06C3  00      	WRTYPE	DB	0
06C4  00      	UNALLOC DB	0
06C5  0000    	URECORD DW	0
06C7  00      	RELDSK	DB	0		; DISK NUMBER RELATIVE TO 0
06C8  0000    	CURDPB	DW	0		; ADDRESS OF CURRENT DISK PARAMETER BLOCK
06CA  00      	BLKMSK	DB	0		; BLOCK MASK
06CB  00      	OFFSET	DB	0
		
06CC  FFFFFFFF		REPT	(($+0FFH) AND 0FF00H)-$
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
      FFFFFFFF
		
0700          	MODLEN	EQU	$-MBASE
0700  24800000	 DB 00100100B,10000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00000001B
      00000001
0708  54015401	 DB 01010100B,00000001B,01010100B,00000001B,01010100B,00000001B,01010100B,00000001B
      54015401
0710  54015401	 DB 01010100B,00000001B,01010100B,00000001B,01010100B,00000001B,01010100B,00000001B
      54015401
0718  54000000	 DB 01010100B,00000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00000000B
      00000000
0720  00000000	 DB 00000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00000000B
      00000000
0728  00000000	 DB 00000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00000000B
      00000000
0730  00000000	 DB 00000000B,00000000B,00000000B,00000000B,00000000B,00010010B,01001000B,10010001B
      00124891
0738  12008210	 DB 00010010B,00000000B,10000010B,00010000B,00000000B,10010010B,00001000B,00001001B
      00920809
0740  24080809	 DB 00100100B,00001000B,00001000B,00001001B,00010000B,01000010B,00010010B,00000000B
      10421200
0748  11090089	 DB 00010001B,00001001B,00000000B,10001001B,00000000B,00000000B,00000010B,00100010B
      00000222
0750  40804408	 DB 01000000B,10000000B,01000100B,00001000B,00010010B,00100001B,00000000B,00000000B
      12210000
0758  20880004	 DB 00100000B,10001000B,00000000B,00000100B,01000000B,01000100B,00000001B,00000000B
      40440100
0760  01080124	 DB 00000001B,00001000B,00000001B,00100100B,01001001B,00001000B,10010010B,00100100B
      49089224
0768  92491111	 DB 10010010B,01001001B,00010001B,00010001B,00010000B,10001000B,00000010B,00000000B
      10880200
0770  02120012	 DB 00000010B,00010010B,00000000B,00010010B,00000000B,00000001B,00010000B,00010000B
      00011010
0778  01002440	 DB 00000001B,00000000B,00100100B,01000000B,01001000B,01001001B,00100001B,00001001B
      48492109
0780  00240212	 DB 00000000B,00100100B,00000010B,00010010B,00000000B,10001001B,00000100B,00000100B
      00890404
0788  24088810	 DB 00100100B,00001000B,10001000B,00010000B,01001000B,00000000B,00000100B,10001001B
      48000489
0790  20224110	 DB 00100000B,00100010B,01000001B,00010000B,00100100B,00000001B,00001000B,10000100B
      24010884
0798  22020800	 DB 00100010B,00000010B,00001000B,00000000B,00100100B,10010010B,01000100B,00000100B
      24924404
07A0  91009240	 DB 10010001B,00000000B,10010010B,01000000B,01000100B,10010010B,00100001B,00100100B
      44922124
07A8  40100080	 DB 01000000B,00010000B,00000000B,10000000B,00000000B,00010000B,00000010B,00100010B
      00100222
07B0  12100888	 DB 00010010B,00010000B,00001000B,10001000B,10000000B,00000001B,00000000B,00000000B
      80010000
07B8  00000101	 DB 00000000B,00000000B,00000001B,00000001B,00000001B,00000000B,00000000B,00000000B
      01000000
07C0  21002481	 DB 00100001B,00000000B,00100100B,10000001B,00000000B,00000000B,00001001B,00000000B
      00000900
07C8  00000000	 DB 00000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00000000B
      00000000
07D0  00000000	 DB 00000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00000000B
      00000000
07D8  00000000	 DB 00000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00000000B
      00000000
		;PUT BITMAP HERE
		
		********************************************************
		** COMMON BUFFERS
		********************************************************
C000          		ORG	COMBUF
C000          		DS	20
C014          		DS	64
C054          		DS	2
C056          	DIRBUF	DS	128
		********************************************************
		
		********************************************************
		** BUFFERS
		********************************************************
F000          		ORG	BUFFER
F000          	HSTBUF: DS	512
		CSV0:	DS	0  
F200          	ALV0:	DS	2048/8  
		CSV1:	DS	0  
F300          	ALV1:	DS	2048/8  
		CSV2:	DS	0  
F400          	ALV2:	DS	2048/8  
		CSV3:	DS	0
F500          	ALV3:	DS	2048/8  
		CSV4:	DS	0
F600          	ALV4:	DS	2048/8  
		CSV5:	DS	0
F700          	ALV5:	DS	2048/8  
		CSV6:	DS	0
F800          	ALV6:	DS	2048/8  
		CSV7:	DS	0
F900          	ALV7:	DS	2048/8  
		CSV8:	DS	0
		ALV8:	DS	0
		**********************************************************
0A00          	BUFLEN	EQU	$-BUFFER
FA00          		END



Statistics:

     4	passes
     0	jr promotions
   217	symbols
  2033	bytes

   253	macro calls
  3759	macro bytes
     0	invented symbols
