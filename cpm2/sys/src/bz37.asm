
;  April 1, 1982  14:00  "BZ37.ASM"
********** CP/M LINKABLE BOOT ROUTINE **********
********** 5.25" Z37 CONTROLLER BOOT  **********

	TITLE	'BZ37 version 2.240'

	DW	MODLEN,(-1)

BASE	EQU	0000H	;ORG FOR RELOC

	MACLIB Z80
	$-MACRO

***** PHYSICAL DRIVES ARE ASSIGNED AS FOLLOWS *****
*****					      *****
*****  46 = FIRST Z37 5.25" DRIVE             *****
*****  47 = SECOND Z37 5.25" DRIVE            *****
*****  48 = THIRD Z37 5.25" DRIVE             *****
*****  49 = FOURTH Z37 5.25" DRIVE            *****
*****					      *****
***************************************************

***************************************************
**  PORTS AND CONSTANTS
***************************************************

SPT	  EQU	9	; 9 (512 BYTE) SECTORS ON 5.25" DD

UIVEC	EQU	201FH		; INTERRUPT VECTORS BASE ADDRESS
Z37	EQU	078H
ICL	EQU	Z37+0		; DISK CONTROL PORT
ACL	EQU	Z37+1		; INTERFACE MUX PORT
COMD	EQU	Z37+2		; 1797 COMMAND REGISTER
STAT	EQU	Z37+2		; STATUS REGISTER
SECT	EQU	Z37+2		; SECTOR REGISTER
DATA	EQU	Z37+3		; DATA REGISTER

?PORT	  EQU	0F2H

?AUX	  EQU	0D0H
?PRINTER  EQU	0E0H
?MODEM	  EQU	0D8H

?LINE$CTL EQU	00000011B	; NO PARITY, 1 STOP BIT, 8 DATA BITS
?MOD$CTL  EQU	00001111B	; SET ALL CONTROL LINES TO 'READY'

?S19200   EQU	6	; 19,200 BAUD
?S9600	  EQU	12	;  9,600 BAUD
?S4800	  EQU	24	;  4,800 BAUD
?S2400	  EQU	48	;  2,400 BAUD
?S1200	  EQU	96	;  1,200 BAUD
?S600	  EQU	192	;    600 BAUD
?S300	  EQU	384	;    300 BAUD
?S150	  EQU	768	;    150 BAUD
?S110	  EQU	1047	;    110 BAUD
***************************************************

***************************************************
** LINKS TO REST OF SYSTEM
***************************************************
@BDOS	  EQU	BASE+800H
@BIOS	  EQU	BASE+1600H
***************************************************

***************************************************
** PAGE ZERO ASSIGNMENTS
***************************************************
	ORG	0

?CPM	   DS	3
?DEV$STAT  DS	1
?LOGIN$DSK DS	1
?BDOS	   DS	3
?RST1	   DS	3
?CLOCK	   DS	2
?INT$BYTE  DS	1
?CTL$BYTE  DS	1
	   DS	77
?FCB	   DS	36
?DMA	   DS	128
?TPA	   DS	0
***************************************************

***************************************************
** START OF RELOCATABLE DISK BOOT MODULE
*************************************************** 
	ORG	2280H
BOOT:
	JMP	AROUND
SECTRS	DB	0	; NUMBER OF SECTORS TO BOOT, FROM MOVCPM.COM
			; PATCHED DURING EXECUTION OF MOVCPM
DRIVE	DB	46	; ALSO PATCHED BY ASSIGN PROGRAM
AROUND:
	POP	H	; ERROR ROUTINE ADDRESS
	LXI	SP,?STACK
	PUSH	H

***************************************************
*** START OF UNIQUE ROUTINE FOR BOOTING
***************************************************
	LDA	DRIVE
	SUI	46		; BOOT ONLY FROM Z37 DRIVES
	CPI	4		; MAX. 4 DRIVES ON Z37
	RNC
	MOV	C,A
	MVI	A,8
LOOP:	ADD	A
	DCR	C
	JP	LOOP
	ORI	00001111B	; TURN ON MOTOR, INTRQ, DRQ, DDEN
	OUT	ICL		; SEND TO CONTROL REGISTER

	LDA	SECTRS		; MAINTAIN FAST BOOTING,
	ADI	00000101B	; ROUND UP (INCLUDE BOOT SECTORS)
	ANI	11111100B	; INTEGER DIVISION
	RRC
	RRC			; BY 4
	MOV	D,A		; NUMBER OF SECTORS TO READ

	LXI	H,INTRQ
	SHLD	UIVEC+9+1	; SET RST4 ROUTINE.
	LXI	B,DATA		; C = INPUT DATA PORT  B=0
	LXI	H,@BDOS-256	; -256 FOR BOOT
	MVI	A,00001011B	; RESTORE HEAD TO TRACK 0
STEP:	DI			; DO STEP BY POLLING BUSY (NOT BY INTRQ)
	OUT	COMD		; SEND STEP COMMAND
WB:	IN	STAT		; WAIT FOR BUSY
	RRC
	JRNC	WB
WNB:	IN	STAT		; THEN WAIT FOR NOT BUSY
	RRC
	JRC	WNB
	IN	STAT		; INSURE INTRQ IS CLEARED
	EI
	MVI	A,1
	OUT	ACL		; ENABLE 1797 TRACK/SECTOR REGISTERS
	XRA	A
	OUT	SECT		; START AT SECTOR 0 (BEFORE INCREMENT)
	MVI	E,SPT		; SET COUNTER FOR SECTORS-PER-TRACK
RDSEC:	MVI	A,1
	OUT	ACL		; ENABLE TRACK/SECTOR REGISTERS
	IN	SECT
	INR	A		; SECTOR # +1
	OUT	SECT
	XRA	A		; SELECT COMMAND/DATA REGISTERS
	OUT	ACL
	MVI	A,10001000B	; READ RECORD, SIDE 0
	OUT	COMD		; ISSUE COMMAND
	EI
RDLOOP: HLT
	INI			; INPUT BYTE
	JR	RDLOOP		; LOOP UNTIL INTERRUPT
INTRTN: ANI	10011111B	; SET PSW/Z TO INDICATE ERROR STATUS
	JRZ	OK		; ALL'S WELL IF ZERO
	LDA	ERRF		; SEE IF THIS IS THE SECOND TRY
	ORA	A
	JRNZ	XIT
	CMA
	STA	ERRF		; ALLOW RETRY ONLY ONCE
	MVI	A,01001011B	; STEP-IN WITHOUT UPDATE (FOR 80 TRK DRIVE)
	JR	STEP
XIT:	XRA	A
	OUT	ICL		; MOTOR OFF AND DESELECT
	RST	0		; RETURN TO MONITOR
OK:	CMA
	STA	ERRF		; PREVENT FURTHER RETRY ON THIS TRACK
	DCR	D		; COUNT A SECTOR READ
	JRZ	DONE		; STOP IF ALL SECTORS READ
	DCR	E		; COUNT ONE SECTOR ON THIS TRACK
	JRNZ	RDSEC		; LOOP IF MORE ON THIS TRACK
	XRA	A
	STA	ERRF		; RESET FLAG FOR NEW TRACK
	MVI	A,01011011B	; STEP-IN WITH UPDATE
	JR	STEP		; STEP-IN AND START NEW TRACK
DONE:	MVI	A,00001000B	; DESELECT DRIVE
	OUT	ICL   

***************************************************
** START OF SYSTEM INITIALIZATION
*************************************************** 
	DI
* INITIALIZE I/O, ETC
	XRA	A
	OUT	?AUX+4
	OUT	?PRINTER+4
	OUT	?MODEM+4
	MVI	A,?LINE$CTL
	ORI	10000000B	; ENABLE DIVISOR LATCH
	OUT	?AUX+3
	OUT	?PRINTER+3
	OUT	?MODEM+3
* BAUD RATE SETUP:
	LXI	H,?S9600	; AUX SERIAL @ 9600 BAUD
	MOV	A,L
	OUT	?AUX
	MOV	A,H
	OUT	?AUX+1
	LXI	H,?S9600	; PRINTER @ 9600 BAUD
	MOV	A,L
	OUT	?PRINTER
	MOV	A,H
	OUT	?PRINTER+1
	LXI	H,?S300 	; MODEM (PAPER TAPE) @ 300 BAUD
	MOV	A,L
	OUT	?MODEM
	MOV	A,H
	OUT	?MODEM+1
* NOW GET PORTS READY FOR I/O
	MVI	A,?LINE$CTL	; NOW DE-SELECT DIVISOR LATCH
	OUT	?AUX+3
	OUT	?PRINTER+3
	OUT	?MODEM+3
	MVI	A,?MOD$CTL	; SIGNAL 'READY'
	OUT	?AUX+4
	OUT	?PRINTER+4
	OUT	?MODEM+4
	IN	?AUX+5		; RESET ANY STRAY ACTIVITY
	IN	?PRINTER+5
	IN	?MODEM+5
	IN	?AUX
	IN	?PRINTER
	IN	?MODEM
* END OF I/O INITIALIZATION
	LXI	H,?CODE 	; SEQUENCE TO MOVE MEMORY-MAP
	MVI	B,?CODE$LEN	; NUMBER OF BYTES IN SEQUENCE
	MVI	C,?PORT 	; I/O PORT TO SEND SEQUENCE
	OUTIR
	JMP	@BIOS
?CODE	DB	0000$01$00B
	DB	0000$11$00B
	DB	0000$01$00B
	DB	0000$10$00B
	DB	0000$11$00B
	DB	0000$10$00B
	DB	0010$00$10B	; FOR "-FA" MACHINES
?CODE$LEN	EQU	$-?CODE

ERRF	DB	0	;ERROR FLAG FOR CONTROL OF 80 TRACK SITUATION:
;IF A 40-TRACK DISK IS BEING BOOTED ON AN 80-TRACK DRIVE EACH TRACK
;REQUIRES TWO STEPS, ONLY UPDATING TRACK REGISTER ON ONE.

INTRQ:	IN	STAT		; TURN OFF INTRQ
	INX	SP		; DISCARD RETURN ADDRESS
	INX	SP
	EI
	JMP	INTRTN		; JUMP BACK TO READ LOOP

	REPT	256-($-BOOT)-1
	DB	0
	ENDM

ID	DB	10		; BOOT ROUTINE IDENTIFICATION
MODLEN	EQU	$-BOOT		; MUST BE 256 BYTES
?STACK: EQU	$+128

 DB 00000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00010000B,00000000B
 DB 00000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00000000B
 DB 00000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00000000B,00000000B
 DB 00000000B,00000000B,00000000B,00000000B,00000100B,00000000B,00000000B,00000000B
	END
