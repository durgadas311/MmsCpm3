 6530 =         VERS equ '0e' ; January 17, 1983  12:51  drm  "OSZ89.ASM"
                
                	maclib	Z80
                
                ;*****************************************************
                ;**** BDOS interface, BIOS entry, and DMA	 *****
                ;**** handler for CP/M-422, Z89 resident code.	 *****
                ;****  Copyright (C) 1983 Magnolia microsystems  *****
                ;*****************************************************
                
 0000 =         false	equ	0
 FFFF =         true	equ	not false
                
 0000 =         CPM	equ	0	;warmboot entry for users
 0005 =         BDOS	equ	5	;BDOS entry for users
 0008 =         RST1	equ	(1)*8
 000B =         clk	equ	RST1+3
 000D =         ictl	equ	RST1+5
 005C =         FCB	equ	5CH
 0080 =         DMA	equ	80H
 0100 =         TPA	equ	0100H
                
 0800 =         KHz	equ	2048	;clock speed in KiloHertz
                
 000D =         cr	equ	13
 000A =         lf	equ	10
                ;********************************************************
                ;*  I/O port base addresses
                ;********************************************************
                ;m422	equ	078h
 00F2 =         port	equ	0f2h
                
                ;********************************************************
                ;*   77422 board ports
                ;********************************************************
                ;dat422  equ	 m422	 ;input/output
                ;intoff  equ	 m422+1  ;output only
                ;nmi	 equ	 m422+2  ;output only
                ;tick	 equ	 m422+3  ;output only
                ;sta422  equ	 m422+1  ;input only
                
                
                	cseg
 0000           	org	0
                BDOS$1:
 0000 0000      CCPl:	dw	0	;replaced by serial number after start-up
 0002 0000      CCPa:	dw	0
 0004 1402      	dw	colds	;cold start address
                
 0006 C30000    @BDOS:	JMP	0	;address filled at start-up.
                
 0009 0000      	dw	0	;for compatability only, not functional
 000B 0000      	dw	0
 000D 0000      	dw	0
 000F 0000      	dw	0
                
 0011 5902      FUNTAB: dw	wstart	;go directly to local warm-boot
 0013 F600      	dw	putget	;read console, swap memory and go...
 0015 E700      	dw	do	;write console, ...
 0017 F600      	dw	putget	;read reader, ...
 0019 E700      	dw	do	;write punch, ...
 001B E700      	dw	do	;write list, ...
 001D 8100      	dw	dcio	;direct console I/O
 001F F600      	dw	putget	;get iobyte
 0021 E700      	dw	do	;set iobyte
 0023 8900      	dw	bufout	;buffered console output, special processing
 0025 9B00      	dw	bufin	;beffered console input, special processing
 0027 F600      	dw	putget	;console input status
                
 0029 F600      	dw	putget	;return version
 002B E700      	dw	do	;reset disk system
 002D E700      	dw	do	;select drive
 002F FC00      	dw	pgF33	;open file, put and get FCB
 0031 0601      	dw	pFCB	;close file, put FCB, get only error code
 0033 0B01      	dw	pFgD	;search first, put FCB and get DMA (+error code)
 0035 2D01      	dw	DMAgo	;search next, get DMA
 0037 0601      	dw	pFCB	;delete file, put FCB and get only error code
 0039 1701      	dw	pFgFD	;read sequential, put FCB, get DMA+FCB
 003B 2201      	dw	pFDgF	;write sequential, put FCB+DMA, get FCB
 003D FC00      	dw	pgF33	;make file entry
 003F 0601      	dw	pFCB	;rename file
 0041 F600      	dw	putget	;return login vector
 0043 F600      	dw	putget	;return current drive
 0045 3F01      	dw	sdma	;set dma address (for local use only)
 0047 3F01      	dw	alloc	;return alloc vector address (actual alloc vector)
 0049 E700      	dw	do	;write protect drive
 004B F600      	dw	putget	;get R/O vector
 004D 0601      	dw	pFCB	;set file attributes
 004F 3301      	dw	gDPB	;get DPB address (actual DPB)
 0051 F600      	dw	putget	;set/get user number
 0053 1701      	dw	pFgFD	;read random
 0055 2201      	dw	pFDgF	;write random
 0057 0101      	dw	pgFCB	;compute file size
 0059 0101      	dw	pgFCB	;set random record number
 005B E700      	dw	do	;reset individual drives
 005D 3F01      	dw	go	;no function
 005F 3F01      	dw	go	;no function
 0061 2201      	dw	pFDgF	;write random, zero fill
 0029 =         NFUNCS equ ($-FUNTAB)/2
                
 0063 210000    bdosf:	lxi	h,0	;execute a BDOS function
 0066 22D703    	shld	retin
 0069 3AD203    	lda	func
 006C FEE0      	cpi	0E0H	;77422 is instructing us to load a COM file and run...
 006E CA4001    	jz	ldngo
 0071 FE29      	cpi	NFUNCS
 0073 D0        	rnc
 0074 4F        	mov	c,a
 0075 0600      	mvi	b,0
 0077 211100    	lxi	h,FUNTAB
 007A 09        	dad	b
 007B 09        	dad	b
 007C 5E        	mov	e,m
 007D 23        	inx	h
 007E 56        	mov	d,m
 007F EB        	xchg
 0080 E9        	pchl
                
 0081 3AD303    dcio:	lda	info
 0084 07        	rlc	;is bit 7 a "1" ?
                	jrnc	do	;output, don't return any info
 0085+3060      	DB	30H,DO-$-1
                	jr	putget	;input/status, must return data
 0087+186D      	DB	18H,PUTGET-$-1
                
 0089 210001    bufout: lxi	h,TPA
                	lbcd	info	;normally this is the message address but we changed
 008C+ED4B      	DB	0EDH,4BH
 008E+D303      	DW	INFO
 0090 CD8C03    	call	get422	;the rules. now its the message length.
 0093 110001    	lxi	d,TPA
 0096 0E09      	mvi	c,9
 0098 C30500    	jmp	BDOS
                
 009B 3AD303    bufin:	lda	info
 009E 210001    	lxi	h,TPA
 00A1 77        	mov	m,a
 00A2 23        	inx	h
 00A3 3600      	mvi	m,0
 00A5 110001    	lxi	d,TPA
 00A8 0E0A      	mvi	c,10
 00AA CD0500    	call	BDOS
 00AD 210101    	lxi	h,TPA+1
 00B0 6E        	mov	l,m
 00B1 2600      	mvi	h,0
 00B3 23        	inx	h
 00B4 22D703    	shld	retin
 00B7 CD5E03    	call	put
 00BA 210101    	lxi	h,TPA+1
                	lbcd	retin
 00BD+ED4B      	DB	0EDH,4BH
 00BF+D703      	DW	RETIN
 00C1 C36403    	jmp	put422
                
 00C4 218000    getDMA: lxi	h,DMA	;
 00C7 018000    	lxi	b,128
 00CA C38C03    	jmp	get422
                
 00CD 012400    getFCB: lxi	b,36
 00D0 215C00    	lxi	h,FCB
 00D3 22D303    	shld	info
 00D6 C38C03    	jmp	get422
                
 00D9 012100    putF33: lxi	b,33
                	jr	pf0
 00DC+1803      	DB	18H,PF0-$-1
                
 00DE 012400    putFCB: lxi	b,36
 00E1 215C00    pf0:	lxi	h,FCB
 00E4 C36403    	jmp	put422
                
                do:	lded	info
 00E7+ED5B      	DB	0EDH,5BH
 00E9+D303      	DW	INFO
 00EB 3AD203    	lda	func
 00EE 4F        	mov	c,a
 00EF CD0500    	call	BDOS
 00F2 22D703    	shld	retin
 00F5 C9        	ret
                
 00F6 CDE700    putget: call	do
 00F9 C35E03    	jmp	put
                
 00FC CD0601    pgF33:	call	pFCB
                	jr	putF33
 00FF+18D8      	DB	18H,PUTF33-$-1
                
 0101 CD0601    pgFCB:	call	pFCB
                	jr	putFCB
 0104+18D8      	DB	18H,PUTFCB-$-1
                
 0106 CDCD00    pFCB:	call	getFCB
                	jr	putget
 0109+18EB      	DB	18H,PUTGET-$-1
                
 010B CD0601    pFgD:	call	pFCB
 010E 218000    putDMA: lxi	h,DMA
 0111 018000    	lxi	b,128
 0114 C36403    	jmp	put422
                
 0117 CDFC00    pFgFD:	call	pgF33
 011A 3AD703    	lda	retin
 011D B7        	ora	a
 011E C0        	rnz
 011F C30E01    	jmp	putDMA
                
 0122 CDCD00    pFDgF:	call	getFCB
 0125 CDC400    	call	getDMA
 0128 CDF600    	call	putget
                	jr	putF33
 012B+18AC      	DB	18H,PUTF33-$-1
                
 012D CDF600    DMAgo:	call	putget
 0130 C30E01    	jmp	putDMA
                
 0133 CDE700    gDPB:	call	do
 0136 2AD703    	lhld	retin
 0139 011500    	lxi	b,21
 013C C36403    	jmp	put422
                
                sdma:
                alloc:
 013F C9        go:	ret
                
 0140 310402    ldngo:	lxi	sp,stack
 0143 3AD303    	lda	info	;default disk and user #
 0146 320400    	sta	4
 0149 215000    	lxi	h,50H
 014C 01B000    	lxi	b,(100H-50H)
 014F CD8C03    	call	get422
 0152 215000    	lxi	h,50H	;COM file FCB to load.
 0155 11AC01    	lxi	d,comfcb
 0158 010C00    	lxi	b,12
                	ldir
 015B+EDB0      	DB	0EDH,0B0H
 015D 6B        	mov	l,e
 015E 62        	mov	h,d
 015F 13        	inx	d
 0160 3600      	mvi	m,0
 0162 011400    	lxi	b,21-1
                	ldir		;fill rest of FCB with 00
 0165+EDB0      	DB	0EDH,0B0H
 0167 216402    	lxi	h,rstart	;return point
 016A E5        	push	h
 016B 11AC01    	lxi	d,comfcb
 016E 0E0F      	mvi	c,15	;open file
 0170 CD0500    	call	bdos
 0173 FEFF      	cpi	255	;this error should have already been checked.
 0175 C8        	rz
 0176 110001    	lxi	d,TPA
 0179 218000    lg0:	lxi	h,128
 017C 19        	dad	d
 017D 22AA01    	shld	loada
 0180 010000    	lxi	b,BDOS$1
 0183 B7        	ora	a
                	dsbc	b
 0184+ED42      	DB	0EDH,B*8+42H
 0186 D0        	rnc		;program might overrun system...
 0187 0E1A      	mvi	c,26	;set DMA address
 0189 CD0500    	call	bdos
 018C 11AC01    	lxi	d,comfcb
 018F 0E14      	mvi	c,20	;read sequential
 0191 CD0500    	call	bdos
 0194 B7        	ora	a
                	lded	loada
 0195+ED5B      	DB	0EDH,5BH
 0197+AA01      	DW	LOADA
 0199 CA7901    	jz	lg0
 019C 118000    	lxi	d,DMA
 019F 0E1A      	mvi	c,26	;set DMA address
 01A1 CD0500    	call	bdos
 01A4 CDB703    	call	crlf
 01A7 C30001    	jmp	TPA	;start user's program
                
 01AA 0000      loada:	dw	0
                
 01AC 00636F6D6Dcomfcb: db	0,'command COM',0,0,0,0
 01BC 0000000000	dw	0,0,0,0,0,0,0,0
 01CC 00000000  	db	0,0,0,0
                
 01D0 0000000000	dw	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 0204           stack:	ds	0
                
 0204 0D0A4F535Asignon: db	cr,lf,'OSZ89 v2.29'
 0211 3065      	dw	VERS
 0213 24        	db	'$'
                
                ;The Cold Start routine
 0214 310402    colds:	lxi	sp,stack
 0217 79        	mov	a,c	;a gift from the loader:
 0218 325802    	sta	porta	;the port base address of the 77422 board.
 021B 110402    	lxi	d,signon
 021E 0E09      	mvi	c,9	;type message on console
 0220 CD0500    	call	bdos
 0223 115902    	lxi	d,wstart
 0226 2A0100    	lhld	CPM+1
 0229 22DD03    	shld	@BIOSa
 022C 2B        	dcx	h
 022D 72        	mov	m,d	;fill old Cold-Start vector
 022E 2B        	dcx	h
 022F 73        	mov	m,e
 0230 23        	inx	h
 0231 23        	inx	h
 0232 23        	inx	h
 0233 4E        	mov	c,m	;save old warm-start vector
 0234 73        	mov	m,e	;and fill Warm-Start vector
 0235 23        	inx	h
 0236 46        	mov	b,m
 0237 72        	mov	m,d
                	sbcd	wbiosa
 0238+ED43      	DB	0EDH,43H
 023A+5602      	DW	WBIOSA
 023C 2A0600    	lhld	BDOS+1
 023F 220700    	shld	@BDOS+1
 0242 2A0900    	lhld	RST1+1
 0245 22D003    	shld	chain+1
 0248 2A0200    	lhld	CCPa
 024B 22DB03    	shld	CCPadr
 024E 2A0000    	lhld	CCPl
 0251 22D903    	shld	CCPlen
                	jr	ws00
 0254+181A      	DB	18H,WS00-$-1
                
 0256 0000      wbiosa: dw	0
 0258 00        porta:	db	0	;port base address
                ;The warm-start routine
 0259 310402    wstart: lxi	sp,stack	;a user's program, executing locally, has
 025C 3EF0      	mvi	a,0f0h
 025E 32D203    	sta	func
 0261 210000    	lxi	h,0		;terminated.
 0264 22D703    rstart: shld	retin
 0267 3A0400    	lda	4
 026A 32D303    	sta	info
 026D CD5E03    	call	put
 0270 F3        ws00:	di
 0271 3EC3      	mvi	a,(JMP)
 0273 320000    	sta	CPM
 0276 320500    	sta	BDOS
 0279 320800    	sta	RST1
 027C 2ADD03    	lhld	@BIOSa
 027F 220100    	shld	CPM+1
 0282 210600    	lxi	H,@BDOS
 0285 220600    	shld	BDOS+1
 0288 21C303    	lxi	h,TIC
 028B 220900    	shld	RST1+1
 028E AF        	xra	a
 028F 320B00    	sta	clk
 0292 210D00    	lxi	h,ictl
 0295 7E        	mov	a,m
 0296 F602      	ori	00000010b
 0298 77        	mov	m,a
 0299 D3F2      	out	port
 029B FB        	ei
 029C 2A0700    	lhld	@BDOS+1 ;put serial number in front of system
 029F 2E00      	mvi	l,0
 02A1 110000    	lxi	d,BDOS$1
 02A4 010600    	lxi	b,6
                	ldir
 02A7+EDB0      	DB	0EDH,0B0H
 02A9 118000    	lxi	d,DMA
 02AC 0E1A      	mvi	c,26	;BDOS setdma function code
 02AE CD0500    	call	BDOS
 02B1 21D203    ws0:	lxi	h,func
 02B4 010700    	lxi	b,7	;7 bytes will be transfered
 02B7 CD8C03    	call	get422	;wait for 77422 to send a packet (command)
 02BA 21B102    	lxi	h,ws0
 02BD E5        	push	h	;setup to loop by use of "RET" instructions
 02BE 3AD203    	lda	func
 02C1 FEF0      	cpi	0f0h	;from F0 to FF are direct BIOS calls.
 02C3 DA6300    	jc	bdosf	;execute BDOS functions
                ; Do direct BIOS calls....
 02C6 E60F      	ani	00001111b
                	jrz	wboot	;transfer CCP and re-init
 02C8+286E      	DB	28H,WBOOT-$-1
 02CA F5        	push	psw	;save code for later examinations...
 02CB FE0D      	cpi	13	;write function requires handling of DMA buffer...
                	jrnz	ws2
 02CD+2009      	DB	20H,WS2-$-1
 02CF 218000    	lxi	h,DMA
 02D2 018000    	lxi	b,128
 02D5 CD8C03    	call	get422	;get sector from 77422
 02D8 21F602    ws2:	lxi	h,ws1
 02DB E5        	push	h	;setup return address for BIOS routines.
 02DC 4F        	mov	c,a	;BIOS jmp-vector number (1-15, excl 11)
 02DD 87        	add	a	;*2
 02DE 81        	add	c	;*3
 02DF 4F        	mov	c,a
 02E0 0600      	mvi	b,0
 02E2 2ADD03    	lhld	@BIOSa
 02E5 09        	dad	b
 02E6 E5        	push	h	;save address where we can conviently jump to it...
 02E7 3AD203    	lda	func
                	lbcd	rBC
 02EA+ED4B      	DB	0EDH,4BH
 02EC+D303      	DW	RBC
                	lded	rDE
 02EE+ED5B      	DB	0EDH,5BH
 02F0+D503      	DW	RDE
 02F2 2AD703    	lhld	rHL
 02F5 C9        	ret		;do BIOS call
 02F6 32D203    ws1:	sta	func	;return here after doing BIOS routine
                	sbcd	rBC
 02F9+ED43      	DB	0EDH,43H
 02FB+D303      	DW	RBC
                	sded	rDE
 02FD+ED53      	DB	0EDH,53H
 02FF+D503      	DW	RDE
 0301 22D703    	shld	rHL
 0304 F1        	pop	psw    ;;
 0305 FE03      	cpi	3      ;;console output - no return frame
 0307 C8        	rz	       ;;
 0308 F5        	push	psw    ;;
 0309 CD5E03    	call	put	;send results to 77422
 030C F1        	pop	psw	;function code
 030D FE08      	cpi	8	;select disk requires special handling
                	jrz	seldsk
 030F+280B      	DB	28H,SELDSK-$-1
 0311 FE0C      	cpi	12	;read function requires handling of DMA buffer...
 0313 C0        	rnz
 0314 218000    	lxi	h,DMA
 0317 018000    	lxi	b,128
                	jr	put422	;send sector to 77422
 031A+1848      	DB	18H,PUT422-$-1
                
 031C 2AD703    seldsk: lhld	rHL
 031F 7C        	mov	a,h
 0320 B5        	ora	l	;if select error, don't send back any data
 0321 C8        	rz
 0322 011000    	lxi	b,16
 0325 CD6403    	call	put422
 0328 2AD703    	lhld	rHL
 032B 110A00    	lxi	d,+10
 032E 19        	dad	d
 032F 5E        	mov	e,m
 0330 23        	inx	h
 0331 56        	mov	d,m
 0332 EB        	xchg		;DPB address
 0333 011500    	lxi	b,21
                	jr	put422
 0336+182C      	DB	18H,PUT422-$-1
                
 0338 3EE3      wboot:	mvi	a,0E3H
 033A 32D203    	sta	func
 033D 2AD903    	lhld	CCPlen
 0340 22D303    	shld	rBC
 0343 2ADB03    	lhld	CCPadr
 0346 22D703    	shld	rHL
 0349 CD5E03    	call	put	;tell 77422 that we're sending it the CCP...
 034C 210004    	lxi	h,@CCP
                	lbcd	CCPlen 
 034F+ED4B      	DB	0EDH,4BH
 0351+D903      	DW	CCPLEN
 0353 CD6403    	call	put422
 0356 210000    	lxi	h,BDOS$1	;send serial number accross also.
 0359 010600    	lxi	b,6
                	jr	put422	;send CCP to 77422 board
 035C+1806      	DB	18H,PUT422-$-1
                
 035E 21D203    put:	lxi	h,func
 0361 010700    	lxi	b,7
                ;	jmp	put422
                ; Word count cannot be 0.  This channel requires fixed message length !
 0364 79        put422: mov	a,c	;must split word count into byte-size counters.
 0365 B7        	ora	a	;this requires some fancy foot-work.
 0366 58        	mov	e,b	;(E) will be the "page counter"
                	jrz	pu3
 0367+2801      	DB	28H,PU3-$-1
 0369 1C        	inr	e
 036A 41        pu3:	mov	b,c	;(B) is the byte counter (initially the remainder)
 036B 3A5802    	lda	porta
 036E 4F        	mov	c,a
 036F 0C        	inr	c
                pu0:	inp	a
 0370+ED78      	DB	0EDH,A*8+40H
 0372 E604      	ani	0100b	;check channel 2 for idle
                	jrz	pu0
 0374+28FA      	DB	28H,PU0-$-1
 0376 0D        	dcr	c
 0377 7E        	mov	a,m
 0378 23        	inx	h
                	outp	a	;send first byte
 0379+ED79      	DB	0EDH,A*8+41H
 037B 0C        	inr	c
                pu1:	inp	a
 037C+ED78      	DB	0EDH,A*8+40H
 037E E604      	ani	0100b
                	jrz	pu1
 0380+28FA      	DB	28H,PU1-$-1
 0382 0D        	dcr	c
 0383 05        	dcr	b	;update (B) for first byte output
                	jrz	pu4	;
 0384+2802      	DB	28H,PU4-$-1
                pu2:	outir
 0386+EDB3      	DB	0EDH,0B3H
 0388 1D        pu4:	dcr	e
                	jrnz	pu2
 0389+20FB      	DB	20H,PU2-$-1
 038B C9        	ret
                
                ; byte count (BC) must be greater than 1.
                get422:
 038C 79        	mov	a,c	;must handle blocks larger than 256 bytes
 038D B7        	ora	a	;(Z80 OUTIR/INIR cannot)
 038E 58        	mov	e,b
                	jrz	ge6
 038F+2801      	DB	28H,GE6-$-1
 0391 1C        	inr	e
 0392 41        ge6:	mov	b,c
 0393 3A5802    	lda	porta
 0396 4F        	mov	c,a
 0397 0C        	inr	c
                ge0:	inp	a
 0398+ED78      	DB	0EDH,A*8+40H
 039A E608      	ani	1000b	;check channel 2 for idle
                	jrz	ge0
 039C+28FA      	DB	28H,GE0-$-1
 039E 0D        	dcr	c
                ge2:	inir		;get the rest of the characters.
 039F+EDB2      	DB	0EDH,0B2H
 03A1 1D        	dcr	e
                	jrnz	ge2
 03A2+20FB      	DB	20H,GE2-$-1
 03A4 0C        ge7:	inr	c	; status port
                ge4:	inp	a
 03A5+ED78      	DB	0EDH,A*8+40H
                	bit	1,a	; INT?
 03A7+CB4F      	DB	0CBH,1*8+A+40H
                	jrnz	ge5
 03A9+2009      	DB	20H,GE5-$-1
 03AB E608      	ani	1000b	;check channel 2 for idle
                	jrz	ge4
 03AD+28F6      	DB	28H,GE4-$-1
 03AF 0D        	dcr	c
                	inp	a	;at this point we have all the characters we want but
 03B0+ED78      	DB	0EDH,A*8+40H
                	jr	ge7	;the 77422 still has more to send so we must continue
 03B2+18F0      	DB	18H,GE7-$-1
                			;to take characters until we see DONE
                
                ge5:	outp	a	;clear interrupt
 03B4+ED79      	DB	0EDH,A*8+41H
 03B6 C9        	ret
                
 03B7 1E0D      crlf:	mvi	e,cr
 03B9 CDBE03    	call	conout
 03BC 1E0A      	mvi	e,lf
 03BE 0E02      conout: mvi	c,2	;bdos conout function code
 03C0 C30500    	jmp	bdos
                
 03C3 F5        TIC:	push	psw
 03C4 C5        	push	b
 03C5 3A5802    	lda	porta
 03C8 C603      	adi	3	;tick interupt is +3
 03CA 4F        	mov	c,a
                	outp	a	;cause interupt in 77422
 03CB+ED79      	DB	0EDH,A*8+41H
 03CD C1        	pop	b
 03CE F1        	pop	psw
 03CF C30000    chain:	jmp	0
                
 03D2 00        func:	db	0	;function code or register (A)
 03D3 0000      rBC:	dw	0	;parameter or registers (BC)
 03D5 0000      rDE:	dw	0	;registers (DE)
 03D7 0000      rHL:	dw	0	;return info or registers (HL)
                
 03D3 =         info	equ	rBC
 03D7 =         retin	equ	rHL
                
 03D9 0000      CCPlen: dw	0
 03DB 0000      CCPadr: dw	0
 03DD 0000      @BIOSa: dw	0
                
 03DF           	ds	0	;prints address on listing (only function)
                
 00DF #         @@ set (($-BDOS$1) and 0FFH)
                 if @@ ne 0
                 rept 100H-@@
                 db 0
                 endm
 03DF+00         DB 0
 03E0+00         DB 0
 03E1+00         DB 0
 03E2+00         DB 0
 03E3+00         DB 0
 03E4+00         DB 0
 03E5+00         DB 0
 03E6+00         DB 0
 03E7+00         DB 0
 03E8+00         DB 0
 03E9+00         DB 0
 03EA+00         DB 0
 03EB+00         DB 0
 03EC+00         DB 0
 03ED+00         DB 0
 03EE+00         DB 0
 03EF+00         DB 0
 03F0+00         DB 0
 03F1+00         DB 0
 03F2+00         DB 0
 03F3+00         DB 0
 03F4+00         DB 0
 03F5+00         DB 0
 03F6+00         DB 0
 03F7+00         DB 0
 03F8+00         DB 0
 03F9+00         DB 0
 03FA+00         DB 0
 03FB+00         DB 0
 03FC+00         DB 0
 03FD+00         DB 0
 03FE+00         DB 0
 03FF+00         DB 0
                 endif
                
 0400           @CCP:	end
