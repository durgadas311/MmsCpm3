                ; SNIOS for Noberto's H89 USB/SERIAL board,
                ; Specifically, the FT245R chip.
                ; http://koyado.com/Heathkit/H-89_USB_Serial.html
                ;
                	maclib z80
                
 00D8 =         USBPORT equ	0d8h
 00DA =         STSPORT equ	0dah
                
 0002 =         USBRXR	equ	00000010b	; Rx data available in FIFO
 0001 =         USBTXR	equ	00000001b	; Tx space available in FIFO
                
                	public	NTWKIN, NTWKST, CNFTBL, SNDMSG, RCVMSG, NTWKER, NTWKBT, CFGTBL
                
                	cseg
                
                ;	Slave Configuration Table
                CFGTBL:
 0000 00        	db	0		; network status byte
 0001           	ds	1		; slave processor ID number
 0002           	ds	2		; A:  Disk device
 0004           	ds	2		; B:   "
 0006           	ds	2		; C:   "
 0008           	ds	2		; D:   "
 000A           	ds	2		; E:   "
 000C           	ds	2		; F:   "
 000E           	ds	2		; G:   "
 0010           	ds	2		; H:   "
 0012           	ds	2		; I:   "
 0014           	ds	2		; J:   "
 0016           	ds	2		; K:   "
 0018           	ds	2		; L:   "
 001A           	ds	2		; M:   "
 001C           	ds	2		; N:   "
 001E           	ds	2		; O:   "
 0020           	ds	2		; P:   "
                
 0022           	ds	2		; console device
                
 0024           	ds	2		; list device:
 0026           	ds	1		;	buffer index
                msgbuf:
 0027 00        	db	0		;	FMT
 0028 00        	db	0		;	DID
 0029 FF        	db	0ffh		;	SID (CP/NOS must still initialize)
 002A 05        	db	5		;	FNC
 002B           	ds	1		;	SIZ
 002C           	ds	1		;	MSG(0)	List number
 002D           	ds	128		;	MSG(1) ... MSG(128)
                
 00AD 00        hostid:	db	0
                
                ;	Network Status Byte Equates
                ;
 0010 =         active		equ	00010000b	; slave logged in on network
 0002 =         rcverr		equ	00000010b	; error in received message
 0001 =         senderr 	equ	00000001b	; unable to send message
                
                ;	Utility Procedures
                ;
                ;	page
                ;	Network Initialization
                NTWKIN:
 00AE CD6201    	call	check	; confirm h/w exists...
 00B1 DAB201    	jc	initerr
                	; TODO: how to get slave ID?
                	; Send "BDOS Func 255" message to other end,
                	; Response will tell us our, and their, node ID
                	lxix	msgbuf
 00B4+DD21      	DB	0DDH,21H
 00B6+2700      	DW	MSGBUF
                	mvix	0,+0	; FMT
 00B8+DD360000  	DB	0DDH,36H,+0,0
                	mvix	0ffh,+3	; BDOS Func
 00BC+DD3603FF  	DB	0DDH,36H,+3,0FFH
                	mvix	0,+4	; Size
 00C0+DD360400  	DB	0DDH,36H,+4,0
 00C4 012700    	lxi	b,msgbuf
 00C7 CD8001    	call	sndmsg0	; avoid active check
 00CA B7        	ora	a
 00CB C2B201    	jnz	initerr
 00CE 012700    	lxi	b,msgbuf
 00D1 CD0802    	call	rcvmsg0	; avoid active check
 00D4 B7        	ora	a
 00D5 C2B201    	jnz	initerr
                	lxix	msgbuf
 00D8+DD21      	DB	0DDH,21H
 00DA+2700      	DW	MSGBUF
                	ldx	b,+1	; our node ID
 00DC+DD4601    	DB	0DDH,B*8+46H,+1
                	ldx	c,+2	; host node ID
 00DF+DD4E02    	DB	0DDH,C*8+46H,+2
                	lxix	CFGTBL
 00E2+DD21      	DB	0DDH,21H
 00E4+0000      	DW	CFGTBL
 00E6 3E10      	mvi	a,active
                	stx	a,+0	; network status byte
 00E8+DD7700    	DB	0DDH,70H+A,+0
                	stx	b,+1	; our slave (client) ID
 00EB+DD7001    	DB	0DDH,70H+B,+1
 00EE 79        	mov	a,c
 00EF 32AD00    	sta	hostid
 00F2 AF        	xra	a
 00F3 322B00    	sta	CFGTBL+36+7	; clear SIZ - discard LST output
 00F6 C9        	ret
                
                ;	Network Status
                NTWKST:
 00F7 3A0000    	lda	CFGTBL+0
 00FA 47        	mov	b,a
 00FB E6FC      	ani	not (rcverr+senderr)
 00FD 320000    	sta	CFGTBL+0
 0100 78        	mov	a,b
 0101 C9        	ret
                
                ;	Return Configuration Table Address
                CNFTBL:
 0102 210000    	lxi	h,CFGTBL
 0105 C9        	ret
                
                ; Destroys E,C
                sendhex:
 0106 5F        	mov	e,a
 0107 0F        	rrc
 0108 0F        	rrc
 0109 0F        	rrc
 010A 0F        	rrc
 010B CD0F01    	call	senddig
 010E 7B        	mov	a,e
                senddig:
 010F E60F      	ani	0fh
 0111 C690      	adi	90h
 0113 27        	daa
 0114 CE40      	aci	40h
 0116 27        	daa
                	; jmp sendbyt
                ; Destroys C
                sendbyt:
 0117 4F        	mov	c,a
                sendb0:
 0118 DBDA      	in	STSPORT
 011A E601      	ani	USBTXR
 011C CA1801    	jz	sendb0
 011F 79        	mov	a,c
 0120 D3D8      	out	USBPORT	; probably can't ever overrun?
 0122 C9        	ret		; if not, should make this in-line
                
                ; IY = message header, HL = crc
                ; Destroys B,C,E,D
                sendhdr:
 0123 3E2B      	mvi	a,'+'	; start of message - SYNC
 0125 CD1701    	call	sendbyt	; destroys C
 0128 3E2B      	mvi	a,'+'	; two sync bytes...
 012A CD1701    	call	sendbyt	; destroys C
 012D 21FFFF    	lxi	h,0ffffh	; init CRC
 0130 0605      	mvi	b,5
                sendh0:
                	ldy	a,+0
 0132+FD7E00    	DB	0FDH,A*8+46H,+0
                	inxiy
 0135+FD23      	DB	0FDH,23H
 0137 57        	mov	d,a
 0138 CD0601    	call	sendhex	; destroys E,C,A
 013B 7A        	mov	a,d
 013C CD4501    	call	crc	; destroys E,C,A
 013F 05        	dcr	b
 0140 C23201    	jnz	sendh0
 0143 AF        	xra	a
 0144 C9        	ret
                
 8408 =         POLY	equ	8408h
                ; HL = cumulative CRC, A = new byte (used)
                ; Destroys C,E,A
                crc:
 0145 1E08      	mvi	e,8
 0147 4F        crc0:	mov	c,a
 0148 AD        	xra	l	; clears CY
                	rarr	h
 0149+CB1C      	DB	0CBH, 18H + H
                	rarr	l
 014B+CB1D      	DB	0CBH, 18H + L
 014D E601      	ani	1
 014F CA5A01    	jz	crc1
 0152 3E08      	mvi	a,LOW POLY
 0154 AD        	xra	l
 0155 6F        	mov	l,a
 0156 3E84      	mvi	a,HIGH POLY
 0158 AC        	xra	h
 0159 67        	mov	h,a
 015A 79        crc1:	mov	a,c
 015B 1F        	rar	; no need to worry about CY in,
 015C 1D        	dcr	e
 015D C24701    	jnz	crc0
 0160 B7        	ora	a	; but must not leave CY on return
 0161 C9        	ret
                
                check:
                	; do check for sane hardware...
 0162 210000    	lxi	h,0
 0165 1E03      	mvi	e,3	; approx 4.5 sec @ 2MHz
                check0:
 0167 DBDA      	in	STSPORT	; 11
 0169 E601      	ani	USBTXR	; 7, also NC
 016B C0        	rnz		; 5 (11)
 016C 2B        	dcx	h	; 6
 016D 7C        	mov	a,h	; 4
 016E B5        	ora	l	; 4
 016F C26701    	jnz	check0	; 10 = 47, * 65536 = 3080192 = 1.504 sec
 0172 1D        	dcr	e	; 4
 0173 C26701    	jnz	check0	; 10
 0176 37        	stc
 0177 C9        	ret
                
                ;	Send Message on Network
                SNDMSG:			; BC = message addr
 0178 3A0000    	lda	CFGTBL	; status
 017B E610      	ani	active
 017D CAB201    	jz	initerr
                sndmsg0:
 0180 C5        	push	b
                	popix
 0181+DDE1      	DB	0DDH,0E1H
 0183 C5        	push	b
                	popiy
 0184+FDE1      	DB	0FDH,0E1H
 0186 3A0100    	lda	CFGTBL+1	; our ID
                	stx	a,+2		; ensure SID is correct
 0189+DD7702    	DB	0DDH,70H+A,+2
 018C CD2301    	call	sendhdr
 018F B7        	ora	a
 0190 C2B201    	jnz	initerr
                	; HL points to payload now...
                	ldx	b,+4	; msg siz field (-1)
 0193+DD4604    	DB	0DDH,B*8+46H,+4
 0196 04        	inr	b	; might be 0, but that means 256
 0197 CD3201    	call	sendh0
 019A B7        	ora	a
 019B C2B201    	jnz	initerr
 019E 7D        	mov	a,l	; send CRC
 019F CD0601    	call	sendhex	;
 01A2 7C        	mov	a,h	;
 01A3 CD0601    	call	sendhex	;
 01A6 3E2D      	mvi	a,'-'
 01A8 CD1701    	call	sendbyt
 01AB 3E2D      	mvi	a,'-'
 01AD CD1701    	call	sendbyt
 01B0 AF        	xra	a
 01B1 C9        	ret
                initerr:
 01B2 3EFF      	mvi	a,0ffh
 01B4 C9        	ret
                
                ; IY = recv buffer, B = len
                ; HL = crc, destroys B,C,E
                recvhdr:
 01B5 21FFFF    	lxi	h,0ffffh	; init CRC
 01B8 0605      	mvi	b,5
                recvh0:
 01BA CDCB01    	call	recvhex	; destroys E,C
 01BD D8        	rc
                	sty	a,+0
 01BE+FD7700    	DB	0FDH,70H+A,+0
                	inxiy
 01C1+FD23      	DB	0FDH,23H
 01C3 CD4501    	call	crc	; destroys E,C
 01C6 05        	dcr	b
 01C7 C2BA01    	jnz	recvh0
 01CA C9        	ret
                
                ; Destroys E,C
                ; Returns Hex value in A
                recvhex:
 01CB CDDA01    	call	recvdig ; destroys C
 01CE D8        	rc
 01CF 07        	rlc
 01D0 07        	rlc
 01D1 07        	rlc
 01D2 07        	rlc
 01D3 5F        	mov	e,a
 01D4 CDDA01    	call	recvdig ; destroys C
 01D7 D8        	rc
 01D8 B3        	ora	e
 01D9 C9        	ret
                
                recvdig:
 01DA CDEE01    	call	recvbyt ; destroys C
 01DD D8        	rc
 01DE D630      	sui	'0'
 01E0 D8        	rc
 01E1 FE0A      	cpi	10
 01E3 D2E801    	jnc	recvd1
 01E6 B7        	ora	a
 01E7 C9        	ret
                recvd1:
 01E8 D611      	sui	'A'-'0'
 01EA D8        	rc
 01EB C60A      	adi	10
 01ED C9        	ret
                
                ; When using this, each byte must be coming soon...
                ; Destroys C
                ; Returns character in A
                recvbyt:
 01EE 0E00      	mvi	c,0
                recvb0:
 01F0 DBDA      	in	STSPORT
 01F2 E602      	ani	USBRXR
 01F4 C2FD01    	jnz	recvb1
 01F7 0D        	dcr	c
 01F8 C2F001    	jnz	recvb0
 01FB 37        	stc
 01FC C9        	ret	; CY, plus A not '-'
                recvb1:
 01FD DBD8      	in USBPORT
 01FF C9        	ret
                
                ;	Receive Message from Network
                ;	Wait for "++" sequence, discarding characters, then save message.
                ;	TODO: need timeout? Must be long timeout...
                RCVMSG:			; BC = message addr
 0200 3A0000    	lda	CFGTBL	; status
 0203 E610      	ani	active
 0205 CAB201    	jz	initerr
                rcvmsg0:
 0208 C5        	push	b
                	popix		; IX = message pointer
 0209+DDE1      	DB	0DDH,0E1H
 020B C5        	push	b
                	popiy		; IY = message address (++)
 020C+FDE1      	DB	0FDH,0E1H
                recev1:
 020E 0602      	mvi	b,2
                recev0:
 0210 DBDA      	in	STSPORT
 0212 E602      	ani	USBRXR
 0214 CA1002    	jz	recev0
 0217 DBD8      	in	USBPORT
 0219 FE2B      	cpi	'+'
 021B C20E02    	jnz	recev1	; reset count, too
 021E 05        	dcr	b
 021F C21002    	jnz	recev0
                	; got SYNC "++", now just input bytes and decode - until "--"
 0222 CDB501    	call	recvhdr
 0225 DA5B02    	jc	recev2
                	ldx	b,+4 ; msg siz field (-1)
 0228+DD4604    	DB	0DDH,B*8+46H,+4
 022B 04        	inr	b   ; might be 0, but that means 256
 022C CDBA01    	call	recvh0
 022F DA5B02    	jc	recev2
 0232 CDCB01    	call	recvhex	; destroys C,E
 0235 DA5B02    	jc	recev2
 0238 CD4501    	call	crc	; destroys C,E
 023B CDCB01    	call	recvhex	; destroys C,E
 023E DA5B02    	jc	recev2
 0241 CD4501    	call	crc	; destroys C,E
 0244 7C        	mov	a,h
 0245 B5        	ora	l
 0246 C25B02    	jnz	recev2
                	; Now confirm we get "--" EOM
 0249 CDEE01    	call	recvbyt
 024C FE2D      	cpi	'-'
 024E C25B02    	jnz	recev2
 0251 CDEE01    	call	recvbyt
 0254 FE2D      	cpi	'-'
 0256 C25B02    	jnz	recev2
 0259 AF        	xra	a
 025A C9        	ret
                recev2:
 025B 3EFF      	mvi	a,0ffh
                NTWKER:
 025D C9        	ret
                
                ;
                NTWKBT:
                 
                ;	This procedure is called each time the CCP is
                ;	reloaded from disk.
 025E C9        	ret
                
 025F           	end
