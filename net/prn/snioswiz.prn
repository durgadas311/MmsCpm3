                ; SNIOS for H8-WIZ550io
                ;
                	maclib	z80
                
                	public	NTWKIN, NTWKST, CNFTBL, SNDMSG, RCVMSG, NTWKER, NTWKBT, CFGTBL
                
 0040 =         wiz	equ	40h	; base port
 0040 =         wiz$dat	equ	wiz+0
 0041 =         wiz$ctl	equ	wiz+1
 0041 =         wiz$sta	equ	wiz+1
                
 0008 =         nsocks	equ	8
                
 0001 =         SCS	equ	1	; ctl port
 0001 =         BSY	equ	1	; sts port
                
 0008 =         sock0	equ	000$01$000b	; base pattern for Sn_ regs
 0014 =         txbuf0	equ	000$10$100b	; base pattern for Tx buffer
 0018 =         rxbuf0	equ	000$11$000b	; base pattern for Rx buffer
                
                ; common regs
 0015 =         ir	equ	21
 0017 =         sir	equ	23
 001D =         pmagic	equ	29
                
                ; socket regs, relative
 0001 =         sn$cr	equ	1
 0002 =         sn$ir	equ	2
 0003 =         sn$sr	equ	3
 0004 =         sn$prt	equ	4
 0024 =         sn$txwr	equ	36
 0026 =         sn$rxrsr equ	38
 0028 =         sn$rxrd	equ	40
                
                ; socket commands
 0001 =         OPEN	equ	01h
 0004 =         CONNECT	equ	04h
 0020 =         SEND	equ	20h
 0040 =         RECV	equ	40h
                
                ; socket status
 0013 =         INIT	equ	13h
 0017 =         ESTABLISHED equ	17h
                
                	cseg
                ;	Slave Configuration Table
                CFGTBL:
 0000           	ds	1		; network status byte
 0001           	ds	1		; slave processor ID number
 0002           	ds	2		; A:	Disk device	+2
 0004           	ds	2		; B:	"
 0006           	ds	2		; C:	"
 0008           	ds	2		; D:	"
 000A           	ds	2		; E:	"
 000C           	ds	2		; F:	"
 000E           	ds	2		; G:	"
 0010           	ds	2		; H:	"
 0012           	ds	2		; I:	"
 0014           	ds	2		; J:	"
 0016           	ds	2		; K:	"
 0018           	ds	2		; L:	"
 001A           	ds	2		; M:	"
 001C           	ds	2		; N:	"
 001E           	ds	2		; O:	"
 0020           	ds	2		; P:	"
                
 0022           	ds	2		; console device	+34
                
 0024           	ds	2		; list device:		+36...
 0026           	ds	1		;	buffer index	+2
 0027 00        	db	0		;	FMT		+3
 0028 00        	db	0		;	DID		+4
 0029 FF        	db	0ffh		;	SID (CP/NOS must still initialize)
 002A 05        	db	5		;	FNC		+6
 002B 00        	db	0		;	SIZ		+7
 002C           	ds	1		;	MSG(0)	List number	+8
 002D           	ds	128		;	MSG(1) ... MSG(128)	+9...
                
                ;	Network Status Byte Equates
                ;
 0010 =         active		equ	0001$0000b	; slave logged in on network
 0002 =         rcverr		equ	0000$0010b	; error in received message
 0001 =         senderr 	equ	0000$0001b	; unable to send message
                
 00AD           srvtbl:	ds	nsocks	; SID, per socket
                
 00B5 00        cursok:	db	0	; current socket select patn
 00B6 0000      curptr:	dw	0	; into chip mem
 00B8 0000      msgptr:	dw	0
 00BA 0000      msglen:	dw	0
 00BC 0000      totlen:	dw	0
                
                getwiz1:
 00BE 3E01      	mvi	a,SCS
 00C0 D341      	out	wiz$ctl
 00C2 0E40      	mvi	c,wiz$dat
                	outz	; hi adr byte always 0
 00C4+ED71      	DB	0EDH, 71H
                	outp	e
 00C6+ED59      	DB	0EDH,E*8+41H
                	res	2,d
 00C8+CB92      	DB	0CBH,2*8+D+80H
                	outp	d
 00CA+ED51      	DB	0EDH,D*8+41H
                	inz	; prime MISO
 00CC+ED70      	DB	0EDH, 70H
                	inp	a
 00CE+ED78      	DB	0EDH,A*8+40H
 00D0 0C        	inr	c	; ctl port
                	outz		; clear SCS
 00D1+ED71      	DB	0EDH, 71H
 00D3 C9        	ret
                
                putwiz1:
 00D4 F5        	push	psw
 00D5 3E01      	mvi	a,SCS
 00D7 D341      	out	wiz$ctl
 00D9 F1        	pop	psw
 00DA 0E40      	mvi	c,wiz$dat
                	outz	; hi adr byte always 0
 00DC+ED71      	DB	0EDH, 71H
                	outp	e
 00DE+ED59      	DB	0EDH,E*8+41H
                	setb	2,d
 00E0+CBD2      	DB	0CBH,2*8+D+0C0H
                	outp	d
 00E2+ED51      	DB	0EDH,D*8+41H
                	outp	a	; data
 00E4+ED79      	DB	0EDH,A*8+41H
 00E6 0C        	inr	c	; ctl port
                	outz		; clear SCS
 00E7+ED71      	DB	0EDH, 71H
 00E9 C9        	ret
                
                ; Get 16-bit value from chip
                ; Prereq: IDM_AR0 already set, auto-incr on
                ; Entry: A=value for IDM_AR1
                ; Return: HL=register pair contents
                getwiz2:
 00EA 3E01      	mvi	a,SCS
 00EC D341      	out	wiz$ctl
 00EE 0E40      	mvi	c,wiz$dat
                	outz	; hi adr byte always 0
 00F0+ED71      	DB	0EDH, 71H
                	outp	e
 00F2+ED59      	DB	0EDH,E*8+41H
                	res	2,d
 00F4+CB92      	DB	0CBH,2*8+D+80H
                	outp	d
 00F6+ED51      	DB	0EDH,D*8+41H
                	inz	; prime MISO
 00F8+ED70      	DB	0EDH, 70H
                	inp	h	; data
 00FA+ED60      	DB	0EDH,H*8+40H
                	inp	l	; data
 00FC+ED68      	DB	0EDH,L*8+40H
 00FE 0C        	inr	c	; ctl port
                	outz		; clear SCS
 00FF+ED71      	DB	0EDH, 71H
 0101 C9        	ret
                
                ; Put 16-bit value to chip
                ; Prereq: IDM_AR0 already set, auto-incr on
                ; Entry: A=value for IDM_AR1
                ;        HL=register pair contents
                putwiz2:
 0102 3E01      	mvi	a,SCS
 0104 D341      	out	wiz$ctl
 0106 0E40      	mvi	c,wiz$dat
                	outz	; hi adr byte always 0
 0108+ED71      	DB	0EDH, 71H
                	outp	e
 010A+ED59      	DB	0EDH,E*8+41H
                	setb	2,d
 010C+CBD2      	DB	0CBH,2*8+D+0C0H
                	outp	d
 010E+ED51      	DB	0EDH,D*8+41H
                	outp	h	; data to write
 0110+ED61      	DB	0EDH,H*8+41H
                	outp	l
 0112+ED69      	DB	0EDH,L*8+41H
 0114 0C        	inr	c	; ctl port
                	outz		; clear SCS
 0115+ED71      	DB	0EDH, 71H
 0117 C9        	ret
                
                ; Issue command, wait for complete
                ; D=Socket ctl byte
                ; Returns: A=Sn_SR
 0118 47        wizcmd:	mov	b,a
 0119 1E01      	mvi	e,sn$cr
                	setb	2,d
 011B+CBD2      	DB	0CBH,2*8+D+0C0H
 011D 3E01      	mvi	a,SCS
 011F D341      	out	wiz$ctl
 0121 0E40      	mvi	c,wiz$dat
                	outz	; hi adr byte always 0
 0123+ED71      	DB	0EDH, 71H
                	outp	e
 0125+ED59      	DB	0EDH,E*8+41H
                	outp	d
 0127+ED51      	DB	0EDH,D*8+41H
                	outp	b	; command
 0129+ED41      	DB	0EDH,B*8+41H
 012B 0C        	inr	c	; ctl port
                	outz		; clear SCS
 012C+ED71      	DB	0EDH, 71H
 012E CDBE00    wc0:	call	getwiz1
 0131 B7        	ora	a
                	jrnz	wc0
 0132+20FA      	DB	20H,WC0-$-1
 0134 1E03      	mvi	e,sn$sr
 0136 CDBE00    	call	getwiz1
 0139 C9        	ret
                
                ; B=Server ID, preserves HL
                ; returns DE=socket base (if NC)
                getsrv:
 013A 0E08      	mvi	c,nsocks
 013C 11AD00    	lxi	d,srvtbl
                gs1:
 013F 1A        	ldax	d
 0140 B8        	cmp	b
                	jrz	gs0
 0141+2806      	DB	28H,GS0-$-1
 0143 13        	inx	d
 0144 0D        	dcr	c
                	jrnz	gs1
 0145+20F8      	DB	20H,GS1-$-1
 0147 37        	stc	; not found
 0148 C9        	ret
                gs0:	; found...
 0149 3E08      	mvi	a,nsocks
 014B 91        	sub	c	; socket num
 014C 07        	rlc
 014D 07        	rlc
 014E 07        	rlc
 014F 32B500    	sta	cursok
 0152 F608      	ori	sock0
 0154 57        	mov	d,a
 0155 1E03      	mvi	e,sn$sr
 0157 CDBE00    	call	getwiz1
 015A FE17      	cpi	ESTABLISHED
 015C C8        	rz
 015D FE13      	cpi	INIT
                	jrz	gs3
 015F+2809      	DB	28H,GS3-$-1
                	; try to open socket...
 0161 3E01      	mvi	a,OPEN
 0163 CD1801    	call	wizcmd
 0166 FE13      	cpi	INIT
                	jrnz	gs2
 0168+2008      	DB	20H,GS2-$-1
 016A 3E04      gs3:	mvi	a,CONNECT
 016C CD1801    	call	wizcmd
 016F FE17      	cpi	ESTABLISHED
 0171 C8        	rz
 0172 37        gs2:	stc	; failed to open
 0173 C9        	ret
                
                ; HL=socket relative pointer (TX_WR)
                ; DE=length
                ; Returns: HL=msgptr, C=wiz$dat
                cpsetup:
 0174 3E01      	mvi	a,SCS
 0176 D341      	out	wiz$ctl
 0178 0E40      	mvi	c,wiz$dat
                	outp	h
 017A+ED61      	DB	0EDH,H*8+41H
                	outp	l
 017C+ED69      	DB	0EDH,L*8+41H
 017E 3AB500    	lda	cursok
 0181 B0        	ora	b
                	outp	a
 0182+ED79      	DB	0EDH,A*8+41H
 0184 2AB800    	lhld	msgptr
 0187 C9        	ret
                
                cpyout:
 0188 0614      	mvi	b,txbuf0
 018A CD7401    	call	cpsetup
 018D 43        	mov	b,e	; fraction of page
 018E 7B        	mov	a,e
 018F B7        	ora	a
                	jrz	co0	; exactly 256
 0190+2806      	DB	28H,CO0-$-1
                	outir		; do partial page
 0192+EDB3      	DB	0EDH,0B3H
                	; B is now 0 (256 bytes)
 0194 7A        	mov	a,d
 0195 B7        	ora	a
                	jrz	co1
 0196+2802      	DB	28H,CO1-$-1
                co0:	outir	; 256 (more) bytes to xfer
 0198+EDB3      	DB	0EDH,0B3H
 019A 22B800    co1:	shld	msgptr
 019D 0C        	inr	c	; ctl port
                	outz		; clear SCS
 019E+ED71      	DB	0EDH, 71H
 01A0 C9        	ret
                
                ; HL=socket relative pointer (RX_RD)
                ; DE=length
                ; Destroys IDM_AR0, IDM_AR1
                cpyin:
 01A1 0618      	mvi	b,rxbuf0
 01A3 CD7401    	call	cpsetup	;
                	inz	; prime MISO
 01A6+ED70      	DB	0EDH, 70H
 01A8 43        	mov	b,e	; fraction of page
 01A9 7B        	mov	a,e
 01AA B7        	ora	a
                	jrz	ci0	; exactly 256
 01AB+2806      	DB	28H,CI0-$-1
                	inir		; do partial page
 01AD+EDB2      	DB	0EDH,0B2H
                	; B is now 0 (256 bytes)
 01AF 7A        	mov	a,d
 01B0 B7        	ora	a
                	jrz	ci1
 01B1+2802      	DB	28H,CI1-$-1
                ci0:	inir	; 256 (more) bytes to xfer
 01B3+EDB2      	DB	0EDH,0B2H
 01B5 22B800    ci1:	shld	msgptr
 01B8 0C        	inr	c	; ctl port
                	outz		; clear SCS
 01B9+ED71      	DB	0EDH, 71H
 01BB C9        	ret
                
                ; L=bits to reset
                ; D=socket base
                wizsts:
 01BC 1E02      	mvi	e,sn$ir
 01BE CDBE00    	call	getwiz1	; destroys C
 01C1 F5        	push	psw
 01C2 A5        	ana	l
                	jrz	ws0	; don't reset if not set (could race)
 01C3+2804      	DB	28H,WS0-$-1
 01C5 7D        	mov	a,l
 01C6 CDD400    	call	putwiz1
 01C9 F1        ws0:	pop	psw
 01CA C9        	ret
                
                ;	Utility Procedures
                ;
                ;	Network Initialization
                NTWKIN:
                	lxix	CFGTBL
 01CB+DD21      	DB	0DDH,21H
 01CD+0000      	DW	CFGTBL
 01CF 111D00    	lxi	d,pmagic
 01D2 CDBE00    	call	getwiz1
 01D5 B7        	ora	a
 01D6 CA0803    	jz	err
                	stx	a,+1 ; our slave (client) ID
 01D9+DD7701    	DB	0DDH,70H+A,+1
 01DC 3E10      	mvi	a,active
                	stx	a,+0 ; network status byte
 01DE+DD7700    	DB	0DDH,70H+A,+0
 01E1 AF        	xra	a
 01E2 322B00    	sta	CFGTBL+36+7
 01E5 C31303    	jmp	ntwkbt0	; load data
                
                ;	Network Status
                NTWKST:
 01E8 3A0000    	lda	CFGTBL+0
 01EB 47        	mov	b,a
 01EC E6FC      	ani	not (rcverr+senderr)
 01EE 320000    	sta	CFGTBL+0
 01F1 78        	mov	a,b
 01F2 C9        	ret
                
                ;	Return Configuration Table Address
                ;	Still need this for BDOS func 69
                CNFTBL:
 01F3 210000    	lxi	h,CFGTBL
 01F6 C9        	ret
                
                ;	Send Message on Network
                SNDMSG:			; BC = message addr
                	sbcd	msgptr
 01F7+ED43      	DB	0EDH,43H
 01F9+B800      	DW	MSGPTR
                	lixd	msgptr
 01FB+DD2A      	DB	0DDH,2AH
 01FD+B800      	DW	MSGPTR
                	ldx	b,+1	; SID - destination
 01FF+DD4601    	DB	0DDH,B*8+46H,+1
 0202 CD3A01    	call	getsrv
                	jrc	serr
 0205+3846      	DB	38H,SERR-$-1
                	; D=socket patn
 0207 3A0100    	lda	CFGTBL+1
                	stx	a,+2	; Set Slave ID in header
 020A+DD7702    	DB	0DDH,70H+A,+2
                	ldx	a,+4	; msg siz (-1)
 020D+DD7E04    	DB	0DDH,A*8+46H,+4
 0210 C606      	adi	5+1	; hdr, +1 for (-1)
 0212 6F        	mov	l,a
 0213 3E00      	mvi	a,0
 0215 CE00      	aci	0
 0217 67        	mov	h,a	; HL=msg length
 0218 22BA00    	shld	msglen
 021B 1E24      	mvi	e,sn$txwr
 021D CDEA00    	call	getwiz2
 0220 22B600    	shld	curptr
 0223 2ABA00    	lhld	msglen
                	lbcd	curptr
 0226+ED4B      	DB	0EDH,4BH
 0228+B600      	DW	CURPTR
 022A 09        	dad	b
 022B 1E24      	mvi	e,sn$txwr
 022D CD0201    	call	putwiz2
                	; send data
 0230 2ABA00    	lhld	msglen
 0233 EB        	xchg
 0234 2AB600    	lhld	curptr
 0237 CD8801    	call	cpyout
 023A 3AB500    	lda	cursok
 023D F608      	ori	sock0
 023F 57        	mov	d,a
 0240 3E20      	mvi	a,SEND
 0242 CD1801    	call	wizcmd
                	; ignore Sn_SR?
 0245 2E10      	mvi	l,00010000b	; SEND_OK bit
 0247 CDBC01    	call	wizsts
 024A 2F        	cma	; want "0" on success
 024B A1        	ana	c	; SEND_OK
 024C C8        	rz
 024D 3A0000    serr:	lda	CFGTBL
 0250 F601      	ori	senderr
 0252 320000    	sta	CFGTBL
 0255 3EFF      	mvi	a,0ffh
 0257 C9        	ret
                
                ; TODO: also check/OPEN sockets?
                ; That would result in all sockets always being open...
                ; At least check all, if none are ESTABLISHED then error immediately
                check:
 0258 110308    	lxi	d,(sock0 shl 8) + sn$sr
 025B 0608      	mvi	b,nsocks
 025D CDBE00    chk2:	call	getwiz1
 0260 FE17      	cpi	ESTABLISHED
                	jrz	chk3
 0262+2808      	DB	28H,CHK3-$-1
 0264 3E20      	mvi	a,001$00$000b
 0266 82        	add	d	; next socket
 0267 57        	mov	d,a
                	djnz	chk2
 0268+10F3      	DB	10H,CHK2-$-1
 026A 37        	stc
 026B C9        	ret
 026C 21007D    chk3:	lxi	h,32000	; do check for sane receive time...
 026F 1608      chk0:	mvi	d,sock0
 0271 0608      	mvi	b,nsocks
 0273 E5        	push	h
 0274 2E04      	mvi	l,00000100b	; RECV data available bit
 0276 CDBC01    chk1:	call	wizsts
 0279 A5        	ana	l	; RECV data available
                	jrnz	chk4	; D=socket
 027A+200E      	DB	20H,CHK4-$-1
 027C 3E20      	mvi	a,001$00$000b
 027E 82        	add	d	; next socket
 027F 57        	mov	d,a
                	djnz	chk1
 0280+10F4      	DB	10H,CHK1-$-1
 0282 E1        	pop	h
 0283 2B        	dcx	h
 0284 7C        	mov	a,h
 0285 B5        	ora	l
                	jrnz	chk0
 0286+20E7      	DB	20H,CHK0-$-1
 0288 37        	stc
 0289 C9        	ret
 028A E1        chk4:	pop	h
 028B C9        	ret
                
                ;	Receive Message from Network
                RCVMSG:			; BC = message addr
                	sbcd	msgptr
 028C+ED43      	DB	0EDH,43H
 028E+B800      	DW	MSGPTR
                	lixd	msgptr
 0290+DD2A      	DB	0DDH,2AH
 0292+B800      	DW	MSGPTR
 0294 CD5802    	call	check	; locates socket that is ready
                	; D=socket
                	jrc	rerr
 0297+3867      	DB	38H,RERR-$-1
 0299 210000    	lxi	h,0
 029C 22BC00    	shld	totlen
                rm0:	; D must be socket base...
 029F 1E26      	mvi	e,sn$rxrsr	; length
 02A1 CDEA00    	call	getwiz2
 02A4 7C        	mov	a,h
 02A5 B5        	ora	l
                	jrz	rm0
 02A6+28F7      	DB	28H,RM0-$-1
 02A8 22BA00    	shld	msglen		; not CP/NET msg len
 02AB 1E28      	mvi	e,sn$rxrd	; pointer
 02AD CDEA00    	call	getwiz2
 02B0 22B600    	shld	curptr
                	lbcd	msglen	; BC=Sn_RX_RSR
 02B3+ED4B      	DB	0EDH,4BH
 02B5+BA00      	DW	MSGLEN
 02B7 2ABC00    	lhld	totlen
 02BA B7        	ora	a
                	dsbc	b
 02BB+ED42      	DB	0EDH,B*8+42H
 02BD 22BC00    	shld	totlen	; might be negative...
                	lbcd	curptr
 02C0+ED4B      	DB	0EDH,4BH
 02C2+B600      	DW	CURPTR
 02C4 2ABA00    	lhld	msglen	; BC=Sn_RX_RD, HL=Sn_RX_RSR
 02C7 09        	dad	b	; HL=nxt RD
 02C8 1E28      	mvi	e,sn$rxrd
 02CA CD0201    	call	putwiz2
                	; DE destroyed...
                	lded	msglen
 02CD+ED5B      	DB	0EDH,5BH
 02CF+BA00      	DW	MSGLEN
 02D1 2AB600    	lhld	curptr
 02D4 CDA101    	call	cpyin
 02D7 3AB500    	lda	cursok
 02DA F608      	ori	sock0
 02DC 57        	mov	d,a
 02DD 3E40      	mvi	a,RECV
 02DF CD1801    	call	wizcmd
                	; ignore Sn_SR?
 02E2 2ABC00    	lhld	totlen	; might be neg (first pass)
 02E5 7C        	mov	a,h
 02E6 B7        	ora	a
 02E7 F2FB02    	jp	rm1
                	; can we guarantee at least msg hdr?
                	ldx	a,+4	; msg siz (-1)
 02EA+DD7E04    	DB	0DDH,A*8+46H,+4
 02ED C606      	adi	5+1	; header, +1 for (-1)
 02EF 5F        	mov	e,a
 02F0 3E00      	mvi	a,0
 02F2 8F        	adc	a
 02F3 57        	mov	d,a	; true msg len
 02F4 19        	dad	d	; subtract what we already have
                	jrnc	rerr	; something is wrong, if still neg
 02F5+3009      	DB	30H,RERR-$-1
 02F7 22BC00    	shld	totlen
 02FA 7C        	mov	a,h
 02FB B5        rm1:	ora	l
 02FC C29F02    	jnz	rm0
 02FF C9        	ret	; success (A=0)
                
 0300 3A0000    rerr:	lda	CFGTBL
 0303 F602      	ori	rcverr
 0305 320000    	sta	CFGTBL
 0308 3EFF      err:	mvi	a,0ffh
 030A C9        NTWKER:	ret
                
                NTWKBT:	; NETWORK WARM START
 030B 3A0000    	lda	CFGTBL
 030E E610      	ani	active
 0310 CACB01    	jz	NTWKIN	; will end up back here, on success
                ntwkbt0:
                	; load socket server IDs based on WIZ550io current config
 0313 0608      	mvi	b,nsocks
 0315 110408    	lxi	d,(sock0 shl 8) + sn$prt
 0318 21AD00    	lxi	h,srvtbl
                nb1:
 031B E5        	push	h
 031C CDEA00    	call	getwiz2	; destroys C,HL
 031F 7C        	mov	a,h
 0320 FE31      	cpi	31h
 0322 3EFF      	mvi	a,0ffh
                	jrnz	nb0
 0324+2001      	DB	20H,NB0-$-1
 0326 7D        	mov	a,l	; server ID
 0327 E1        nb0:	pop	h
 0328 77        	mov	m,a
 0329 23        	inx	h
 032A 3E20      	mvi	a,001$00$000b
 032C 82        	add	d	; next socket
 032D 57        	mov	d,a
                	djnz	nb1
 032E+10EB      	DB	10H,NB1-$-1
 0330 AF        	xra	a
 0331 C9        	ret
                
 0332           	end
