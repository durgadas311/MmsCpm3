                ; SNIOS for H8-WIZ550io
                ;
                	maclib	z80
                
                	public	NTWKIN, NTWKST, CNFTBL, SNDMSG, RCVMSG, NTWKER, NTWKBT, CFGTBL
                
 0040 =         wiz	equ	40h	; base port
 0040 =         wiz$dat	equ	wiz+0
 0041 =         wiz$ctl	equ	wiz+1
 0041 =         wiz$sta	equ	wiz+1
                
 0008 =         nsocks	equ	8
                
 0001 =         SCS	equ	1	; ctl port
 0001 =         BSY	equ	1	; sts port
                
 0008 =         sock0	equ	000$01$000b	; base pattern for Sn_ regs
 0014 =         txbuf0	equ	000$10$100b	; base pattern for Tx buffer
 0018 =         rxbuf0	equ	000$11$000b	; base pattern for Rx buffer
                
                ; common regs
 0015 =         ir	equ	21
 0017 =         sir	equ	23
 001D =         pmagic	equ	29
                
                ; socket regs, relative
 0001 =         sn$cr	equ	1
 0002 =         sn$ir	equ	2
 0003 =         sn$sr	equ	3
 0004 =         sn$prt	equ	4
 0024 =         sn$txwr	equ	36
 0026 =         sn$rxrsr equ	38
 0028 =         sn$rxrd	equ	40
                
                ; socket commands
 0001 =         OPEN	equ	01h
 0004 =         CONNECT	equ	04h
 0020 =         SEND	equ	20h
 0040 =         RECV	equ	40h
                
                ; socket status
 0013 =         INIT	equ	13h
 0017 =         ESTABLISHED equ	17h
                
                	cseg
                ;	Slave Configuration Table
                CFGTBL:
 0000           	ds	1		; network status byte
 0001           	ds	1		; slave processor ID number
 0002           	ds	2		; A:	Disk device	+2
 0004           	ds	2		; B:	"
 0006           	ds	2		; C:	"
 0008           	ds	2		; D:	"
 000A           	ds	2		; E:	"
 000C           	ds	2		; F:	"
 000E           	ds	2		; G:	"
 0010           	ds	2		; H:	"
 0012           	ds	2		; I:	"
 0014           	ds	2		; J:	"
 0016           	ds	2		; K:	"
 0018           	ds	2		; L:	"
 001A           	ds	2		; M:	"
 001C           	ds	2		; N:	"
 001E           	ds	2		; O:	"
 0020           	ds	2		; P:	"
                
 0022           	ds	2		; console device	+34
                
 0024           	ds	2		; list device:		+36...
 0026           	ds	1		;	buffer index	+2
 0027 00        	db	0		;	FMT		+3
 0028 00        	db	0		;	DID		+4
 0029 FF        	db	0ffh		;	SID (CP/NOS must still initialize)
 002A 05        	db	5		;	FNC		+6
 002B 00        	db	0		;	SIZ		+7
 002C           	ds	1		;	MSG(0)	List number	+8
 002D           	ds	128		;	MSG(1) ... MSG(128)	+9...
                
                ;	Network Status Byte Equates
                ;
 0010 =         active		equ	0001$0000b	; slave logged in on network
 0002 =         rcverr		equ	0000$0010b	; error in received message
 0001 =         senderr 	equ	0000$0001b	; unable to send message
                
 00AD           srvtbl:	ds	nsocks	; SID, per socket
                
 00B5 00        cursok:	db	0	; current socket select patn
 00B6 0000      curptr:	dw	0	; into chip mem
 00B8 0000      msgptr:	dw	0
 00BA 0000      msglen:	dw	0
 00BC 0000      totlen:	dw	0
                
                getwiz1:
 00BE 3E01      	mvi	a,SCS
 00C0 D341      	out	wiz$ctl
 00C2 0E40      	mvi	c,wiz$dat
 00C4 AF        	xra	a
                	outp	a	; hi adr byte always 0
 00C5+ED79      	DB	0EDH,A*8+41H
                	outp	e
 00C7+ED59      	DB	0EDH,E*8+41H
                	res	2,d
 00C9+CB92      	DB	0CBH,2*8+D+80H
                	outp	d
 00CB+ED51      	DB	0EDH,D*8+41H
                	inp	a	; prime MISO
 00CD+ED78      	DB	0EDH,A*8+40H
                	inp	a
 00CF+ED78      	DB	0EDH,A*8+40H
 00D1 F5        	push	psw
 00D2 AF        	xra	a
 00D3 D341      	out	wiz$ctl	; clear SCS
 00D5 F1        	pop	psw
 00D6 C9        	ret
                
                putwiz1:
 00D7 F5        	push	psw
 00D8 3E01      	mvi	a,SCS
 00DA D341      	out	wiz$ctl
 00DC 0E40      	mvi	c,wiz$dat
 00DE AF        	xra	a
                	outp	a	; hi adr byte always 0
 00DF+ED79      	DB	0EDH,A*8+41H
                	outp	e
 00E1+ED59      	DB	0EDH,E*8+41H
                	setb	2,d
 00E3+CBD2      	DB	0CBH,2*8+D+0C0H
                	outp	d
 00E5+ED51      	DB	0EDH,D*8+41H
 00E7 F1        	pop	psw
                	outp	a	; data
 00E8+ED79      	DB	0EDH,A*8+41H
 00EA AF        	xra	a
 00EB D341      	out	wiz$ctl	; clear SCS
 00ED C9        	ret
                
                ; Get 16-bit value from chip
                ; Prereq: IDM_AR0 already set, auto-incr on
                ; Entry: A=value for IDM_AR1
                ; Return: HL=register pair contents
                getwiz2:
 00EE 3E01      	mvi	a,SCS
 00F0 D341      	out	wiz$ctl
 00F2 0E40      	mvi	c,wiz$dat
 00F4 AF        	xra	a
                	outp	a	; hi adr byte always 0
 00F5+ED79      	DB	0EDH,A*8+41H
                	outp	e
 00F7+ED59      	DB	0EDH,E*8+41H
                	res	2,d
 00F9+CB92      	DB	0CBH,2*8+D+80H
                	outp	d
 00FB+ED51      	DB	0EDH,D*8+41H
                	inp	h	; prime MISO
 00FD+ED60      	DB	0EDH,H*8+40H
                	inp	h	; data
 00FF+ED60      	DB	0EDH,H*8+40H
                	inp	l	; data
 0101+ED68      	DB	0EDH,L*8+40H
                	; A still 00
 0103 D341      	out	wiz$ctl	; clear SCS
 0105 C9        	ret
                
                ; Put 16-bit value to chip
                ; Prereq: IDM_AR0 already set, auto-incr on
                ; Entry: A=value for IDM_AR1
                ;        HL=register pair contents
                putwiz2:
 0106 3E01      	mvi	a,SCS
 0108 D341      	out	wiz$ctl
 010A 0E40      	mvi	c,wiz$dat
 010C AF        	xra	a
                	outp	a	; hi adr byte always 0
 010D+ED79      	DB	0EDH,A*8+41H
                	outp	e
 010F+ED59      	DB	0EDH,E*8+41H
                	setb	2,d
 0111+CBD2      	DB	0CBH,2*8+D+0C0H
                	outp	d
 0113+ED51      	DB	0EDH,D*8+41H
                	outp	h	; data to write
 0115+ED61      	DB	0EDH,H*8+41H
                	outp	l
 0117+ED69      	DB	0EDH,L*8+41H
                	; A still 00
 0119 D341      	out	wiz$ctl	; clear SCS
 011B C9        	ret
                
                ; Issue command, wait for complete
                ; D=Socket ctl byte
                ; Returns: A=Sn_SR
 011C 47        wizcmd:	mov	b,a
 011D 1E01      	mvi	e,sn$cr
                	setb	2,d
 011F+CBD2      	DB	0CBH,2*8+D+0C0H
 0121 3E01      	mvi	a,SCS
 0123 D341      	out	wiz$ctl
 0125 0E40      	mvi	c,wiz$dat
 0127 AF        	xra	a
                	outp	a	; hi adr byte always 0
 0128+ED79      	DB	0EDH,A*8+41H
                	outp	e
 012A+ED59      	DB	0EDH,E*8+41H
                	outp	d
 012C+ED51      	DB	0EDH,D*8+41H
                	outp	b	; command
 012E+ED41      	DB	0EDH,B*8+41H
                	; A still 00
 0130 D341      	out	wiz$ctl	; clear SCS
 0132 CDBE00    wc0:	call	getwiz1
 0135 B7        	ora	a
                	jrnz	wc0
 0136+20FA      	DB	20H,WC0-$-1
 0138 1E03      	mvi	e,sn$sr
 013A CDBE00    	call	getwiz1
 013D C9        	ret
                
                ; wait for socket state
                ; D=socket, C=bits (destroys B)
                ; returns A=Sn_IR - before any bits are reset
 013E 21007D    wizist:	lxi	h,32000
 0141 C5        wst0:	push	b
 0142 E5        	push	h
 0143 69        	mov	l,c
 0144 CDDE01    	call	wizsts
 0147 E1        	pop	h
 0148 C1        	pop	b
 0149 47        	mov	b,a
 014A A1        	ana	c
                	jrnz	wst1
 014B+2007      	DB	20H,WST1-$-1
 014D 2B        	dcx	h
 014E 7C        	mov	a,h
 014F B5        	ora	l
                	jrnz	wst0
 0150+20EF      	DB	20H,WST0-$-1
 0152 37        	stc
 0153 C9        	ret
 0154 78        wst1:	mov	a,b
 0155 C9        	ret
                
                ; B=Server ID, preserves HL
                ; returns DE=socket base (if NC)
                getsrv:
 0156 0E08      	mvi	c,nsocks
 0158 11AD00    	lxi	d,srvtbl
                gs1:
 015B 1A        	ldax	d
 015C B8        	cmp	b
                	jrz	gs0
 015D+2806      	DB	28H,GS0-$-1
 015F 13        	inx	d
 0160 0D        	dcr	c
                	jrnz	gs1
 0161+20F8      	DB	20H,GS1-$-1
 0163 37        	stc	; not found
 0164 C9        	ret
                gs0:	; found...
 0165 3E08      	mvi	a,nsocks
 0167 91        	sub	c	; socket num 00000sss
 0168 0F        	rrc		; s00000ss
 0169 0F        	rrc		; ss00000s
 016A 0F        	rrc		; sss00000
 016B 32B500    	sta	cursok
 016E F608      	ori	sock0	; sss01000
 0170 57        	mov	d,a
 0171 1E03      	mvi	e,sn$sr
 0173 CDBE00    	call	getwiz1
 0176 FE17      	cpi	ESTABLISHED
 0178 C8        	rz
 0179 FE13      	cpi	INIT
                	jrz	gs3
 017B+2809      	DB	28H,GS3-$-1
                	; try to open socket...
 017D 3E01      	mvi	a,OPEN
 017F CD1C01    	call	wizcmd
 0182 FE13      	cpi	INIT
                	jrnz	gs2
 0184+200E      	DB	20H,GS2-$-1
 0186 3E04      gs3:	mvi	a,CONNECT
 0188 CD1C01    	call	wizcmd
 018B 0E0B      	mvi	c,00001011b	; CON, DISCON, or TIMEOUT
 018D CD3E01    	call	wizist	; returns when one is set
 0190 2F        	cma	; want "0" on success
 0191 E601      	ani	00000001b	; CON
 0193 C8        	rz
 0194 37        gs2:	stc	; failed to open
 0195 C9        	ret
                
                ; HL=socket relative pointer (TX_WR)
                ; DE=length
                ; Returns: HL=msgptr, C=wiz$dat
                cpsetup:
 0196 3E01      	mvi	a,SCS
 0198 D341      	out	wiz$ctl
 019A 0E40      	mvi	c,wiz$dat
                	outp	h
 019C+ED61      	DB	0EDH,H*8+41H
                	outp	l
 019E+ED69      	DB	0EDH,L*8+41H
 01A0 3AB500    	lda	cursok
 01A3 B0        	ora	b
                	outp	a
 01A4+ED79      	DB	0EDH,A*8+41H
 01A6 2AB800    	lhld	msgptr
 01A9 C9        	ret
                
                cpyout:
 01AA 0614      	mvi	b,txbuf0
 01AC CD9601    	call	cpsetup
 01AF 43        	mov	b,e	; fraction of page
 01B0 7B        	mov	a,e
 01B1 B7        	ora	a
                	jrz	co0	; exactly 256
 01B2+2806      	DB	28H,CO0-$-1
                	outir		; do partial page
 01B4+EDB3      	DB	0EDH,0B3H
                	; B is now 0 (256 bytes)
 01B6 7A        	mov	a,d
 01B7 B7        	ora	a
                	jrz	co1
 01B8+2802      	DB	28H,CO1-$-1
                co0:	outir	; 256 (more) bytes to xfer
 01BA+EDB3      	DB	0EDH,0B3H
 01BC 22B800    co1:	shld	msgptr
 01BF AF        	xra	a
 01C0 D341      	out	wiz$ctl	; clear SCS
 01C2 C9        	ret
                
                ; HL=socket relative pointer (RX_RD)
                ; DE=length
                ; Destroys IDM_AR0, IDM_AR1
                cpyin:
 01C3 0618      	mvi	b,rxbuf0
 01C5 CD9601    	call	cpsetup	;
                	inp	a	; prime MISO
 01C8+ED78      	DB	0EDH,A*8+40H
 01CA 43        	mov	b,e	; fraction of page
 01CB 7B        	mov	a,e
 01CC B7        	ora	a
                	jrz	ci0	; exactly 256
 01CD+2806      	DB	28H,CI0-$-1
                	inir		; do partial page
 01CF+EDB2      	DB	0EDH,0B2H
                	; B is now 0 (256 bytes)
 01D1 7A        	mov	a,d
 01D2 B7        	ora	a
                	jrz	ci1
 01D3+2802      	DB	28H,CI1-$-1
                ci0:	inir	; 256 (more) bytes to xfer
 01D5+EDB2      	DB	0EDH,0B2H
 01D7 22B800    ci1:	shld	msgptr
 01DA AF        	xra	a
 01DB D341      	out	wiz$ctl	; clear SCS
 01DD C9        	ret
                
                ; L=bits to reset
                ; D=socket base
                ; Destroys C,E
                wizsts:
 01DE 1E02      	mvi	e,sn$ir
 01E0 CDBE00    	call	getwiz1	; destroys C
 01E3 F5        	push	psw
 01E4 A5        	ana	l
                	jrz	ws0	; don't reset if not set (could race)
 01E5+2804      	DB	28H,WS0-$-1
 01E7 7D        	mov	a,l
 01E8 CDD700    	call	putwiz1
 01EB F1        ws0:	pop	psw
 01EC C9        	ret
                
                ;	Utility Procedures
                ;
                ;	Network Initialization
                NTWKIN:
                	lxix	CFGTBL
 01ED+DD21      	DB	0DDH,21H
 01EF+0000      	DW	CFGTBL
 01F1 111D00    	lxi	d,pmagic
 01F4 CDBE00    	call	getwiz1
 01F7 B7        	ora	a
 01F8 CA2B03    	jz	err
                	stx	a,+1 ; our slave (client) ID
 01FB+DD7701    	DB	0DDH,70H+A,+1
 01FE 3E10      	mvi	a,active
                	stx	a,+0 ; network status byte
 0200+DD7700    	DB	0DDH,70H+A,+0
 0203 AF        	xra	a
 0204 322B00    	sta	CFGTBL+36+7
 0207 C33603    	jmp	ntwkbt0	; load data
                
                ;	Network Status
                NTWKST:
 020A 3A0000    	lda	CFGTBL+0
 020D 47        	mov	b,a
 020E E6FC      	ani	not (rcverr+senderr)
 0210 320000    	sta	CFGTBL+0
 0213 78        	mov	a,b
 0214 C9        	ret
                
                ;	Return Configuration Table Address
                ;	Still need this for BDOS func 69
                CNFTBL:
 0215 210000    	lxi	h,CFGTBL
 0218 C9        	ret
                
                ;	Send Message on Network
                SNDMSG:			; BC = message addr
                	sbcd	msgptr
 0219+ED43      	DB	0EDH,43H
 021B+B800      	DW	MSGPTR
                	lixd	msgptr
 021D+DD2A      	DB	0DDH,2AH
 021F+B800      	DW	MSGPTR
                	ldx	b,+1	; SID - destination
 0221+DD4601    	DB	0DDH,B*8+46H,+1
 0224 CD5601    	call	getsrv
                	jrc	serr
 0227+3847      	DB	38H,SERR-$-1
                	; D=socket patn
 0229 3A0100    	lda	CFGTBL+1
                	stx	a,+2	; Set Slave ID in header
 022C+DD7702    	DB	0DDH,70H+A,+2
                	ldx	a,+4	; msg siz (-1)
 022F+DD7E04    	DB	0DDH,A*8+46H,+4
 0232 C606      	adi	5+1	; hdr, +1 for (-1)
 0234 6F        	mov	l,a
 0235 3E00      	mvi	a,0
 0237 CE00      	aci	0
 0239 67        	mov	h,a	; HL=msg length
 023A 22BA00    	shld	msglen
 023D 1E24      	mvi	e,sn$txwr
 023F CDEE00    	call	getwiz2
 0242 22B600    	shld	curptr
 0245 2ABA00    	lhld	msglen
                	lbcd	curptr
 0248+ED4B      	DB	0EDH,4BH
 024A+B600      	DW	CURPTR
 024C 09        	dad	b
 024D 1E24      	mvi	e,sn$txwr
 024F CD0601    	call	putwiz2
                	; send data
 0252 2ABA00    	lhld	msglen
 0255 EB        	xchg
 0256 2AB600    	lhld	curptr
 0259 CDAA01    	call	cpyout
 025C 3AB500    	lda	cursok
 025F F608      	ori	sock0
 0261 57        	mov	d,a
 0262 3E20      	mvi	a,SEND
 0264 CD1C01    	call	wizcmd
                	; ignore Sn_SR?
 0267 0E1A      	mvi	c,00011010b	; SEND_OK, DISCON, or TIMEOUT bit
 0269 CD3E01    	call	wizist
 026C 2F        	cma	; want "0" on success
 026D E610      	ani	00010000b	; SEND_OK
 026F C8        	rz	; else TIMEOUT/DISCON
 0270 3A0000    serr:	lda	CFGTBL
 0273 F601      	ori	senderr
 0275 320000    	sta	CFGTBL
 0278 3EFF      	mvi	a,0ffh
 027A C9        	ret
                
                ; TODO: also check/OPEN sockets?
                ; That would result in all sockets always being open...
                ; At least check all, if none are ESTABLISHED then error immediately
                check:
 027B 110308    	lxi	d,(sock0 shl 8) + sn$sr
 027E 0608      	mvi	b,nsocks
 0280 CDBE00    chk2:	call	getwiz1
 0283 FE17      	cpi	ESTABLISHED
                	jrz	chk3
 0285+2808      	DB	28H,CHK3-$-1
 0287 3E20      	mvi	a,001$00$000b
 0289 82        	add	d	; next socket
 028A 57        	mov	d,a
                	djnz	chk2
 028B+10F3      	DB	10H,CHK2-$-1
 028D 37        	stc
 028E C9        	ret
 028F 21007D    chk3:	lxi	h,32000	; do check for sane receive time...
 0292 1608      chk0:	mvi	d,sock0
 0294 0608      	mvi	b,nsocks
 0296 E5        	push	h
 0297 2E04      	mvi	l,00000100b	; RECV data available bit
 0299 CDDE01    chk1:	call	wizsts
 029C A5        	ana	l	; RECV data available
                	jrnz	chk4	; D=socket
 029D+200E      	DB	20H,CHK4-$-1
 029F 3E20      	mvi	a,001$00$000b
 02A1 82        	add	d	; next socket
 02A2 57        	mov	d,a
                	djnz	chk1
 02A3+10F4      	DB	10H,CHK1-$-1
 02A5 E1        	pop	h
 02A6 2B        	dcx	h
 02A7 7C        	mov	a,h
 02A8 B5        	ora	l
                	jrnz	chk0
 02A9+20E7      	DB	20H,CHK0-$-1
 02AB 37        	stc
 02AC C9        	ret
 02AD E1        chk4:	pop	h
 02AE C9        	ret
                
                ;	Receive Message from Network
                RCVMSG:			; BC = message addr
                	sbcd	msgptr
 02AF+ED43      	DB	0EDH,43H
 02B1+B800      	DW	MSGPTR
                	lixd	msgptr
 02B3+DD2A      	DB	0DDH,2AH
 02B5+B800      	DW	MSGPTR
 02B7 CD7B02    	call	check	; locates socket that is ready
                	; D=socket
                	jrc	rerr
 02BA+3867      	DB	38H,RERR-$-1
 02BC 210000    	lxi	h,0
 02BF 22BC00    	shld	totlen
                rm0:	; D must be socket base...
 02C2 1E26      	mvi	e,sn$rxrsr	; length
 02C4 CDEE00    	call	getwiz2
 02C7 7C        	mov	a,h
 02C8 B5        	ora	l
                	jrz	rm0
 02C9+28F7      	DB	28H,RM0-$-1
 02CB 22BA00    	shld	msglen		; not CP/NET msg len
 02CE 1E28      	mvi	e,sn$rxrd	; pointer
 02D0 CDEE00    	call	getwiz2
 02D3 22B600    	shld	curptr
                	lbcd	msglen	; BC=Sn_RX_RSR
 02D6+ED4B      	DB	0EDH,4BH
 02D8+BA00      	DW	MSGLEN
 02DA 2ABC00    	lhld	totlen
 02DD B7        	ora	a
                	dsbc	b
 02DE+ED42      	DB	0EDH,B*8+42H
 02E0 22BC00    	shld	totlen	; might be negative...
                	lbcd	curptr
 02E3+ED4B      	DB	0EDH,4BH
 02E5+B600      	DW	CURPTR
 02E7 2ABA00    	lhld	msglen	; BC=Sn_RX_RD, HL=Sn_RX_RSR
 02EA 09        	dad	b	; HL=nxt RD
 02EB 1E28      	mvi	e,sn$rxrd
 02ED CD0601    	call	putwiz2
                	; DE destroyed...
                	lded	msglen
 02F0+ED5B      	DB	0EDH,5BH
 02F2+BA00      	DW	MSGLEN
 02F4 2AB600    	lhld	curptr
 02F7 CDC301    	call	cpyin
 02FA 3AB500    	lda	cursok
 02FD F608      	ori	sock0
 02FF 57        	mov	d,a
 0300 3E40      	mvi	a,RECV
 0302 CD1C01    	call	wizcmd
                	; ignore Sn_SR?
 0305 2ABC00    	lhld	totlen	; might be neg (first pass)
 0308 7C        	mov	a,h
 0309 B7        	ora	a
 030A F21E03    	jp	rm1
                	; can we guarantee at least msg hdr?
                	ldx	a,+4	; msg siz (-1)
 030D+DD7E04    	DB	0DDH,A*8+46H,+4
 0310 C606      	adi	5+1	; header, +1 for (-1)
 0312 5F        	mov	e,a
 0313 3E00      	mvi	a,0
 0315 8F        	adc	a
 0316 57        	mov	d,a	; true msg len
 0317 19        	dad	d	; subtract what we already have
                	jrnc	rerr	; something is wrong, if still neg
 0318+3009      	DB	30H,RERR-$-1
 031A 22BC00    	shld	totlen
 031D 7C        	mov	a,h
 031E B5        rm1:	ora	l
 031F C2C202    	jnz	rm0
 0322 C9        	ret	; success (A=0)
                
 0323 3A0000    rerr:	lda	CFGTBL
 0326 F602      	ori	rcverr
 0328 320000    	sta	CFGTBL
 032B 3EFF      err:	mvi	a,0ffh
 032D C9        NTWKER:	ret
                
                NTWKBT:	; NETWORK WARM START
 032E 3A0000    	lda	CFGTBL
 0331 E610      	ani	active
 0333 CAED01    	jz	NTWKIN	; will end up back here, on success
                ntwkbt0:
                	; load socket server IDs based on WIZ550io current config
 0336 0608      	mvi	b,nsocks
 0338 110408    	lxi	d,(sock0 shl 8) + sn$prt
 033B 21AD00    	lxi	h,srvtbl
                nb1:
 033E E5        	push	h
 033F CDEE00    	call	getwiz2	; destroys C,HL
 0342 7C        	mov	a,h
 0343 FE31      	cpi	31h
 0345 3EFF      	mvi	a,0ffh
                	jrnz	nb0
 0347+2001      	DB	20H,NB0-$-1
 0349 7D        	mov	a,l	; server ID
 034A E1        nb0:	pop	h
 034B 77        	mov	m,a
 034C 23        	inx	h
 034D 3E20      	mvi	a,001$00$000b
 034F 82        	add	d	; next socket
 0350 57        	mov	d,a
                	djnz	nb1
 0351+10EB      	DB	10H,NB1-$-1
 0353 AF        	xra	a
 0354 C9        	ret
                
 0355           	end
