                ;	NETWORK DISK OPERATING SYSTEM FOR CP/NET on CP/M Plus v3
                ;
                ; 1982.12.31. exact date unknown
                ; 2016.05.20. adapted for RSX on CP/M Plus
                ;	Dropped support for remote console/list, due to BIOS intercept issues.
                ;	BIOS intercept is a problem because of the transient nature of RSXs.
                ;	Could add back support for "well-behaved" LIST OUTPUT users,
                ;	provided BIOS intercept is not required.
                ;
                ;TITLE	NETWORK DISK OPERATING SYSTEM FOR CP/NET SLAVE
                	maclib	z80
                
                	extrn	NTWKIN, NTWKST, CNFTBL, SNDMSG, RCVMSG, NTWKBT, NTWKDN, CFGTBL
                ;
                ;
                ;	EQUATIONS OF DATA
                ;
 000A =         LF	EQU	0AH	;LINE FEED
 000D =         CR	EQU	0DH	;CARRIAGE RETURN
 001A =         EOF	EQU	1AH	;CTRL-Z IS END OF FILE
 00FF =         LEOF	EQU	0ffh	;-1 is logical end of file
                ;
 0000 =         TOP	equ	0000h
 0004 =         CDISK	equ	0004h
 0005 =         BDOS	equ	0005h
 0080 =         SYSDMA	equ	0080h
 0100 =         TPA	equ	0100h
                
 0080 =         SCTLNG	equ	128	;ONE SECTOR LENGTH
                ;
                ;	EQUATIONS OF DOS FUNCTION
                ;
 0003 =         CCNDIN	EQU	3	;CONSOLE INPUT WITH DEVICE CODE
 0004 =         CCNDOT	EQU	4	;CONSOLE OUTPUT WITH DEVICE CODE
 0009 =         CBUFPR	EQU	9	;BUFFER PRINT
 000A =         CRDBUF	EQU	10	;READ BUFFER
 000B =         CCONST	EQU	11	;GET CONSOLE STATUS
 000C =         CGETVR	EQU	12	;GET VERSION NUMBER
 000D =         CRSDSK	EQU	13	;RESET DISK
 000F =         COPEN	EQU	15	;OPEN FILE
 0010 =         CCLOSE	EQU	16	;CLOSE FILE
 0011 =         CSRFST	EQU	17	;SEARCH FIRST
 0012 =         CSRNXT	EQU	18	;SEARCH NEXT DIRECTORY
 0014 =         CREAD	EQU	20	;READ SEQ
 0015 =         CWRITE	EQU	21	;WRITE SEQ
 001A =         CSTDMA	EQU	26	;SET DMA ADDRESS
 001B =         CGTALL	EQU	27	;get alloc vector addr
 001F =         CGTDPB	EQU	31	;get DPB addr
 0020 =         CSTUSC	EQU	32	;SET USER CODE
 0021 =         CRREAD	EQU	33	;READ SEQ
 0022 =         CRWRIT	EQU	34	;WRITE SEQ
 0025 =         CRSDSN	EQU	37	;RESET DISK BY DISK VERCTOR
 002E =         CFRSP	equ	46	; get disk free space
 0031 =         scbf	equ	49	; get/set SCB
 0032 =         CBIOS	equ	50	; direct BIOS call
 003B =         COVLY	equ	59	; load overlay
 003C =         CRSX	equ	60	; call RSX function
 006A =         CDEFPW	EQU	106	;set default password
 0070 =         CLSBLK	equ	112	; List Block - does not fit in table...
                
 0032 =         CBMAX	EQU	50	;MAX OF BDOS FUNCTION - CXMIN.. collapsed here
 0062 =         CXMIN	EQU	98	;extended bdos functions base - collapse into CBMAX
                ;
 0040 =         CNMIN	EQU	64	;MIN OF NDOS FUNCTION
 0040 =         CLOGIN	EQU	64	;LOGIN
 0041 =         CLOGOF	EQU	65	;LOGOFF
 0048 =         CNMAX	EQU	72	;MAX OF NDOS FUNCTION
                
                ;
                ;	SLAVE CONFIGRATION TABLE
                ;
                ; -1	NETWORK STATUS
                ;	0	SLAVE PROCESSOR ID
                ;	1-32 A - P DISK DEVICE CODE
                ; 33-34 CONSOLE DEVICE
                ; 35-36 LIST DEVICE
                ; 37	LIST BUFFER COUNTER
                ; 38-42 MESSAGE HEADER FOR LIST OUT
                ; 43	LISTER DEVICE NUMBER
                ; 44-171 LIST OUT DATA BUFFER
                ;
                ;	EACH DEVICE DATA USED 2 BYTES
                ;	IN 1-36
                ;	1B:BIT 7 H ON NETWORK
                ;	BIT 6 H SET UP IN DISK
                ;	BIT 0-3 DEVICE NUMBER IN MASTER
                ;	2B:MASTER ID
                ;
                ;	BIAS TO DATA IN CONFIGRATION TABLE
                ;
 0001 =         BSRID	equ	1	;client ID
 0002 =         BSDSKS	equ	2	;first byte in disk table
 0021 =         BSDSKE	equ	33	;last byte in disk table
 0022 =         BSCONS	EQU	34	;BIAS TO CONSOLE DATA
 0024 =         BSLIST	EQU	36	;BIAS TO LISTER DATA
                
 0021 =         FCBRR0	equ	33	; offset of RR0 field in FCB (not FCB in MSG)
                
 009C =         scbase	equ	09ch	; base address of SCB within page
                
 0000           	org	0
                
                ;	RSX Prefix
 0000 0000000000serial:	db	0,0,0,0,0,0
 0006 C3D501    start:	jmp	COLDST
 0009 C30000    next:	jmp	0
 000C 0000      prev:	dw	0
 000E 00        remove:	db	0	; 0ffh for remove
                nonbank:
 000F 00        	db	0
 0010 4E444F5333rsxnam:	db	'NDOS3   '
 0018 000000    loader:	db	0,0,0
                
 001B 18        ioport:	db	018h	; could be patched here
                
 001C 434F505952	db	'COPYRIGHT (C) 1980-82, DIGITAL RESEARCH '
 0044 0000000000	db	0,0,0,0,0,0
                
 004A 0D0A4E444FNDERRM:	db	CR,LF,'NDOS Err $'
 0056 2C2046756ENDERR2:	db	', Func $'
                
 005E 0000      BDOSE:	dw	0
 0060 00        CURSID: db	0
 0061 0000      scbadr:	dw	0
                
 0063 00        MSGTOP:	db	0
 0064 00        MSGID:	db	0
 0065 00        	db	0	; We assume network hw/sw sets this.
 0066 00        MSGFUN:	db	0
 0067 00        MSGSIZ:	db	0
 0068           MSGDAT:	ds	256
                
 0168 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 016E C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 0174 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 017A C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 0180 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 0186 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 018C C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 0192 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 0198 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 019E C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 01A4           STACK:	ds	0
                
 01A4 0000      USTACK:	dw	0
 01A6 00        FUNCOD:	db	0
 01A7 0000      PARAMT:	dw	0
 01A9 00        RETCOD:	db	0
 01AA 0000      MCRPNT:	dw	0
 01AC 00        LSTUNT: db	0
 01AD 00        F5SETF: db	0
 01AE 00        FNTMPF: db	0
 01AF 0000      ORGBIO: dw	0
                
 01B1 000024    HEXMSG: db	0,0,'$'
                
 01B4 496E697420CLDERR:	db	'Init err$'
                
                COLDSE:	; BC and DE are pushed...
 01BD 11B401    	lxi	d,CLDERR
 01C0 0E09      	mvi	c,CBUFPR
 01C2 CD0900    	call	next
 01C5 210900    	lxi	h,next
 01C8 220700    	shld	start+1	; only until remove takes place...
 01CB 3EFF      	mvi	a,0ffh
 01CD 320E00    	sta	remove
 01D0 C1        	pop	b
 01D1 D1        	pop	d
 01D2 C30900    	jmp	next	; pass to BDOS and hope for the best...
                
                ; Not a true cold start - we are in context of a valid BDOS call...
                COLDST:
 01D5 79        	mov	a,c
 01D6 FE31      	cpi	scbf	; hack to avoid init too soon (in LOADER3)
 01D8 CA0900    	jz	next	;
 01DB D5        	push	d
 01DC C5        	push	b
 01DD CD0000    	call	NTWKIN
 01E0 B7        	ora	a
 01E1 C2BD01    	jnz	COLDSE
 01E4 216C02    	lxi	h,NDOSE
 01E7 220700    	shld	start+1
 01EA AF        	xra	a	;
 01EB 320E00    	sta	remove	; is the required?
 01EE 216800    	lxi	h,MSGDAT
 01F1 22AA01    	shld	MCRPNT
                	; Apparently, it is passe to use BDOS calls for certain things...
 01F4 110C02    	lxi	d,scbadd
 01F7 0E31      	mvi	c,scbf
 01F9 CD0900    	call	next
 01FC 226100    	shld	scbadr
 01FF 114B02    	lxi	d,CSTUP
 0202 0E09      	mvi	c,CBUFPR
 0204 CD0900    	call	next
 0207 C1        	pop	b
 0208 D1        	pop	d
 0209 C30900    	jmp	next
                
 020C 3A00      scbadd:	db	03ah, 0
                
 020E 2A6100    BDERMD:	lhld	scbadr
 0211 2EE7      	mvi	l,scbase+4bh
 0213 7E        	mov	a,m
 0214 C9        	ret
                
 0215 2A6100    SYSMSC:	lhld	scbadr
 0218 2EE6      	mvi	l,scbase+4ah
 021A 7E        	mov	a,m
 021B C9        	ret
                
 021C 2A6100    CURUSR: lhld	scbadr
 021F 2EE0      	mvi	l,scbase+44h
 0221 7E        	mov	a,m
 0222 C9        	ret
                
                ; Some sneaky programs, like ERASE.COM, use the "saved search address" from the SCB.
                ; so we must put the address there if the BDOS does not (i.e. networked drive).
 0223 2AA701    SETSRA:	lhld	PARAMT
 0226 EB        	xchg
 0227 2A6100    	lhld	scbadr
 022A 2EE3      	mvi	l,scbase+47h
 022C 73        	mov	m,e
 022D 23        	inx	h
 022E 72        	mov	m,d
 022F C9        	ret
                
 0230 2A6100    SETDSK: lhld	scbadr
 0233 2EDA      	mvi	l,scbase+3eh
 0235 3AA701    	lda	PARAMT
 0238 77        	mov	m,a
 0239 C9        	ret
                
 023A 2A6100    CURDSK: lhld	scbadr
 023D 2EDA      	mvi	l,scbase+3eh
 023F 7E        	mov	a,m
 0240 C9        	ret
                
 0241 2A6100    DMAADD: lhld	scbadr
 0244 2ED8      	mvi	l,scbase+3ch
 0246 7E        	mov	a,m
 0247 23        	inx	h
 0248 66        	mov	h,m
 0249 6F        	mov	l,a
 024A C9        	ret
                
 024B 4E444F5333CSTUP:	DB	'NDOS3 Started.',CR,LF,'$'
 025C 4E444F5333CSTDN:	DB	'NDOS3 Ending.',CR,LF,'$'
                ;wbmsg:	DB	'NDOS3 Warm-boot.',CR,LF,'$'
                
                NDOSE:
 026C 79        	mov	a,c	; must save REAL function code!
 026D 32A601    	sta	FUNCOD
 0270 326600    	sta	MSGFUN
 0273 B7        	ora	a
 0274 CAE409    	jz	WARMST
 0277 FE3B      	cpi	COVLY
 0279 CAE409    	jz	LDOVLY	; LOAD OVERLAY (RSX SCRUB) - indication of warm boot
 027C FE3C      	cpi	CRSX
 027E CAEE09    	jz	CALRSX	; used to unload CP/Net
 0281 FE32      	cpi	CBIOS
 0283 CA0900    	jz	next	; DIRECT BIOS CALL - might need to trap for LIST OUT
                
 0286 21D003    	lxi	h,FUNTBS
                NDOSE1:
 0289 79        	mov	a,c
 028A 96        	sub	m
 028B DA0900    	jc	next
 028E 23        	inx	h
 028F BE        	cmp	m
 0290 23        	inx	h
 0291 DA9E02    	jc	NDOSE2
 0294 23        	inx	h
 0295 23        	inx	h
 0296 7E        	mov	a,m
 0297 B7        	ora	a
 0298 C28902    	jnz	NDOSE1
 029B C30900    	jmp	next
                
                NDOSE2:
                	sspd	USTACK
 029E+ED73      	DB	0EDH,73H
 02A0+A401      	DW	USTACK
 02A2 31A401    	lxi	sp,STACK
 02A5 4F        	mov	c,a	; modified func code!
 02A6 7E        	mov	a,m
 02A7 23        	inx	h
 02A8 66        	mov	h,m
 02A9 6F        	mov	l,a	; HL = func table
 02AA E5        	push	h
 02AB EB        	xchg
 02AC 22A701    	shld	PARAMT
 02AF CD4102    	call	DMAADD
 02B2 22BC09    	shld	DMAADR	; cache DMA address for this call...
 02B5 216700    	lxi	h,MSGSIZ
 02B8 3600      	mvi	m,0	; assume 1-byte payload
 02BA 23        	inx	h
 02BB 22AA01    	shld	MCRPNT	; MSGDAT
 02BE AF        	xra	a
 02BF 47        	mov	b,a
 02C0 57        	mov	d,a
 02C1 E1        	pop	h	; specific func table in HL
 02C2 09        	dad	b
 02C3 5E        	mov	e,m	; don't need HL anymore
 02C4 93        	sub	e	; assumes A=0
 02C5 CA2604    	jz	tnextp	; code 0 = not handled by CP/Net
                NDOSE4:
 02C8 210D04    	lxi	h,NDENDR
 02CB E5        	push	h
 02CC 213703    	lxi	h,FUNTB2
 02CF 19        	dad	d
 02D0 E5        	push	h
                NDOSE5:
 02D1 C1        	pop	b
 02D2 0A        	ldax	b
 02D3 57        	mov	d,a
 02D4 E67F      	ani	07fh	; strip off EOP bit
 02D6 5F        	mov	e,a
 02D7 7A        	mov	a,d
 02D8 1600      	mvi	d,0
 02DA 21ED02    	lxi	h,FUNTB3
 02DD 19        	dad	d
 02DE 5E        	mov	e,m
 02DF 23        	inx	h
 02E0 56        	mov	d,m
 02E1 03        	inx	b
 02E2 17        	ral
 02E3 DAEB02    	jc	NDOSE6
 02E6 C5        	push	b
 02E7 21D102    	lxi	h,NDOSE5
 02EA E5        	push	h
                NDOSE6:
 02EB EB        	xchg
 02EC E9        	pchl
                
                FUNTB3:
 02ED 0000      	dw	0	; 0	000h	080h - never called
 02EF DE03      	dw	SNDHDR	; 2	002h	082h
 02F1 1904      	dw	RCVPAR	; 4	004h	084h
 02F3 6704      	dw	SNDFCB	; 6	006h	086h
 02F5 6D04      	dw	CKSFCB	; 8	008h	088h
 02F7 E204      	dw	RENTMP	; 10	00ah	08ah
 02F9 EC04      	dw	WTDTC2	; 12	00ch	08ch
 02FB F204      	dw	WTDTC8	; 14	00eh	08eh
 02FD F804      	dw	WTDTCP	; 16	010h	090h
 02FF 1105      	dw	CKSTDK	; 18	012h	092h
 0301 E805      	dw	BCSTFN	; 20	014h	094h
 0303 1C06      	dw	BCSTVC	; 22	016h	096h
 0305 3607      	dw	RCVEC	; 24	018h	098h
 0307 8F07      	dw	GTFCB	; 26	01ah	09ah
 0309 9C07      	dw	GTFCCR	; 28	01ch	09ch
 030B 9607      	dw	GTFCRR	; 30	01eh	09eh
 030D D407      	dw	GTDIRE	; 32	020h	0a0h
 030F 0208      	dw	GTOSCT	; 34	022h	0a2h
 0311 1908      	dw	GTMISC	; 36	024h	0a4h
 0313 5908      	dw	GTLOGV	; 38	026h	0a6h
 0315 E308      	dw	LIST1	; 40	028h	0a8h
 0317 BA08      	dw	SELDSK	; 42	02ah	0aah
 0319 EC08      	dw	LSTBLK	; 44	02ch	0ach
 031B 5909      	dw	GETVER	; 46	02eh	0aeh
 031D 0000      	dw	0	; 48	030h	0b0h - to be removed
 031F DA08      	dw	RESET	; 50	032h	0b2h
 0321 6609      	dw	NWSTAT	; 52	034h	0b4h
 0323 6D09      	dw	NWCFTB	; 54	036h	0b6h
 0325 9609      	dw	SDMSGU	; 56	038h	0b8h
 0327 A209      	dw	RVMSGU	; 58	03ah	0bah
 0329 7509      	dw	LOGIN	; 60	03ch	0bch
 032B 8D09      	dw	LOGOFF	; 62	03eh	0beh
 032D E706      	dw	STSF	; 64	040h	0c0h
 032F 1607      	dw	STSN	; 66	042h	0c2h
 0331 0000      	dw	0	; 68	044h	0c4h - to be removed
 0333 0B05      	dw	CKSTDP	;	046h	0c6h
 0335 3205      	dw	CHKMSC	;	048h	0c8h
                
                ; hi bit is "end" signal, else keep executing routines in list...
                ; byte & 07fh is index into FUNTB3, routine to call.
                FUNTB2:
 0337 80        	db	080h			; - never called
 0001 =         fgtvr	equ	$-FUNTB2
 0338 AE        	db	0aeh			;
 0002 =         frssy	equ	$-FUNTB2
 0339 B2        	db	0b2h			;
 0003 =         frsvc	equ	$-FUNTB2
 033A 96        	db	096h			;
 0004 =         fsldk	equ	$-FUNTB2
 033B AA        	db	0aah			;
 0005 =         fopfi	equ	$-FUNTB2
 033C 080E189A  	db	008h, 00eh, 018h, 09ah	;
 0009 =         fdlfi	equ	$-FUNTB2
 0340 0698      	db	006h, 098h		;
 000B =         fsrfs	equ	$-FUNTB2
 0342 4018A0    	db	040h, 018h, 0a0h	;
 000E =         fsrnx	equ	$-FUNTB2
 0345 4218A0    	db	042h, 018h, 0a0h	;
 0011 =         frdsq	equ	$-FUNTB2
 0348 4806181CA2	db	048h, 006h, 018h, 01ch, 0a2h	; READ SEQ
 0016 =         fwrsq	equ	$-FUNTB2
 034D 480810189C	db	048h, 008h, 010h, 018h, 09ch	; WRITE SEQ
 001B =         frefi	equ	$-FUNTB2
 0352 080A0298  	db	008h, 00ah, 002h, 098h	;
 001F =         flgvc	equ	$-FUNTB2
 0356 A6        	db	0a6h			;
 0020 =         fgtal	equ	$-FUNTB2
 0357 120218A4  	db	012h, 002h, 018h, 0a4h	;
 0024 =         fwrpr	equ	$-FUNTB2
 035B 120298    	db	012h, 002h, 098h	;
 0027 =         fstfi	equ	$-FUNTB2
 035E 06189C    	db	006h, 018h, 09ch	;
 002A =         frdrr	equ	$-FUNTB2
 0361 4806181EA2	db	048h, 006h, 018h, 01eh, 0a2h	; READ RAND
 002F =         fwrrr	equ	$-FUNTB2
 0366 480810189E	db	048h, 008h, 010h, 018h, 09eh	; WRITE RAND [ZEROFIL]
 0034 =         fgtsz	equ	$-FUNTB2
 036B 06189E    	db	006h, 018h, 09eh	;
 0037 =         flkrc	equ	$-FUNTB2
 036E 080C189E  	db	008h, 00ch, 018h, 09eh	;
 003B =         fstpw	equ	$-FUNTB2
 0372 94        	db	094h			;
 003C =         flgin	equ	$-FUNTB2
 0373 3C98      	db	03ch, 098h		;
 003E =         flgof	equ	$-FUNTB2
 0375 3E98      	db	03eh, 098h		;
 0040 =         fsdnw	equ	$-FUNTB2
 0377 B8        	db	0b8h			;
 0041 =         frvnw	equ	$-FUNTB2
 0378 BA        	db	0bah			;
 0042 =         fnwst	equ	$-FUNTB2
 0379 B4        	db	0b4h			;
 0043 =         fnwcf	equ	$-FUNTB2
 037A B6        	db	0b6h			;
 0044 =         fstcp	equ	$-FUNTB2	; ***** DUPLICATE of fstpw *****
 037B 94        	db	094h			;
 0045 =         fsvcf	equ	$-FUNTB2
 037C 3E18A4    	db	03eh, 018h, 0a4h	;
 0048 =         fgtdl	equ	$-FUNTB2
 037F 4698      	db	046h, 098h		;
 004A =         fdkms	equ	$-FUNTB2
 0381 460218A4  	db	046h, 002h, 018h, 0a4h	;
 004E =         flst1	equ	$-FUNTB2
 0385 A8        	db	0a8h
 004F =         flstbk	equ	$-FUNTB2
 0386 AC        	db	0ach
                
                ; table of message handlers? per BDOS func?
                ; -1 = ERROR, 0 = PASSTHRU, else index into FUNTB2
                FUNTB1:
 0387 00        	db	0	; 0 -
 0388 00        	db	0	; 1 -
 0389 00        	db	0	; 2 -
 038A 00        	db	0	; 3 -
 038B 00        	db	0	; 4 -
 038C 4E        	db	flst1	; 5 -
 038D 00        	db	0	; 6 -
 038E 00        	db	0	; 7 -
 038F 00        	db	0	; 8 -
 0390 00        	db	0	; 9 -
 0391 00        	db	0	; 10 -
 0392 00        	db	0	; 11 -
 0393 01        	db	fgtvr	; 12 - GET VERSION
 0394 02        	db	frssy	; 13 - RESET DISK SYSTEM
 0395 04        	db	fsldk	; 14 - SELECT DISK
 0396 05        	db	fopfi	; 15 - OPEN FILE
 0397 05        	db	fopfi	; 16 - CLOSE FILE
 0398 0B        	db	fsrfs	; 17 - SEARCH FIRST
 0399 0E        	db	fsrnx	; 18 - SEARCH NEXT
 039A 09        	db	fdlfi	; 19 - DELETE FILE
 039B 11        	db	frdsq	; 20 - READ SEQUENTIAL
 039C 16        	db	fwrsq	; 21 - WRITE SEQUENTIAL
 039D 05        	db	fopfi	; 22 - MAKE FILE
 039E 1B        	db	frefi	; 23 - RENAME FILE
 039F 1F        	db	flgvc	; 24 - GET LOGIN VECTOR
 03A0 00        	db	0	; 25 - GET CURRENT DISK
 03A1 00        	db	0	; 26 - SET DMA ADDR
 03A2 20        	db	fgtal	; 27 - GET ALLOC ADDR
 03A3 24        	db	fwrpr	; 28 - WRITE PROTECT DISK
 03A4 1F        	db	flgvc	; 29 - GET R/O VECTOR
 03A5 27        	db	fstfi	; 30 - SET FILE ATTR
 03A6 20        	db	fgtal	; 31 - GET DPB ADDR
 03A7 00        	db	0	; 32 - GET/SET USER CODE
 03A8 2A        	db	frdrr	; 33 - READ RANDOM
 03A9 2F        	db	fwrrr	; 34 - WRITE RANDOM
 03AA 34        	db	fgtsz	; 35 - GET FILE SIZE
 03AB 34        	db	fgtsz	; 36 - SET RAND RECORD
 03AC 03        	db	frsvc	; 37 - RESET DRIVE
 03AD 03        	db	frsvc	; 38 - ACCESS DRIVE
 03AE 03        	db	frsvc	; 39 - FREE DRIVE
 03AF 2F        	db	fwrrr	; 40 - WRITE RAND ZERO FILL
 03B0 00        	db	0	; 41 - TEST & WRITE RECORD
 03B1 37        	db	flkrc	; 42 - LOCK RECORD
 03B2 37        	db	flkrc	; 43 - UNLOCK RECORD
 03B3 00        	db	0	; 44 - SET MULTISECTOR COUNT
 03B4 00        	db	0	; 45 - SET BDOS ERR MODE
 03B5 4A        	db	fdkms	; 46 - GET DISK FREE SPACE
 03B6 00        	db	0	; 47 - CHAIN TO PROGRAM (***? can't chain to remote program)
 03B7 44        	db	fstcp	; 48 - FLUSH BUFFERS
 03B8 00        	db	0	; 49 - GET/SET SCB
                	; 50..63 - handled by special case
 0032 =         NFTB1	equ	$-FUNTB1
                
                	; if any are passed to server, must preserve FUNCOD as real code
                FUNTBX:
 03B9 44        	db	fstcp	; 98 - FREE BLOCKS
 03BA 05        	db	fopfi	; 99 - TRUNCATE FILE
 03BB 00        	db	0	; 100 - SET DIR LABEL ****support?****
 03BC 48        	db	fgtdl	; 101 - GET DIR LABEL BYTE
 03BD 48        	db	fgtdl	; 102 - READ FILE DATE-PWD MODE
 03BE 00        	db	0	; 103 - WRITE FILE XFCB ****support?****
 03BF 00        	db	0	; 104 - SET DATE & TIME
 03C0 00        	db	0	; 105 - GET DATE & TIME - can't support here, use SEND NW MESG
 03C1 3B        	db	fstpw	; 106 - SET DEF PASSWORD
 03C2 00        	db	0	; 107 - GET SERIAL NUMBER
 03C3 00        	db	0	; 108 - GET/SET PGM RET CODE
 03C4 00        	db	0	; 109 - GET/SET CONS MODE
 03C5 00        	db	0	; 110 - GET/SET OUT DELIM
 03C6 00        	db	0	; 111 - PRINT BLOCK
 03C7 4F        	db	flstbk	; 112 - LIST BLOCK
 000F =         NFTBX	equ	$-FUNTBX
                
                	; CP/Net functions, not known to BDOS
                FUNTBN:
 03C8 3C        	db	flgin	; 64 - LOGIN
 03C9 3E        	db	flgof	; 65 - LOGOFF
 03CA 40        	db	fsdnw	; 66 - SEND NW MESG
 03CB 41        	db	frvnw	; 67 - RECV NW MESG
 03CC 42        	db	fnwst	; 68 - GET NW STATUS
 03CD 43        	db	fnwcf	; 69 - GET NW CFG
 03CE 44        	db	fstcp	; 70 - SET COMP ATTR
 03CF 45        	db	fsvcf	; 71 - GET SERVER CFG
 0008 =         NFTBN	equ	$-FUNTBN
                
                FUNTBS:
 03D0 0032      	db	0,NFTB1
 03D2 8703      	dw	FUNTB1
 03D4 4008      	db	CNMIN,NFTBN
 03D6 C803      	dw	FUNTBN
 03D8 620F      	db	CXMIN,NFTBX
 03DA B903      	dw	FUNTBX
 03DC 0000      	dw	0
                
                SNDHDR:
 03DE 216300    	lxi	h,MSGTOP
 03E1 3600      	mvi	m,0	; FMT = CP/Net
 03E3 23        	inx	h
                	; DID (server ID) already set
 03E4 23        	inx	h
                	; SID, our node ID, will be set by SNIOS
 03E5 23        	inx	h
 03E6 23        	inx	h
 03E7 23        	inx	h
 03E8 EB        	xchg		; DE = MSGDAT
 03E9 2AAA01    	lhld	MCRPNT
 03EC B7        	ora	a
                	dsbc	d	; HL -= DE
 03ED+ED52      	DB	0EDH,D*8+42H
 03EF CAF603    	jz	SNDHD1	; size set already
 03F2 2B        	dcx	h	; SIZ is -1
 03F3 EB        	xchg
 03F4 2B        	dcx	h	; point to SIZ byte
 03F5 73        	mov	m,e	; SIZ = length - 1
                SNDHD1:
 03F6 016300    	lxi	b,MSGTOP
                SDMSGE:
 03F9 CD0000    	call	SNDMSG
 03FC 3C        	inr	a
 03FD C0        	rnz
 03FE C30604    	jmp	NERROR
                
                RVMSGE:
 0401 CD0000    	call	RCVMSG
 0404 3C        	inr	a
 0405 C0        	rnz
                NERROR:
 0406 21FFFF    	lxi	h,-1
 0409 7C        	mov	a,h
 040A C31004    	jmp	NDEND
                
                NDENDR:
 040D 3AA901    	lda	RETCOD
                NDEND:
 0410 EB        	xchg
 0411 2AA401    	lhld	USTACK
 0414 F9        	sphl
 0415 EB        	xchg
 0416 6F        	mov	l,a
 0417 44        	mov	b,h
 0418 C9        	ret
                
                RCVPAR:
 0419 016300    	lxi	b,MSGTOP
 041C CD0104    	call	RVMSGE
 041F 216800    	lxi	h,MSGDAT
 0422 22AA01    	shld	MCRPNT
 0425 C9        	ret
                
                tnextp:	; abandon call to real BDOS
 0426 2AA401    	lhld	USTACK
 0429 F9        	sphl
                TBDOSP:
 042A 2AA701    	lhld	PARAMT
 042D EB        	xchg
 042E 3AA601    	lda	FUNCOD
 0431 4F        	mov	c,a
 0432 C30900    	jmp	next
                
                CKFCBD:
 0435 2AA701    	lhld	PARAMT
 0438 7E        	mov	a,m
 0439 3D        	dcr	a
 043A F24004    	jp	CKFCB1
 043D CD3A02    	call	CURDSK
                CKFCB1:
 0440 5F        	mov	e,a
 0441 1600      	mvi	d,0
 0443 CD4F04    	call	CHKDSK
 0446 FEFF      	cpi	0ffh
 0448 C0        	rnz
 0449 CD2A04    	call	TBDOSP
 044C C31004    	jmp	NDEND
                
                CHKDSK:
 044F 210200    	lxi	h,CFGTBL+BSDSKS
 0452 19        	dad	d
 0453 19        	dad	d
 0454 7E        	mov	a,m
 0455 17        	ral
 0456 DA5C04    	jc	CHKDS1	; remote disk
 0459 3EFF      	mvi	a,0ffh
 045B C9        	ret
                CHKDS1:
 045C 1F        	rar
 045D E60F      	ani	00fh	; remote server disk number
 045F 3C        	inr	a
 0460 4F        	mov	c,a
 0461 23        	inx	h
 0462 7E        	mov	a,m	; remote server node ID
 0463 326400    	sta	MSGID
 0466 C9        	ret
                
                SNDFCB:
 0467 CD6D04    	call	CKSFCB
 046A C3DE03    	jmp	SNDHDR
                
                CKSFCB:
 046D CD3504    	call	CKFCBD		; check FCB disk for local/remote (local does not return)
                STFCB:
 0470 CD1C02    	call	CURUSR
 0473 2AAA01    	lhld	MCRPNT
 0476 77        	mov	m,a	; put USR in msg buf
 0477 23        	inx	h
 0478 71        	mov	m,c	; put DSK in msg buf
 0479 23        	inx	h
 047A E5        	push	h
 047B EB        	xchg
 047C 2AA701    	lhld	PARAMT
 047F 23        	inx	h
 0480 012300    	lxi	b,35
                	ldir	; copy FCB to msg buf
 0483+EDB0      	DB	0EDH,0B0H
 0485 EB        	xchg
 0486 22AA01    	shld	MCRPNT
 0489 AF        	xra	a
 048A 32AE01    	sta	FNTMPF
 048D 32AD01    	sta	F5SETF
 0490 E1        	pop	h	; point to start of FCB name in msg buf
                SUBTMP:
 0491 CDB304    	call	CKDOL	; substitute $NN for $$$ at start of name
 0494 0600      	mvi	b,0
 0496 09        	dad	b	; skip rest of 3 chars
 0497 23        	inx	h
 0498 7E        	mov	a,m
 0499 E680      	ani	080h	; check f5' attr - partial close/delete XFCBs only
 049B 23        	inx	h
 049C CAA904    	jz	SUBTM1
 049F 7E        	mov	a,m
 04A0 E680      	ani	080h	; check f6' attr - assign passwd/set byte count
 04A2 C2A904    	jnz	SUBTM1
 04A5 3D        	dcr	a
 04A6 32AD01    	sta	F5SETF
                SUBTM1:
 04A9 3AAE01    	lda	FNTMPF
 04AC 87        	add	a
 04AD 32AE01    	sta	FNTMPF
 04B0 23        	inx	h
 04B1 23        	inx	h
 04B2 23        	inx	h
                CKDOL:
 04B3 0E03      	mvi	c,3
 04B5 3E24      	mvi	a,'$'
                CKDOL1:
 04B7 BE        	cmp	m
 04B8 C0        	rnz
 04B9 23        	inx	h
 04BA 0D        	dcr	c
 04BB C2B704    	jnz	CKDOL1
 04BE EB        	xchg
 04BF 21AE01    	lxi	h,FNTMPF
 04C2 34        	inr	m
 04C3 1B        	dcx	d
 04C4 3A0100    	lda	CFGTBL+BSRID	; client (slave) ID
 04C7 47        	mov	b,a
 04C8 CDD804    	call	HEXDIG
 04CB 1B        	dcx	d
 04CC 78        	mov	a,b
 04CD 1F        	rar
 04CE 1F        	rar
 04CF 1F        	rar
 04D0 1F        	rar
 04D1 CDD804    	call	HEXDIG
 04D4 13        	inx	d
 04D5 13        	inx	d
 04D6 EB        	xchg
 04D7 C9        	ret
                
                HEXDIG:
 04D8 E60F      	ani	00fh
 04DA C690      	adi	90h
 04DC 27        	daa
 04DD CE40      	aci	40h
 04DF 27        	daa
 04E0 12        	stax	d
 04E1 C9        	ret
                
                RENTMP:
 04E2 2AAA01    	lhld	MCRPNT
 04E5 11EDFF    	lxi	d,-19
 04E8 19        	dad	d
 04E9 C39104    	jmp	SUBTMP
                
                WTDTC2:	; hardly worth ldir, should just hard-code
 04EC 010200    	lxi	b,2
 04EF C3FB04    	jmp	WTDTCS
                WTDTC8:
 04F2 010800    	lxi	b,8
 04F5 C3FB04    	jmp	WTDTCS
                
                WTDTCP:
 04F8 018000    	lxi	b,SCTLNG
                WTDTCS:
 04FB 2AAA01    	lhld	MCRPNT
 04FE EB        	xchg
 04FF 2ABC09    	lhld	DMAADR
                	ldir
 0502+EDB0      	DB	0EDH,0B0H
 0504 EB        	xchg
 0505 22AA01    	shld	MCRPNT
 0508 C3DE03    	jmp	SNDHDR
                
                CKSTDP:
 050B 3AA701    	lda	PARAMT
 050E C31405    	jmp	STDSK0
                CKSTDK:
 0511 CD3A02    	call	CURDSK
                STDSK0:
 0514 5F        	mov	e,a
 0515 1600      	mvi	d,000h
 0517 CD4F04    	call	CHKDSK
 051A FEFF      	cpi	0ffh
 051C C22505    	jnz	STDSK1
 051F CD2A04    	call	TBDOSP
 0522 C31004    	jmp	NDEND
                
                STDSK1:
 0525 326400    	sta	MSGID
 0528 2AAA01    	lhld	MCRPNT
 052B 0D        	dcr	c
 052C 71        	mov	m,c
 052D 23        	inx	h
 052E 22AA01    	shld	MCRPNT
 0531 C9        	ret
                
                ; Handle multi-sector count
                CHKMSC:
 0532 CD3504    	call	CKFCBD	; does not return if disk is local
                	; From here on, we know the disk is remote
 0535 CD1502    	call	SYSMSC
 0538 FE01      	cpi	1
                	; skip multi-sector handling if count == 1
 053A C8        	rz	; returns to NDOSE5, goto next opcode.
 053B 32BB09    	sta	CURMSC
 053E E1        	pop	h	; NDOSE5 ret addr
 053F 22B709    	shld	MSCRET
 0542 E1        	pop	h	; FUNTB2 pointer (past CHKMSC)
 0543 22B909    	shld	MSCTBP
 0546 3AA601    	lda	FUNCOD
 0549 FE21      	cpi	CRREAD
 054B DA9F05    	jc	CKMSC2
                	; save rand rec position
 054E 2AA701    	lhld	PARAMT	; FCB
 0551 012100    	lxi	b,FCBRR0
 0554 09        	dad	b
 0555 5E        	mov	e,m
 0556 23        	inx	h
 0557 56        	mov	d,m
 0558 23        	inx	h
 0559 7E        	mov	a,m
 055A 32B609    	sta	SAVRR+2
 055D EB        	xchg
 055E 22B409    	shld	SAVRR
 0561 C39F05    	jmp	CKMSC2
                CKMSC0:
 0564 3AA901    	lda	RETCOD
 0567 B7        	ora	a
 0568 C2AB05    	jnz	CKMSC1
 056B 3ABB09    	lda	CURMSC
 056E 3D        	dcr	a
 056F 32BB09    	sta	CURMSC
 0572 CAAB05    	jz	CKMSC1
 0575 216800    	lxi	h,MSGDAT
 0578 22AA01    	shld	MCRPNT
 057B 2ABC09    	lhld	DMAADR
 057E 018000    	lxi	b,128
 0581 09        	dad	b
 0582 22BC09    	shld	DMAADR
 0585 3AA601    	lda	FUNCOD
 0588 FE21      	cpi	CRREAD
 058A DA9F05    	jc	CKMSC2
                	; advance random record number...
 058D 2AA701    	lhld	PARAMT	; FCB
 0590 012100    	lxi	b,FCBRR0
 0593 09        	dad	b
 0594 34        	inr	m
 0595 C29F05    	jnz	CKMSC2
 0598 23        	inx	h
 0599 34        	inr	m
 059A C29F05    	jnz	CKMSC2
 059D 23        	inx	h
 059E 34        	inr	m
                CKMSC2:
 059F 216405    	lxi	h,CKMSC0
 05A2 E5        	push	h
 05A3 2AB909    	lhld	MSCTBP
 05A6 E5        	push	h
 05A7 2AB709    	lhld	MSCRET
 05AA E9        	pchl	; jmp NDOSE5 - do next opcode. Returns to CKMSC0 when done.
                
                ; done with multi-sec read/write, restore everything.
                CKMSC1:	; could be EOF, or some physical error
 05AB 3AA601    	lda	FUNCOD
 05AE FE21      	cpi	CRREAD
 05B0 DAD705    	jc	CKMSC3
                	; restore file position...
 05B3 3AB609    	lda	SAVRR+2
 05B6 2AB409    	lhld	SAVRR
 05B9 EB        	xchg
 05BA 2AA701    	lhld	PARAMT	; FCB
 05BD 012100    	lxi	b,FCBRR0
 05C0 09        	dad	b
 05C1 73        	mov	m,e
 05C2 23        	inx	h
 05C3 72        	mov	m,d
 05C4 23        	inx	h
 05C5 77        	mov	m,a
                	; If the program's next op is random read/write, then we are
                	; finished now. But, if the next op is sequential then
                	; we must set the file position back to where it started.
                	; Use READ RAND to set file position. Response is ignored.
 05C6 3E21      	mvi	a,CRREAD
 05C8 326600    	sta	MSGFUN
 05CB 216800    	lxi	h,MSGDAT
 05CE 22AA01    	shld	MCRPNT
 05D1 CD6704    	call	SNDFCB
 05D4 CD1904    	call	RCVPAR
                	; ignore data/error returned by CRREAD
                CKMSC3:
 05D7 2600      	mvi	h,0	; success returns NREC=0
 05D9 3AA901    	lda	RETCOD
 05DC B7        	ora	a
 05DD C8        	rz		; NDENDR
 05DE 3ABB09    	lda	CURMSC	; if error ended us early, need num sec completed.
 05E1 5F        	mov	e,a	; save where SYSMSC won't destroy it
 05E2 CD1502    	call	SYSMSC
 05E5 93        	sub	e
 05E6 67        	mov	h,a
 05E7 C9        	ret		; NDENDR
                
                
                BCSTFN:	; broadcast func (set default password, set compat attrs)
 05E8 110000    	lxi	d,0
 05EB CD7106    	call	FORALL
 05EE 79        	mov	a,c
 05EF 0C        	inr	c
 05F0 CAD706    	jz	RSTALL	; no (more) servers, reset and return
 05F3 326400    	sta	MSGID
 05F6 2AA701    	lhld	PARAMT
 05F9 EB        	xchg
 05FA 2AAA01    	lhld	MCRPNT
 05FD 3AA601    	lda	FUNCOD
 0600 FE38      	cpi	CDEFPW-CBMAX	; a.k.a. 106 - set def password
 0602 CA0906    	jz	BCST1
                	; fn 70 - set compat attr
 0605 73        	mov	m,e
 0606 C31306    	jmp	BCST2
                BCST1:
 0609 010800    	lxi	b,8
 060C EB        	xchg
                	ldir
 060D+EDB0      	DB	0EDH,0B0H
 060F EB        	xchg
 0610 22AA01    	shld	MCRPNT
                BCST2:
 0613 CDDE03    	call	SNDHDR
 0616 CD1904    	call	RCVPAR
 0619 C3E805    	jmp	BCSTFN
                
                BCSTVC:	; broadcast "drive vector" funcs to all servers
 061C 2AA701    	lhld	PARAMT
 061F EB        	xchg
                BCSTV1:
 0620 CD7106    	call	FORALL
 0623 E5        	push	h
 0624 79        	mov	a,c
 0625 0C        	inr	c
 0626 C23B06    	jnz	BCSTV2	; some remote drives to do
 0629 CDD706    	call	RSTALL
 062C D1        	pop	d
 062D 3AA601    	lda	FUNCOD
 0630 FE25      	cpi	CRSDSN	; reset drive
 0632 C0        	rnz		; only reset drive is passed to local
 0633 4F        	mov	c,a
 0634 CD0900    	call	next
 0637 32A901    	sta	RETCOD
 063A C9        	ret
                BCSTV2:
 063B 326400    	sta	MSGID
 063E 216800    	lxi	h,MSGDAT
 0641 73        	mov	m,e
 0642 23        	inx	h
 0643 72        	mov	m,d
 0644 23        	inx	h
 0645 22AA01    	shld	MCRPNT
 0648 CDDE03    	call	SNDHDR
 064B 3AA601    	lda	FUNCOD
 064E D626      	sui	38	; access drive
 0650 CA6A06    	jz	BCSTV3
 0653 F5        	push	psw
 0654 CD1904    	call	RCVPAR
 0657 F1        	pop	psw
 0658 D1        	pop	d
 0659 3D        	dcr	a
 065A CA2006    	jz	BCSTV1
 065D 3A6800    	lda	MSGDAT
 0660 32A901    	sta	RETCOD
 0663 3C        	inr	a
 0664 CAD706    	jz	RSTALL
 0667 C32006    	jmp	BCSTV1
                
                BCSTV3:
 066A CD3607    	call	RCVEC
 066D D1        	pop	d
 066E C32006    	jmp	BCSTV1
                
                ; Returns vector of all disks for given server,
                ; each call skips servers already reported.
                FORALL:
 0671 210200    	lxi	h,CFGTBL+BSDSKS
 0674 D5        	push	d
 0675 110000    	lxi	d,0
 0678 01FF10    	lxi	b,010ffh
                FORAL1:
 067B 7E        	mov	a,m
 067C 17        	ral
 067D D2BB06    	jnc	FORAL6	; local
 0680 17        	ral
 0681 DABB06    	jc	FORAL6	; "already did" flag
 0684 23        	inx	h
 0685 79        	mov	a,c
 0686 FEFF      	cpi	0ffh
 0688 CA9306    	jz	FORAL2
 068B BE        	cmp	m
 068C CA9406    	jz	FORAL3
 068F 2B        	dcx	h
 0690 C3BB06    	jmp	FORAL6
                FORAL2:
 0693 4E        	mov	c,m
                FORAL3:
 0694 2B        	dcx	h
 0695 7E        	mov	a,m
 0696 F640      	ori	040h	; mark this one done...
 0698 77        	mov	m,a
 0699 E3        	xthl
 069A CDCF06    	call	RHLR0
 069D D2C606    	jnc	FORAL7
 06A0 E3        	xthl
 06A1 7E        	mov	a,m
 06A2 E60F      	ani	00fh
 06A4 3C        	inr	a
 06A5 E5        	push	h
 06A6 210100    	lxi	h,1
                FORAL4:
 06A9 3D        	dcr	a
 06AA CAB106    	jz	FORAL5
 06AD 29        	dad	h
 06AE C3A906    	jmp	FORAL4
                FORAL5:
 06B1 7B        	mov	a,e
 06B2 B5        	ora	l
 06B3 5F        	mov	e,a
 06B4 7A        	mov	a,d
 06B5 B4        	ora	h
 06B6 57        	mov	d,a
 06B7 E1        	pop	h
 06B8 C3C706    	jmp	FORAL8
                FORAL6:
 06BB E3        	xthl
 06BC CDCF06    	call	RHLR0
 06BF D2C606    	jnc	FORAL7
 06C2 7C        	mov	a,h
 06C3 F680      	ori	080h
 06C5 67        	mov	h,a
                FORAL7:
 06C6 E3        	xthl
                FORAL8:
 06C7 23        	inx	h
 06C8 23        	inx	h
 06C9 05        	dcr	b
 06CA C27B06    	jnz	FORAL1
 06CD E1        	pop	h
 06CE C9        	ret
                
                RHLR0:
 06CF B7        	ora	a
 06D0 7C        	mov	a,h
 06D1 1F        	rar
 06D2 67        	mov	h,a
 06D3 7D        	mov	a,l
 06D4 1F        	rar
 06D5 6F        	mov	l,a
 06D6 C9        	ret
                
                ; Reset from FORALL
                RSTALL:
 06D7 210200    	lxi	h,CFGTBL+BSDSKS
 06DA 0610      	mvi	b,16
                RSTAL1:
 06DC 7E        	mov	a,m
 06DD E68F      	ani	08fh	; clear FORALL iterator flag(s)
 06DF 77        	mov	m,a
 06E0 23        	inx	h
 06E1 23        	inx	h
 06E2 05        	dcr	b
 06E3 C2DC06    	jnz	RSTAL1
 06E6 C9        	ret
                
                STSF:	; setup Search First
 06E7 3EFF      	mvi	a,0ffh
 06E9 326000    	sta	CURSID	; assume local
 06EC 2AA701    	lhld	PARAMT
 06EF 7E        	mov	a,m
 06F0 FE3F      	cpi	'?'
 06F2 C20007    	jnz	STSF1
 06F5 CD1105    	call	CKSTDK
 06F8 0EBF      	mvi	c,'?'+080h	; "drive" code with CP/M3 flag
 06FA CD7004    	call	STFCB
 06FD C30A07    	jmp	STSF2
                STSF1:
 0700 2AAA01    	lhld	MCRPNT
 0703 23        	inx	h
 0704 22AA01    	shld	MCRPNT
 0707 CD6D04    	call	CKSFCB	; if remote, set FCB in msg
                STSF2:
 070A 3A6400    	lda	MSGID
 070D 326000    	sta	CURSID
 0710 CD2302    	call	SETSRA
 0713 C3DE03    	jmp	SNDHDR
                
                STSN:	; setup Search Next
 0716 3A6000    	lda	CURSID
 0719 FEFF      	cpi	0ffh	; was Search First a local op?
 071B C22407    	jnz	STSN1
 071E CD2A04    	call	TBDOSP
 0721 C31004    	jmp	NDEND
                STSN1:
 0724 326400    	sta	MSGID
 0727 CD1C02    	call	CURUSR
 072A 2AAA01    	lhld	MCRPNT
 072D 23        	inx	h
 072E 77        	mov	m,a
 072F 23        	inx	h
 0730 22AA01    	shld	MCRPNT
 0733 C3DE03    	jmp	SNDHDR
                
                RCVEC:
 0736 CD1904    	call	RCVPAR
 0739 216900    	lxi	h,MSGDAT+1
 073C 22AA01    	shld	MCRPNT
 073F 56        	mov	d,m	; D = ext err code
 0740 2B        	dcx	h
 0741 7E        	mov	a,m
 0742 32A901    	sta	RETCOD
 0745 2B        	dcx	h
 0746 7E        	mov	a,m	; SIZ
 0747 3D        	dcr	a
 0748 2600      	mvi	h,0	; ensure H=0 to avoid confusion with extended errors
 074A C0        	rnz		; not extended error - skip rest
 074B CD0E02    	call	BDERMD
 074E 3C        	inr	a
 074F C25607    	jnz	NDERR
 0752 EB        	xchg
 0753 C30D04    	jmp	NDENDR
                
                NDERR:
 0756 D5        	push	d
 0757 114A00    	lxi	d,NDERRM
 075A CD8A07    	call	PRMSG
 075D F1        	pop	psw	; A = (D), ext err code
 075E F5        	push	psw	; Fix bug in NDOS.ASM
 075F CD7A07    	call	HEXOUT
 0762 115600    	lxi	d,NDERR2
 0765 CD8A07    	call	PRMSG
 0768 3AA601    	lda	FUNCOD
 076B CD7A07    	call	HEXOUT
 076E CD0E02    	call	BDERMD
 0771 E1        	pop	h	; H = ext err code
 0772 FEFE      	cpi	0feh
 0774 CA0D04    	jz	NDENDR
 0777 C30000    	jmp	TOP	; abort program
                
                HEXOUT:
 077A 11B201    	lxi	d,HEXMSG+1	; do low nibble first
 077D F5        	push	psw
 077E CDD804    	call	HEXDIG
 0781 F1        	pop	psw
 0782 1F        	rar
 0783 1F        	rar
 0784 1F        	rar
 0785 1F        	rar
 0786 1B        	dcx	d	; back to hi nibble
 0787 CDD804    	call	HEXDIG
                PRMSG:
 078A 0E09      	mvi	c,CBUFPR
 078C C30900    	jmp	next
                
                GTFCB:
 078F 3AAD01    	lda	F5SETF
 0792 3C        	inr	a
 0793 C29C07    	jnz	GTFCCR
                GTFCRR:
 0796 012300    	lxi	b,35	; FCB+CR+RR (-drive)
 0799 C39F07    	jmp	GTFC1
                GTFCCR:
 079C 012000    	lxi	b,32	; FCB+CR, not RR
                GTFC1:
 079F CDB307    	call	RSTMP	; un-do temp file subst
 07A2 2AA701    	lhld	PARAMT
 07A5 23        	inx	h
 07A6 EB        	xchg
 07A7 2AAA01    	lhld	MCRPNT
 07AA 23        	inx	h
                	ldir
 07AB+EDB0      	DB	0EDH,0B0H
 07AD 22AA01    	shld	MCRPNT
 07B0 2600      	mvi	h,0	; ensure H=0 to avoid confusion with extended errors
 07B2 C9        	ret
                
                RSTMP:	; restore TMP filename
 07B3 3AAE01    	lda	FNTMPF
 07B6 1F        	rar
 07B7 1F        	rar
 07B8 D2C507    	jnc	RSTMP1
 07BB 2AAA01    	lhld	MCRPNT
 07BE 23        	inx	h
 07BF 23        	inx	h
 07C0 3624      	mvi	m,'$'
 07C2 23        	inx	h
 07C3 3624      	mvi	m,'$'
                RSTMP1:
 07C5 17        	ral
 07C6 D0        	rnc
 07C7 2AAA01    	lhld	MCRPNT
 07CA 110A00    	lxi	d,10
 07CD 19        	dad	d
 07CE 3624      	mvi	m,'$'
 07D0 23        	inx	h
 07D1 3624      	mvi	m,'$'
 07D3 C9        	ret
                
                GTDIRE:
 07D4 3AA901    	lda	RETCOD
 07D7 3C        	inr	a
 07D8 2600      	mvi	h,0	; ensure H=0 to avoid confusion with extended errors
 07DA C8        	rz
 07DB 2AAA01    	lhld	MCRPNT
                	; Special case for CP/M3 full search, although really
                	; any SEARCH that wants to be fully compatible with CP/M
                	; neuances - specifically that the DMA buffer contains the
                	; full directory sector after a search.
                	;
                	; CP/Net breaks SEARCH funcs 17/18 by only returning
                	; one DIRENT at a time, while the local BDOS calls
                	; actually fill the DMA buffer with the directory sector.
                	; DIR.COM depends on this for getting timestamps.
 07DE 3A6700    	lda	MSGSIZ
 07E1 B7        	ora	a	; 00 = 1 byte, dir code only, DMA buf implied
 07E2 C8        	rz		; NDENDR will return dir code to user
 07E3 FE24      	cpi	32+4	; anything 1 < x < 128 really, pick a number (expect 32).
 07E5 D20A08    	jnc	STOSC0	; assume 128 bytes, copy all to DMA buffer.
                	; single DIRENT returned, copy to correct location.
 07E8 EB        	xchg
 07E9 2ABC09    	lhld	DMAADR
 07EC 3AA901    	lda	RETCOD
 07EF 3C        	inr	a
 07F0 012000    	lxi	b,32
                GTDIR1:
 07F3 3D        	dcr	a
 07F4 CAFB07    	jz	GTDIR2
 07F7 09        	dad	b
 07F8 C3F307    	jmp	GTDIR1
                GTDIR2:
 07FB EB        	xchg
                	ldir
 07FC+EDB0      	DB	0EDH,0B0H
 07FE 22AA01    	shld	MCRPNT
 0801 C9        	ret
                
                GTOSCT:
 0802 3AA901    	lda	RETCOD
 0805 B7        	ora	a
 0806 C0        	rnz
 0807 218D00    	lxi	h,MSGDAT+37
                STOSC0:
                	lded	DMAADR
 080A+ED5B      	DB	0EDH,5BH
 080C+BC09      	DW	DMAADR
 080E 018000    	lxi	b,SCTLNG
                	ldir
 0811+EDB0      	DB	0EDH,0B0H
 0813 22AA01    	shld	MCRPNT
 0816 2600      	mvi	h,0	; ensure H=0 to avoid confusion with extended errors
 0818 C9        	ret
                
                GTMISC:
 0819 2AAA01    	lhld	MCRPNT
 081C 2B        	dcx	h	; drop error byte
 081D 3AA601    	lda	FUNCOD
 0820 FE1B      	cpi	CGTALL	; get alloc addr
 0822 CA5408    	jz	GTMSC3	; for alloc vec, just leave in message buffer
 0825 FE2E      	cpi	CFRSP	; get disk free space
 0827 CA3908    	jz	GTMSC4
 082A FE1F      	cpi	CGTDPB	; get DPB addr
 082C C24708    	jnz	GTMSC1
                	; fn 31 - get DPB
 082F 11BE09    	lxi	d,CURDPB
 0832 D5        	push	d
 0833 011000    	lxi	b,16	; should be 15 for CP/M 2.2, 17 for CP/M 3
 0836 C34E08    	jmp	GTMSC2
                GTMSC4:
 0839 110000    	lxi	d,0
 083C D5        	push	d
                	lded	DMAADR
 083D+ED5B      	DB	0EDH,5BH
 083F+BC09      	DW	DMAADR
 0841 010300    	lxi	b,3
 0844 C34E08    	jmp	GTMSC2
                
                GTMSC1:		; fn 71 - get server config
 0847 11CD09    	lxi	d,CURSCF
 084A D5        	push	d
 084B 011700    	lxi	b,23
                GTMSC2:
                	ldir
 084E+EDB0      	DB	0EDH,0B0H
 0850 22AA01    	shld	MCRPNT
 0853 E1        	pop	h
                GTMSC3:
 0854 7D        	mov	a,l
 0855 32A901    	sta	RETCOD
 0858 C9        	ret
                
                GTLOGV:
 0859 112100    	lxi	d,CFGTBL+BSDSKE
 085C 210000    	lxi	h,0
 085F 0610      	mvi	b,16
                GTLGV1:
 0861 1A        	ldax	d
 0862 1B        	dcx	d
 0863 4F        	mov	c,a
 0864 1A        	ldax	d
 0865 1B        	dcx	d
 0866 29        	dad	h
 0867 CD7308    	call	DRVSTS
 086A 05        	dcr	b
 086B C26108    	jnz	GTLGV1
 086E 7D        	mov	a,l
 086F 32A901    	sta	RETCOD
 0872 C9        	ret
                
                ; Get a drive's status (i.e. GET LOGIN VECTOR)
                ; B = local drive num
                ; A = net cfg byte, bit-7 = remote, bit-0:3 = remote drive num
                ; Returns DE bit-0 = drive's status
                DRVSTS:
 0873 D5        	push	d
 0874 C5        	push	b
 0875 E5        	push	h
 0876 17        	ral
 0877 DA8408    	jc	DRVST1
                	; drive is local
 087A C5        	push	b
 087B CD2A04    	call	TBDOSP
 087E C1        	pop	b
 087F 05        	dcr	b
 0880 EB        	xchg
 0881 C3A008    	jmp	DRVST2
                
                DRVST1:	; drive is remote
 0884 1F        	rar
 0885 E60F      	ani	00fh
 0887 47        	mov	b,a	; remote drive number
 0888 79        	mov	a,c	; server ID
 0889 326400    	sta	MSGID
 088C 216800    	lxi	h,MSGDAT
 088F 22AA01    	shld	MCRPNT
 0892 C5        	push	b
 0893 CDDE03    	call	SNDHDR
 0896 CD1904    	call	RCVPAR
 0899 C1        	pop	b
 089A 2AAA01    	lhld	MCRPNT
 089D 5E        	mov	e,m
 089E 23        	inx	h
 089F 56        	mov	d,m
                DRVST2:	; DE = vector of active drives
 08A0 78        	mov	a,b
 08A1 B7        	ora	a
 08A2 CAAF08    	jz	DRVST4
                DRVST3:	; get drive 'B' bit to LSB
 08A5 7A        	mov	a,d
 08A6 1F        	rar
 08A7 57        	mov	d,a
 08A8 7B        	mov	a,e
 08A9 1F        	rar
 08AA 5F        	mov	e,a
 08AB 05        	dcr	b
 08AC C2A508    	jnz	DRVST3
                DRVST4:
 08AF 1600      	mvi	d,000h
 08B1 7B        	mov	a,e
 08B2 E601      	ani	001h
 08B4 5F        	mov	e,a
 08B5 E1        	pop	h
 08B6 19        	dad	d
 08B7 C1        	pop	b
 08B8 D1        	pop	d
 08B9 C9        	ret
                
                SELDSK:
 08BA 3AA701    	lda	PARAMT
 08BD 1600      	mvi	d,000h
 08BF 5F        	mov	e,a
 08C0 CD4F04    	call	CHKDSK
 08C3 FEFF      	cpi	0ffh	; local disk
 08C5 CA2A04    	jz	TBDOSP	; let BDOS handle
 08C8 CD3002    	call	SETDSK
 08CB 2AAA01    	lhld	MCRPNT
 08CE 0D        	dcr	c
 08CF 71        	mov	m,c
 08D0 23        	inx	h
 08D1 22AA01    	shld	MCRPNT
 08D4 CDDE03    	call	SNDHDR
 08D7 C33607    	jmp	RCVEC
                
                RESET:	; anything to do? BDOS will be called... but BDOS does not call 0005 (us)?
 08DA 216800    	lxi	h,MSGDAT
 08DD 22AA01    	shld	MCRPNT
                	; A: cannot be remote...
 08E0 C30900    	jmp	next
                
                LIST1:
 08E3 11A701    	lxi	d,PARAMT
 08E6 010100    	lxi	b,1
 08E9 C3F908    	jmp	lstbk2
                
                LSTBLK:
 08EC 2AA701    	lhld	PARAMT
 08EF 5E        	mov	e,m
 08F0 23        	inx	h
 08F1 56        	mov	d,m	; address of data
 08F2 23        	inx	h
 08F3 4E        	mov	c,m
 08F4 23        	inx	h
 08F5 46        	mov	b,m	; length
 08F6 79        	mov	a,c
 08F7 B0        	ora	b
 08F8 C8        	rz
                lstbk2:
                	lxix	CFGTBL+BSLIST
 08F9+DD21      	DB	0DDH,21H
 08FB+2400      	DW	CFGTBL+BSLIST
                	bitx	7,+0
 08FD+DDCB007E  	DB	0DDH,0CBH,+0,7*8+46H
 0901 CA2604    	jz	tnextp
 0904 212D00    	lxi	h,CFGTBL+BSLIST+9
 0907 D5        	push	d
                	ldx	e,+7
 0908+DD5E07    	DB	0DDH,E*8+46H,+7
 090B 1600      	mvi	d,0
 090D 19        	dad	d
 090E D1        	pop	d
                lstbk0:
 090F 1A        	ldax	d
 0910 13        	inx	d
 0911 77        	mov	m,a
 0912 23        	inx	h
                	inrx	+7	; dirty == not-zero
 0913+DD3407    	DB	0DDH,34H,+7
 0916 FA2509    	jm	lstbk3	; send data
 0919 FEFF      	cpi	0ffh	; stop at 0ffh? or need to continue if more?
 091B CA2509    	jz	lstbk3	; this will continue if more chars exist...
                lstbk1:
 091E 0B        	dcx	b
 091F 78        	mov	a,b
 0920 B1        	ora	c
 0921 C20F09    	jnz	lstbk0
 0924 C9        	ret
                
                lstbk3:	; must send buffer
                	ldx	a,+0
 0925+DD7E00    	DB	0DDH,A*8+46H,+0
 0928 E60F      	ani	0fh
                	stx	a,+8
 092A+DD7708    	DB	0DDH,70H+A,+8
                	; SIZ already len-1, incl LST unit
                	ldx	a,+1	; LST server
 092D+DD7E01    	DB	0DDH,A*8+46H,+1
                	stx	a,+4	; DID
 0930+DD7704    	DB	0DDH,70H+A,+4
 0933 D5        	push	d
 0934 C5        	push	b
                	pushix
 0935+DDE5      	DB	0DDH,0E5H
 0937 012700    	lxi	b,CFGTBL+BSLIST+3	; MSG buffer
 093A CD0000    	call	SNDMSG
                	popix
 093D+DDE1      	DB	0DDH,0E1H
                	pushix
 093F+DDE5      	DB	0DDH,0E5H
                	mvix	0,+7	; clear dirty flag, setup for next char
 0941+DD360700  	DB	0DDH,36H,+7,0
 0945 3C        	inr	a
 0946 CA0604    	jz	NERROR
 0949 016300    	lxi	b,MSGTOP
 094C CD0104    	call	RVMSGE
                	popix
 094F+DDE1      	DB	0DDH,0E1H
 0951 C1        	pop	b
 0952 D1        	pop	d
 0953 212D00    	lxi	h,CFGTBL+BSLIST+9
 0956 C31E09    	jmp	lstbk1
                
                GETVER:
 0959 2A6100    	lhld	scbadr
 095C 2EA1      	mvi	l,scbase+05h
 095E 6E        	mov	l,m
 095F 2602      	mvi	h,002h
 0961 7D        	mov	a,l
 0962 32A901    	sta	RETCOD
 0965 C9        	ret
                
                NWSTAT:
 0966 CD0000    	call	NTWKST
 0969 32A901    	sta	RETCOD
 096C C9        	ret
                
                NWCFTB:
 096D CD0000    	call	CNFTBL
 0970 7D        	mov	a,l
 0971 32A901    	sta	RETCOD
 0974 C9        	ret
                
                LOGIN:
 0975 2AAA01    	lhld	MCRPNT
 0978 EB        	xchg
 0979 2AA701    	lhld	PARAMT
 097C 7E        	mov	a,m
 097D 326400    	sta	MSGID
 0980 23        	inx	h
 0981 010800    	lxi	b,8
                	ldir
 0984+EDB0      	DB	0EDH,0B0H
 0986 EB        	xchg
 0987 22AA01    	shld	MCRPNT
 098A C3DE03    	jmp	SNDHDR
                
                LOGOFF:
 098D 3AA701    	lda	PARAMT
 0990 326400    	sta	MSGID
 0993 C3DE03    	jmp	SNDHDR
                
                SDMSGU:
 0996 2AA701    	lhld	PARAMT
 0999 44        	mov	b,h
 099A 4D        	mov	c,l
 099B CD0000    	call	SNDMSG
 099E 32A901    	sta	RETCOD
 09A1 C9        	ret
                
                RVMSGU:
 09A2 2AA701    	lhld	PARAMT
 09A5 44        	mov	b,h
 09A6 4D        	mov	c,l
 09A7 CD0000    	call	RCVMSG
 09AA 32A901    	sta	RETCOD
 09AD C9        	ret
                
                LDERR:
 09AE 3EFF      	mvi	a,-1
 09B0 E1        	pop	h
 09B1 C9        	ret
                
 09B2 0000      SAVDMA:	dw	0
 09B4 000000    SAVRR:	db	0,0,0
 09B7 0000      MSCRET:	dw	0
 09B9 0000      MSCTBP:	dw	0
 09BB 00        CURMSC:	db	0
 09BC 0000      DMAADR:	dw	0
                
 09BE           CURDPB:	ds	15
 09CD           CURSCF:	ds	23
                
                ; this is used to do warm boot initialization, since most
                ; programs do not call BDOS Function 0 but instead just
                ; JMP 0. The CCP then makes this call, either upon startup
                ; and/or immediately prior to running a program.
                ; Perportedly, the CPP calls this with DE=NULL in order
                ; to scrub RSXs on warm boot.
                LDOVLY:
                WARMST:
 09E4 D5        	push	d
 09E5 C5        	push	b
 09E6 CD0000    	call	NTWKBT
                	; TODO: any other re-init? reset some context?
                ;	lxi	d,wbmsg
                ;	mvi	c,CBUFPR
                ;	call	next
 09E9 C1        	pop	b
 09EA D1        	pop	d
 09EB C30900    	jmp	next
                
                ; An example of how to process BDOS Func 60 RSX Func 113
                ; and remove one's self.
                CALRSX:
 09EE 6B        	mov	l,e
 09EF 62        	mov	h,d
 09F0 7E        	mov	a,m
 09F1 23        	inx	h
 09F2 FE71      	cpi	113	; Check for RSX Func 113
 09F4 C20900    	jnz	next
 09F7 7E        	mov	a,m
 09F8 23        	inx	h
 09F9 FE01      	cpi	1	; Check param count to be sure
 09FB C20900    	jnz	next
 09FE D5        	push	d
 09FF 5E        	mov	e,m
 0A00 23        	inx	h
 0A01 56        	mov	d,m
 0A02 211000    	lxi	h,rsxnam
 0A05 0608      	mvi	b,8
                rsxf0:			; Compare paramter to our name
 0A07 1A        	ldax	d
 0A08 BE        	cmp	m
 0A09 C2120A    	jnz	rsxf1
 0A0C 13        	inx	d
 0A0D 23        	inx	h
 0A0E 05        	dcr	b
 0A0F C2070A    	jnz	rsxf0
                rsxf1:
 0A12 D1        	pop	d
 0A13 C20900    	jnz	next
                	; shutdown NDOS3...
 0A16 CD0000    	call	NTWKDN
 0A19 115C02    	lxi	d,CSTDN
 0A1C 0E09      	mvi	c,CBUFPR
 0A1E CD0900    	call	next
 0A21 210900    	lxi	h,next
 0A24 220700    	shld	start+1	; only until remove takes place...
 0A27 3EFF      	mvi	a,0ffh
 0A29 320E00    	sta	remove
 0A2C 210000    	lxi	h,0
 0A2F 7D        	mov	a,l
 0A30 C9        	ret
                
 0A31           	end
