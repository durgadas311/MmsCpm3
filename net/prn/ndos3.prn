                ;	NETWORK DISK OPERATING SYSTEM FOR CP/NET on CP/M Plus v3
                ;
                ; 1982.12.31. exact date unknown
                ; 2016.05.20. adapted for RSX on CP/M Plus
                ;	Dropped support for remote console/list, due to BIOS intercept issues.
                ;	BIOS intercept is a problem because of the transient nature of RSXs.
                ;	Could add back support for "well-behaved" LIST OUTPUT users,
                ;	provided BIOS intercept is not required.
                ;
                ;TITLE	NETWORK DISK OPERATING SYSTEM FOR CP/NET SLAVE
                	maclib	z80
                
                	extrn	NTWKIN, NTWKST, CNFTBL, SNDMSG, RCVMSG, NTWKBT, CFGTBL
                ;
                ;
                ;	EQUATIONS OF DATA
                ;
 000A =         LF	EQU	0AH	;LINE FEED
 000D =         CR	EQU	0DH	;CARRIAGE RETURN
 001A =         EOF	EQU	1AH	;CTRL-Z IS END OF FILE
 00FF =         LEOF	EQU	0ffh	;-1 is logical end of file
                ;
 0000 =         TOP	equ	0000h
 0004 =         CDISK	equ	0004h
 0005 =         BDOS	equ	0005h
 0080 =         SYSDMA	equ	0080h
 0100 =         TPA	equ	0100h
                
 0080 =         SCTLNG	equ	128	;ONE SECTOR LENGTH
                ;
                ;	EQUATIONS OF DOS FUNCTION
                ;
 0003 =         CCNDIN	EQU	3	;CONSOLE INPUT WITH DEVICE CODE
 0004 =         CCNDOT	EQU	4	;CONSOLE OUTPUT WITH DEVICE CODE
 0009 =         CBUFPR	EQU	9	;BUFFER PRINT
 000A =         CRDBUF	EQU	10	;READ BUFFER
 000B =         CCONST	EQU	11	;GET CONSOLE STATUS
 000C =         CGETVR	EQU	12	;GET VERSION NUMBER
 000D =         CRSDSK	EQU	13	;RESET DISK
 000F =         COPEN	EQU	15	;OPEN FILE
 0010 =         CCLOSE	EQU	16	;CLOSE FILE
 0011 =         CSRFST	EQU	17	;SEARCH FIRST
 0012 =         CSRNXT	EQU	18	;SEARCH NEXT DIRECTORY
 0014 =         CREAD	EQU	20	;READ SEQ
 0015 =         CWRITE	EQU	21	;WRITE SEQ
 001A =         CSTDMA	EQU	26	;SET DMA ADDRESS
 001B =         CGTALL	EQU	27	;get alloc vector addr
 001F =         CGTDPB	EQU	31	;get DPB addr
 0020 =         CSTUSC	EQU	32	;SET USER CODE
 0021 =         CRREAD	EQU	33	;READ SEQ
 0022 =         CRWRIT	EQU	34	;WRITE SEQ
 0025 =         CRSDSN	EQU	37	;RESET DISK BY DISK VERCTOR
 002E =         CFRSP	equ	46	; get disk free space
 0031 =         scbf	equ	49	; get/set SCB
 0032 =         CBIOS	equ	50	; direct BIOS call
 003B =         COVLY	equ	59	; load overlay
 003C =         CRSX	equ	60	; call RSX function
 006A =         CDEFPW	EQU	106	;set default password
 0070 =         CLSBLK	equ	112	; List Block - does not fit in table...
                
 0032 =         CBMAX	EQU	50	;MAX OF BDOS FUNCTION - CXMIN.. collapsed here
 0062 =         CXMIN	EQU	98	;extended bdos functions base - collapse into CBMAX
                ;
 0040 =         CNMIN	EQU	64	;MIN OF NDOS FUNCTION
 0040 =         CLOGIN	EQU	64	;LOGIN
 0041 =         CLOGOF	EQU	65	;LOGOFF
 0048 =         CNMAX	EQU	72	;MAX OF NDOS FUNCTION
                
                ;
                ;	SLAVE CONFIGRATION TABLE
                ;
                ; -1	NETWORK STATUS
                ;	0	SLAVE PROCESSOR ID
                ;	1-32 A - P DISK DEVICE CODE
                ; 33-34 CONSOLE DEVICE
                ; 35-36 LIST DEVICE
                ; 37	LIST BUFFER COUNTER
                ; 38-42 MESSAGE HEADER FOR LIST OUT
                ; 43	LISTER DEVICE NUMBER
                ; 44-171 LIST OUT DATA BUFFER
                ;
                ;	EACH DEVICE DATA USED 2 BYTES
                ;	IN 1-36
                ;	1B:BIT 7 H ON NETWORK
                ;	BIT 6 H SET UP IN DISK
                ;	BIT 0-3 DEVICE NUMBER IN MASTER
                ;	2B:MASTER ID
                ;
                ;	BIAS TO DATA IN CONFIGRATION TABLE
                ;
 0001 =         BSRID	equ	1	;client ID
 0002 =         BSDSKS	equ	2	;first byte in disk table
 0021 =         BSDSKE	equ	33	;last byte in disk table
 0022 =         BSCONS	EQU	34	;BIAS TO CONSOLE DATA
 0024 =         BSLIST	EQU	36	;BIAS TO LISTER DATA
                
 0021 =         FCBRR0	equ	33	; offset of RR0 field in FCB (not FCB in MSG)
                
 009C =         scbase	equ	09ch	; base address of SCB within page
                
 0000           	org	0
                
                ;	RSX Prefix
 0000 0000000000serial:	db	0,0,0,0,0,0
 0006 C3D501    start:	jmp	COLDST
 0009 C30000    next:	jmp	0
 000C 0000      prev:	dw	0
 000E 00        remove:	db	0	; 0ffh for remove
                nonbank:
 000F 00        	db	0
 0010 4E444F5333rsxnam:	db	'NDOS3   '
 0018 000000    loader:	db	0,0,0
                
 001B 18        ioport:	db	018h	; could be patched here
                
 001C 434F505952	db	'COPYRIGHT (C) 1980-82, DIGITAL RESEARCH '
 0044 0000000000	db	0,0,0,0,0,0
                
 004A 0D0A4E444FNDERRM:	db	CR,LF,'NDOS Err $'
 0056 2C2046756ENDERR2:	db	', Func $'
                
 005E 0000      BDOSE:	dw	0
 0060 00        CURSID: db	0
 0061 0000      scbadr:	dw	0
                
 0063 00        MSGTOP:	db	0
 0064 00        MSGID:	db	0
 0065 00        	db	0	; We assume network hw/sw sets this.
 0066 00        MSGFUN:	db	0
 0067 00        MSGSIZ:	db	0
 0068           MSGDAT:	ds	256
                
 0168 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 016E C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 0174 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 017A C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 0180 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 0186 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 018C C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 0192 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 0198 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 019E C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 01A4           STACK:	ds	0
                
 01A4 0000      USTACK:	dw	0
 01A6 00        FUNCOD:	db	0
 01A7 0000      PARAMT:	dw	0
 01A9 00        RETCOD:	db	0
 01AA 0000      MCRPNT:	dw	0
 01AC 00        LSTUNT: db	0
 01AD 00        F5SETF: db	0
 01AE 00        FNTMPF: db	0
 01AF 0000      ORGBIO: dw	0
                
 01B1 000024    HEXMSG: db	0,0,'$'
                
 01B4 496E697420CLDERR:	db	'Init err$'
                
                COLDSE:	; BC and DE are pushed...
 01BD 11B401    	lxi	d,CLDERR
 01C0 0E09      	mvi	c,CBUFPR
 01C2 CD0900    	call	next
 01C5 210900    	lxi	h,next
 01C8 220700    	shld	start+1	; only until remove takes place...
 01CB 3EFF      	mvi	a,0ffh
 01CD 320E00    	sta	remove
 01D0 C1        	pop	b
 01D1 D1        	pop	d
 01D2 C30900    	jmp	next	; pass to BDOS and hope for the best...
                
                ; Not a true cold start - we are in context of a valid BDOS call...
                COLDST:
 01D5 D5        	push	d
 01D6 C5        	push	b
 01D7 CD0000    	call	NTWKIN
 01DA B7        	ora	a
 01DB C2BD01    	jnz	COLDSE
 01DE 216602    	lxi	h,NDOSE
 01E1 220700    	shld	start+1
 01E4 AF        	xra	a	;
 01E5 320E00    	sta	remove	; is the required?
 01E8 216800    	lxi	h,MSGDAT
 01EB 22AA01    	shld	MCRPNT
                	; Apparently, it is passe to use BDOS calls for certain things...
 01EE 110602    	lxi	d,scbadd
 01F1 0E31      	mvi	c,scbf
 01F3 CD0900    	call	next
 01F6 226100    	shld	scbadr
 01F9 114502    	lxi	d,CSTUP
 01FC 0E09      	mvi	c,CBUFPR
 01FE CD0900    	call	next
 0201 C1        	pop	b
 0202 D1        	pop	d
 0203 C30900    	jmp	next
                
 0206 3A00      scbadd:	db	03ah, 0
                
 0208 2A6100    BDERMD:	lhld	scbadr
 020B 2EE7      	mvi	l,scbase+4bh
 020D 7E        	mov	a,m
 020E C9        	ret
                
 020F 2A6100    SYSMSC:	lhld	scbadr
 0212 2EE6      	mvi	l,scbase+4ah
 0214 7E        	mov	a,m
 0215 C9        	ret
                
 0216 2A6100    CURUSR: lhld	scbadr
 0219 2EE0      	mvi	l,scbase+44h
 021B 7E        	mov	a,m
 021C C9        	ret
                
                ; Some sneaky programs, like ERASE.COM, use the "saved search address" from the SCB.
                ; so we must put the address there if the BDOS does not (i.e. networked drive).
 021D 2AA701    SETSRA:	lhld	PARAMT
 0220 EB        	xchg
 0221 2A6100    	lhld	scbadr
 0224 2EE3      	mvi	l,scbase+47h
 0226 73        	mov	m,e
 0227 23        	inx	h
 0228 72        	mov	m,d
 0229 C9        	ret
                
 022A 2A6100    SETDSK: lhld	scbadr
 022D 2EDA      	mvi	l,scbase+3eh
 022F 3AA701    	lda	PARAMT
 0232 77        	mov	m,a
 0233 C9        	ret
                
 0234 2A6100    CURDSK: lhld	scbadr
 0237 2EDA      	mvi	l,scbase+3eh
 0239 7E        	mov	a,m
 023A C9        	ret
                
 023B 2A6100    DMAADD: lhld	scbadr
 023E 2ED8      	mvi	l,scbase+3ch
 0240 7E        	mov	a,m
 0241 23        	inx	h
 0242 66        	mov	h,m
 0243 6F        	mov	l,a
 0244 C9        	ret
                
 0245 4E444F5333CSTUP:	DB	'NDOS3 Started.',CR,LF,'$'
 0256 4E444F5333CSTDN:	DB	'NDOS3 Ending.',CR,LF,'$'
                ;wbmsg:	DB	'NDOS3 Warm-boot.',CR,LF,'$'
                
                NDOSE:
 0266 79        	mov	a,c	; must save REAL function code!
 0267 32A601    	sta	FUNCOD
 026A 326600    	sta	MSGFUN
 026D B7        	ora	a
 026E CADE09    	jz	WARMST
 0271 FE3B      	cpi	COVLY
 0273 CADE09    	jz	LDOVLY	; LOAD OVERLAY (RSX SCRUB) - indication of warm boot
 0276 FE3C      	cpi	CRSX
 0278 CAE809    	jz	CALRSX	; used to unload CP/Net
 027B FE32      	cpi	CBIOS
 027D CA0900    	jz	next	; DIRECT BIOS CALL - might need to trap for LIST OUT
                
 0280 21CA03    	lxi	h,FUNTBS
                NDOSE1:
 0283 79        	mov	a,c
 0284 96        	sub	m
 0285 DA0900    	jc	next
 0288 23        	inx	h
 0289 BE        	cmp	m
 028A 23        	inx	h
 028B DA9802    	jc	NDOSE2
 028E 23        	inx	h
 028F 23        	inx	h
 0290 7E        	mov	a,m
 0291 B7        	ora	a
 0292 C28302    	jnz	NDOSE1
 0295 C30900    	jmp	next
                
                NDOSE2:
                	sspd	USTACK
 0298+ED73      	DB	0EDH,73H
 029A+A401      	DW	USTACK
 029C 31A401    	lxi	sp,STACK
 029F 4F        	mov	c,a	; modified func code!
 02A0 7E        	mov	a,m
 02A1 23        	inx	h
 02A2 66        	mov	h,m
 02A3 6F        	mov	l,a	; HL = func table
 02A4 E5        	push	h
 02A5 EB        	xchg
 02A6 22A701    	shld	PARAMT
 02A9 CD3B02    	call	DMAADD
 02AC 22B609    	shld	DMAADR	; cache DMA address for this call...
 02AF 216700    	lxi	h,MSGSIZ
 02B2 3600      	mvi	m,0	; assume 1-byte payload
 02B4 23        	inx	h
 02B5 22AA01    	shld	MCRPNT	; MSGDAT
 02B8 AF        	xra	a
 02B9 47        	mov	b,a
 02BA 57        	mov	d,a
 02BB E1        	pop	h	; specific func table in HL
 02BC 09        	dad	b
 02BD 5E        	mov	e,m	; don't need HL anymore
 02BE 93        	sub	e	; assumes A=0
 02BF CA2004    	jz	tnextp	; code 0 = not handled by CP/Net
                NDOSE4:
 02C2 210704    	lxi	h,NDENDR
 02C5 E5        	push	h
 02C6 213103    	lxi	h,FUNTB2
 02C9 19        	dad	d
 02CA E5        	push	h
                NDOSE5:
 02CB C1        	pop	b
 02CC 0A        	ldax	b
 02CD 57        	mov	d,a
 02CE E67F      	ani	07fh	; strip off EOP bit
 02D0 5F        	mov	e,a
 02D1 7A        	mov	a,d
 02D2 1600      	mvi	d,0
 02D4 21E702    	lxi	h,FUNTB3
 02D7 19        	dad	d
 02D8 5E        	mov	e,m
 02D9 23        	inx	h
 02DA 56        	mov	d,m
 02DB 03        	inx	b
 02DC 17        	ral
 02DD DAE502    	jc	NDOSE6
 02E0 C5        	push	b
 02E1 21CB02    	lxi	h,NDOSE5
 02E4 E5        	push	h
                NDOSE6:
 02E5 EB        	xchg
 02E6 E9        	pchl
                
                FUNTB3:
 02E7 0000      	dw	0	; 0	000h	080h - never called
 02E9 D803      	dw	SNDHDR	; 2	002h	082h
 02EB 1304      	dw	RCVPAR	; 4	004h	084h
 02ED 6104      	dw	SNDFCB	; 6	006h	086h
 02EF 6704      	dw	CKSFCB	; 8	008h	088h
 02F1 DC04      	dw	RENTMP	; 10	00ah	08ah
 02F3 E604      	dw	WTDTC2	; 12	00ch	08ch
 02F5 EC04      	dw	WTDTC8	; 14	00eh	08eh
 02F7 F204      	dw	WTDTCP	; 16	010h	090h
 02F9 0B05      	dw	CKSTDK	; 18	012h	092h
 02FB E205      	dw	BCSTFN	; 20	014h	094h
 02FD 1606      	dw	BCSTVC	; 22	016h	096h
 02FF 3007      	dw	RCVEC	; 24	018h	098h
 0301 8907      	dw	GTFCB	; 26	01ah	09ah
 0303 9607      	dw	GTFCCR	; 28	01ch	09ch
 0305 9007      	dw	GTFCRR	; 30	01eh	09eh
 0307 CE07      	dw	GTDIRE	; 32	020h	0a0h
 0309 FC07      	dw	GTOSCT	; 34	022h	0a2h
 030B 1308      	dw	GTMISC	; 36	024h	0a4h
 030D 5308      	dw	GTLOGV	; 38	026h	0a6h
 030F DD08      	dw	LIST1	; 40	028h	0a8h
 0311 B408      	dw	SELDSK	; 42	02ah	0aah
 0313 E608      	dw	LSTBLK	; 44	02ch	0ach
 0315 5309      	dw	GETVER	; 46	02eh	0aeh
 0317 0000      	dw	0	; 48	030h	0b0h - to be removed
 0319 D408      	dw	RESET	; 50	032h	0b2h
 031B 6009      	dw	NWSTAT	; 52	034h	0b4h
 031D 6709      	dw	NWCFTB	; 54	036h	0b6h
 031F 9009      	dw	SDMSGU	; 56	038h	0b8h
 0321 9C09      	dw	RVMSGU	; 58	03ah	0bah
 0323 6F09      	dw	LOGIN	; 60	03ch	0bch
 0325 8709      	dw	LOGOFF	; 62	03eh	0beh
 0327 E106      	dw	STSF	; 64	040h	0c0h
 0329 1007      	dw	STSN	; 66	042h	0c2h
 032B 0000      	dw	0	; 68	044h	0c4h - to be removed
 032D 0505      	dw	CKSTDP	;	046h	0c6h
 032F 2C05      	dw	CHKMSC	;	048h	0c8h
                
                ; hi bit is "end" signal, else keep executing routines in list...
                ; byte & 07fh is index into FUNTB3, routine to call.
                FUNTB2:
 0331 80        	db	080h			; - never called
 0001 =         fgtvr	equ	$-FUNTB2
 0332 AE        	db	0aeh			;
 0002 =         frssy	equ	$-FUNTB2
 0333 B2        	db	0b2h			;
 0003 =         frsvc	equ	$-FUNTB2
 0334 96        	db	096h			;
 0004 =         fsldk	equ	$-FUNTB2
 0335 AA        	db	0aah			;
 0005 =         fopfi	equ	$-FUNTB2
 0336 080E189A  	db	008h, 00eh, 018h, 09ah	;
 0009 =         fdlfi	equ	$-FUNTB2
 033A 0698      	db	006h, 098h		;
 000B =         fsrfs	equ	$-FUNTB2
 033C 4018A0    	db	040h, 018h, 0a0h	;
 000E =         fsrnx	equ	$-FUNTB2
 033F 4218A0    	db	042h, 018h, 0a0h	;
 0011 =         frdsq	equ	$-FUNTB2
 0342 4806181CA2	db	048h, 006h, 018h, 01ch, 0a2h	; READ SEQ
 0016 =         fwrsq	equ	$-FUNTB2
 0347 480810189C	db	048h, 008h, 010h, 018h, 09ch	; WRITE SEQ
 001B =         frefi	equ	$-FUNTB2
 034C 080A0298  	db	008h, 00ah, 002h, 098h	;
 001F =         flgvc	equ	$-FUNTB2
 0350 A6        	db	0a6h			;
 0020 =         fgtal	equ	$-FUNTB2
 0351 120218A4  	db	012h, 002h, 018h, 0a4h	;
 0024 =         fwrpr	equ	$-FUNTB2
 0355 120298    	db	012h, 002h, 098h	;
 0027 =         fstfi	equ	$-FUNTB2
 0358 06189C    	db	006h, 018h, 09ch	;
 002A =         frdrr	equ	$-FUNTB2
 035B 4806181EA2	db	048h, 006h, 018h, 01eh, 0a2h	; READ RAND
 002F =         fwrrr	equ	$-FUNTB2
 0360 480810189E	db	048h, 008h, 010h, 018h, 09eh	; WRITE RAND [ZEROFIL]
 0034 =         fgtsz	equ	$-FUNTB2
 0365 06189E    	db	006h, 018h, 09eh	;
 0037 =         flkrc	equ	$-FUNTB2
 0368 080C189E  	db	008h, 00ch, 018h, 09eh	;
 003B =         fstpw	equ	$-FUNTB2
 036C 94        	db	094h			;
 003C =         flgin	equ	$-FUNTB2
 036D 3C98      	db	03ch, 098h		;
 003E =         flgof	equ	$-FUNTB2
 036F 3E98      	db	03eh, 098h		;
 0040 =         fsdnw	equ	$-FUNTB2
 0371 B8        	db	0b8h			;
 0041 =         frvnw	equ	$-FUNTB2
 0372 BA        	db	0bah			;
 0042 =         fnwst	equ	$-FUNTB2
 0373 B4        	db	0b4h			;
 0043 =         fnwcf	equ	$-FUNTB2
 0374 B6        	db	0b6h			;
 0044 =         fstcp	equ	$-FUNTB2	; ***** DUPLICATE of fstpw *****
 0375 94        	db	094h			;
 0045 =         fsvcf	equ	$-FUNTB2
 0376 3E18A4    	db	03eh, 018h, 0a4h	;
 0048 =         fgtdl	equ	$-FUNTB2
 0379 4698      	db	046h, 098h		;
 004A =         fdkms	equ	$-FUNTB2
 037B 460218A4  	db	046h, 002h, 018h, 0a4h	;
 004E =         flst1	equ	$-FUNTB2
 037F A8        	db	0a8h
 004F =         flstbk	equ	$-FUNTB2
 0380 AC        	db	0ach
                
                ; table of message handlers? per BDOS func?
                ; -1 = ERROR, 0 = PASSTHRU, else index into FUNTB2
                FUNTB1:
 0381 00        	db	0	; 0 -
 0382 00        	db	0	; 1 -
 0383 00        	db	0	; 2 -
 0384 00        	db	0	; 3 -
 0385 00        	db	0	; 4 -
 0386 4E        	db	flst1	; 5 -
 0387 00        	db	0	; 6 -
 0388 00        	db	0	; 7 -
 0389 00        	db	0	; 8 -
 038A 00        	db	0	; 9 -
 038B 00        	db	0	; 10 -
 038C 00        	db	0	; 11 -
 038D 01        	db	fgtvr	; 12 - GET VERSION
 038E 02        	db	frssy	; 13 - RESET DISK SYSTEM
 038F 04        	db	fsldk	; 14 - SELECT DISK
 0390 05        	db	fopfi	; 15 - OPEN FILE
 0391 05        	db	fopfi	; 16 - CLOSE FILE
 0392 0B        	db	fsrfs	; 17 - SEARCH FIRST
 0393 0E        	db	fsrnx	; 18 - SEARCH NEXT
 0394 09        	db	fdlfi	; 19 - DELETE FILE
 0395 11        	db	frdsq	; 20 - READ SEQUENTIAL
 0396 16        	db	fwrsq	; 21 - WRITE SEQUENTIAL
 0397 05        	db	fopfi	; 22 - MAKE FILE
 0398 1B        	db	frefi	; 23 - RENAME FILE
 0399 1F        	db	flgvc	; 24 - GET LOGIN VECTOR
 039A 00        	db	0	; 25 - GET CURRENT DISK
 039B 00        	db	0	; 26 - SET DMA ADDR
 039C 20        	db	fgtal	; 27 - GET ALLOC ADDR
 039D 24        	db	fwrpr	; 28 - WRITE PROTECT DISK
 039E 1F        	db	flgvc	; 29 - GET R/O VECTOR
 039F 27        	db	fstfi	; 30 - SET FILE ATTR
 03A0 20        	db	fgtal	; 31 - GET DPB ADDR
 03A1 00        	db	0	; 32 - GET/SET USER CODE
 03A2 2A        	db	frdrr	; 33 - READ RANDOM
 03A3 2F        	db	fwrrr	; 34 - WRITE RANDOM
 03A4 34        	db	fgtsz	; 35 - GET FILE SIZE
 03A5 34        	db	fgtsz	; 36 - SET RAND RECORD
 03A6 03        	db	frsvc	; 37 - RESET DRIVE
 03A7 03        	db	frsvc	; 38 - ACCESS DRIVE
 03A8 03        	db	frsvc	; 39 - FREE DRIVE
 03A9 2F        	db	fwrrr	; 40 - WRITE RAND ZERO FILL
 03AA 00        	db	0	; 41 - TEST & WRITE RECORD
 03AB 37        	db	flkrc	; 42 - LOCK RECORD
 03AC 37        	db	flkrc	; 43 - UNLOCK RECORD
 03AD 00        	db	0	; 44 - SET MULTISECTOR COUNT
 03AE 00        	db	0	; 45 - SET BDOS ERR MODE
 03AF 4A        	db	fdkms	; 46 - GET DISK FREE SPACE
 03B0 00        	db	0	; 47 - CHAIN TO PROGRAM (***? can't chain to remote program)
 03B1 44        	db	fstcp	; 48 - FLUSH BUFFERS
 03B2 00        	db	0	; 49 - GET/SET SCB
                	; 50..63 - handled by special case
 0032 =         NFTB1	equ	$-FUNTB1
                
                	; if any are passed to server, must preserve FUNCOD as real code
                FUNTBX:
 03B3 44        	db	fstcp	; 98 - FREE BLOCKS
 03B4 05        	db	fopfi	; 99 - TRUNCATE FILE
 03B5 00        	db	0	; 100 - SET DIR LABEL ****support?****
 03B6 48        	db	fgtdl	; 101 - GET DIR LABEL BYTE
 03B7 48        	db	fgtdl	; 102 - READ FILE DATE-PWD MODE
 03B8 00        	db	0	; 103 - WRITE FILE XFCB ****support?****
 03B9 00        	db	0	; 104 - SET DATE & TIME
 03BA 00        	db	0	; 105 - GET DATE & TIME - can't support here, use SEND NW MESG
 03BB 3B        	db	fstpw	; 106 - SET DEF PASSWORD
 03BC 00        	db	0	; 107 - GET SERIAL NUMBER
 03BD 00        	db	0	; 108 - GET/SET PGM RET CODE
 03BE 00        	db	0	; 109 - GET/SET CONS MODE
 03BF 00        	db	0	; 110 - GET/SET OUT DELIM
 03C0 00        	db	0	; 111 - PRINT BLOCK
 03C1 4F        	db	flstbk	; 112 - LIST BLOCK
 000F =         NFTBX	equ	$-FUNTBX
                
                	; CP/Net functions, not known to BDOS
                FUNTBN:
 03C2 3C        	db	flgin	; 64 - LOGIN
 03C3 3E        	db	flgof	; 65 - LOGOFF
 03C4 40        	db	fsdnw	; 66 - SEND NW MESG
 03C5 41        	db	frvnw	; 67 - RECV NW MESG
 03C6 42        	db	fnwst	; 68 - GET NW STATUS
 03C7 43        	db	fnwcf	; 69 - GET NW CFG
 03C8 44        	db	fstcp	; 70 - SET COMP ATTR
 03C9 45        	db	fsvcf	; 71 - GET SERVER CFG
 0008 =         NFTBN	equ	$-FUNTBN
                
                FUNTBS:
 03CA 0032      	db	0,NFTB1
 03CC 8103      	dw	FUNTB1
 03CE 4008      	db	CNMIN,NFTBN
 03D0 C203      	dw	FUNTBN
 03D2 620F      	db	CXMIN,NFTBX
 03D4 B303      	dw	FUNTBX
 03D6 0000      	dw	0
                
                SNDHDR:
 03D8 216300    	lxi	h,MSGTOP
 03DB 3600      	mvi	m,0	; FMT = CP/Net
 03DD 23        	inx	h
                	; DID (server ID) already set
 03DE 23        	inx	h
                	; SID, our node ID, will be set by SNIOS
 03DF 23        	inx	h
 03E0 23        	inx	h
 03E1 23        	inx	h
 03E2 EB        	xchg		; DE = MSGDAT
 03E3 2AAA01    	lhld	MCRPNT
 03E6 B7        	ora	a
                	dsbc	d	; HL -= DE
 03E7+ED52      	DB	0EDH,D*8+42H
 03E9 CAF003    	jz	SNDHD1	; size set already
 03EC 2B        	dcx	h	; SIZ is -1
 03ED EB        	xchg
 03EE 2B        	dcx	h	; point to SIZ byte
 03EF 73        	mov	m,e	; SIZ = length - 1
                SNDHD1:
 03F0 016300    	lxi	b,MSGTOP
                SDMSGE:
 03F3 CD0000    	call	SNDMSG
 03F6 3C        	inr	a
 03F7 C0        	rnz
 03F8 C30004    	jmp	NERROR
                
                RVMSGE:
 03FB CD0000    	call	RCVMSG
 03FE 3C        	inr	a
 03FF C0        	rnz
                NERROR:
 0400 21FFFF    	lxi	h,-1
 0403 7C        	mov	a,h
 0404 C30A04    	jmp	NDEND
                
                NDENDR:
 0407 3AA901    	lda	RETCOD
                NDEND:
 040A EB        	xchg
 040B 2AA401    	lhld	USTACK
 040E F9        	sphl
 040F EB        	xchg
 0410 6F        	mov	l,a
 0411 44        	mov	b,h
 0412 C9        	ret
                
                RCVPAR:
 0413 016300    	lxi	b,MSGTOP
 0416 CDFB03    	call	RVMSGE
 0419 216800    	lxi	h,MSGDAT
 041C 22AA01    	shld	MCRPNT
 041F C9        	ret
                
                tnextp:	; abandon call to real BDOS
 0420 2AA401    	lhld	USTACK
 0423 F9        	sphl
                TBDOSP:
 0424 2AA701    	lhld	PARAMT
 0427 EB        	xchg
 0428 3AA601    	lda	FUNCOD
 042B 4F        	mov	c,a
 042C C30900    	jmp	next
                
                CKFCBD:
 042F 2AA701    	lhld	PARAMT
 0432 7E        	mov	a,m
 0433 3D        	dcr	a
 0434 F23A04    	jp	CKFCB1
 0437 CD3402    	call	CURDSK
                CKFCB1:
 043A 5F        	mov	e,a
 043B 1600      	mvi	d,0
 043D CD4904    	call	CHKDSK
 0440 FEFF      	cpi	0ffh
 0442 C0        	rnz
 0443 CD2404    	call	TBDOSP
 0446 C30A04    	jmp	NDEND
                
                CHKDSK:
 0449 210200    	lxi	h,CFGTBL+BSDSKS
 044C 19        	dad	d
 044D 19        	dad	d
 044E 7E        	mov	a,m
 044F 17        	ral
 0450 DA5604    	jc	CHKDS1	; remote disk
 0453 3EFF      	mvi	a,0ffh
 0455 C9        	ret
                CHKDS1:
 0456 1F        	rar
 0457 E60F      	ani	00fh	; remote server disk number
 0459 3C        	inr	a
 045A 4F        	mov	c,a
 045B 23        	inx	h
 045C 7E        	mov	a,m	; remote server node ID
 045D 326400    	sta	MSGID
 0460 C9        	ret
                
                SNDFCB:
 0461 CD6704    	call	CKSFCB
 0464 C3D803    	jmp	SNDHDR
                
                CKSFCB:
 0467 CD2F04    	call	CKFCBD		; check FCB disk for local/remote (local does not return)
                STFCB:
 046A CD1602    	call	CURUSR
 046D 2AAA01    	lhld	MCRPNT
 0470 77        	mov	m,a	; put USR in msg buf
 0471 23        	inx	h
 0472 71        	mov	m,c	; put DSK in msg buf
 0473 23        	inx	h
 0474 E5        	push	h
 0475 EB        	xchg
 0476 2AA701    	lhld	PARAMT
 0479 23        	inx	h
 047A 012300    	lxi	b,35
                	ldir	; copy FCB to msg buf
 047D+EDB0      	DB	0EDH,0B0H
 047F EB        	xchg
 0480 22AA01    	shld	MCRPNT
 0483 AF        	xra	a
 0484 32AE01    	sta	FNTMPF
 0487 32AD01    	sta	F5SETF
 048A E1        	pop	h	; point to start of FCB name in msg buf
                SUBTMP:
 048B CDAD04    	call	CKDOL	; substitute $NN for $$$ at start of name
 048E 0600      	mvi	b,0
 0490 09        	dad	b	; skip rest of 3 chars
 0491 23        	inx	h
 0492 7E        	mov	a,m
 0493 E680      	ani	080h	; check f5' attr - partial close/delete XFCBs only
 0495 23        	inx	h
 0496 CAA304    	jz	SUBTM1
 0499 7E        	mov	a,m
 049A E680      	ani	080h	; check f6' attr - assign passwd/set byte count
 049C C2A304    	jnz	SUBTM1
 049F 3D        	dcr	a
 04A0 32AD01    	sta	F5SETF
                SUBTM1:
 04A3 3AAE01    	lda	FNTMPF
 04A6 87        	add	a
 04A7 32AE01    	sta	FNTMPF
 04AA 23        	inx	h
 04AB 23        	inx	h
 04AC 23        	inx	h
                CKDOL:
 04AD 0E03      	mvi	c,3
 04AF 3E24      	mvi	a,'$'
                CKDOL1:
 04B1 BE        	cmp	m
 04B2 C0        	rnz
 04B3 23        	inx	h
 04B4 0D        	dcr	c
 04B5 C2B104    	jnz	CKDOL1
 04B8 EB        	xchg
 04B9 21AE01    	lxi	h,FNTMPF
 04BC 34        	inr	m
 04BD 1B        	dcx	d
 04BE 3A0100    	lda	CFGTBL+BSRID	; client (slave) ID
 04C1 47        	mov	b,a
 04C2 CDD204    	call	HEXDIG
 04C5 1B        	dcx	d
 04C6 78        	mov	a,b
 04C7 1F        	rar
 04C8 1F        	rar
 04C9 1F        	rar
 04CA 1F        	rar
 04CB CDD204    	call	HEXDIG
 04CE 13        	inx	d
 04CF 13        	inx	d
 04D0 EB        	xchg
 04D1 C9        	ret
                
                HEXDIG:
 04D2 E60F      	ani	00fh
 04D4 C690      	adi	90h
 04D6 27        	daa
 04D7 CE40      	aci	40h
 04D9 27        	daa
 04DA 12        	stax	d
 04DB C9        	ret
                
                RENTMP:
 04DC 2AAA01    	lhld	MCRPNT
 04DF 11EDFF    	lxi	d,-19
 04E2 19        	dad	d
 04E3 C38B04    	jmp	SUBTMP
                
                WTDTC2:	; hardly worth ldir, should just hard-code
 04E6 010200    	lxi	b,2
 04E9 C3F504    	jmp	WTDTCS
                WTDTC8:
 04EC 010800    	lxi	b,8
 04EF C3F504    	jmp	WTDTCS
                
                WTDTCP:
 04F2 018000    	lxi	b,SCTLNG
                WTDTCS:
 04F5 2AAA01    	lhld	MCRPNT
 04F8 EB        	xchg
 04F9 2AB609    	lhld	DMAADR
                	ldir
 04FC+EDB0      	DB	0EDH,0B0H
 04FE EB        	xchg
 04FF 22AA01    	shld	MCRPNT
 0502 C3D803    	jmp	SNDHDR
                
                CKSTDP:
 0505 3AA701    	lda	PARAMT
 0508 C30E05    	jmp	STDSK0
                CKSTDK:
 050B CD3402    	call	CURDSK
                STDSK0:
 050E 5F        	mov	e,a
 050F 1600      	mvi	d,000h
 0511 CD4904    	call	CHKDSK
 0514 FEFF      	cpi	0ffh
 0516 C21F05    	jnz	STDSK1
 0519 CD2404    	call	TBDOSP
 051C C30A04    	jmp	NDEND
                
                STDSK1:
 051F 326400    	sta	MSGID
 0522 2AAA01    	lhld	MCRPNT
 0525 0D        	dcr	c
 0526 71        	mov	m,c
 0527 23        	inx	h
 0528 22AA01    	shld	MCRPNT
 052B C9        	ret
                
                ; Handle multi-sector count
                CHKMSC:
 052C CD2F04    	call	CKFCBD	; does not return if disk is local
                	; From here on, we know the disk is remote
 052F CD0F02    	call	SYSMSC
 0532 FE01      	cpi	1
                	; skip multi-sector handling if count == 1
 0534 C8        	rz	; returns to NDOSE5, goto next opcode.
 0535 32B509    	sta	CURMSC
 0538 E1        	pop	h	; NDOSE5 ret addr
 0539 22B109    	shld	MSCRET
 053C E1        	pop	h	; FUNTB2 pointer (past CHKMSC)
 053D 22B309    	shld	MSCTBP
 0540 3AA601    	lda	FUNCOD
 0543 FE21      	cpi	CRREAD
 0545 DA9905    	jc	CKMSC2
                	; save rand rec position
 0548 2AA701    	lhld	PARAMT	; FCB
 054B 012100    	lxi	b,FCBRR0
 054E 09        	dad	b
 054F 5E        	mov	e,m
 0550 23        	inx	h
 0551 56        	mov	d,m
 0552 23        	inx	h
 0553 7E        	mov	a,m
 0554 32B009    	sta	SAVRR+2
 0557 EB        	xchg
 0558 22AE09    	shld	SAVRR
 055B C39905    	jmp	CKMSC2
                CKMSC0:
 055E 3AA901    	lda	RETCOD
 0561 B7        	ora	a
 0562 C2A505    	jnz	CKMSC1
 0565 3AB509    	lda	CURMSC
 0568 3D        	dcr	a
 0569 32B509    	sta	CURMSC
 056C CAA505    	jz	CKMSC1
 056F 216800    	lxi	h,MSGDAT
 0572 22AA01    	shld	MCRPNT
 0575 2AB609    	lhld	DMAADR
 0578 018000    	lxi	b,128
 057B 09        	dad	b
 057C 22B609    	shld	DMAADR
 057F 3AA601    	lda	FUNCOD
 0582 FE21      	cpi	CRREAD
 0584 DA9905    	jc	CKMSC2
                	; advance random record number...
 0587 2AA701    	lhld	PARAMT	; FCB
 058A 012100    	lxi	b,FCBRR0
 058D 09        	dad	b
 058E 34        	inr	m
 058F C29905    	jnz	CKMSC2
 0592 23        	inx	h
 0593 34        	inr	m
 0594 C29905    	jnz	CKMSC2
 0597 23        	inx	h
 0598 34        	inr	m
                CKMSC2:
 0599 215E05    	lxi	h,CKMSC0
 059C E5        	push	h
 059D 2AB309    	lhld	MSCTBP
 05A0 E5        	push	h
 05A1 2AB109    	lhld	MSCRET
 05A4 E9        	pchl	; jmp NDOSE5 - do next opcode. Returns to CKMSC0 when done.
                
                ; done with multi-sec read/write, restore everything.
                CKMSC1:	; could be EOF, or some physical error
 05A5 3AA601    	lda	FUNCOD
 05A8 FE21      	cpi	CRREAD
 05AA DAD105    	jc	CKMSC3
                	; restore file position...
 05AD 3AB009    	lda	SAVRR+2
 05B0 2AAE09    	lhld	SAVRR
 05B3 EB        	xchg
 05B4 2AA701    	lhld	PARAMT	; FCB
 05B7 012100    	lxi	b,FCBRR0
 05BA 09        	dad	b
 05BB 73        	mov	m,e
 05BC 23        	inx	h
 05BD 72        	mov	m,d
 05BE 23        	inx	h
 05BF 77        	mov	m,a
                	; If the program's next op is random read/write, then we are
                	; finished now. But, if the next op is sequential then
                	; we must set the file position back to where it started.
                	; Use READ RAND to set file position. Response is ignored.
 05C0 3E21      	mvi	a,CRREAD
 05C2 326600    	sta	MSGFUN
 05C5 216800    	lxi	h,MSGDAT
 05C8 22AA01    	shld	MCRPNT
 05CB CD6104    	call	SNDFCB
 05CE CD1304    	call	RCVPAR
                	; ignore data/error returned by CRREAD
                CKMSC3:
 05D1 2600      	mvi	h,0	; success returns NREC=0
 05D3 3AA901    	lda	RETCOD
 05D6 B7        	ora	a
 05D7 C8        	rz		; NDENDR
 05D8 3AB509    	lda	CURMSC	; if error ended us early, need num sec completed.
 05DB 5F        	mov	e,a	; save where SYSMSC won't destroy it
 05DC CD0F02    	call	SYSMSC
 05DF 93        	sub	e
 05E0 67        	mov	h,a
 05E1 C9        	ret		; NDENDR
                
                
                BCSTFN:	; broadcast func (set default password, set compat attrs)
 05E2 110000    	lxi	d,0
 05E5 CD6B06    	call	FORALL
 05E8 79        	mov	a,c
 05E9 0C        	inr	c
 05EA CAD106    	jz	RSTALL	; no (more) servers, reset and return
 05ED 326400    	sta	MSGID
 05F0 2AA701    	lhld	PARAMT
 05F3 EB        	xchg
 05F4 2AAA01    	lhld	MCRPNT
 05F7 3AA601    	lda	FUNCOD
 05FA FE38      	cpi	CDEFPW-CBMAX	; a.k.a. 106 - set def password
 05FC CA0306    	jz	BCST1
                	; fn 70 - set compat attr
 05FF 73        	mov	m,e
 0600 C30D06    	jmp	BCST2
                BCST1:
 0603 010800    	lxi	b,8
 0606 EB        	xchg
                	ldir
 0607+EDB0      	DB	0EDH,0B0H
 0609 EB        	xchg
 060A 22AA01    	shld	MCRPNT
                BCST2:
 060D CDD803    	call	SNDHDR
 0610 CD1304    	call	RCVPAR
 0613 C3E205    	jmp	BCSTFN
                
                BCSTVC:	; broadcast "drive vector" funcs to all servers
 0616 2AA701    	lhld	PARAMT
 0619 EB        	xchg
                BCSTV1:
 061A CD6B06    	call	FORALL
 061D E5        	push	h
 061E 79        	mov	a,c
 061F 0C        	inr	c
 0620 C23506    	jnz	BCSTV2	; some remote drives to do
 0623 CDD106    	call	RSTALL
 0626 D1        	pop	d
 0627 3AA601    	lda	FUNCOD
 062A FE25      	cpi	CRSDSN	; reset drive
 062C C0        	rnz		; only reset drive is passed to local
 062D 4F        	mov	c,a
 062E CD0900    	call	next
 0631 32A901    	sta	RETCOD
 0634 C9        	ret
                BCSTV2:
 0635 326400    	sta	MSGID
 0638 216800    	lxi	h,MSGDAT
 063B 73        	mov	m,e
 063C 23        	inx	h
 063D 72        	mov	m,d
 063E 23        	inx	h
 063F 22AA01    	shld	MCRPNT
 0642 CDD803    	call	SNDHDR
 0645 3AA601    	lda	FUNCOD
 0648 D626      	sui	38	; access drive
 064A CA6406    	jz	BCSTV3
 064D F5        	push	psw
 064E CD1304    	call	RCVPAR
 0651 F1        	pop	psw
 0652 D1        	pop	d
 0653 3D        	dcr	a
 0654 CA1A06    	jz	BCSTV1
 0657 3A6800    	lda	MSGDAT
 065A 32A901    	sta	RETCOD
 065D 3C        	inr	a
 065E CAD106    	jz	RSTALL
 0661 C31A06    	jmp	BCSTV1
                
                BCSTV3:
 0664 CD3007    	call	RCVEC
 0667 D1        	pop	d
 0668 C31A06    	jmp	BCSTV1
                
                ; Returns vector of all disks for given server,
                ; each call skips servers already reported.
                FORALL:
 066B 210200    	lxi	h,CFGTBL+BSDSKS
 066E D5        	push	d
 066F 110000    	lxi	d,0
 0672 01FF10    	lxi	b,010ffh
                FORAL1:
 0675 7E        	mov	a,m
 0676 17        	ral
 0677 D2B506    	jnc	FORAL6	; local
 067A 17        	ral
 067B DAB506    	jc	FORAL6	; "already did" flag
 067E 23        	inx	h
 067F 79        	mov	a,c
 0680 FEFF      	cpi	0ffh
 0682 CA8D06    	jz	FORAL2
 0685 BE        	cmp	m
 0686 CA8E06    	jz	FORAL3
 0689 2B        	dcx	h
 068A C3B506    	jmp	FORAL6
                FORAL2:
 068D 4E        	mov	c,m
                FORAL3:
 068E 2B        	dcx	h
 068F 7E        	mov	a,m
 0690 F640      	ori	040h	; mark this one done...
 0692 77        	mov	m,a
 0693 E3        	xthl
 0694 CDC906    	call	RHLR0
 0697 D2C006    	jnc	FORAL7
 069A E3        	xthl
 069B 7E        	mov	a,m
 069C E60F      	ani	00fh
 069E 3C        	inr	a
 069F E5        	push	h
 06A0 210100    	lxi	h,1
                FORAL4:
 06A3 3D        	dcr	a
 06A4 CAAB06    	jz	FORAL5
 06A7 29        	dad	h
 06A8 C3A306    	jmp	FORAL4
                FORAL5:
 06AB 7B        	mov	a,e
 06AC B5        	ora	l
 06AD 5F        	mov	e,a
 06AE 7A        	mov	a,d
 06AF B4        	ora	h
 06B0 57        	mov	d,a
 06B1 E1        	pop	h
 06B2 C3C106    	jmp	FORAL8
                FORAL6:
 06B5 E3        	xthl
 06B6 CDC906    	call	RHLR0
 06B9 D2C006    	jnc	FORAL7
 06BC 7C        	mov	a,h
 06BD F680      	ori	080h
 06BF 67        	mov	h,a
                FORAL7:
 06C0 E3        	xthl
                FORAL8:
 06C1 23        	inx	h
 06C2 23        	inx	h
 06C3 05        	dcr	b
 06C4 C27506    	jnz	FORAL1
 06C7 E1        	pop	h
 06C8 C9        	ret
                
                RHLR0:
 06C9 B7        	ora	a
 06CA 7C        	mov	a,h
 06CB 1F        	rar
 06CC 67        	mov	h,a
 06CD 7D        	mov	a,l
 06CE 1F        	rar
 06CF 6F        	mov	l,a
 06D0 C9        	ret
                
                ; Reset from FORALL
                RSTALL:
 06D1 210200    	lxi	h,CFGTBL+BSDSKS
 06D4 0610      	mvi	b,16
                RSTAL1:
 06D6 7E        	mov	a,m
 06D7 E68F      	ani	08fh	; clear FORALL iterator flag(s)
 06D9 77        	mov	m,a
 06DA 23        	inx	h
 06DB 23        	inx	h
 06DC 05        	dcr	b
 06DD C2D606    	jnz	RSTAL1
 06E0 C9        	ret
                
                STSF:	; setup Search First
 06E1 3EFF      	mvi	a,0ffh
 06E3 326000    	sta	CURSID	; assume local
 06E6 2AA701    	lhld	PARAMT
 06E9 7E        	mov	a,m
 06EA FE3F      	cpi	'?'
 06EC C2FA06    	jnz	STSF1
 06EF CD0B05    	call	CKSTDK
 06F2 0EBF      	mvi	c,'?'+080h	; "drive" code with CP/M3 flag
 06F4 CD6A04    	call	STFCB
 06F7 C30407    	jmp	STSF2
                STSF1:
 06FA 2AAA01    	lhld	MCRPNT
 06FD 23        	inx	h
 06FE 22AA01    	shld	MCRPNT
 0701 CD6704    	call	CKSFCB	; if remote, set FCB in msg
                STSF2:
 0704 3A6400    	lda	MSGID
 0707 326000    	sta	CURSID
 070A CD1D02    	call	SETSRA
 070D C3D803    	jmp	SNDHDR
                
                STSN:	; setup Search Next
 0710 3A6000    	lda	CURSID
 0713 FEFF      	cpi	0ffh	; was Search First a local op?
 0715 C21E07    	jnz	STSN1
 0718 CD2404    	call	TBDOSP
 071B C30A04    	jmp	NDEND
                STSN1:
 071E 326400    	sta	MSGID
 0721 CD1602    	call	CURUSR
 0724 2AAA01    	lhld	MCRPNT
 0727 23        	inx	h
 0728 77        	mov	m,a
 0729 23        	inx	h
 072A 22AA01    	shld	MCRPNT
 072D C3D803    	jmp	SNDHDR
                
                RCVEC:
 0730 CD1304    	call	RCVPAR
 0733 216900    	lxi	h,MSGDAT+1
 0736 22AA01    	shld	MCRPNT
 0739 56        	mov	d,m	; D = ext err code
 073A 2B        	dcx	h
 073B 7E        	mov	a,m
 073C 32A901    	sta	RETCOD
 073F 2B        	dcx	h
 0740 7E        	mov	a,m	; SIZ
 0741 3D        	dcr	a
 0742 2600      	mvi	h,0	; ensure H=0 to avoid confusion with extended errors
 0744 C0        	rnz		; not extended error - skip rest
 0745 CD0802    	call	BDERMD
 0748 3C        	inr	a
 0749 C25007    	jnz	NDERR
 074C EB        	xchg
 074D C30704    	jmp	NDENDR
                
                NDERR:
 0750 D5        	push	d
 0751 114A00    	lxi	d,NDERRM
 0754 CD8407    	call	PRMSG
 0757 F1        	pop	psw	; A = (D), ext err code
 0758 F5        	push	psw	; Fix bug in NDOS.ASM
 0759 CD7407    	call	HEXOUT
 075C 115600    	lxi	d,NDERR2
 075F CD8407    	call	PRMSG
 0762 3AA601    	lda	FUNCOD
 0765 CD7407    	call	HEXOUT
 0768 CD0802    	call	BDERMD
 076B E1        	pop	h	; H = ext err code
 076C FEFE      	cpi	0feh
 076E CA0704    	jz	NDENDR
 0771 C30000    	jmp	TOP	; abort program
                
                HEXOUT:
 0774 11B201    	lxi	d,HEXMSG+1	; do low nibble first
 0777 F5        	push	psw
 0778 CDD204    	call	HEXDIG
 077B F1        	pop	psw
 077C 1F        	rar
 077D 1F        	rar
 077E 1F        	rar
 077F 1F        	rar
 0780 1B        	dcx	d	; back to hi nibble
 0781 CDD204    	call	HEXDIG
                PRMSG:
 0784 0E09      	mvi	c,CBUFPR
 0786 C30900    	jmp	next
                
                GTFCB:
 0789 3AAD01    	lda	F5SETF
 078C 3C        	inr	a
 078D C29607    	jnz	GTFCCR
                GTFCRR:
 0790 012300    	lxi	b,35	; FCB+CR+RR (-drive)
 0793 C39907    	jmp	GTFC1
                GTFCCR:
 0796 012000    	lxi	b,32	; FCB+CR, not RR
                GTFC1:
 0799 CDAD07    	call	RSTMP	; un-do temp file subst
 079C 2AA701    	lhld	PARAMT
 079F 23        	inx	h
 07A0 EB        	xchg
 07A1 2AAA01    	lhld	MCRPNT
 07A4 23        	inx	h
                	ldir
 07A5+EDB0      	DB	0EDH,0B0H
 07A7 22AA01    	shld	MCRPNT
 07AA 2600      	mvi	h,0	; ensure H=0 to avoid confusion with extended errors
 07AC C9        	ret
                
                RSTMP:	; restore TMP filename
 07AD 3AAE01    	lda	FNTMPF
 07B0 1F        	rar
 07B1 1F        	rar
 07B2 D2BF07    	jnc	RSTMP1
 07B5 2AAA01    	lhld	MCRPNT
 07B8 23        	inx	h
 07B9 23        	inx	h
 07BA 3624      	mvi	m,'$'
 07BC 23        	inx	h
 07BD 3624      	mvi	m,'$'
                RSTMP1:
 07BF 17        	ral
 07C0 D0        	rnc
 07C1 2AAA01    	lhld	MCRPNT
 07C4 110A00    	lxi	d,10
 07C7 19        	dad	d
 07C8 3624      	mvi	m,'$'
 07CA 23        	inx	h
 07CB 3624      	mvi	m,'$'
 07CD C9        	ret
                
                GTDIRE:
 07CE 3AA901    	lda	RETCOD
 07D1 3C        	inr	a
 07D2 2600      	mvi	h,0	; ensure H=0 to avoid confusion with extended errors
 07D4 C8        	rz
 07D5 2AAA01    	lhld	MCRPNT
                	; Special case for CP/M3 full search, although really
                	; any SEARCH that wants to be fully compatible with CP/M
                	; neuances - specifically that the DMA buffer contains the
                	; full directory sector after a search.
                	;
                	; CP/Net breaks SEARCH funcs 17/18 by only returning
                	; one DIRENT at a time, while the local BDOS calls
                	; actually fill the DMA buffer with the directory sector.
                	; DIR.COM depends on this for getting timestamps.
 07D8 3A6700    	lda	MSGSIZ
 07DB B7        	ora	a	; 00 = 1 byte, dir code only, DMA buf implied
 07DC C8        	rz		; NDENDR will return dir code to user
 07DD FE24      	cpi	32+4	; anything 1 < x < 128 really, pick a number (expect 32).
 07DF D20408    	jnc	STOSC0	; assume 128 bytes, copy all to DMA buffer.
                	; single DIRENT returned, copy to correct location.
 07E2 EB        	xchg
 07E3 2AB609    	lhld	DMAADR
 07E6 3AA901    	lda	RETCOD
 07E9 3C        	inr	a
 07EA 012000    	lxi	b,32
                GTDIR1:
 07ED 3D        	dcr	a
 07EE CAF507    	jz	GTDIR2
 07F1 09        	dad	b
 07F2 C3ED07    	jmp	GTDIR1
                GTDIR2:
 07F5 EB        	xchg
                	ldir
 07F6+EDB0      	DB	0EDH,0B0H
 07F8 22AA01    	shld	MCRPNT
 07FB C9        	ret
                
                GTOSCT:
 07FC 3AA901    	lda	RETCOD
 07FF B7        	ora	a
 0800 C0        	rnz
 0801 218D00    	lxi	h,MSGDAT+37
                STOSC0:
                	lded	DMAADR
 0804+ED5B      	DB	0EDH,5BH
 0806+B609      	DW	DMAADR
 0808 018000    	lxi	b,SCTLNG
                	ldir
 080B+EDB0      	DB	0EDH,0B0H
 080D 22AA01    	shld	MCRPNT
 0810 2600      	mvi	h,0	; ensure H=0 to avoid confusion with extended errors
 0812 C9        	ret
                
                GTMISC:
 0813 2AAA01    	lhld	MCRPNT
 0816 2B        	dcx	h	; drop error byte
 0817 3AA601    	lda	FUNCOD
 081A FE1B      	cpi	CGTALL	; get alloc addr
 081C CA4E08    	jz	GTMSC3	; for alloc vec, just leave in message buffer
 081F FE2E      	cpi	CFRSP	; get disk free space
 0821 CA3308    	jz	GTMSC4
 0824 FE1F      	cpi	CGTDPB	; get DPB addr
 0826 C24108    	jnz	GTMSC1
                	; fn 31 - get DPB
 0829 11B809    	lxi	d,CURDPB
 082C D5        	push	d
 082D 011000    	lxi	b,16	; should be 15 for CP/M 2.2, 17 for CP/M 3
 0830 C34808    	jmp	GTMSC2
                GTMSC4:
 0833 110000    	lxi	d,0
 0836 D5        	push	d
                	lded	DMAADR
 0837+ED5B      	DB	0EDH,5BH
 0839+B609      	DW	DMAADR
 083B 010300    	lxi	b,3
 083E C34808    	jmp	GTMSC2
                
                GTMSC1:		; fn 71 - get server config
 0841 11C709    	lxi	d,CURSCF
 0844 D5        	push	d
 0845 011700    	lxi	b,23
                GTMSC2:
                	ldir
 0848+EDB0      	DB	0EDH,0B0H
 084A 22AA01    	shld	MCRPNT
 084D E1        	pop	h
                GTMSC3:
 084E 7D        	mov	a,l
 084F 32A901    	sta	RETCOD
 0852 C9        	ret
                
                GTLOGV:
 0853 112100    	lxi	d,CFGTBL+BSDSKE
 0856 210000    	lxi	h,0
 0859 0610      	mvi	b,16
                GTLGV1:
 085B 1A        	ldax	d
 085C 1B        	dcx	d
 085D 4F        	mov	c,a
 085E 1A        	ldax	d
 085F 1B        	dcx	d
 0860 29        	dad	h
 0861 CD6D08    	call	DRVSTS
 0864 05        	dcr	b
 0865 C25B08    	jnz	GTLGV1
 0868 7D        	mov	a,l
 0869 32A901    	sta	RETCOD
 086C C9        	ret
                
                ; Get a drive's status (i.e. GET LOGIN VECTOR)
                ; B = local drive num
                ; A = net cfg byte, bit-7 = remote, bit-0:3 = remote drive num
                ; Returns DE bit-0 = drive's status
                DRVSTS:
 086D D5        	push	d
 086E C5        	push	b
 086F E5        	push	h
 0870 17        	ral
 0871 DA7E08    	jc	DRVST1
                	; drive is local
 0874 C5        	push	b
 0875 CD2404    	call	TBDOSP
 0878 C1        	pop	b
 0879 05        	dcr	b
 087A EB        	xchg
 087B C39A08    	jmp	DRVST2
                
                DRVST1:	; drive is remote
 087E 1F        	rar
 087F E60F      	ani	00fh
 0881 47        	mov	b,a	; remote drive number
 0882 79        	mov	a,c	; server ID
 0883 326400    	sta	MSGID
 0886 216800    	lxi	h,MSGDAT
 0889 22AA01    	shld	MCRPNT
 088C C5        	push	b
 088D CDD803    	call	SNDHDR
 0890 CD1304    	call	RCVPAR
 0893 C1        	pop	b
 0894 2AAA01    	lhld	MCRPNT
 0897 5E        	mov	e,m
 0898 23        	inx	h
 0899 56        	mov	d,m
                DRVST2:	; DE = vector of active drives
 089A 78        	mov	a,b
 089B B7        	ora	a
 089C CAA908    	jz	DRVST4
                DRVST3:	; get drive 'B' bit to LSB
 089F 7A        	mov	a,d
 08A0 1F        	rar
 08A1 57        	mov	d,a
 08A2 7B        	mov	a,e
 08A3 1F        	rar
 08A4 5F        	mov	e,a
 08A5 05        	dcr	b
 08A6 C29F08    	jnz	DRVST3
                DRVST4:
 08A9 1600      	mvi	d,000h
 08AB 7B        	mov	a,e
 08AC E601      	ani	001h
 08AE 5F        	mov	e,a
 08AF E1        	pop	h
 08B0 19        	dad	d
 08B1 C1        	pop	b
 08B2 D1        	pop	d
 08B3 C9        	ret
                
                SELDSK:
 08B4 3AA701    	lda	PARAMT
 08B7 1600      	mvi	d,000h
 08B9 5F        	mov	e,a
 08BA CD4904    	call	CHKDSK
 08BD FEFF      	cpi	0ffh	; local disk
 08BF CA2404    	jz	TBDOSP	; let BDOS handle
 08C2 CD2A02    	call	SETDSK
 08C5 2AAA01    	lhld	MCRPNT
 08C8 0D        	dcr	c
 08C9 71        	mov	m,c
 08CA 23        	inx	h
 08CB 22AA01    	shld	MCRPNT
 08CE CDD803    	call	SNDHDR
 08D1 C33007    	jmp	RCVEC
                
                RESET:	; anything to do? BDOS will be called... but BDOS does not call 0005 (us)?
 08D4 216800    	lxi	h,MSGDAT
 08D7 22AA01    	shld	MCRPNT
                	; A: cannot be remote...
 08DA C30900    	jmp	next
                
                LIST1:
 08DD 11A701    	lxi	d,PARAMT
 08E0 010100    	lxi	b,1
 08E3 C3F308    	jmp	lstbk2
                
                LSTBLK:
 08E6 2AA701    	lhld	PARAMT
 08E9 5E        	mov	e,m
 08EA 23        	inx	h
 08EB 56        	mov	d,m	; address of data
 08EC 23        	inx	h
 08ED 4E        	mov	c,m
 08EE 23        	inx	h
 08EF 46        	mov	b,m	; length
 08F0 79        	mov	a,c
 08F1 B0        	ora	b
 08F2 C8        	rz
                lstbk2:
                	lxix	CFGTBL+BSLIST
 08F3+DD21      	DB	0DDH,21H
 08F5+2400      	DW	CFGTBL+BSLIST
                	bitx	7,+0
 08F7+DDCB007E  	DB	0DDH,0CBH,+0,7*8+46H
 08FB CA2004    	jz	tnextp
 08FE 212D00    	lxi	h,CFGTBL+BSLIST+9
 0901 D5        	push	d
                	ldx	e,+7
 0902+DD5E07    	DB	0DDH,E*8+46H,+7
 0905 1600      	mvi	d,0
 0907 19        	dad	d
 0908 D1        	pop	d
                lstbk0:
 0909 1A        	ldax	d
 090A 13        	inx	d
 090B 77        	mov	m,a
 090C 23        	inx	h
                	inrx	+7	; dirty == not-zero
 090D+DD3407    	DB	0DDH,34H,+7
 0910 FA1F09    	jm	lstbk3	; send data
 0913 FEFF      	cpi	0ffh	; stop at 0ffh? or need to continue if more?
 0915 CA1F09    	jz	lstbk3	; this will continue if more chars exist...
                lstbk1:
 0918 0B        	dcx	b
 0919 78        	mov	a,b
 091A B1        	ora	c
 091B C20909    	jnz	lstbk0
 091E C9        	ret
                
                lstbk3:	; must send buffer
                	ldx	a,+0
 091F+DD7E00    	DB	0DDH,A*8+46H,+0
 0922 E60F      	ani	0fh
                	stx	a,+8
 0924+DD7708    	DB	0DDH,70H+A,+8
                	; SIZ already len-1, incl LST unit
                	ldx	a,+1	; LST server
 0927+DD7E01    	DB	0DDH,A*8+46H,+1
                	stx	a,+4	; DID
 092A+DD7704    	DB	0DDH,70H+A,+4
 092D D5        	push	d
 092E C5        	push	b
                	pushix
 092F+DDE5      	DB	0DDH,0E5H
 0931 012700    	lxi	b,CFGTBL+BSLIST+3	; MSG buffer
 0934 CD0000    	call	SNDMSG
                	popix
 0937+DDE1      	DB	0DDH,0E1H
                	pushix
 0939+DDE5      	DB	0DDH,0E5H
                	mvix	0,+7	; clear dirty flag, setup for next char
 093B+DD360700  	DB	0DDH,36H,+7,0
 093F 3C        	inr	a
 0940 CA0004    	jz	NERROR
 0943 016300    	lxi	b,MSGTOP
 0946 CDFB03    	call	RVMSGE
                	popix
 0949+DDE1      	DB	0DDH,0E1H
 094B C1        	pop	b
 094C D1        	pop	d
 094D 212D00    	lxi	h,CFGTBL+BSLIST+9
 0950 C31809    	jmp	lstbk1
                
                GETVER:
 0953 2A6100    	lhld	scbadr
 0956 2EA1      	mvi	l,scbase+05h
 0958 6E        	mov	l,m
 0959 2602      	mvi	h,002h
 095B 7D        	mov	a,l
 095C 32A901    	sta	RETCOD
 095F C9        	ret
                
                NWSTAT:
 0960 CD0000    	call	NTWKST
 0963 32A901    	sta	RETCOD
 0966 C9        	ret
                
                NWCFTB:
 0967 CD0000    	call	CNFTBL
 096A 7D        	mov	a,l
 096B 32A901    	sta	RETCOD
 096E C9        	ret
                
                LOGIN:
 096F 2AAA01    	lhld	MCRPNT
 0972 EB        	xchg
 0973 2AA701    	lhld	PARAMT
 0976 7E        	mov	a,m
 0977 326400    	sta	MSGID
 097A 23        	inx	h
 097B 010800    	lxi	b,8
                	ldir
 097E+EDB0      	DB	0EDH,0B0H
 0980 EB        	xchg
 0981 22AA01    	shld	MCRPNT
 0984 C3D803    	jmp	SNDHDR
                
                LOGOFF:
 0987 3AA701    	lda	PARAMT
 098A 326400    	sta	MSGID
 098D C3D803    	jmp	SNDHDR
                
                SDMSGU:
 0990 2AA701    	lhld	PARAMT
 0993 44        	mov	b,h
 0994 4D        	mov	c,l
 0995 CD0000    	call	SNDMSG
 0998 32A901    	sta	RETCOD
 099B C9        	ret
                
                RVMSGU:
 099C 2AA701    	lhld	PARAMT
 099F 44        	mov	b,h
 09A0 4D        	mov	c,l
 09A1 CD0000    	call	RCVMSG
 09A4 32A901    	sta	RETCOD
 09A7 C9        	ret
                
                LDERR:
 09A8 3EFF      	mvi	a,-1
 09AA E1        	pop	h
 09AB C9        	ret
                
 09AC 0000      SAVDMA:	dw	0
 09AE 000000    SAVRR:	db	0,0,0
 09B1 0000      MSCRET:	dw	0
 09B3 0000      MSCTBP:	dw	0
 09B5 00        CURMSC:	db	0
 09B6 0000      DMAADR:	dw	0
                
 09B8           CURDPB:	ds	15
 09C7           CURSCF:	ds	23
                
                ; this is used to do warm boot initialization, since most
                ; programs do not call BDOS Function 0 but instead just
                ; JMP 0. The CCP then makes this call, either upon startup
                ; and/or immediately prior to running a program.
                ; Perportedly, the CPP calls this with DE=NULL in order
                ; to scrub RSXs on warm boot.
                LDOVLY:
                WARMST:
 09DE D5        	push	d
 09DF C5        	push	b
 09E0 CD0000    	call	NTWKBT
                	; TODO: any other re-init? reset some context?
                ;	lxi	d,wbmsg
                ;	mvi	c,CBUFPR
                ;	call	next
 09E3 C1        	pop	b
 09E4 D1        	pop	d
 09E5 C30900    	jmp	next
                
                ; An example of how to process BDOS Func 60 RSX Func 113
                ; and remove one's self.
                CALRSX:
 09E8 6B        	mov	l,e
 09E9 62        	mov	h,d
 09EA 7E        	mov	a,m
 09EB 23        	inx	h
 09EC FE71      	cpi	113	; Check for RSX Func 113
 09EE C20900    	jnz	next
 09F1 7E        	mov	a,m
 09F2 23        	inx	h
 09F3 FE01      	cpi	1	; Check param count to be sure
 09F5 C20900    	jnz	next
 09F8 D5        	push	d
 09F9 5E        	mov	e,m
 09FA 23        	inx	h
 09FB 56        	mov	d,m
 09FC 211000    	lxi	h,rsxnam
 09FF 0608      	mvi	b,8
                rsxf0:			; Compare paramter to our name
 0A01 1A        	ldax	d
 0A02 BE        	cmp	m
 0A03 C20C0A    	jnz	rsxf1
 0A06 13        	inx	d
 0A07 23        	inx	h
 0A08 05        	dcr	b
 0A09 C2010A    	jnz	rsxf0
                rsxf1:
 0A0C D1        	pop	d
 0A0D C20900    	jnz	next
 0A10 115602    	lxi	d,CSTDN
 0A13 0E09      	mvi	c,CBUFPR
 0A15 CD0900    	call	next
 0A18 210900    	lxi	h,next
 0A1B 220700    	shld	start+1	; only until remove takes place...
 0A1E 3EFF      	mvi	a,0ffh
 0A20 320E00    	sta	remove
 0A23 210000    	lxi	h,0
 0A26 7D        	mov	a,l
 0A27 C9        	ret
                
 0A28           	end
