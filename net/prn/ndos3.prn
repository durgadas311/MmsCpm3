                ;	NETWORK DISK OPERATING SYSTEM FOR CP/NET on CP/M Plus v3
                ;
                ; 1982.12.31. exact date unknown
                ; 2016.05.20. adapted for RSX on CP/M Plus
                ;	Dropped support for remote console/list, due to BIOS intercept issues.
                ;	BIOS intercept is a problem because of the transient nature of RSXs.
                ;	Could add back support for "well-behaved" LIST OUTPUT users,
                ;	provided BIOS intercept is not required.
                ;
                ;TITLE	NETWORK DISK OPERATING SYSTEM FOR CP/NET SLAVE
                	maclib	z80
                
                	extrn	NTWKIN, NTWKST, CNFTBL, SNDMSG, RCVMSG, NTWKBT, NTWKDN, CFGTBL
                ;
                ;
                ;	EQUATIONS OF DATA
                ;
 000A =         LF	EQU	0AH	;LINE FEED
 000D =         CR	EQU	0DH	;CARRIAGE RETURN
 001A =         EOF	EQU	1AH	;CTRL-Z IS END OF FILE
 00FF =         LEOF	EQU	0ffh	;-1 is logical end of file
                ;
 0000 =         TOP	equ	0000h
 0004 =         CDISK	equ	0004h
 0005 =         BDOS	equ	0005h
 0080 =         SYSDMA	equ	0080h
 0100 =         TPA	equ	0100h
                
 0080 =         SCTLNG	equ	128	;ONE SECTOR LENGTH
                ;
                ;	EQUATIONS OF DOS FUNCTION
                ;
 0003 =         CCNDIN	EQU	3	;CONSOLE INPUT WITH DEVICE CODE
 0004 =         CCNDOT	EQU	4	;CONSOLE OUTPUT WITH DEVICE CODE
 0009 =         CBUFPR	EQU	9	;BUFFER PRINT
 000A =         CRDBUF	EQU	10	;READ BUFFER
 000B =         CCONST	EQU	11	;GET CONSOLE STATUS
 000C =         CGETVR	EQU	12	;GET VERSION NUMBER
 000D =         CRSDSK	EQU	13	;RESET DISK
 000F =         COPEN	EQU	15	;OPEN FILE
 0010 =         CCLOSE	EQU	16	;CLOSE FILE
 0011 =         CSRFST	EQU	17	;SEARCH FIRST
 0012 =         CSRNXT	EQU	18	;SEARCH NEXT DIRECTORY
 0014 =         CREAD	EQU	20	;READ SEQ
 0015 =         CWRITE	EQU	21	;WRITE SEQ
 001A =         CSTDMA	EQU	26	;SET DMA ADDRESS
 001B =         CGTALL	EQU	27	;get alloc vector addr
 001F =         CGTDPB	EQU	31	;get DPB addr
 0020 =         CSTUSC	EQU	32	;SET USER CODE
 0021 =         CRREAD	EQU	33	;READ SEQ
 0022 =         CRWRIT	EQU	34	;WRITE SEQ
 0025 =         CRSDSN	EQU	37	;RESET DISK BY DISK VERCTOR
 002E =         CFRSP	equ	46	; get disk free space
 0031 =         scbf	equ	49	; get/set SCB
 0032 =         CBIOS	equ	50	; direct BIOS call
 003B =         COVLY	equ	59	; load overlay
 003C =         CRSX	equ	60	; call RSX function
 006A =         CDEFPW	EQU	106	;set default password
 0070 =         CLSBLK	equ	112	; List Block - does not fit in table...
                
 0032 =         CBMAX	EQU	50	;MAX OF BDOS FUNCTION - CXMIN.. collapsed here
 0062 =         CXMIN	EQU	98	;extended bdos functions base - collapse into CBMAX
                ;
 0040 =         CNMIN	EQU	64	;MIN OF NDOS FUNCTION
 0040 =         CLOGIN	EQU	64	;LOGIN
 0041 =         CLOGOF	EQU	65	;LOGOFF
 0048 =         CNMAX	EQU	72	;MAX OF NDOS FUNCTION
                
                ;
                ;	SLAVE CONFIGRATION TABLE
                ;
                ; -1	NETWORK STATUS
                ;	0	SLAVE PROCESSOR ID
                ;	1-32 A - P DISK DEVICE CODE
                ; 33-34 CONSOLE DEVICE
                ; 35-36 LIST DEVICE
                ; 37	LIST BUFFER COUNTER
                ; 38-42 MESSAGE HEADER FOR LIST OUT
                ; 43	LISTER DEVICE NUMBER
                ; 44-171 LIST OUT DATA BUFFER
                ;
                ;	EACH DEVICE DATA USED 2 BYTES
                ;	IN 1-36
                ;	1B:BIT 7 H ON NETWORK
                ;	BIT 6 H SET UP IN DISK
                ;	BIT 0-3 DEVICE NUMBER IN MASTER
                ;	2B:MASTER ID
                ;
                ;	BIAS TO DATA IN CONFIGRATION TABLE
                ;
 0001 =         BSRID	equ	1	;client ID
 0002 =         BSDSKS	equ	2	;first byte in disk table
 0021 =         BSDSKE	equ	33	;last byte in disk table
 0022 =         BSCONS	EQU	34	;BIAS TO CONSOLE DATA
 0024 =         BSLIST	EQU	36	;BIAS TO LISTER DATA
                
 0021 =         FCBRR0	equ	33	; offset of RR0 field in FCB (not FCB in MSG)
                
 009C =         scbase	equ	09ch	; base address of SCB within page
                
 0000           	org	0
                
                ;	RSX Prefix
 0000 0000000000serial:	db	0,0,0,0,0,0
 0006 C3D401    start:	jmp	COLDST
 0009 C30000    next:	jmp	0
 000C 0000      prev:	dw	0
 000E 00        remove:	db	0	; 0ffh for remove
                nonbank:
 000F 00        	db	0
 0010 4E444F5333rsxnam:	db	'NDOS3   '
 0018 000000    loader:	db	0,0,0
                
 001B 434F505952	db	'COPYRIGHT (C) 1980-82, DIGITAL RESEARCH '
 0043 0000000000	db	0,0,0,0,0,0
                
 0049 0D0A4E444FNDERRM:	db	CR,LF,'NDOS Err $'
 0055 2C2046756ENDERR2:	db	', Func $'
                
 005D 0000      BDOSE:	dw	0
 005F 00        CURSID: db	0
 0060 0000      scbadr:	dw	0
                
 0062 00        MSGTOP:	db	0
 0063 00        MSGID:	db	0
 0064 00        	db	0	; We assume network hw/sw sets this.
 0065 00        MSGFUN:	db	0
 0066 00        MSGSIZ:	db	0
 0067           MSGDAT:	ds	256
                
 0167 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 016D C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 0173 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 0179 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 017F C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 0185 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 018B C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 0191 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 0197 C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 019D C7C7C7C7C7	db	0c7h,0c7h,0c7h,0c7h,0c7h,0c7h
 01A3           STACK:	ds	0
                
 01A3 0000      USTACK:	dw	0
 01A5 00        FUNCOD:	db	0
 01A6 0000      PARAMT:	dw	0
 01A8 00        RETCOD:	db	0
 01A9 0000      MCRPNT:	dw	0
 01AB 00        LSTUNT: db	0
 01AC 00        F5SETF: db	0
 01AD 00        FNTMPF: db	0
 01AE 0000      ORGBIO: dw	0
                
 01B0 000024    HEXMSG: db	0,0,'$'
                
 01B3 496E697420CLDERR:	db	'Init err$'
                
                COLDSE:	; BC and DE are pushed...
 01BC 11B301    	lxi	d,CLDERR
 01BF 0E09      	mvi	c,CBUFPR
 01C1 CD0900    	call	next
 01C4 210900    	lxi	h,next
 01C7 220700    	shld	start+1	; only until remove takes place...
 01CA 3EFF      	mvi	a,0ffh
 01CC 320E00    	sta	remove
 01CF C1        	pop	b
 01D0 D1        	pop	d
 01D1 C30900    	jmp	next	; pass to BDOS and hope for the best...
                
                ; Not a true cold start - we are in context of a valid BDOS call...
                COLDST:
 01D4 79        	mov	a,c
 01D5 FE31      	cpi	scbf	; hack to avoid init too soon (in LOADER3)
 01D7 CA0900    	jz	next	;
 01DA D5        	push	d
 01DB C5        	push	b
 01DC CD0000    	call	NTWKIN
 01DF B7        	ora	a
 01E0 C2BC01    	jnz	COLDSE
 01E3 216B02    	lxi	h,NDOSE
 01E6 220700    	shld	start+1
 01E9 AF        	xra	a	;
 01EA 320E00    	sta	remove	; is the required?
 01ED 216700    	lxi	h,MSGDAT
 01F0 22A901    	shld	MCRPNT
                	; Apparently, it is passe to use BDOS calls for certain things...
 01F3 110B02    	lxi	d,scbadd
 01F6 0E31      	mvi	c,scbf
 01F8 CD0900    	call	next
 01FB 226000    	shld	scbadr
 01FE 114A02    	lxi	d,CSTUP
 0201 0E09      	mvi	c,CBUFPR
 0203 CD0900    	call	next
 0206 C1        	pop	b
 0207 D1        	pop	d
 0208 C30900    	jmp	next
                
 020B 3A00      scbadd:	db	03ah, 0
                
 020D 2A6000    BDERMD:	lhld	scbadr
 0210 2EE7      	mvi	l,scbase+4bh
 0212 7E        	mov	a,m
 0213 C9        	ret
                
 0214 2A6000    SYSMSC:	lhld	scbadr
 0217 2EE6      	mvi	l,scbase+4ah
 0219 7E        	mov	a,m
 021A C9        	ret
                
 021B 2A6000    CURUSR: lhld	scbadr
 021E 2EE0      	mvi	l,scbase+44h
 0220 7E        	mov	a,m
 0221 C9        	ret
                
                ; Some sneaky programs, like ERASE.COM, use the "saved search address" from the SCB.
                ; so we must put the address there if the BDOS does not (i.e. networked drive).
 0222 2AA601    SETSRA:	lhld	PARAMT
 0225 EB        	xchg
 0226 2A6000    	lhld	scbadr
 0229 2EE3      	mvi	l,scbase+47h
 022B 73        	mov	m,e
 022C 23        	inx	h
 022D 72        	mov	m,d
 022E C9        	ret
                
 022F 2A6000    SETDSK: lhld	scbadr
 0232 2EDA      	mvi	l,scbase+3eh
 0234 3AA601    	lda	PARAMT
 0237 77        	mov	m,a
 0238 C9        	ret
                
 0239 2A6000    CURDSK: lhld	scbadr
 023C 2EDA      	mvi	l,scbase+3eh
 023E 7E        	mov	a,m
 023F C9        	ret
                
 0240 2A6000    DMAADD: lhld	scbadr
 0243 2ED8      	mvi	l,scbase+3ch
 0245 7E        	mov	a,m
 0246 23        	inx	h
 0247 66        	mov	h,m
 0248 6F        	mov	l,a
 0249 C9        	ret
                
 024A 4E444F5333CSTUP:	DB	'NDOS3 Started.',CR,LF,'$'
 025B 4E444F5333CSTDN:	DB	'NDOS3 Ending.',CR,LF,'$'
                ;wbmsg:	DB	'NDOS3 Warm-boot.',CR,LF,'$'
                
                NDOSE:
 026B 79        	mov	a,c	; must save REAL function code!
 026C 32A501    	sta	FUNCOD
 026F 326500    	sta	MSGFUN
 0272 B7        	ora	a
 0273 CAE109    	jz	WARMST
 0276 FE3B      	cpi	COVLY
 0278 CAE109    	jz	LDOVLY	; LOAD OVERLAY (RSX SCRUB) - indication of warm boot
 027B FE3C      	cpi	CRSX
 027D CAEB09    	jz	CALRSX	; used to unload CP/Net
 0280 FE32      	cpi	CBIOS
 0282 CA0900    	jz	next	; DIRECT BIOS CALL - might need to trap for LIST OUT
                
 0285 21D003    	lxi	h,FUNTBS
                NDOSE1:
 0288 79        	mov	a,c
 0289 96        	sub	m
 028A DA0900    	jc	next
 028D 23        	inx	h
 028E BE        	cmp	m
 028F 23        	inx	h
 0290 DA9D02    	jc	NDOSE2
 0293 23        	inx	h
 0294 23        	inx	h
 0295 7E        	mov	a,m
 0296 B7        	ora	a
 0297 C28802    	jnz	NDOSE1
 029A C30900    	jmp	next
                
                NDOSE2:
                	sspd	USTACK
 029D+ED73      	DB	0EDH,73H
 029F+A301      	DW	USTACK
 02A1 31A301    	lxi	sp,STACK
 02A4 4F        	mov	c,a	; modified func code!
 02A5 7E        	mov	a,m
 02A6 23        	inx	h
 02A7 66        	mov	h,m
 02A8 6F        	mov	l,a	; HL = func table
 02A9 E5        	push	h
 02AA EB        	xchg
 02AB 22A601    	shld	PARAMT
 02AE CD4002    	call	DMAADD
 02B1 22B909    	shld	DMAADR	; cache DMA address for this call...
 02B4 216600    	lxi	h,MSGSIZ
 02B7 3600      	mvi	m,0	; assume 1-byte payload
 02B9 23        	inx	h
 02BA 22A901    	shld	MCRPNT	; MSGDAT
 02BD AF        	xra	a
 02BE 47        	mov	b,a
 02BF 57        	mov	d,a
 02C0 E1        	pop	h	; specific func table in HL
 02C1 09        	dad	b
 02C2 5E        	mov	e,m	; don't need HL anymore
 02C3 93        	sub	e	; assumes A=0
 02C4 CA2604    	jz	tnextp	; code 0 = not handled by CP/Net
                NDOSE4:
 02C7 210D04    	lxi	h,NDENDR
 02CA E5        	push	h
 02CB 213603    	lxi	h,FUNTB2
 02CE 19        	dad	d
 02CF E5        	push	h
                NDOSE5:
 02D0 C1        	pop	b
 02D1 0A        	ldax	b
 02D2 57        	mov	d,a
 02D3 E67F      	ani	07fh	; strip off EOP bit
 02D5 5F        	mov	e,a
 02D6 7A        	mov	a,d
 02D7 1600      	mvi	d,0
 02D9 21EC02    	lxi	h,FUNTB3
 02DC 19        	dad	d
 02DD 5E        	mov	e,m
 02DE 23        	inx	h
 02DF 56        	mov	d,m
 02E0 03        	inx	b
 02E1 17        	ral
 02E2 DAEA02    	jc	NDOSE6
 02E5 C5        	push	b
 02E6 21D002    	lxi	h,NDOSE5
 02E9 E5        	push	h
                NDOSE6:
 02EA EB        	xchg
 02EB E9        	pchl
                
                FUNTB3:
 02EC 0000      	dw	0	; 0	000h	080h - never called
 02EE DE03      	dw	SNDHDR	; 2	002h	082h
 02F0 1904      	dw	RCVPAR	; 4	004h	084h
 02F2 6704      	dw	SNDFCB	; 6	006h	086h
 02F4 6D04      	dw	CKSFCB	; 8	008h	088h
 02F6 E204      	dw	RENTMP	; 10	00ah	08ah
 02F8 EC04      	dw	WTDTC2	; 12	00ch	08ch
 02FA F204      	dw	WTDTC8	; 14	00eh	08eh
 02FC F804      	dw	WTDTCP	; 16	010h	090h
 02FE 1105      	dw	CKSTDK	; 18	012h	092h
 0300 E505      	dw	BCSTFN	; 20	014h	094h
 0302 1906      	dw	BCSTVC	; 22	016h	096h
 0304 3307      	dw	RCVEC	; 24	018h	098h
 0306 8C07      	dw	GTFCB	; 26	01ah	09ah
 0308 9907      	dw	GTFCCR	; 28	01ch	09ch
 030A 9307      	dw	GTFCRR	; 30	01eh	09eh
 030C D107      	dw	GTDIRE	; 32	020h	0a0h
 030E FF07      	dw	GTOSCT	; 34	022h	0a2h
 0310 1608      	dw	GTMISC	; 36	024h	0a4h
 0312 5608      	dw	GTLOGV	; 38	026h	0a6h
 0314 E008      	dw	LIST1	; 40	028h	0a8h
 0316 B708      	dw	SELDSK	; 42	02ah	0aah
 0318 E908      	dw	LSTBLK	; 44	02ch	0ach
 031A 5609      	dw	GETVER	; 46	02eh	0aeh
 031C 0000      	dw	0	; 48	030h	0b0h - to be removed
 031E D708      	dw	RESET	; 50	032h	0b2h
 0320 6309      	dw	NWSTAT	; 52	034h	0b4h
 0322 6A09      	dw	NWCFTB	; 54	036h	0b6h
 0324 9309      	dw	SDMSGU	; 56	038h	0b8h
 0326 9F09      	dw	RVMSGU	; 58	03ah	0bah
 0328 7209      	dw	LOGIN	; 60	03ch	0bch
 032A 8A09      	dw	LOGOFF	; 62	03eh	0beh - generic send to server 'E'
 032C E406      	dw	STSF	; 64	040h	0c0h
 032E 1307      	dw	STSN	; 66	042h	0c2h
 0330 0000      	dw	0	; 68	044h	0c4h - to be removed
 0332 0B05      	dw	CKSTDP	;	046h	0c6h
 0334 2F05      	dw	CHKMSC	;	048h	0c8h
                
                ; hi bit is "end" signal, else keep executing routines in list...
                ; byte & 07fh is index into FUNTB3, routine to call.
                FUNTB2:
 0336 80        	db	080h			; - never called
 0001 =         fgtvr	equ	$-FUNTB2
 0337 AE        	db	0aeh			;
 0002 =         frssy	equ	$-FUNTB2
 0338 B2        	db	0b2h			;
 0003 =         frsvc	equ	$-FUNTB2
 0339 96        	db	096h			;
 0004 =         fsldk	equ	$-FUNTB2
 033A AA        	db	0aah			;
 0005 =         fopfi	equ	$-FUNTB2
 033B 080E189A  	db	008h, 00eh, 018h, 09ah	;
 0009 =         fdlfi	equ	$-FUNTB2
 033F 0698      	db	006h, 098h		;
 000B =         fsrfs	equ	$-FUNTB2
 0341 4018A0    	db	040h, 018h, 0a0h	;
 000E =         fsrnx	equ	$-FUNTB2
 0344 4218A0    	db	042h, 018h, 0a0h	;
 0011 =         frdsq	equ	$-FUNTB2
 0347 4806181CA2	db	048h, 006h, 018h, 01ch, 0a2h	; READ SEQ
 0016 =         fwrsq	equ	$-FUNTB2
 034C 480810189C	db	048h, 008h, 010h, 018h, 09ch	; WRITE SEQ
 001B =         frefi	equ	$-FUNTB2
 0351 080A0298  	db	008h, 00ah, 002h, 098h	;
 001F =         flgvc	equ	$-FUNTB2
 0355 A6        	db	0a6h			;
 0020 =         fgtal	equ	$-FUNTB2
 0356 120218A4  	db	012h, 002h, 018h, 0a4h	;
 0024 =         fwrpr	equ	$-FUNTB2
 035A 120298    	db	012h, 002h, 098h	;
 0027 =         fstfi	equ	$-FUNTB2
 035D 06189C    	db	006h, 018h, 09ch	;
 002A =         frdrr	equ	$-FUNTB2
 0360 4806181EA2	db	048h, 006h, 018h, 01eh, 0a2h	; READ RAND
 002F =         fwrrr	equ	$-FUNTB2
 0365 480810189E	db	048h, 008h, 010h, 018h, 09eh	; WRITE RAND [ZEROFIL]
 0034 =         fgtsz	equ	$-FUNTB2
 036A 06189E    	db	006h, 018h, 09eh	;
 0037 =         flkrc	equ	$-FUNTB2
 036D 080C189E  	db	008h, 00ch, 018h, 09eh	;
 003B =         fstpw	equ	$-FUNTB2
 0371 94        	db	094h			;
 003C =         flgin	equ	$-FUNTB2
 0372 3C98      	db	03ch, 098h		;
 003E =         flgof	equ	$-FUNTB2
 0374 3E98      	db	03eh, 098h		;
 0040 =         fsdnw	equ	$-FUNTB2
 0376 B8        	db	0b8h			;
 0041 =         frvnw	equ	$-FUNTB2
 0377 BA        	db	0bah			;
 0042 =         fnwst	equ	$-FUNTB2
 0378 B4        	db	0b4h			;
 0043 =         fnwcf	equ	$-FUNTB2
 0379 B6        	db	0b6h			;
 0044 =         fstcp	equ	$-FUNTB2	; ***** DUPLICATE of fstpw *****
 037A 94        	db	094h			;
 0045 =         fsvcf	equ	$-FUNTB2
 037B 3E18A4    	db	03eh, 018h, 0a4h	;
 0048 =         fgtdl	equ	$-FUNTB2
 037E 460298    	db	046h, 002h, 098h	;
 004B =         fdkms	equ	$-FUNTB2
 0381 460218A4  	db	046h, 002h, 018h, 0a4h	;
 004F =         flst1	equ	$-FUNTB2
 0385 A8        	db	0a8h
 0050 =         flstbk	equ	$-FUNTB2
 0386 AC        	db	0ach
                
                ; table of message handlers? per BDOS func?
                ; -1 = ERROR, 0 = PASSTHRU, else index into FUNTB2
                FUNTB1:
 0387 00        	db	0	; 0 -
 0388 00        	db	0	; 1 -
 0389 00        	db	0	; 2 -
 038A 00        	db	0	; 3 -
 038B 00        	db	0	; 4 -
 038C 4F        	db	flst1	; 5 -
 038D 00        	db	0	; 6 -
 038E 00        	db	0	; 7 -
 038F 00        	db	0	; 8 -
 0390 00        	db	0	; 9 -
 0391 00        	db	0	; 10 -
 0392 00        	db	0	; 11 -
 0393 01        	db	fgtvr	; 12 - GET VERSION
 0394 02        	db	frssy	; 13 - RESET DISK SYSTEM
 0395 04        	db	fsldk	; 14 - SELECT DISK
 0396 05        	db	fopfi	; 15 - OPEN FILE
 0397 05        	db	fopfi	; 16 - CLOSE FILE
 0398 0B        	db	fsrfs	; 17 - SEARCH FIRST
 0399 0E        	db	fsrnx	; 18 - SEARCH NEXT
 039A 09        	db	fdlfi	; 19 - DELETE FILE
 039B 11        	db	frdsq	; 20 - READ SEQUENTIAL
 039C 16        	db	fwrsq	; 21 - WRITE SEQUENTIAL
 039D 05        	db	fopfi	; 22 - MAKE FILE
 039E 1B        	db	frefi	; 23 - RENAME FILE
 039F 1F        	db	flgvc	; 24 - GET LOGIN VECTOR
 03A0 00        	db	0	; 25 - GET CURRENT DISK
 03A1 00        	db	0	; 26 - SET DMA ADDR
 03A2 20        	db	fgtal	; 27 - GET ALLOC ADDR
 03A3 24        	db	fwrpr	; 28 - WRITE PROTECT DISK
 03A4 1F        	db	flgvc	; 29 - GET R/O VECTOR
 03A5 27        	db	fstfi	; 30 - SET FILE ATTR
 03A6 20        	db	fgtal	; 31 - GET DPB ADDR
 03A7 00        	db	0	; 32 - GET/SET USER CODE
 03A8 2A        	db	frdrr	; 33 - READ RANDOM
 03A9 2F        	db	fwrrr	; 34 - WRITE RANDOM
 03AA 34        	db	fgtsz	; 35 - GET FILE SIZE
 03AB 34        	db	fgtsz	; 36 - SET RAND RECORD
 03AC 03        	db	frsvc	; 37 - RESET DRIVE
 03AD 03        	db	frsvc	; 38 - ACCESS DRIVE
 03AE 03        	db	frsvc	; 39 - FREE DRIVE
 03AF 2F        	db	fwrrr	; 40 - WRITE RAND ZERO FILL
 03B0 00        	db	0	; 41 - TEST & WRITE RECORD
 03B1 37        	db	flkrc	; 42 - LOCK RECORD
 03B2 37        	db	flkrc	; 43 - UNLOCK RECORD
 03B3 00        	db	0	; 44 - SET MULTISECTOR COUNT
 03B4 00        	db	0	; 45 - SET BDOS ERR MODE
 03B5 4B        	db	fdkms	; 46 - GET DISK FREE SPACE
 03B6 00        	db	0	; 47 - CHAIN TO PROGRAM (***? can't chain to remote program)
 03B7 44        	db	fstcp	; 48 - FLUSH BUFFERS
 03B8 00        	db	0	; 49 - GET/SET SCB
                	; 50..63 - handled by special case
 0032 =         NFTB1	equ	$-FUNTB1
                
                	; if any are passed to server, must preserve FUNCOD as real code
                FUNTBX:
 03B9 44        	db	fstcp	; 98 - FREE BLOCKS
 03BA 05        	db	fopfi	; 99 - TRUNCATE FILE
 03BB 00        	db	0	; 100 - SET DIR LABEL ****support?****
 03BC 48        	db	fgtdl	; 101 - GET DIR LABEL BYTE
 03BD 48        	db	fgtdl	; 102 - READ FILE DATE-PWD MODE
 03BE 00        	db	0	; 103 - WRITE FILE XFCB ****support?****
 03BF 00        	db	0	; 104 - SET DATE & TIME
 03C0 00        	db	0	; 105 - GET DATE & TIME - can't support here, use SEND NW MESG
 03C1 3B        	db	fstpw	; 106 - SET DEF PASSWORD
 03C2 00        	db	0	; 107 - GET SERIAL NUMBER
 03C3 00        	db	0	; 108 - GET/SET PGM RET CODE
 03C4 00        	db	0	; 109 - GET/SET CONS MODE
 03C5 00        	db	0	; 110 - GET/SET OUT DELIM
 03C6 00        	db	0	; 111 - PRINT BLOCK
 03C7 50        	db	flstbk	; 112 - LIST BLOCK
 000F =         NFTBX	equ	$-FUNTBX
                
                	; CP/Net functions, not known to BDOS
                FUNTBN:
 03C8 3C        	db	flgin	; 64 - LOGIN
 03C9 3E        	db	flgof	; 65 - LOGOFF
 03CA 40        	db	fsdnw	; 66 - SEND NW MESG
 03CB 41        	db	frvnw	; 67 - RECV NW MESG
 03CC 42        	db	fnwst	; 68 - GET NW STATUS
 03CD 43        	db	fnwcf	; 69 - GET NW CFG
 03CE 44        	db	fstcp	; 70 - SET COMP ATTR
 03CF 45        	db	fsvcf	; 71 - GET SERVER CFG
 0008 =         NFTBN	equ	$-FUNTBN
                
                FUNTBS:
 03D0 0032      	db	0,NFTB1
 03D2 8703      	dw	FUNTB1
 03D4 4008      	db	CNMIN,NFTBN
 03D6 C803      	dw	FUNTBN
 03D8 620F      	db	CXMIN,NFTBX
 03DA B903      	dw	FUNTBX
 03DC 0000      	dw	0
                
                SNDHDR:
 03DE 216200    	lxi	h,MSGTOP
 03E1 3600      	mvi	m,0	; FMT = CP/Net
 03E3 23        	inx	h
                	; DID (server ID) already set
 03E4 23        	inx	h
                	; SID, our node ID, will be set by SNIOS
 03E5 23        	inx	h
 03E6 23        	inx	h
 03E7 23        	inx	h
 03E8 EB        	xchg		; DE = MSGDAT
 03E9 2AA901    	lhld	MCRPNT
 03EC B7        	ora	a
                	dsbc	d	; HL -= DE
 03ED+ED52      	DB	0EDH,D*8+42H
 03EF CAF603    	jz	SNDHD1	; size set already
 03F2 2B        	dcx	h	; SIZ is -1
 03F3 EB        	xchg
 03F4 2B        	dcx	h	; point to SIZ byte
 03F5 73        	mov	m,e	; SIZ = length - 1
                SNDHD1:
 03F6 016200    	lxi	b,MSGTOP
                SDMSGE:
 03F9 CD0000    	call	SNDMSG
 03FC 3C        	inr	a
 03FD C0        	rnz
 03FE C30604    	jmp	NERROR
                
                RVMSGE:
 0401 CD0000    	call	RCVMSG
 0404 3C        	inr	a
 0405 C0        	rnz
                NERROR:
 0406 21FFFF    	lxi	h,-1
 0409 7C        	mov	a,h
 040A C31004    	jmp	NDEND
                
                NDENDR:
 040D 3AA801    	lda	RETCOD
                NDEND:
 0410 EB        	xchg
 0411 2AA301    	lhld	USTACK
 0414 F9        	sphl
 0415 EB        	xchg
 0416 6F        	mov	l,a
 0417 44        	mov	b,h
 0418 C9        	ret
                
                RCVPAR:
 0419 016200    	lxi	b,MSGTOP
 041C CD0104    	call	RVMSGE
 041F 216700    	lxi	h,MSGDAT
 0422 22A901    	shld	MCRPNT
 0425 C9        	ret
                
                tnextp:	; abandon call to real BDOS
 0426 2AA301    	lhld	USTACK
 0429 F9        	sphl
                TBDOSP:
 042A 2AA601    	lhld	PARAMT
 042D EB        	xchg
 042E 3AA501    	lda	FUNCOD
 0431 4F        	mov	c,a
 0432 C30900    	jmp	next
                
                CKFCBD:
 0435 2AA601    	lhld	PARAMT
 0438 7E        	mov	a,m
 0439 3D        	dcr	a
 043A F24004    	jp	CKFCB1
 043D CD3902    	call	CURDSK
                CKFCB1:
 0440 5F        	mov	e,a
 0441 1600      	mvi	d,0
 0443 CD4F04    	call	CHKDSK
 0446 FEFF      	cpi	0ffh
 0448 C0        	rnz
 0449 CD2A04    	call	TBDOSP
 044C C31004    	jmp	NDEND
                
                CHKDSK:
 044F 210200    	lxi	h,CFGTBL+BSDSKS
 0452 19        	dad	d
 0453 19        	dad	d
 0454 7E        	mov	a,m
 0455 17        	ral
 0456 DA5C04    	jc	CHKDS1	; remote disk
 0459 3EFF      	mvi	a,0ffh
 045B C9        	ret
                CHKDS1:
 045C 1F        	rar
 045D E60F      	ani	00fh	; remote server disk number
 045F 3C        	inr	a
 0460 4F        	mov	c,a
 0461 23        	inx	h
 0462 7E        	mov	a,m	; remote server node ID
 0463 326300    	sta	MSGID
 0466 C9        	ret
                
                SNDFCB:
 0467 CD6D04    	call	CKSFCB
 046A C3DE03    	jmp	SNDHDR
                
                CKSFCB:
 046D CD3504    	call	CKFCBD		; check FCB disk for local/remote (local does not return)
                STFCB:
 0470 CD1B02    	call	CURUSR
 0473 2AA901    	lhld	MCRPNT
 0476 77        	mov	m,a	; put USR in msg buf
 0477 23        	inx	h
 0478 71        	mov	m,c	; put DSK in msg buf
 0479 23        	inx	h
 047A E5        	push	h
 047B EB        	xchg
 047C 2AA601    	lhld	PARAMT
 047F 23        	inx	h
 0480 012300    	lxi	b,35
                	ldir	; copy FCB to msg buf
 0483+EDB0      	DB	0EDH,0B0H
 0485 EB        	xchg
 0486 22A901    	shld	MCRPNT
 0489 AF        	xra	a
 048A 32AD01    	sta	FNTMPF
 048D 32AC01    	sta	F5SETF
 0490 E1        	pop	h	; point to start of FCB name in msg buf
                SUBTMP:
 0491 CDB304    	call	CKDOL	; substitute $NN for $$$ at start of name
 0494 0600      	mvi	b,0
 0496 09        	dad	b	; skip rest of 3 chars
 0497 23        	inx	h
 0498 7E        	mov	a,m
 0499 E680      	ani	080h	; check f5' attr - partial close/delete XFCBs only
 049B 23        	inx	h
 049C CAA904    	jz	SUBTM1
 049F 7E        	mov	a,m
 04A0 E680      	ani	080h	; check f6' attr - assign passwd/set byte count
 04A2 C2A904    	jnz	SUBTM1
 04A5 3D        	dcr	a
 04A6 32AC01    	sta	F5SETF
                SUBTM1:
 04A9 3AAD01    	lda	FNTMPF
 04AC 87        	add	a
 04AD 32AD01    	sta	FNTMPF
 04B0 23        	inx	h
 04B1 23        	inx	h
 04B2 23        	inx	h
                CKDOL:
 04B3 0E03      	mvi	c,3
 04B5 3E24      	mvi	a,'$'
                CKDOL1:
 04B7 BE        	cmp	m
 04B8 C0        	rnz
 04B9 23        	inx	h
 04BA 0D        	dcr	c
 04BB C2B704    	jnz	CKDOL1
 04BE EB        	xchg
 04BF 21AD01    	lxi	h,FNTMPF
 04C2 34        	inr	m
 04C3 1B        	dcx	d
 04C4 3A0100    	lda	CFGTBL+BSRID	; client (slave) ID
 04C7 47        	mov	b,a
 04C8 CDD804    	call	HEXDIG
 04CB 1B        	dcx	d
 04CC 78        	mov	a,b
 04CD 1F        	rar
 04CE 1F        	rar
 04CF 1F        	rar
 04D0 1F        	rar
 04D1 CDD804    	call	HEXDIG
 04D4 13        	inx	d
 04D5 13        	inx	d
 04D6 EB        	xchg
 04D7 C9        	ret
                
                HEXDIG:
 04D8 E60F      	ani	00fh
 04DA C690      	adi	90h
 04DC 27        	daa
 04DD CE40      	aci	40h
 04DF 27        	daa
 04E0 12        	stax	d
 04E1 C9        	ret
                
                RENTMP:
 04E2 2AA901    	lhld	MCRPNT
 04E5 11EDFF    	lxi	d,-19
 04E8 19        	dad	d
 04E9 C39104    	jmp	SUBTMP
                
                WTDTC2:	; hardly worth ldir, should just hard-code
 04EC 010200    	lxi	b,2
 04EF C3FB04    	jmp	WTDTCS
                WTDTC8:
 04F2 010800    	lxi	b,8
 04F5 C3FB04    	jmp	WTDTCS
                
                WTDTCP:
 04F8 018000    	lxi	b,SCTLNG
                WTDTCS:
 04FB 2AA901    	lhld	MCRPNT
 04FE EB        	xchg
 04FF 2AB909    	lhld	DMAADR
                	ldir
 0502+EDB0      	DB	0EDH,0B0H
 0504 EB        	xchg
 0505 22A901    	shld	MCRPNT
 0508 C3DE03    	jmp	SNDHDR
                
                CKSTDP:
 050B 3AA601    	lda	PARAMT
 050E C31405    	jmp	STDSK0
                CKSTDK:
 0511 CD3902    	call	CURDSK
                STDSK0:
 0514 5F        	mov	e,a
 0515 1600      	mvi	d,000h
 0517 CD4F04    	call	CHKDSK
 051A FEFF      	cpi	0ffh
 051C C22505    	jnz	STDSK1
 051F CD2A04    	call	TBDOSP
 0522 C31004    	jmp	NDEND
                
                STDSK1:	; server already set in MSGID
 0525 2AA901    	lhld	MCRPNT
 0528 0D        	dcr	c
 0529 71        	mov	m,c
 052A 23        	inx	h
 052B 22A901    	shld	MCRPNT
 052E C9        	ret
                
                ; Handle multi-sector count
                CHKMSC:
 052F CD3504    	call	CKFCBD	; does not return if disk is local
                	; From here on, we know the disk is remote
 0532 CD1402    	call	SYSMSC
 0535 FE01      	cpi	1
                	; skip multi-sector handling if count == 1
 0537 C8        	rz	; returns to NDOSE5, goto next opcode.
 0538 32B809    	sta	CURMSC
 053B E1        	pop	h	; NDOSE5 ret addr
 053C 22B409    	shld	MSCRET
 053F E1        	pop	h	; FUNTB2 pointer (past CHKMSC)
 0540 22B609    	shld	MSCTBP
 0543 3AA501    	lda	FUNCOD
 0546 FE21      	cpi	CRREAD
 0548 DA9C05    	jc	CKMSC2
                	; save rand rec position
 054B 2AA601    	lhld	PARAMT	; FCB
 054E 012100    	lxi	b,FCBRR0
 0551 09        	dad	b
 0552 5E        	mov	e,m
 0553 23        	inx	h
 0554 56        	mov	d,m
 0555 23        	inx	h
 0556 7E        	mov	a,m
 0557 32B309    	sta	SAVRR+2
 055A EB        	xchg
 055B 22B109    	shld	SAVRR
 055E C39C05    	jmp	CKMSC2
                CKMSC0:
 0561 3AA801    	lda	RETCOD
 0564 B7        	ora	a
 0565 C2A805    	jnz	CKMSC1
 0568 3AB809    	lda	CURMSC
 056B 3D        	dcr	a
 056C 32B809    	sta	CURMSC
 056F CAA805    	jz	CKMSC1
 0572 216700    	lxi	h,MSGDAT
 0575 22A901    	shld	MCRPNT
 0578 2AB909    	lhld	DMAADR
 057B 018000    	lxi	b,128
 057E 09        	dad	b
 057F 22B909    	shld	DMAADR
 0582 3AA501    	lda	FUNCOD
 0585 FE21      	cpi	CRREAD
 0587 DA9C05    	jc	CKMSC2
                	; advance random record number...
 058A 2AA601    	lhld	PARAMT	; FCB
 058D 012100    	lxi	b,FCBRR0
 0590 09        	dad	b
 0591 34        	inr	m
 0592 C29C05    	jnz	CKMSC2
 0595 23        	inx	h
 0596 34        	inr	m
 0597 C29C05    	jnz	CKMSC2
 059A 23        	inx	h
 059B 34        	inr	m
                CKMSC2:
 059C 216105    	lxi	h,CKMSC0
 059F E5        	push	h
 05A0 2AB609    	lhld	MSCTBP
 05A3 E5        	push	h
 05A4 2AB409    	lhld	MSCRET
 05A7 E9        	pchl	; jmp NDOSE5 - do next opcode. Returns to CKMSC0 when done.
                
                ; done with multi-sec read/write, restore everything.
                CKMSC1:	; could be EOF, or some physical error
 05A8 3AA501    	lda	FUNCOD
 05AB FE21      	cpi	CRREAD
 05AD DAD405    	jc	CKMSC3
                	; restore file position...
 05B0 3AB309    	lda	SAVRR+2
 05B3 2AB109    	lhld	SAVRR
 05B6 EB        	xchg
 05B7 2AA601    	lhld	PARAMT	; FCB
 05BA 012100    	lxi	b,FCBRR0
 05BD 09        	dad	b
 05BE 73        	mov	m,e
 05BF 23        	inx	h
 05C0 72        	mov	m,d
 05C1 23        	inx	h
 05C2 77        	mov	m,a
                	; If the program's next op is random read/write, then we are
                	; finished now. But, if the next op is sequential then
                	; we must set the file position back to where it started.
                	; Use READ RAND to set file position. Response is ignored.
 05C3 3E21      	mvi	a,CRREAD
 05C5 326500    	sta	MSGFUN
 05C8 216700    	lxi	h,MSGDAT
 05CB 22A901    	shld	MCRPNT
 05CE CD6704    	call	SNDFCB
 05D1 CD1904    	call	RCVPAR
                	; ignore data/error returned by CRREAD
                CKMSC3:
 05D4 2600      	mvi	h,0	; success returns NREC=0
 05D6 3AA801    	lda	RETCOD
 05D9 B7        	ora	a
 05DA C8        	rz		; NDENDR
 05DB 3AB809    	lda	CURMSC	; if error ended us early, need num sec completed.
 05DE 5F        	mov	e,a	; save where SYSMSC won't destroy it
 05DF CD1402    	call	SYSMSC
 05E2 93        	sub	e
 05E3 67        	mov	h,a
 05E4 C9        	ret		; NDENDR
                
                
                BCSTFN:	; broadcast func (set default password, set compat attrs)
 05E5 110000    	lxi	d,0
 05E8 CD6E06    	call	FORALL
 05EB 79        	mov	a,c
 05EC 0C        	inr	c
 05ED CAD406    	jz	RSTALL	; no (more) servers, reset and return
 05F0 326300    	sta	MSGID
 05F3 2AA601    	lhld	PARAMT
 05F6 EB        	xchg
 05F7 2AA901    	lhld	MCRPNT
 05FA 3AA501    	lda	FUNCOD
 05FD FE38      	cpi	CDEFPW-CBMAX	; a.k.a. 106 - set def password
 05FF CA0606    	jz	BCST1
                	; fn 70 - set compat attr
 0602 73        	mov	m,e
 0603 C31006    	jmp	BCST2
                BCST1:
 0606 010800    	lxi	b,8
 0609 EB        	xchg
                	ldir
 060A+EDB0      	DB	0EDH,0B0H
 060C EB        	xchg
 060D 22A901    	shld	MCRPNT
                BCST2:
 0610 CDDE03    	call	SNDHDR
 0613 CD1904    	call	RCVPAR
 0616 C3E505    	jmp	BCSTFN
                
                BCSTVC:	; broadcast "drive vector" funcs to all servers
 0619 2AA601    	lhld	PARAMT
 061C EB        	xchg
                BCSTV1:
 061D CD6E06    	call	FORALL
 0620 E5        	push	h
 0621 79        	mov	a,c
 0622 0C        	inr	c
 0623 C23806    	jnz	BCSTV2	; some remote drives to do
 0626 CDD406    	call	RSTALL
 0629 D1        	pop	d
 062A 3AA501    	lda	FUNCOD
 062D FE25      	cpi	CRSDSN	; reset drive
 062F C0        	rnz		; only reset drive is passed to local
 0630 4F        	mov	c,a
 0631 CD0900    	call	next
 0634 32A801    	sta	RETCOD
 0637 C9        	ret
                BCSTV2:
 0638 326300    	sta	MSGID
 063B 216700    	lxi	h,MSGDAT
 063E 73        	mov	m,e
 063F 23        	inx	h
 0640 72        	mov	m,d
 0641 23        	inx	h
 0642 22A901    	shld	MCRPNT
 0645 CDDE03    	call	SNDHDR
 0648 3AA501    	lda	FUNCOD
 064B D626      	sui	38	; access drive
 064D CA6706    	jz	BCSTV3
 0650 F5        	push	psw
 0651 CD1904    	call	RCVPAR
 0654 F1        	pop	psw
 0655 D1        	pop	d
 0656 3D        	dcr	a
 0657 CA1D06    	jz	BCSTV1
 065A 3A6700    	lda	MSGDAT
 065D 32A801    	sta	RETCOD
 0660 3C        	inr	a
 0661 CAD406    	jz	RSTALL
 0664 C31D06    	jmp	BCSTV1
                
                BCSTV3:
 0667 CD3307    	call	RCVEC
 066A D1        	pop	d
 066B C31D06    	jmp	BCSTV1
                
                ; Returns vector of all disks for given server,
                ; each call skips servers already reported.
                FORALL:
 066E 210200    	lxi	h,CFGTBL+BSDSKS
 0671 D5        	push	d
 0672 110000    	lxi	d,0
 0675 01FF10    	lxi	b,010ffh
                FORAL1:
 0678 7E        	mov	a,m
 0679 17        	ral
 067A D2B806    	jnc	FORAL6	; local
 067D 17        	ral
 067E DAB806    	jc	FORAL6	; "already did" flag
 0681 23        	inx	h
 0682 79        	mov	a,c
 0683 FEFF      	cpi	0ffh
 0685 CA9006    	jz	FORAL2
 0688 BE        	cmp	m
 0689 CA9106    	jz	FORAL3
 068C 2B        	dcx	h
 068D C3B806    	jmp	FORAL6
                FORAL2:
 0690 4E        	mov	c,m
                FORAL3:
 0691 2B        	dcx	h
 0692 7E        	mov	a,m
 0693 F640      	ori	040h	; mark this one done...
 0695 77        	mov	m,a
 0696 E3        	xthl
 0697 CDCC06    	call	RHLR0
 069A D2C306    	jnc	FORAL7
 069D E3        	xthl
 069E 7E        	mov	a,m
 069F E60F      	ani	00fh
 06A1 3C        	inr	a
 06A2 E5        	push	h
 06A3 210100    	lxi	h,1
                FORAL4:
 06A6 3D        	dcr	a
 06A7 CAAE06    	jz	FORAL5
 06AA 29        	dad	h
 06AB C3A606    	jmp	FORAL4
                FORAL5:
 06AE 7B        	mov	a,e
 06AF B5        	ora	l
 06B0 5F        	mov	e,a
 06B1 7A        	mov	a,d
 06B2 B4        	ora	h
 06B3 57        	mov	d,a
 06B4 E1        	pop	h
 06B5 C3C406    	jmp	FORAL8
                FORAL6:
 06B8 E3        	xthl
 06B9 CDCC06    	call	RHLR0
 06BC D2C306    	jnc	FORAL7
 06BF 7C        	mov	a,h
 06C0 F680      	ori	080h
 06C2 67        	mov	h,a
                FORAL7:
 06C3 E3        	xthl
                FORAL8:
 06C4 23        	inx	h
 06C5 23        	inx	h
 06C6 05        	dcr	b
 06C7 C27806    	jnz	FORAL1
 06CA E1        	pop	h
 06CB C9        	ret
                
                RHLR0:
 06CC B7        	ora	a
 06CD 7C        	mov	a,h
 06CE 1F        	rar
 06CF 67        	mov	h,a
 06D0 7D        	mov	a,l
 06D1 1F        	rar
 06D2 6F        	mov	l,a
 06D3 C9        	ret
                
                ; Reset from FORALL
                RSTALL:
 06D4 210200    	lxi	h,CFGTBL+BSDSKS
 06D7 0610      	mvi	b,16
                RSTAL1:
 06D9 7E        	mov	a,m
 06DA E68F      	ani	08fh	; clear FORALL iterator flag(s)
 06DC 77        	mov	m,a
 06DD 23        	inx	h
 06DE 23        	inx	h
 06DF 05        	dcr	b
 06E0 C2D906    	jnz	RSTAL1
 06E3 C9        	ret
                
                STSF:	; setup Search First
 06E4 3EFF      	mvi	a,0ffh
 06E6 325F00    	sta	CURSID	; assume local
 06E9 2AA601    	lhld	PARAMT
 06EC 7E        	mov	a,m
 06ED FE3F      	cpi	'?'
 06EF C2FD06    	jnz	STSF1
 06F2 CD1105    	call	CKSTDK
 06F5 0EBF      	mvi	c,'?'+080h	; "drive" code with CP/M3 flag
 06F7 CD7004    	call	STFCB
 06FA C30707    	jmp	STSF2
                STSF1:
 06FD 2AA901    	lhld	MCRPNT
 0700 23        	inx	h
 0701 22A901    	shld	MCRPNT
 0704 CD6D04    	call	CKSFCB	; if remote, set FCB in msg
                STSF2:
 0707 3A6300    	lda	MSGID
 070A 325F00    	sta	CURSID
 070D CD2202    	call	SETSRA
 0710 C3DE03    	jmp	SNDHDR
                
                STSN:	; setup Search Next
 0713 3A5F00    	lda	CURSID
 0716 FEFF      	cpi	0ffh	; was Search First a local op?
 0718 C22107    	jnz	STSN1
 071B CD2A04    	call	TBDOSP
 071E C31004    	jmp	NDEND
                STSN1:
 0721 326300    	sta	MSGID
 0724 CD1B02    	call	CURUSR
 0727 2AA901    	lhld	MCRPNT
 072A 23        	inx	h
 072B 77        	mov	m,a
 072C 23        	inx	h
 072D 22A901    	shld	MCRPNT
 0730 C3DE03    	jmp	SNDHDR
                
                RCVEC:
 0733 CD1904    	call	RCVPAR
 0736 216800    	lxi	h,MSGDAT+1
 0739 22A901    	shld	MCRPNT
 073C 56        	mov	d,m	; D = ext err code
 073D 2B        	dcx	h
 073E 7E        	mov	a,m
 073F 32A801    	sta	RETCOD
 0742 2B        	dcx	h
 0743 7E        	mov	a,m	; SIZ
 0744 3D        	dcr	a
 0745 2600      	mvi	h,0	; ensure H=0 to avoid confusion with extended errors
 0747 C0        	rnz		; not extended error - skip rest
 0748 CD0D02    	call	BDERMD
 074B 3C        	inr	a
 074C C25307    	jnz	NDERR
 074F EB        	xchg
 0750 C30D04    	jmp	NDENDR
                
                NDERR:
 0753 D5        	push	d
 0754 114900    	lxi	d,NDERRM
 0757 CD8707    	call	PRMSG
 075A F1        	pop	psw	; A = (D), ext err code
 075B F5        	push	psw	; Fix bug in NDOS.ASM
 075C CD7707    	call	HEXOUT
 075F 115500    	lxi	d,NDERR2
 0762 CD8707    	call	PRMSG
 0765 3AA501    	lda	FUNCOD
 0768 CD7707    	call	HEXOUT
 076B CD0D02    	call	BDERMD
 076E E1        	pop	h	; H = ext err code
 076F FEFE      	cpi	0feh
 0771 CA0D04    	jz	NDENDR
 0774 C30000    	jmp	TOP	; abort program
                
                HEXOUT:
 0777 11B101    	lxi	d,HEXMSG+1	; do low nibble first
 077A F5        	push	psw
 077B CDD804    	call	HEXDIG
 077E F1        	pop	psw
 077F 1F        	rar
 0780 1F        	rar
 0781 1F        	rar
 0782 1F        	rar
 0783 1B        	dcx	d	; back to hi nibble
 0784 CDD804    	call	HEXDIG
                PRMSG:
 0787 0E09      	mvi	c,CBUFPR
 0789 C30900    	jmp	next
                
                GTFCB:
 078C 3AAC01    	lda	F5SETF
 078F 3C        	inr	a
 0790 C29907    	jnz	GTFCCR
                GTFCRR:
 0793 012300    	lxi	b,35	; FCB+CR+RR (-drive)
 0796 C39C07    	jmp	GTFC1
                GTFCCR:
 0799 012000    	lxi	b,32	; FCB+CR, not RR
                GTFC1:
 079C CDB007    	call	RSTMP	; un-do temp file subst
 079F 2AA601    	lhld	PARAMT
 07A2 23        	inx	h
 07A3 EB        	xchg
 07A4 2AA901    	lhld	MCRPNT
 07A7 23        	inx	h
                	ldir
 07A8+EDB0      	DB	0EDH,0B0H
 07AA 22A901    	shld	MCRPNT
 07AD 2600      	mvi	h,0	; ensure H=0 to avoid confusion with extended errors
 07AF C9        	ret
                
                RSTMP:	; restore TMP filename
 07B0 3AAD01    	lda	FNTMPF
 07B3 1F        	rar
 07B4 1F        	rar
 07B5 D2C207    	jnc	RSTMP1
 07B8 2AA901    	lhld	MCRPNT
 07BB 23        	inx	h
 07BC 23        	inx	h
 07BD 3624      	mvi	m,'$'
 07BF 23        	inx	h
 07C0 3624      	mvi	m,'$'
                RSTMP1:
 07C2 17        	ral
 07C3 D0        	rnc
 07C4 2AA901    	lhld	MCRPNT
 07C7 110A00    	lxi	d,10
 07CA 19        	dad	d
 07CB 3624      	mvi	m,'$'
 07CD 23        	inx	h
 07CE 3624      	mvi	m,'$'
 07D0 C9        	ret
                
                GTDIRE:
 07D1 3AA801    	lda	RETCOD
 07D4 3C        	inr	a
 07D5 2600      	mvi	h,0	; ensure H=0 to avoid confusion with extended errors
 07D7 C8        	rz
 07D8 2AA901    	lhld	MCRPNT
                	; Special case for CP/M3 full search, although really
                	; any SEARCH that wants to be fully compatible with CP/M
                	; neuances - specifically that the DMA buffer contains the
                	; full directory sector after a search.
                	;
                	; CP/Net breaks SEARCH funcs 17/18 by only returning
                	; one DIRENT at a time, while the local BDOS calls
                	; actually fill the DMA buffer with the directory sector.
                	; DIR.COM depends on this for getting timestamps.
 07DB 3A6600    	lda	MSGSIZ
 07DE B7        	ora	a	; 00 = 1 byte, dir code only, DMA buf implied
 07DF C8        	rz		; NDENDR will return dir code to user
 07E0 FE24      	cpi	32+4	; anything 1 < x < 128 really, pick a number (expect 32).
 07E2 D20708    	jnc	STOSC0	; assume 128 bytes, copy all to DMA buffer.
                	; single DIRENT returned, copy to correct location.
 07E5 EB        	xchg
 07E6 2AB909    	lhld	DMAADR
 07E9 3AA801    	lda	RETCOD
 07EC 3C        	inr	a
 07ED 012000    	lxi	b,32
                GTDIR1:
 07F0 3D        	dcr	a
 07F1 CAF807    	jz	GTDIR2
 07F4 09        	dad	b
 07F5 C3F007    	jmp	GTDIR1
                GTDIR2:
 07F8 EB        	xchg
                	ldir
 07F9+EDB0      	DB	0EDH,0B0H
 07FB 22A901    	shld	MCRPNT
 07FE C9        	ret
                
                GTOSCT:
 07FF 3AA801    	lda	RETCOD
 0802 B7        	ora	a
 0803 C0        	rnz
 0804 218C00    	lxi	h,MSGDAT+37
                STOSC0:
                	lded	DMAADR
 0807+ED5B      	DB	0EDH,5BH
 0809+B909      	DW	DMAADR
 080B 018000    	lxi	b,SCTLNG
                	ldir
 080E+EDB0      	DB	0EDH,0B0H
 0810 22A901    	shld	MCRPNT
 0813 2600      	mvi	h,0	; ensure H=0 to avoid confusion with extended errors
 0815 C9        	ret
                
                GTMISC:
 0816 2AA901    	lhld	MCRPNT
 0819 2B        	dcx	h	; drop error byte
 081A 3AA501    	lda	FUNCOD
 081D FE1B      	cpi	CGTALL	; get alloc addr
 081F CA5108    	jz	GTMSC3	; for alloc vec, just leave in message buffer
 0822 FE2E      	cpi	CFRSP	; get disk free space
 0824 CA3608    	jz	GTMSC4
 0827 FE1F      	cpi	CGTDPB	; get DPB addr
 0829 C24408    	jnz	GTMSC1
                	; fn 31 - get DPB
 082C 11BB09    	lxi	d,CURDPB
 082F D5        	push	d
 0830 011000    	lxi	b,16	; should be 15 for CP/M 2.2, 17 for CP/M 3
 0833 C34B08    	jmp	GTMSC2
                GTMSC4:
 0836 110000    	lxi	d,0
 0839 D5        	push	d
                	lded	DMAADR
 083A+ED5B      	DB	0EDH,5BH
 083C+B909      	DW	DMAADR
 083E 010300    	lxi	b,3
 0841 C34B08    	jmp	GTMSC2
                
                GTMSC1:		; fn 71 - get server config
 0844 11CA09    	lxi	d,CURSCF
 0847 D5        	push	d
 0848 011700    	lxi	b,23
                GTMSC2:
                	ldir
 084B+EDB0      	DB	0EDH,0B0H
 084D 22A901    	shld	MCRPNT
 0850 E1        	pop	h
                GTMSC3:
 0851 7D        	mov	a,l
 0852 32A801    	sta	RETCOD
 0855 C9        	ret
                
                GTLOGV:
 0856 112100    	lxi	d,CFGTBL+BSDSKE
 0859 210000    	lxi	h,0
 085C 0610      	mvi	b,16
                GTLGV1:
 085E 1A        	ldax	d
 085F 1B        	dcx	d
 0860 4F        	mov	c,a
 0861 1A        	ldax	d
 0862 1B        	dcx	d
 0863 29        	dad	h
 0864 CD7008    	call	DRVSTS
 0867 05        	dcr	b
 0868 C25E08    	jnz	GTLGV1
 086B 7D        	mov	a,l
 086C 32A801    	sta	RETCOD
 086F C9        	ret
                
                ; Get a drive's status (i.e. GET LOGIN VECTOR)
                ; B = local drive num
                ; A = net cfg byte, bit-7 = remote, bit-0:3 = remote drive num
                ; Returns DE bit-0 = drive's status
                DRVSTS:
 0870 D5        	push	d
 0871 C5        	push	b
 0872 E5        	push	h
 0873 17        	ral
 0874 DA8108    	jc	DRVST1
                	; drive is local
 0877 C5        	push	b
 0878 CD2A04    	call	TBDOSP
 087B C1        	pop	b
 087C 05        	dcr	b
 087D EB        	xchg
 087E C39D08    	jmp	DRVST2
                
                DRVST1:	; drive is remote
 0881 1F        	rar
 0882 E60F      	ani	00fh
 0884 47        	mov	b,a	; remote drive number
 0885 79        	mov	a,c	; server ID
 0886 326300    	sta	MSGID
 0889 216700    	lxi	h,MSGDAT
 088C 22A901    	shld	MCRPNT
 088F C5        	push	b
 0890 CDDE03    	call	SNDHDR
 0893 CD1904    	call	RCVPAR
 0896 C1        	pop	b
 0897 2AA901    	lhld	MCRPNT
 089A 5E        	mov	e,m
 089B 23        	inx	h
 089C 56        	mov	d,m
                DRVST2:	; DE = vector of active drives
 089D 78        	mov	a,b
 089E B7        	ora	a
 089F CAAC08    	jz	DRVST4
                DRVST3:	; get drive 'B' bit to LSB
 08A2 7A        	mov	a,d
 08A3 1F        	rar
 08A4 57        	mov	d,a
 08A5 7B        	mov	a,e
 08A6 1F        	rar
 08A7 5F        	mov	e,a
 08A8 05        	dcr	b
 08A9 C2A208    	jnz	DRVST3
                DRVST4:
 08AC 1600      	mvi	d,000h
 08AE 7B        	mov	a,e
 08AF E601      	ani	001h
 08B1 5F        	mov	e,a
 08B2 E1        	pop	h
 08B3 19        	dad	d
 08B4 C1        	pop	b
 08B5 D1        	pop	d
 08B6 C9        	ret
                
                SELDSK:
 08B7 3AA601    	lda	PARAMT
 08BA 1600      	mvi	d,000h
 08BC 5F        	mov	e,a
 08BD CD4F04    	call	CHKDSK
 08C0 FEFF      	cpi	0ffh	; local disk
 08C2 CA2A04    	jz	TBDOSP	; let BDOS handle
 08C5 CD2F02    	call	SETDSK
 08C8 2AA901    	lhld	MCRPNT
 08CB 0D        	dcr	c
 08CC 71        	mov	m,c
 08CD 23        	inx	h
 08CE 22A901    	shld	MCRPNT
 08D1 CDDE03    	call	SNDHDR
 08D4 C33307    	jmp	RCVEC
                
                RESET:	; anything to do? BDOS will be called... but BDOS does not call 0005 (us)?
 08D7 216700    	lxi	h,MSGDAT
 08DA 22A901    	shld	MCRPNT
                	; A: cannot be remote...
 08DD C30900    	jmp	next
                
                LIST1:
 08E0 11A601    	lxi	d,PARAMT
 08E3 010100    	lxi	b,1
 08E6 C3F608    	jmp	lstbk2
                
                LSTBLK:
 08E9 2AA601    	lhld	PARAMT
 08EC 5E        	mov	e,m
 08ED 23        	inx	h
 08EE 56        	mov	d,m	; address of data
 08EF 23        	inx	h
 08F0 4E        	mov	c,m
 08F1 23        	inx	h
 08F2 46        	mov	b,m	; length
 08F3 79        	mov	a,c
 08F4 B0        	ora	b
 08F5 C8        	rz
                lstbk2:
                	lxix	CFGTBL+BSLIST
 08F6+DD21      	DB	0DDH,21H
 08F8+2400      	DW	CFGTBL+BSLIST
                	bitx	7,+0
 08FA+DDCB007E  	DB	0DDH,0CBH,+0,7*8+46H
 08FE CA2604    	jz	tnextp
 0901 212D00    	lxi	h,CFGTBL+BSLIST+9
 0904 D5        	push	d
                	ldx	e,+7
 0905+DD5E07    	DB	0DDH,E*8+46H,+7
 0908 1600      	mvi	d,0
 090A 19        	dad	d
 090B D1        	pop	d
                lstbk0:
 090C 1A        	ldax	d
 090D 13        	inx	d
 090E 77        	mov	m,a
 090F 23        	inx	h
                	inrx	+7	; dirty == not-zero
 0910+DD3407    	DB	0DDH,34H,+7
 0913 FA2209    	jm	lstbk3	; send data
 0916 FEFF      	cpi	0ffh	; stop at 0ffh? or need to continue if more?
 0918 CA2209    	jz	lstbk3	; this will continue if more chars exist...
                lstbk1:
 091B 0B        	dcx	b
 091C 78        	mov	a,b
 091D B1        	ora	c
 091E C20C09    	jnz	lstbk0
 0921 C9        	ret
                
                lstbk3:	; must send buffer
                	ldx	a,+0
 0922+DD7E00    	DB	0DDH,A*8+46H,+0
 0925 E60F      	ani	0fh
                	stx	a,+8
 0927+DD7708    	DB	0DDH,70H+A,+8
                	; SIZ already len-1, incl LST unit
                	ldx	a,+1	; LST server
 092A+DD7E01    	DB	0DDH,A*8+46H,+1
                	stx	a,+4	; DID
 092D+DD7704    	DB	0DDH,70H+A,+4
 0930 D5        	push	d
 0931 C5        	push	b
                	pushix
 0932+DDE5      	DB	0DDH,0E5H
 0934 012700    	lxi	b,CFGTBL+BSLIST+3	; MSG buffer
 0937 CD0000    	call	SNDMSG
                	popix
 093A+DDE1      	DB	0DDH,0E1H
                	pushix
 093C+DDE5      	DB	0DDH,0E5H
                	mvix	0,+7	; clear dirty flag, setup for next char
 093E+DD360700  	DB	0DDH,36H,+7,0
 0942 3C        	inr	a
 0943 CA0604    	jz	NERROR
 0946 016200    	lxi	b,MSGTOP
 0949 CD0104    	call	RVMSGE
                	popix
 094C+DDE1      	DB	0DDH,0E1H
 094E C1        	pop	b
 094F D1        	pop	d
 0950 212D00    	lxi	h,CFGTBL+BSLIST+9
 0953 C31B09    	jmp	lstbk1
                
                GETVER:
 0956 2A6000    	lhld	scbadr
 0959 2EA1      	mvi	l,scbase+05h
 095B 6E        	mov	l,m
 095C 2602      	mvi	h,002h
 095E 7D        	mov	a,l
 095F 32A801    	sta	RETCOD
 0962 C9        	ret
                
                NWSTAT:
 0963 CD0000    	call	NTWKST
 0966 32A801    	sta	RETCOD
 0969 C9        	ret
                
                NWCFTB:
 096A CD0000    	call	CNFTBL
 096D 7D        	mov	a,l
 096E 32A801    	sta	RETCOD
 0971 C9        	ret
                
                LOGIN:
 0972 2AA901    	lhld	MCRPNT
 0975 EB        	xchg
 0976 2AA601    	lhld	PARAMT
 0979 7E        	mov	a,m
 097A 326300    	sta	MSGID
 097D 23        	inx	h
 097E 010800    	lxi	b,8
                	ldir
 0981+EDB0      	DB	0EDH,0B0H
 0983 EB        	xchg
 0984 22A901    	shld	MCRPNT
 0987 C3DE03    	jmp	SNDHDR
                
                LOGOFF:
 098A 3AA601    	lda	PARAMT
 098D 326300    	sta	MSGID
 0990 C3DE03    	jmp	SNDHDR
                
                SDMSGU:
 0993 2AA601    	lhld	PARAMT
 0996 44        	mov	b,h
 0997 4D        	mov	c,l
 0998 CD0000    	call	SNDMSG
 099B 32A801    	sta	RETCOD
 099E C9        	ret
                
                RVMSGU:
 099F 2AA601    	lhld	PARAMT
 09A2 44        	mov	b,h
 09A3 4D        	mov	c,l
 09A4 CD0000    	call	RCVMSG
 09A7 32A801    	sta	RETCOD
 09AA C9        	ret
                
                LDERR:
 09AB 3EFF      	mvi	a,-1
 09AD E1        	pop	h
 09AE C9        	ret
                
 09AF 0000      SAVDMA:	dw	0
 09B1 000000    SAVRR:	db	0,0,0
 09B4 0000      MSCRET:	dw	0
 09B6 0000      MSCTBP:	dw	0
 09B8 00        CURMSC:	db	0
 09B9 0000      DMAADR:	dw	0
                
 09BB           CURDPB:	ds	15
 09CA           CURSCF:	ds	23
                
                ; this is used to do warm boot initialization, since most
                ; programs do not call BDOS Function 0 but instead just
                ; JMP 0. The CCP then makes this call, either upon startup
                ; and/or immediately prior to running a program.
                ; Perportedly, the CPP calls this with DE=NULL in order
                ; to scrub RSXs on warm boot.
                LDOVLY:
                WARMST:
 09E1 D5        	push	d
 09E2 C5        	push	b
 09E3 CD0000    	call	NTWKBT
                	; TODO: any other re-init? reset some context?
                ;	lxi	d,wbmsg
                ;	mvi	c,CBUFPR
                ;	call	next
 09E6 C1        	pop	b
 09E7 D1        	pop	d
 09E8 C30900    	jmp	next
                
                ; An example of how to process BDOS Func 60 RSX Func 113
                ; and remove one's self.
                CALRSX:
 09EB 6B        	mov	l,e
 09EC 62        	mov	h,d
 09ED 7E        	mov	a,m
 09EE 23        	inx	h
 09EF FE71      	cpi	113	; Check for RSX Func 113
 09F1 C20900    	jnz	next
 09F4 7E        	mov	a,m
 09F5 23        	inx	h
 09F6 FE01      	cpi	1	; Check param count to be sure
 09F8 C20900    	jnz	next
 09FB D5        	push	d
 09FC 5E        	mov	e,m
 09FD 23        	inx	h
 09FE 56        	mov	d,m
 09FF 211000    	lxi	h,rsxnam
 0A02 0608      	mvi	b,8
                rsxf0:			; Compare paramter to our name
 0A04 1A        	ldax	d
 0A05 BE        	cmp	m
 0A06 C20F0A    	jnz	rsxf1
 0A09 13        	inx	d
 0A0A 23        	inx	h
 0A0B 05        	dcr	b
 0A0C C2040A    	jnz	rsxf0
                rsxf1:
 0A0F D1        	pop	d
 0A10 C20900    	jnz	next
                	; shutdown NDOS3...
 0A13 CD0000    	call	NTWKDN
 0A16 115B02    	lxi	d,CSTDN
 0A19 0E09      	mvi	c,CBUFPR
 0A1B CD0900    	call	next
 0A1E 210900    	lxi	h,next
 0A21 220700    	shld	start+1	; only until remove takes place...
 0A24 3EFF      	mvi	a,0ffh
 0A26 320E00    	sta	remove
 0A29 210000    	lxi	h,0
 0A2C 7D        	mov	a,l
 0A2D C9        	ret
                
 0A2E           	end
