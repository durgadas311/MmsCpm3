                ; A DEBUG UTIL FOR WIZNET 850 DEVICES, ATTACHED IN PARALLEL-SPI INTERFACE
                ;
                ; COMMANDS:
                ;	G <BSB> <OFF> <NUM>	GET <NUM> BYTES FROM <BSB> AT <OFF>
                ;	S <BSB> <OFF> <DAT>...	SET BYTES TO <BSB> AT <OFF>
                
                	MACLIB	Z80
                
 0040 =         WIZ	EQU	40H	; BASE PORT OF H8-WIZX50IO SPI INTERFACE
                
 0040 =         WIZ$DAT	EQU	WIZ+0
 0041 =         WIZ$CTL	EQU	WIZ+1
 0041 =         WIZ$STS	EQU	WIZ+1
                
 0001 =         SCS	EQU	1	; CTL PORT
 0001 =         BSY	EQU	1	; STS PORT
                
 0004 =         WRITE	EQU	00000100B
                
 000D =         CR	EQU	13
 000A =         LF	EQU	10
                
 0000 =         CPM	EQU	0
 0005 =         BDOS	EQU	5
 0080 =         CMD	EQU	0080H
                
 0009 =         PRINT	EQU	9
 000C =         GETVER	EQU	12
                
 0100           	ORG	00100H
                
 0100 C30602    	JMP	START
                
 0103 5573616765USAGE:	DB	'Usage: WIZDBG {G bsb off num}',CR,LF
 0122 2020202020	DB	'       WIZDBG {S bsb off dat...}',CR,LF
 0144 2020202020	DB	'       bsb = Block Select Bits, hex 00..1F',CR,LF
 0170 2020202020	DB	'       off = Offset within BSB, hex',CR,LF
 0195 2020202020	DB	'       num = Number of bytes to GET, dec',CR,LF
 01BF 2020202020	DB	'       dat = Byte(s) to SET, hex',CR,LF,'$'
 01E2 43502F4E45NOCPN:	DB	'CP/NET is running. Stop it first',CR,LF,'$'
 0205 00        CPNET:	DB	0
                
                START:
                	SSPD	USRSTK
 0206+ED73      	DB	0EDH,73H
 0208+5404      	DW	USRSTK
 020A 315404    	LXI	SP,STACK
 020D 0E0C      	MVI	C,GETVER
 020F CD0500    	CALL	BDOS
 0212 7C        	MOV	A,H
 0213 E602      	ANI	02H
 0215 320502    	STA	CPNET
 0218 2A0600    	LHLD	BDOS+1	; COMPUTE MAX BUF SPACE
 021B 2E00      	MVI	L,0	;
 021D 25        	DCR	H	; SAFETY MARGIN
 021E 115E04    	LXI	D,BUF
 0221 B7        	ORA	A
                	DSBC	D
 0222+ED52      	DB	0EDH,D*8+42H
 0224 2E00      	MVI	L,0	; MORE SAFETY MARGINS
 0226 225C04    	SHLD	MAX
                ; START PARSING COMMANDLINE
 0229 3A8000    	LDA	CMD
 022C B7        	ORA	A
 022D CA1E03    	JZ	HELP
                
 0230 218000    	LXI	H,CMD
 0233 46        	MOV	B,M
 0234 23        	INX	H
                PARS0:
 0235 7E        	MOV	A,M
 0236 FE20      	CPI	' '
 0238 C24102    	JNZ	PARS1
 023B 23        	INX	H
                	DJNZ	PARS0
 023C+10F7      	DB	10H,PARS0-$-1
 023E C31E03    	JMP	HELP
                
                PARS1:
 0241 FE47      	CPI	'G'
 0243 CA5402    	JZ	PARS2
 0246 FE53      	CPI	'S'
 0248 C21E03    	JNZ	HELP
 024B 3A0502    	LDA	CPNET
 024E B7        	ORA	A
 024F C22903    	JNZ	NOCPNT
 0252 3E53      	MVI	A,'S'
                PARS2:
 0254 325604    	STA	COM
 0257 CDB603    	CALL	SKIPB
 025A DA1E03    	JC	HELP
                	; <BSB> AND <OFF> ARE ALWAYS PRESENT,
                	; PLUS EITHER <NUM> OR (AT LEAST) ONE <DAT>.
 025D CDC403    	CALL	PARSHX
 0260 DA1E03    	JC	HELP
 0263 7A        	MOV	A,D
 0264 B7        	ORA	A
 0265 C21E03    	JNZ	HELP
 0268 7B        	MOV	A,E
 0269 FE20      	CPI	32	; 00..1F ALLOWED
 026B D21E03    	JNC	HELP
 026E 07        	RLC
 026F 07        	RLC
 0270 07        	RLC
 0271 325704    	STA	BSB
 0274 CDB603    	CALL	SKIPB
 0277 DA1E03    	JC	HELP
 027A CDC403    	CALL	PARSHX
 027D DA1E03    	JC	HELP
 0280 EB        	XCHG
 0281 225804    	SHLD	OFF
 0284 EB        	XCHG
 0285 CDB603    	CALL	SKIPB
 0288 DA1E03    	JC	HELP
 028B 3A5604    	LDA	COM
 028E FE47      	CPI 	'G'
 0290 CABF02    	JZ	GET
 0293 0E00      	MVI	C,0
                	LXIX	BUF
 0295+DD21      	DB	0DDH,21H
 0297+5E04      	DW	BUF
                SET0:
 0299 CDC403    	CALL	PARSHX
 029C DA1E03    	JC	HELP
 029F 7A        	MOV	A,D
 02A0 B7        	ORA	A
 02A1 C21E03    	JNZ	HELP
                	STX	E,+0
 02A4+DD7300    	DB	0DDH,70H+E,+0
                	INXIX
 02A7+DD23      	DB	0DDH,23H
 02A9 0C        	INR	C	; CAN'T OVERFLOW WITH 128-BYTE BUFFER
 02AA 78        	MOV	A,B
 02AB B7        	ORA	A
 02AC CAB502    	JZ	SET1
 02AF CDB603    	CALL	SKIPB
 02B2 D29902    	JNC	SET0
                SET1:
 02B5 79        	MOV	A,C
 02B6 325A04    	STA	NUM
 02B9 CD6003    	CALL	WIZSET
 02BC C31B03    	JMP	EXIT
                
                GET:
 02BF CDFB03    	CALL	PARSNM
 02C2 DA1E03    	JC	HELP
                	; DONE PARSING COMMAND, CAN DESTROY HL/B
 02C5 2A5C04    	LHLD	MAX
 02C8 B7        	ORA	A
                	DSBC	D
 02C9+ED52      	DB	0EDH,D*8+42H
 02CB DA1E03    	JC	HELP	; OR "OVERFLOW"? "TOO LARGE"?
                	SDED	NUM
 02CE+ED53      	DB	0EDH,53H
 02D0+5A04      	DW	NUM
 02D2 CD2F03    	CALL	WIZGET
 02D5 215E04    	LXI	H,BUF
 02D8 E5        	PUSH	H
                ; DUMP 'NUM' BYTES FROM 'BUF'... LABEL WITH BSB/OFF...
                GET0:
 02D9 3A5704    	LDA	BSB
 02DC E6F8      	ANI	11111000B
 02DE 0F        	RRC
 02DF 0F        	RRC
 02E0 0F        	RRC
 02E1 CDA203    	CALL	HEXOUT
 02E4 3E3A      	MVI	A,':'
 02E6 CD8303    	CALL	CHROUT
 02E9 2A5804    	LHLD	OFF
 02EC CD9B03    	CALL	WRDOUT
                	; NOW OUTPUT <=16 BYTES " XX"...
 02EF 0610      	MVI	B,16
                GET1:
 02F1 3E20      	MVI	A,' '
 02F3 CD8303    	CALL	CHROUT
 02F6 E1        	POP	H
 02F7 7E        	MOV	A,M
 02F8 23        	INX	H
 02F9 E5        	PUSH	H
 02FA CDA203    	CALL	HEXOUT
 02FD 2A5804    	LHLD	OFF
 0300 23        	INX	H
 0301 225804    	SHLD	OFF
 0304 2A5A04    	LHLD	NUM
 0307 2B        	DCX	H
 0308 225A04    	SHLD	NUM
 030B 7C        	MOV	A,H
 030C B5        	ORA	L
 030D CA1803    	JZ	GET2
                	DJNZ	GET1
 0310+10DF      	DB	10H,GET1-$-1
 0312 CD9003    	CALL	CRLF
 0315 C3D902    	JMP	GET0
                GET2:
 0318 CD9003    	CALL	CRLF
                EXIT:
 031B C30000    	JMP	CPM
                
                HELP:
 031E 110301    	LXI	D,USAGE
                XITMSG:
 0321 0E09      	MVI	C,PRINT
 0323 CD0500    	CALL	BDOS
 0326 C31B03    	JMP	EXIT
                
                NOCPNT:
 0329 11E201    	LXI	D,NOCPN
 032C C32103    	JMP	XITMSG
                
                ; READ (GET) DATA FROM CHIP.
                ; 'NUM', 'BSB', 'OFF' SETUP.
                ; RETURNS: 'BUF' FILLED WITH 'NUM' BYTES.
                WIZGET:
 032F 3E01      	MVI	A,SCS
 0331 D341      	OUT	WIZ$CTL
 0333 2A5804    	LHLD	OFF
 0336 7C        	MOV	A,H
 0337 D340      	OUT	WIZ$DAT
 0339 7D        	MOV	A,L
 033A D340      	OUT	WIZ$DAT
 033C 3A5704    	LDA	BSB
 033F D340      	OUT	WIZ$DAT
 0341 DB40      	IN	WIZ$DAT	; PRIME PUMP
 0343 0E40      	MVI	C,WIZ$DAT
 0345 215E04    	LXI	H,BUF
                	LDED	NUM
 0348+ED5B      	DB	0EDH,5BH
 034A+5A04      	DW	NUM
 034C 43        	MOV	B,E
 034D 7B        	MOV	A,E
 034E B7        	ORA	A
                	JRZ	WG0
 034F+2806      	DB	28H,WG0-$-1
                	INIR	; DO PARTIAL PAGE
 0351+EDB2      	DB	0EDH,0B2H
 0353 7A        	MOV	A,D
 0354 B7        	ORA	A
                	JRZ	WG1
 0355+2805      	DB	28H,WG1-$-1
                WG0:	INIR
 0357+EDB2      	DB	0EDH,0B2H
 0359 15        	DCR	D
                	JRNZ	WG0
 035A+20FB      	DB	20H,WG0-$-1
 035C AF        WG1:	XRA	A	; NOT SCS
 035D D341      	OUT	WIZ$CTL
 035F C9        	RET
                
                ; WRITE (SET) DATA IN CHIP.
                ; 'NUM', 'BUF', 'BSB', 'OFF' SETUP.
                WIZSET:
 0360 3E01      	MVI	A,SCS
 0362 D341      	OUT	WIZ$CTL
 0364 2A5804    	LHLD	OFF
 0367 7C        	MOV	A,H
 0368 D340      	OUT	WIZ$DAT
 036A 7D        	MOV	A,L
 036B D340      	OUT	WIZ$DAT
 036D 3A5704    	LDA	BSB
 0370 F604      	ORI	WRITE
 0372 D340      	OUT	WIZ$DAT
 0374 3A5A04    	LDA	NUM
 0377 47        	MOV	B,A
 0378 0E40      	MVI	C,WIZ$DAT
 037A 215E04    	LXI	H,BUF
                	OUTIR
 037D+EDB3      	DB	0EDH,0B3H
 037F AF        	XRA	A	; NOT SCS
 0380 D341      	OUT	WIZ$CTL
 0382 C9        	RET
                
                CHROUT:
 0383 E5        	PUSH	H
 0384 D5        	PUSH	D
 0385 C5        	PUSH	B
 0386 5F        	MOV	E,A
 0387 0E02      	MVI	C,002H
 0389 CD0500    	CALL	BDOS
 038C C1        	POP	B
 038D D1        	POP	D
 038E E1        	POP	H
 038F C9        	RET
                
                CRLF:
 0390 3E0D      	MVI	A,CR
 0392 CD8303    	CALL	CHROUT
 0395 3E0A      	MVI	A,LF
 0397 CD8303    	CALL	CHROUT
 039A C9        	RET
                
                ; PRINT 16-BIT HEX VALUE FROM HL
                WRDOUT:
 039B E5        	PUSH	H
 039C 7C        	MOV	A,H
 039D CDA203    	CALL	HEXOUT
 03A0 E1        	POP	H
 03A1 7D        	MOV	A,L
                HEXOUT:
 03A2 F5        	PUSH	PSW
 03A3 0F        	RRC
 03A4 0F        	RRC
 03A5 0F        	RRC
 03A6 0F        	RRC
 03A7 CDAB03    	CALL	HEXDIG
 03AA F1        	POP	PSW
                	;JMP	HEXDIG
                HEXDIG:
 03AB E60F      	ANI	0FH
 03AD C690      	ADI	90H
 03AF 27        	DAA
 03B0 CE40      	ACI	40H
 03B2 27        	DAA
 03B3 C38303    	JMP	CHROUT
                
                SKIPB:
 03B6 23        	INX	H	; SKIP OPTION LETTER
 03B7 05        	DCR	B
 03B8 37        	STC
 03B9 C8        	RZ
 03BA 7E        SKIP0:	MOV	A,M
 03BB B7        	ORA	A
 03BC FE20      	CPI	' '
 03BE C0        	RNZ	; NO CARRY?
 03BF 23        	INX	H
                	DJNZ	SKIP0
 03C0+10F8      	DB	10H,SKIP0-$-1
 03C2 37        	STC
 03C3 C9        	RET
                
                ; PARSE (UP TO) 16-BIT HEX VALUE.
                ; INPUT: HL IS CMD BUF, B REMAINING CHARS
                ; RETURNS NUMBER IN DE, CY IF ERROR, NZ END OF TEXT
                PARSHX:
 03C4 110000    	LXI	D,0
 03C7 7E        PM0:	MOV	A,M
 03C8 FE20      	CPI	' '
 03CA C8        	RZ
 03CB D630      	SUI	'0'
 03CD D8        	RC
 03CE FE0A      	CPI	'9'-'0'+1
 03D0 DADC03    	JC	PM3
 03D3 D611      	SUI	'A'-'0'
 03D5 D8        	RC
 03D6 FE06      	CPI	'F'-'A'+1
 03D8 3F        	CMC
 03D9 D8        	RC
 03DA C60A      	ADI	10
                PM3:
 03DC E60F      	ANI	0FH
 03DE EB        	XCHG
 03DF 29        	DAD	H
 03E0 DAF803    	JC	PME
 03E3 29        	DAD	H
 03E4 DAF803    	JC	PME
 03E7 29        	DAD	H
 03E8 DAF803    	JC	PME
 03EB 29        	DAD	H
 03EC DAF803    	JC	PME
 03EF EB        	XCHG
 03F0 83        	ADD	E	; CARRY NOT POSSIBLE
 03F1 5F        	MOV	E,A
 03F2 23        	INX	H
                	DJNZ	PM0
 03F3+10D2      	DB	10H,PM0-$-1
                NZRET:
 03F5 AF        	XRA	A
 03F6 3C        	INR	A	; NZ
 03F7 C9        	RET
 03F8 EB        PME:	XCHG
 03F9 37        	STC
 03FA C9        	RET
                
                ; PARSE A 16-BIT (MAX) DECIMAL NUMBER
                PARSNM:
 03FB 110000    	LXI	D,0
 03FE 7E        PD0:	MOV	A,M
 03FF FE20      	CPI	' '
 0401 C8        	RZ
 0402 FE30      	CPI	'0'
 0404 D8        	RC
 0405 FE3A      	CPI	'9'+1
 0407 3F        	CMC
 0408 D8        	RC
 0409 E60F      	ANI	0FH
 040B E5        	PUSH	H
 040C 62        	MOV	H,D
 040D 6B        	MOV	L,E
 040E 29        	DAD	H	; *2
 040F DA2A04    	JC	PD1
 0412 29        	DAD	H	; *4
 0413 DA2A04    	JC	PD1
 0416 19        	DAD	D	; *5
 0417 DA2A04    	JC	PD1
 041A 29        	DAD	H	; *10
 041B DA2A04    	JC	PD1
 041E 5F        	MOV	E,A
 041F 1600      	MVI	D,0
 0421 19        	DAD	D
 0422 EB        	XCHG
 0423 E1        	POP	H
 0424 D8        	RC
 0425 23        	INX	H
                	DJNZ	PD0
 0426+10D6      	DB	10H,PD0-$-1
 0428 B7        	ORA	A	; NC
 0429 C9        	RET
                
 042A E1        PD1:	POP	H
 042B C9        	RET	; CY STILL SET
                
 042C           	DS	40
 0454           STACK:	DS	0
 0454 0000      USRSTK:	DW	0
                
 0456 00        COM:	DB	0
 0457 00        BSB:	DB	0
 0458 0000      OFF:	DW	0
 045A 0000      NUM:	DW	0	; SET: ONE BYTE, GET: TWO BYTES
 045C 0000      MAX:	DW	0	; MAXIMUM <NUM> ALLOWED (FOR GET)
                
 045E           BUF:	DS	0
                
 045E           	END
